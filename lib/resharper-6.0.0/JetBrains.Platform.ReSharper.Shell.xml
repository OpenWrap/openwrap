<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.Platform.ReSharper.Shell</name>
    </assembly>
    <members>
        <member name="T:JetBrains.Build.AllAssemblies.AssemblyKind">
            <summary>
            Kind of <see cref="T:JetBrains.Build.AllAssemblies.InstalledAssemblyXml"/>s.
            </summary>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AssemblyKind.AllInstallableKinds(JetBrains.Application.Install.Installer)">
            <summary>
            Gets all the assembly kinds that are shipped with the product.
            </summary>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AssemblyKind.AllInstallableKinds(JetBrains.Build.AllAssemblies.AllAssembliesXml)">
            <summary>
            Gets all the assembly kinds that are shipped with the product.
            </summary>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AssemblyKind.AllKinds(JetBrains.Build.AllAssemblies.AllAssembliesXml)">
            <summary>
            Gets all the assembly kinds.
            </summary>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AssemblyKind.AllPlatformReferences(JetBrains.Build.AllAssemblies.AllAssembliesXml)">
            <summary>
            Gets the list of all kinds for platform references (for all the platform names).
            </summary>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AssemblyKind.FindAssemblyFile(System.String,System.Func{JetBrains.Application.Install.InstallationData.InstallationSourceDirRoot,JetBrains.Util.FileSystemPath})">
            <summary>
            Gets the assembly file.
            </summary>
            <param name="sAssemblyName">Assembly name, as in AllAssembliesXml.</param>
            <param name="FResolveRoot">Resolves the source root dirs in the project. Get from <see cref="T:JetBrains.Application.Install.Installer"/> or elsewhere.</param>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AssemblyKind.GetAssembliesInConfiguration(JetBrains.Application.Install.Installer)">
            <summary>
            Returns all the assemblies that fit into the assembly configuration config and belong to the group of the given kind (product/platform binaries/references).
            </summary>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AssemblyKind.GetAssembliesInConfiguration(JetBrains.Application.IApplicationDescriptor,System.Collections.Generic.IList{JetBrains.Application.AssemblyConfiguration})">
            <summary>
            Returns all the assemblies that fit into the assembly configuration config and belong to the group of the given kind (product/platform binaries/references).
            </summary>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AssemblyKind.GetAssembliesInConfiguration(JetBrains.Application.IApplicationDescriptor,System.Collections.Generic.JetHashSet{System.String})">
            <summary>
            Returns all the assemblies that fit into the assembly configuration config and belong to the group of the given kind (product/platform binaries/references).
            </summary>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AssemblyKind.ResolveFolder(JetBrains.Application.Install.Installer)">
            <summary>
            Gets the folder where the assemblies of this kind reside.
            </summary>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AssemblyKind.ResolveFolder(System.Func{JetBrains.Application.Install.InstallationData.InstallationSourceDirRoot,JetBrains.Util.FileSystemPath})">
            <summary>
            Gets the folder where the assemblies of this kind reside.
            </summary>
            <param name="FResolveRoot">Resolves the source root dirs in the project. Get from <see cref="T:JetBrains.Application.Install.Installer"/> or elsewhere.</param>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AssemblyKind.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AssemblyKind.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AssemblyKind.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AssemblyKind.Equals(JetBrains.Build.AllAssemblies.AssemblyKind)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="T:JetBrains.Build.AllAssemblies.AssemblyKind.AssemblyKindConverter">
            <summary>
            Knows how to switch between <see cref="T:JetBrains.Build.AllAssemblies.AssemblyKind"/>s and <see cref="T:System.String"/>s.
            </summary>
        </member>
        <member name="T:JetBrains.Build.AllAssemblies.AssemblyKind.KindBase">
            <summary>
            Kind of <see cref="T:JetBrains.Build.AllAssemblies.InstalledAssemblyXml"/>s.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ActivityTrackingNew.PermanentUserId.GetUnuqueUserId">
            <summary>
            Gets permanent unique user Id. The Id is saved in Registry under HKCU\Software\JetBrains\Platform section. <br />
            The Id is used to idendify same user even after ReSharper (or another product) is reinstalled or downgraded.
            Please note that the Id is shared among all JetBrains applications intalled by the user.
            </summary>
        </member>
        <member name="T:JetBrains.Application.IProductNameAndVersion">
            <summary>
            The basic info of the product. That's all we need for discovering product-specific locations.
            </summary>
        </member>
        <member name="P:JetBrains.Application.IProductNameAndVersion.ProductName">
            <summary>
            Gets the bare product name in the shortest form (no company, no version).
            </summary>
        </member>
        <member name="P:JetBrains.Application.IProductNameAndVersion.ProductVersion">
            <summary>
            Gets the product full version.
            </summary>
        </member>
        <member name="T:JetBrains.Application.ProductNameAndVersion">
            <summary>
            Dummy implementation for supplying e.g. to settings locator when we do not have an actual product.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ChangeManagerEx.PushRegisterChangeProvider(JetBrains.Application.ChangeManager,JetBrains.Application.IChangeProvider)">
            <summary>
            Registers/unregisters change provider in the dispatching scheme.
            </summary>
        </member>
        <member name="T:JetBrains.Application.CommandProcessing.ICommandProcessor">
            <summary>
            Command processor that performs undoable actions.
            </summary>
        </member>
        <member name="P:JetBrains.Application.CommandProcessing.ICommandProcessor.IsExecutingCommand">
            <summary>
            Gets whether the command processor is executing at least one command.
            </summary>
        </member>
        <member name="P:JetBrains.Application.CommandProcessing.ICommandProcessor.CurrentCommand">
            <summary>
            The outermost command of the command processor. Opening nested commands does not affect this property.
            </summary>
        </member>
        <member name="P:JetBrains.Application.CommandProcessing.ICommandProcessor.CurrentBatchChangeName">
            <summary>
            If in a batch change (<see cref="M:JetBrains.Application.CommandProcessing.ICommandProcessor.BeginBatchTextChange(JetBrains.DataFlow.Lifetime,System.String)"/>), bears the batch change name. Otherwise, <c>Null</c>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.CommandProcessing.StandaloneCommandProcessor.myCurrentBatchChangeName">
            <summary>
            If in a batch change (<see cref="M:JetBrains.Application.CommandProcessing.ICommandProcessor.BeginBatchTextChange(JetBrains.DataFlow.Lifetime,System.String)"/>), bears the batch change name. Otherwise, <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.CommandProcessing.StandaloneCommandProcessor.JetBrains#Application#CommandProcessing#ICommandProcessor#CurrentBatchChangeName">
            <summary>
            If in a batch change (<see cref="M:JetBrains.Application.CommandProcessing.ICommandProcessor.BeginBatchTextChange(JetBrains.DataFlow.Lifetime,System.String)"/>), bears the batch change name. Otherwise, <c>Null</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Env.Components.AnyProductSettingsLocation">
            <summary>
            Component for providing environment-defined settings location of products (VS, non-VS, etc).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Env.Components.AnyProductSettingsLocation.GetSettingsPathSuffix(JetBrains.Application.Env.Components.ProductSettingsLocationFlag,JetBrains.Application.IProductNameAndVersion)">
            <summary>
            Gets the suffix that forms the <see cref="M:JetBrains.Application.Env.Components.AnyProductSettingsLocation.GetSettingsRegistryKey(JetBrains.Application.Env.Components.ProductSettingsLocationFlag,JetBrains.Application.IProductNameAndVersion)"/>, <see cref="M:JetBrains.Application.Env.Components.AnyProductSettingsLocation.GetUserSettingsDir(System.Environment.SpecialFolder,JetBrains.Application.Env.Components.ProductSettingsLocationFlag,JetBrains.Application.IProductNameAndVersion)"/>.
            The template must not include location-specific parts (ie “Software” for registry or “AppData” for folder), as they should be concatenated by consumers.
            There should be no leading or trailing slashes.
            </summary>
            <param name="flag">See values.</param>
            <param name="product">Defines the product in case your <paramref name="flag"/> value requires product name or version.</param>
        </member>
        <member name="M:JetBrains.Application.Env.Components.AnyProductSettingsLocation.GetSettingsRegistryKey(JetBrains.Application.Env.Components.ProductSettingsLocationFlag,JetBrains.Application.IProductNameAndVersion)">
            <summary>
            Gets the path to the product's Registry key.
            </summary>
            <param name="flag">See values.</param>
            <param name="product">Defines the product in case your <paramref name="flag"/> value requires product name or version.</param>
        </member>
        <member name="F:JetBrains.Application.Env.Components.AnyProductSettingsLocation.ProductRegistryKeyPrefix_Software">
            <summary>
            Registry prefix which forms the Registry key when combined with the <see cref="M:JetBrains.Application.Env.Components.AnyProductSettingsLocation.GetSettingsPathSuffix(System.String,System.Version,System.Collections.Generic.IList{JetBrains.Util.JetTuple{System.String,System.String}})"/> suffix.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Env.Components.AnyProductSettingsLocation.GetUserSettingsDir(System.Environment.SpecialFolder,JetBrains.Application.Env.Components.ProductSettingsLocationFlag,JetBrains.Application.IProductNameAndVersion)">
            <summary>
            Gets the location of the settings folders used by the product (product-specific or not).
            Creates the directory if missing.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Env.Components.AnyProductSettingsLocation.GetSettingsPathSuffix(System.String,System.Version,System.Collections.Generic.IList{JetBrains.Util.JetTuple{System.String,System.String}})">
            <summary>
            The main implementation method for getting the settings directories for all products, per-product, product-specific, etc.
            </summary>
            <param name="nameProduct">Product short name, if the settings should be per-product. <c>NULL</c> or <c>""</c> for all-product settings location.</param>
            <param name="version">
            <para>If non-<c>NULL</c> and <paramref name="nameProduct"/> is specified, produces version-specific product settings.</para>
            <para>If non-<c>NULL</c> and <paramref name="nameProduct"/> is not specified, produces versioned all-products settings location.</para>
            <para>If <c>NULL</c>, produces version-invariant location (either all-products or product-specific).</para>
            </param>
            <param name="additionalParameters">
            <para>Allows to further differentiate locations by product or environment flavors, for example Visual Studio hives, as used to be up to R# 5.</para>
            <para>Each pair in the list is the name and the value of the additional parameter. Visual Studio 9.0 specific folder for the main Visual Studio hive has it as <c>("vs", "9.0")</c>.</para>
            <para>A subfolder will be created for every additional parameter, in the exact order as they're given here.</para>
            <para><c>NULL</c> or an empty list means there're no additional parameters.</para>
            <para>In this class, the default value for additional parameters is provided by the <see cref="M:JetBrains.Application.Env.Components.AnyProductSettingsLocation.GetSettingsPathSuffixAdditionalParameters"/> function (overridden by specific environments, like Visual Studio).</para>
            </param>
            <returns>Relative path to the directory (might not exist yet) from <c>%APPDATA%</c>, Registry <c>Software</c> key, etc.</returns>
            <remarks>
            <para>General rules for forming the suffix:</para>
            <para>• Folder with the company name. Always present.</para>
            <para>• Folder for the product, or the special “All Products” folder name (<see cref="F:JetBrains.Application.Env.Components.AnyProductSettingsLocation.AllProductsFolderName"/>) if getting an all-products location.</para>
            <para>• Folder for the version (as “v”{Major}{Minor}), or the special v∀ string (<see cref="F:JetBrains.Application.Env.Components.AnyProductSettingsLocation.AnyVersionString"/>) if getting an all-versions location.</para>
            <para>• One folder per each additional parameter (parameter name and value concatenated).</para>
            <para>The overall scheme looks like this: <c>{CompanyName}/{ProductName}/v{Version}[/vs{VsVersion}{VsRootSuffix}]</c>.</para>
            </remarks>
        </member>
        <member name="M:JetBrains.Application.Env.Components.AnyProductSettingsLocation.GetSettingsPathSuffixAdditionalParameters">
            <summary>
            Gets the default value for the “additional parameters” parameter of the <see cref="M:JetBrains.Application.Env.Components.AnyProductSettingsLocation.GetSettingsPathSuffix(System.String,System.Version,System.Collections.Generic.IList{JetBrains.Util.JetTuple{System.String,System.String}})"/> method for the current environment.
            The base implementation returns <c>NULL</c>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.Components.AnyProductSettingsLocation.AllProductsFolderName">
            <summary>
            When making an all-products folder location (e.g. with <see cref="M:JetBrains.Application.Env.Components.AnyProductSettingsLocation.GetSettingsPathSuffix(System.String,System.Version,System.Collections.Generic.IList{JetBrains.Util.JetTuple{System.String,System.String}})"/>), used in place of the product name.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.Components.AnyProductSettingsLocation.AnyVersionString">
            <summary>
            Used in place of the version-named folder when getting a version-invariant location (e.g. with <see cref="M:JetBrains.Application.Env.Components.AnyProductSettingsLocation.GetSettingsPathSuffix(System.String,System.Version,System.Collections.Generic.IList{JetBrains.Util.JetTuple{System.String,System.String}})"/>).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Env.Components.AnyProductSettingsLocation.GetLegacyUserSettingsRoamingLegacyDirs(JetBrains.Application.IProductNameAndVersion)">
            <summary>
            Gets the list of legacy user-settings dirs (coming from previous product version), actually found on the local system, sorted in descending priority order.
            That means something like R# v2.5, which was in use even before platform v5 and compatibles, so it's double-legacy by now.
            The second part of the tuple is the product version of the legacy settings file.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Env.Components.AnyProductSettingsLocation.GetLegacyUserSettingsXmlPath(JetBrains.Application.IProductNameAndVersion)">
            <summary>
            Full path to the User Settings (<see cref="F:JetBrains.Application.Configuration.XmlExternalizationScope.UserSettings"/>) XML file we save. Platform v5 and below.
            Overridden in some of the DotTrace subproducts.
            </summary>
            <param name="product"></param>
        </member>
        <member name="M:JetBrains.Application.Env.Components.AnyProductSettingsLocation.GetLegacyWorkspaceXmlPath(JetBrains.Application.IProductNameAndVersion)">
            <summary>
            Full path to the Workspace Settings (<see cref="F:JetBrains.Application.Configuration.XmlExternalizationScope.WorkspaceSettings"/>) XML file we save.
            Overridden in some of the DotTrace subproducts.
            </summary>
            <param name="product"></param>
        </member>
        <member name="M:JetBrains.Application.Env.Components.AnyProductSettingsLocation.GetInstallDir(JetBrains.Application.IApplicationDescriptor)">
            <summary>
            Gets the directory in which the product assemblies are located.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.Components.ProductSettingsLocationFlag.ThisProductThisVersionThisEnvironment">
            <summary>
            As it used to be in R# and all other products on platform version 5 and before that.
            Specific to the product name, product version, and environment flavors (like VS hive).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.Components.ProductSettingsLocationFlag.ThisProductThisVersionAnyEnvironment">
            <summary>
            Almost as it used to be in R# and all other products on platform version 5 and before that, but does not differentiate between VS hives.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.Components.ProductSettingsLocationFlag.AsInPlatform5">
            <summary>
            As it used to be in R# and all other products on platform version 5 and before that.
            Specific to the product name, product version, and environment flavors (like VS hive).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.Components.ProductSettingsLocationFlag.ThisProductAnyVersion">
            <summary>
            Common location for all versions (and VSes) of this product.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.Components.ProductSettingsLocationFlag.AnyProductAnyVersion">
            <summary>
            Common location for all products of all versions (using this settings locations algorithm).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.Components.ProductSettingsLocationFlag.AnyProductPlatformVersion">
            <summary>
            Common location for all products, but versioned by the platform version.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Communication.InternetSettings">
            <summary>
            A settings node under <see cref="T:JetBrains.Application.src.Settings.EnvironmentSettings"/>. Root for internet-related settings.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ComposeBooleansWithPriority.UpdateActiveTellers(JetBrains.DataFlow.Lifetime,System.Collections.Generic.List{JetBrains.Application.ComposeBooleansWithPriority.ActiveTeller},JetBrains.DataFlow.IProperty{System.Nullable{System.Boolean}})">
            <summary>
            Apply invariants to the active state of the tellers, then update the property.
            </summary>
            <param name="lifetimeComponent"></param>
            <param name="tellers"></param>
            <param name="propComposite"></param>
        </member>
        <member name="T:JetBrains.Application.Env.Components.EnvironmentProductConfigurationsProvider">
            <summary>
            The configuration in which the environment is running also applies to the product, expose it.
            </summary>
        </member>
        <member name="T:JetBrains.Application.IProductCommandLine">
            <summary>
            Command line of the product. Usually created over the host command line, whose keys are then stripped of the prefix identifying the product.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ICommandLine.Keys">
            <summary>
            Array of defined keys: “/Key[=Value]”.
            </summary> 
        </member>
        <member name="P:JetBrains.Application.ICommandLine.NonKeyedParameters">
            <summary>
            Strings that do not start with “/” and do not belong to the previous string with a “/”.
            </summary> 
        </member>
        <member name="M:JetBrains.Application.IProductCommandLine.MakeFullCommandLineKeyName(System.String)">
            <summary>
            <para>Gets the string to be passed on the command line to this host so that the command line of this product would have the key named <paramref name="sShortKeyName"/> defined.</para>
            <para>If this product is not the default product of the host, the product name will be added to the short key name (to distinguish between keys addressed to different products). The environment (for example, Visual Studio non-default hive) might also add decorations to the key name.</para>
            <para>For example, let's consider a key with short name of “<c>SelfDestruction</c>” that belongs to the product named “<c>Kalabash</c>”, currently running in a non-default Visual Studio hive with root suffix “<c>Exp</c>”. This method is given the short key name “<c>Kalabash</c>”, and yields the full ready-for-VS-command-line “<c>Kalabash.SelfDestruction.Exp</c>” key name.</para>
            <para>In non-VS or VS default hive, there is no root suffix. If the product is also the default product of the host (not applicable to VS), the resulting full name will just be the short key name.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.IProductCommandLine.KeyPrefix">
            <summary>
            Gets the prefix of the command line keys in the host command line.
            To parse the whole host command line into the command lines for each of the products, they're filtered by the prefix (usually, <c>"ProductName."</c>), and the prefix is removed from keys.
            </summary>
        </member>
        <member name="P:JetBrains.Application.IProductCommandLine.IsKeyPrefixOptional">
            <summary>
            If there's a default product in the host, its command line keys could optionally be specified without the <see cref="P:JetBrains.Application.IProductCommandLine.KeyPrefix"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Env.IJetHost">
            <summary>
            Represents the environment-specific host that can load our products and make them running.
            For example, there's a VS-host (single per products that share the same shell, ideally one per VS if versions are close), Tests host, etc.
            The host creates the shared environment, into which products can be loaded (by advertising <see cref="T:JetBrains.Application.IApplicationDescriptor"/> to its known products list).
            </summary>
        </member>
        <member name="P:JetBrains.Application.Env.IJetHost.Environment">
            <summary>
            The environment, which creates and hosts environment-level components.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Env.Components.InternalModeProductConfigurationsProvider">
            <summary>
            Provides environment config for internal/public modes.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.Components.InternalModeProductConfigurationsProvider.OverrideInternalModeOnNextStart">
            <summary>
            If assigned by somebody, explicitly specifies the internal mode for next shell start, regardless of the cmdline.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Env.Components.InternalModeProductConfigurationsProvider.IsProductInternalModeAware">
            <summary>
            Check whether product supports public/internal modes.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Env.JetEnvironment">
            <summary>
            The instance of the application environment.
            The host application (VS, standalone exe, etc) creates one environment, then loads the products into it.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.JetEnvironment.Configuration">
            <summary>
            Configuration of this environment.
            Defined by the host when the environment is created.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.JetEnvironment.Products">
            <summary>
            Publish here the products you'd like to be loaded in this environment.
            Per-product components of the environment are created immediately as products appear in here. Shell components for this product are created only when the product is allowed to run (<see cref="T:JetBrains.Application.Env.IProductCanBeStarted"/> handlers for the product are all <c>True</c>).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.JetEnvironment.FullPartCatalogSet">
            <summary>
            The complete catalog set, as collected from the <see cref="F:JetBrains.Application.Env.JetEnvironment.Products"/> currently known, plus their plugins and any parts introduced later. This is the origin of all the catalogsets in the component containers. It's not filtered yet, even by the environment.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.JetEnvironment.EnvironmentPartCatalogSet">
            <summary>
            Catalog set for the environment components, as narrowed down from <see cref="F:JetBrains.Application.Env.JetEnvironment.FullPartCatalogSet"/> by applying the environment configuration filter to the parts. Do not modify.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.JetEnvironment.HasDefaultProduct">
            <summary>
            In standalone hosts, the host could be owned by one of the products. Its command line keys could be specified without a prefix, the main window is branded with that product, its splash screen is shown, etc. In such a case, this should be set to <c>True</c>. Then the first product in the <see cref="F:JetBrains.Application.Env.JetEnvironment.Products"/> list is considered to be the default product. In Visual Studio hosts, this is <c>False</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Env.JetEnvironment.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.Application.Env.JetEnvironment.JetEnvironmentConfiguration,JetBrains.Application.Components.IComponentContainer)">
            <summary>
            Creates the environment and defines its lifetime.
            </summary>
            <param name="lifetime">The lifetime of the environment. Must be guarded: the environment must be created and terminated under <see cref="T:JetBrains.Threading.ReentrancyGuard"/>.</param>
            <param name="configuration">Configuration for loading the Environment components.</param>
            <param name="containerHostInfo">Add any additional information on the host here: VS Service Provider, main window, command line, etc. Environment components and product components will be chained into this container and will be getting this information.</param>
        </member>
        <member name="P:JetBrains.Application.Env.JetEnvironment.Container">
            <summary>
            Gets the environment component container (when it gets fully composed).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.ProductCanBeStartedPriorityThresholds.EnvironmentReady">
            <summary>
            On this level, should check if the env is fully initialized for starting the product (and calling other checkers).
            Eg in VS this is when VS' Shell gets into the non-zombied state.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.ProductCanBeStartedPriorityThresholds.UserSuspend">
            <summary>
            On this level, should check for any user-induced deactivations of the product.
            Eg in VS it's when user suspends a product.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.ProductCanBeStartedPriorityThresholds.Licensing">
            <summary>
            On this level, check for a license.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Env.ProductConfigurationsEx.IsInternalMode(JetBrains.Application.Env.RunsProducts.ProductConfigurations)">
            <summary>
            Gets whether Internal mode is present among product configurations.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Env.ProductConfigurationsEx.GetInternalMode(JetBrains.Application.Env.RunsProducts.ProductConfigurations)">
            <summary>
            Gets whether Internal mode is present among product configurations.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Env.ProductConfigurationsEx.GuessProgramConfiguration(JetBrains.Application.Env.RunsProducts.ProductConfigurations)">
            <summary>
            Guesses legacy ProgramConfigurations from assembly configuration. To be dropped asap together with program configurations themselves.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Env.Components.ProductSettingsLocation">
            <summary>
            Component for providing environment-defined settings location of products (VS, non-VS, etc).
            Specializes <see cref="T:JetBrains.Application.Env.Components.AnyProductSettingsLocation"/> with a specific product.
            If you'd like to override the behavior in your product, you should rather override the utility class <see cref="T:JetBrains.Application.Env.Components.AnyProductSettingsLocation"/>, because it provides impl for this class and some more.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Env.Components.ProductSettingsLocation.GetUserSettingsNonRoamingDir(JetBrains.Application.Env.Components.ProductSettingsLocationFlag)">
            <summary>
            Gets the full path to the computer-local per-user folder that stores the product settings.
            This folder should be used for storing large or easily-re-generated files, like type index caches.
            </summary>
            <param name="flag"></param>
        </member>
        <member name="M:JetBrains.Application.Env.Components.ProductSettingsLocation.GetUserSettingsRoamingDir(JetBrains.Application.Env.Components.ProductSettingsLocationFlag)">
            <summary>
            Gets the full path to the network-roaming per-user folder that stores the product settings.
            This folder should be used for storing small and non-re-generatable files only.
            </summary>
            <param name="flag"></param>
        </member>
        <member name="M:JetBrains.Application.Env.Components.ProductSettingsLocation.GetProductRegistryKey(JetBrains.Application.Env.Components.ProductSettingsLocationFlag)">
            <summary>
            Gets the path to the product's Registry key.
            </summary>
            <param name="flag"></param>
        </member>
        <member name="P:JetBrains.Application.Env.Components.ProductSettingsLocation.InstallDir">
            <summary>
            Gets the directory in which the product assemblies are located.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Components.ProgramConfigurations">
            <summary>
            It is preferrable that you avoid using <see cref="T:JetBrains.Application.Components.ProgramConfigurations"/> wherever possible. Place your components in DLLs so that the <see cref="T:JetBrains.Application.AssemblyConfiguration"/> controls the presence of your component by either loading an assembly or omitting it. For example, a Test implementation should be placed in a tests-only assembly.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Components.ProgramConfigurations.NONE">
            <summary>
            It is preferrable that you avoid using <see cref="T:JetBrains.Application.Components.ProgramConfigurations"/> wherever possible. Place your components in DLLs so that the <see cref="T:JetBrains.Application.AssemblyConfiguration"/> controls the presence of your component by either loading an assembly or omitting it. For example, a Test implementation should be placed in a tests-only assembly.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Components.ProgramConfigurations.STANDALONE">
            <summary>
            It is preferrable that you avoid using <see cref="T:JetBrains.Application.Components.ProgramConfigurations"/> wherever possible. Place your components in DLLs so that the <see cref="T:JetBrains.Application.AssemblyConfiguration"/> controls the presence of your component by either loading an assembly or omitting it. For example, a Test implementation should be placed in a tests-only assembly.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Components.ProgramConfigurations.TEST">
            <summary>
            It is preferrable that you avoid using <see cref="T:JetBrains.Application.Components.ProgramConfigurations"/> wherever possible. Place your components in DLLs so that the <see cref="T:JetBrains.Application.AssemblyConfiguration"/> controls the presence of your component by either loading an assembly or omitting it. For example, a Test implementation should be placed in a tests-only assembly.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Components.ProgramConfigurations.VS_ADDIN">
            <summary>
            It is preferrable that you avoid using <see cref="T:JetBrains.Application.Components.ProgramConfigurations"/> wherever possible. Place your components in DLLs so that the <see cref="T:JetBrains.Application.AssemblyConfiguration"/> controls the presence of your component by either loading an assembly or omitting it. For example, a Test implementation should be placed in a tests-only assembly.
            </summary>
            
        </member>
        <member name="F:JetBrains.Application.Components.ProgramConfigurations.COMMAND_LINE">
            <summary>
            It is preferrable that you avoid using <see cref="T:JetBrains.Application.Components.ProgramConfigurations"/> wherever possible. Place your components in DLLs so that the <see cref="T:JetBrains.Application.AssemblyConfiguration"/> controls the presence of your component by either loading an assembly or omitting it. For example, a Test implementation should be placed in a tests-only assembly.
            </summary>
            
        </member>
        <member name="F:JetBrains.Application.Components.ProgramConfigurations.ALL">
            <summary>
            It is preferrable that you avoid using <see cref="T:JetBrains.Application.Components.ProgramConfigurations"/> wherever possible. Place your components in DLLs so that the <see cref="T:JetBrains.Application.AssemblyConfiguration"/> controls the presence of your component by either loading an assembly or omitting it. For example, a Test implementation should be placed in a tests-only assembly.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Env.ReportsProductsAllowedToRun">
            <summary>
            For each given product, monitors its <see cref="T:JetBrains.Application.Env.IProductCanBeStarted"/> validators, and reports to <see cref="T:JetBrains.Application.Env.RunsProducts"/> when the product can be started.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.ReportsProductsAllowedToRun.Product">
            <summary>
            The product for which this component is calculating the Can-Run status.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.ReportsProductsAllowedToRun.IsProductAllowedToRun">
            <summary>
            Whether the <see cref="F:JetBrains.Application.Env.ReportsProductsAllowedToRun.Product"/> is allowed to run right now (<c>True</c> means it can be started or continue running; <c>False</c> means it cannot be started or has to be shut down if already running).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Env.ReportsProductsAllowedToRun.Init_ComposeProperty(JetBrains.DataFlow.Lifetime,JetBrains.DataFlow.ICollectionEvents{JetBrains.Application.Env.IProductCanBeStarted},JetBrains.Threading.IThreading)">
            <summary>
            Composes the state of all the <see cref="T:JetBrains.Application.Env.IProductCanBeStarted"/>, by priority.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Env.Components.ReportUnhandledExceptions">
            <summary>
            Catches as many unhandled exceptions as possible, reports them, and prevents them from crashing the whole environment.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Env.RunsProducts">
            <summary>
            All-products component.
            Watches the list of products allowed to run (supplied by per-product components <see cref="T:JetBrains.Application.Env.ReportsProductsAllowedToRun"/>).
            When there're any, spawns the shared environment, and then individual products, by creating the corresponding components.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.RunsProducts.ProductsAllowedToRun">
            <summary>
            The list of products currently allowed to run. A subset of <see cref="F:JetBrains.Application.Env.JetEnvironment.Products"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Env.RunsProducts.Init_CollectProductsAllowedToRun(JetBrains.DataFlow.Lifetime,JetBrains.DataFlow.CollectionEvents{JetBrains.Application.Env.ReportsProductsAllowedToRun},JetBrains.Threading.IThreading,System.Collections.Generic.ICollection{JetBrains.Application.IApplicationDescriptor})">
            <summary>
            Queries <see cref="T:JetBrains.Application.Env.ReportsProductsAllowedToRun"/> to fill the list of products allowed to run.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Env.RunsProducts.WithRWLockedLifetime(JetBrains.DataFlow.Lifetime,JetBrains.Application.IShellLocks,System.Action{JetBrains.DataFlow.Lifetime})">
            <summary>
            Opens a lifetime inside the given one which will be terminated under an RW lock. <paramref name="FInRWLockedLifetime"/> is called to fill the lifetime, under the RW lock also.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Env.RunsProducts.Init_RunWhenAllowed(JetBrains.DataFlow.Lifetime,JetBrains.Application.IShellLocks,System.Collections.Generic.IEnumerable{JetBrains.Application.Env.IProductConfigurationsProvider},JetBrains.Application.Env.JetEnvironment,JetBrains.DataFlow.ICollectionEvents{JetBrains.Application.IApplicationDescriptor},JetBrains.DataFlow.DictionaryEvents{JetBrains.Application.IApplicationDescriptor,JetBrains.Application.Components.IComponentContainer},JetBrains.DataFlow.DictionaryEvents{JetBrains.Application.IApplicationDescriptor,JetBrains.Application.Components.IComponentContainer})">
            <summary>
            Starts each product getting into the alloweds list, stops when leaving the list.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:JetBrains.Application.Env.RunsProducts.RunProduct(JetBrains.DataFlow.Lifetime,JetBrains.Application.IApplicationDescriptor,System.Collections.Generic.IEnumerable{JetBrains.Application.Env.IProductConfigurationsProvider},JetBrains.Application.Env.JetEnvironment,JetBrains.DataFlow.IDictionaryEvents{JetBrains.Application.IApplicationDescriptor,JetBrains.Application.Components.IComponentContainer},JetBrains.DataFlow.IDictionaryEvents{JetBrains.Application.IApplicationDescriptor,JetBrains.Application.Components.IComponentContainer})" -->
        <member name="T:JetBrains.Application.Env.RunsProducts.ProductConfigurations">
            <summary>
            Gives out the configurations the product is running in.
            Published as a product-specific component on the Shell-level.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Env.RunsProducts.ProductPartsCatalogSet">
            <summary>
            Gives out the product's <see cref="T:JetBrains.Application.Parts.PartsCatalogueSet"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ShellComponentAttribute.#ctor(JetBrains.Application.Sharing,JetBrains.Application.Lifecycle,JetBrains.Application.Creation,JetBrains.Application.Access)">
            <summary>
            Note: all of the params are not used yet, but should be set up on all newly-created components to later enable deferred/lazy loading.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Access.None">
            <summary>
            Worker component.
            Importing to other components not supported.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Access.PrimaryThread">
            <summary>
            Can be retrieved on the primary thread only.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Access.AnyThread">
            <summary>
            Can be retrieved on any thread.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Creation.PrimaryThread">
            <summary>
            Must be created on primary thread only.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Creation.AnyThread">
            <summary>
            Can be created on any thread (demand/deferred).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Lifecycle.Container">
            <summary>
            Created ASAP (when composing container), destroyed when destroying container.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Lifecycle.DemandReclaimable">
            <summary>
            Created on-demand, could be reclaimed and re-created.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Lifecycle.OneCall">
            <summary>
            Created when someone needs it, can be destroyed right after use.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Lifecycle.Demand">
            <summary>
            Created on-demand, destroyed ALAP when destroying container.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Lifecycle.Deferred">
            <summary>
            Created automatically (or on demand), but a bit later, to save CPU on component startup; destroyed when destroying container. 
            Access threading policy must be same or narrower as creation threading policy.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Sharing.Common">
            <summary>
            One component for all products.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Sharing.Product">
            <summary>
            A separate instance per each product.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Env.Components.SuspendResume">
            <summary>
            Manages Suspend/Resume functionality for the product.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.Components.SuspendResume.IsSuspended">
            <summary>
            Gets whether the product is currently in the suspended state.
            If you change the property value, or call one of the appropriate methods on this class, the product will be suspended or resumed.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Env.Components.SuspendResume.Init_Registry(JetBrains.DataFlow.Lifetime,JetBrains.Application.Env.Components.ProductSettingsLocation)">
            <summary>
            Supports persisting the suspended state in the Registry.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Env.Components.SuspendResume.Init_CommandLine(JetBrains.Application.IProductCommandLine)">
            <summary>
            Applies the command line key values to <see cref="F:JetBrains.Application.Env.Components.SuspendResume.IsSuspended"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.Components.SuspendResume.CmdLineResume">
            <summary>
            Causes the package to start in the resumed stage.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Env.Components.SuspendResume.CmdLineSuspend">
            <summary>
            Causes the package to start in the suspended stage.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Env.Components.SuspendResumeProductCanBeStarted">
            <summary>
            Allows the product to start only if it's not suspended.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Configuration.ISaveSettings">
            <summary>
            An interface for a component that has some settings and they should be saved whenever all of the application settings are being saved.
            // TODO: rework when we have a mature settings model.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.ISaveSettings.LoadSettings">
            <summary>
            <para>Tells the component container to reload the settings from the persistent media, deserialize them from the bag, and apply them to the components.</para>
            <para>If a particular component has not been initialized yet, it will be called for <see cref="M:JetBrains.Application.Configuration.IXmlExternalizable.ReadFromXml(System.Xml.XmlElement)"/> / <see cref="M:JetBrains.Application.Configuration.IXmlUpgradable.UpgradeFromXml(System.Xml.XmlElement,System.Version)"/> before its <see cref="M:JetBrains.Application.Components.IComponent.Init"/>. Otherwise, those xml-related methods will be called on it for the second and so on time.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.ISaveSettings.SaveSettings">
            <summary>
            <para>Tells the component container that it's about time to query the components of their settings, serialize them to the bag, and write that to the persistent media.</para>
            <para>You must make sure this method is called on component containers in the end of the session. The component container will never save settings on its own.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Configuration.IXmlConfigurable">
            <summary>
            The interface which is used to mark components as requiring initialization from configuration file which ships with the product. 
            Used for components which have complex initial configuration which is better to keep in external files rather than in code.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.IXmlConfigurable.ConfigureFromXml(System.Xml.XmlElement)">
            <summary>
            Called on the component by the component container before its <see cref="M:JetBrains.Application.Components.IComponent.Init"/> and <see cref="M:JetBrains.Application.Configuration.IXmlExternalizable.ReadFromXml(System.Xml.XmlElement)"/> to load the XML Configuration from the resource in the component implementation assembly, the name of the resource specified in the <see cref="T:JetBrains.Application.Configuration.XmlConfigurableComponentAttribute"/> on the component implementation.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Configuration.IXmlExternalizable">
            <summary>
            An interface for components that support serializing their settings into the XML settings file.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.IXmlExternalizable.ReadFromXml(System.Xml.XmlElement)">
            <summary>
            <para>This method is called on the component to populate it with default or loaded settings, unless the component implements <see cref="T:JetBrains.Application.Configuration.IXmlUpgradable"/> and returns <c>True</c> from its handler.</para>
            <para>The element is taken from the settings file, if available.</para>
            <para>If not, and there are settings files from the older versions, and the component does not implement <see cref="T:JetBrains.Application.Configuration.IXmlUpgradable"/>, this method is called with the old settings.</para>
            <para>Otherwise, this method is called with an empty element or a <c>Null</c> value.</para>
            <para>For the first time, this method is called right before component's init.</para>
            <para>The settings-reading protocol might be executed more than once thru the component lifetime.</para>
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:JetBrains.Application.Configuration.IXmlExternalizable.WriteToXml(System.Xml.XmlElement)">
            <summary>
            Called when the component should serialize its settings into the XML presentation, for saving into the settings file.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Configuration.IXmlStreamExternalizable">
            <summary>
            An interface for components that support serializing their settings into the XML settings file.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.IXmlStreamExternalizable.ReadFromXml(System.Xml.XmlReader)">
            <summary>
            Called to read the settings from the XML stream.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.IXmlStreamExternalizable.WriteToXml(System.Xml.XmlWriter)">
            <summary>
            Called to write the settings to the XML stream.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Configuration.IXmlRegistrable">
            <summary>
            Interface for classes that support registration in Windows Registry
            </summary>
        </member>
        <member name="T:JetBrains.Application.Configuration.IXmlUpgradable">
            <summary>
            If a previous User Settings version is found, and the component implements this interface, it's called with this interface instead of the regular Externalizable.
            Otherwise, the old settings will be passed into the regular interface.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.IXmlUpgradable.UpgradeFromXml(System.Xml.XmlElement,System.Version)">
            <summary>
            <para>Called with component's settings taken from the older version of the settings file, for each of the <see cref="P:JetBrains.Application.Configuration.IXmlUpgradable.LegacyTagNames"/> (even if some of the handlers return <c>True</c>).</para>
            <para><see cref="M:JetBrains.Application.Configuration.IXmlExternalizable.ReadFromXml(System.Xml.XmlElement)"/> will not be called if any of the calls returns <c>True</c>.</para>
            <para>The settings-reading protocol might be executed more than once thru the component lifetime.</para>
            </summary>
            <param name="element">An XML element with component settings, taken from the settings file.</param>
            <param name="version">Version of the product that supposedly produced the legacy settings file we're upgrading from, or an empty <see cref="T:System.Version"/> instance if those are not known.</param>
            <returns>Whether the component has upgraded. Its normal <see cref="M:JetBrains.Application.Configuration.IXmlExternalizable.ReadFromXml(System.Xml.XmlElement)"/> will not be called if that is the case.</returns>
        </member>
        <member name="P:JetBrains.Application.Configuration.IXmlUpgradable.LegacyTagNames">
            <summary>
            Element names for the component under which it used to be known in the old settings files.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Configuration.SettingsComponentBase">
            <summary>
            A component container with XML serialization capabilities for the component settings.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Configuration.SettingsComponentBase.myXmlSettingsBag">
            <summary>
            Maps the <see cref="T:JetBrains.Application.Configuration.IXmlExternalizable"/>'s <see cref="!:IXmlExternalizable.Scope"/> and <see cref="!:IXmlExternalizable.TagName"/> into the <see cref="T:System.Xml.XmlElement"/> that hold its settings.
            This stores the settings after they're read from the storage and before they're loaded by the components, and before they're written back to the storage. 
            </summary>
        </member>
        <member name="F:JetBrains.Application.Configuration.SettingsComponentBase.myVersionUpgradingFrom">
            <summary>
            Whenever an older version of the settings file is found to be upgraded, set to the version of the product that supposedly produced that file.
            Otherwise, <c>Null</c>, which means that the upgrade should not be called.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Configuration.SettingsComponentBase.myXmlDocumentSettings">
            <summary>
            A dummy XML document for creating XML elements for component settings. When settings are deserialized, set to their XML document.
            It's not important which XmlDoc to use, we'd just like to minimize their number.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsComponentBase.InitializeComponent_XmlConfigurable(JetBrains.Application.Configuration.IXmlConfigurable)">
            <summary>
            For an XML-configurable component, loads its config and applies to the component.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsComponentBase.ComponentReadFromXmlBag(JetBrains.Application.Configuration.IXmlExternalizable,JetBrains.Application.Configuration.XmlExternalizationScope,System.String)">
            <summary>
            Applies the related settings currently in the XML Bag to the <paramref name="component"/>'s <see cref="M:JetBrains.Application.Configuration.IXmlExternalizable.ReadFromXml(System.Xml.XmlElement)"/> or <see cref="M:JetBrains.Application.Configuration.IXmlUpgradable.UpgradeFromXml(System.Xml.XmlElement,System.Version)"/>.
            This implements the full settings-reading protocol for the component.
            Executed either before component init or in case of <see cref="!:IXmlExternalizableContainer.LoadSettings"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsComponentBase.ComponentWriteToXmlBag(JetBrains.Application.Configuration.IXmlExternalizable,JetBrains.Application.Configuration.XmlExternalizationScope,System.String)">
            <summary>
            Requests settings from the component and stores them into the XML Bag so that it could be then serialized.
            Might throw.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsComponentBase.OnLoadSettingsXmlBag(System.Action{System.Xml.XmlDocument,JetBrains.Application.Configuration.XmlExternalizationScope})">
            <summary>
            <para>Invoked by the base implementation when it's time to load the XML Settings Bag from the permanent storage. </para>
            <para>This logic (like, choosing the file) must be implemented by the inheritor. The inheritor might look for legacy settings files from previous versions if the normal settings file is missing and set <see cref="M:JetBrains.Application.Configuration.SettingsComponentBase.ShouldUpgradeSettings(System.Version)"/> to use them with <see cref="T:JetBrains.Application.Configuration.IXmlUpgradable"/> components.</para>
            <para>Call <see paramref="funcDeserializeXmlBag"/> to submit the XML representation of the settings for a particular scope (see <see cref="M:JetBrains.Application.Configuration.SettingsComponentBase.DeserializeXmlBag(System.Xml.XmlDocument,JetBrains.Application.Configuration.XmlExternalizationScope)"/> for details).</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsComponentBase.OnSaveSettingsXmlBag(System.Func{System.Xml.XmlDocument,JetBrains.Application.Configuration.XmlExternalizationScope,System.Boolean})">
            <summary>
            <para>Invoked by the base implementation when it's time to save the XML Settings Bag to the permanent storage. </para>
            <para>This logic (like, choosing the file) must be implemented by the inheritor.</para>
            <para>Call <see paramref="funcSerializeXmlBag"/> to get the settings for a particular scope in XML representation (see <see cref="M:JetBrains.Application.Configuration.SettingsComponentBase.SerializeXmlBag(System.Xml.XmlDocument,JetBrains.Application.Configuration.XmlExternalizationScope)"/> for details).</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsComponentBase.ShouldUpgradeSettings(System.Version)">
            <summary>
            When the settings are being read from the XML settings files, sets the mark whether the Upgrade functionality should be called on the components when they're initialized with their settings in <see cref="!:ComponentContainer.InitializeComponent"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsComponentBase.ComponentReadFromXmlBag_TrySettingsElement(JetBrains.Application.Configuration.IXmlExternalizable,JetBrains.Application.Configuration.XmlExternalizationScope,System.String)">
            <summary>
            There were no upgrade, but there's a valid settings element, and it will be applied.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsComponentBase.ComponentReadFromXmlBag_TryUpgrade(JetBrains.Application.Configuration.IXmlExternalizable,JetBrains.Application.Configuration.XmlExternalizationScope,System.String)">
            <summary>
            If in upgrade mode, see for upgrade data for this component.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsComponentBase.DeserializeXmlBag(System.Xml.XmlDocument,JetBrains.Application.Configuration.XmlExternalizationScope)">
            <summary>
            Reads from an XML document and stores into the XML Bag.
            Collects the entries for the <see cref="F:JetBrains.Application.Configuration.SettingsComponentBase.myXmlSettingsBag"/> map from the <paramref name="document"/>.
            The scope is given by <paramref name="scope"/>, and the name comes from the XML tag names.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsComponentBase.SerializeXmlBag(System.Xml.XmlDocument,JetBrains.Application.Configuration.XmlExternalizationScope)">
            <summary>
            Writes the component settings to the XML Document.
            </summary>
            <param name="xmlDoc">Target.</param>
            <param name="scope">The scope to filter the components against, or <c>0</c> to include them all.</param>
            <returns>Whether anything were written. This could be used to avoid creating empty proj/sol settings files.</returns>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsComponentBase.LoadSettings(JetBrains.Application.Configuration.IXmlExternalizable,JetBrains.Application.Configuration.XmlExternalizationScope,System.String)">
            <summary>
            Overrides the base init-component to perform XML-related ops.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsComponentBase.LoadSettingsWithXmlExternalizationUtil(JetBrains.DataFlow.Lifetime,System.Object,JetBrains.Application.Configuration.XmlExternalizationScope,System.String)">
            <summary>
            Uses <see cref="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ReadFromXml(System.Xml.XmlElement,System.Object)"/> and <see cref="M:JetBrains.Application.Configuration.XmlExternalizationUtil.WriteToXml(System.Xml.XmlElement,System.Object)"/> as the default implementation of <see cref="T:JetBrains.Application.Configuration.IXmlExternalizable"/> over <paramref name="target"/>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Configuration.SettingsComponentBase.ValidXmlExternalizationScopes">
            <summary>
            Override this property to provide a list of scopes that are valid for components in this container.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Configuration.WorkspaceSettingsTable">
            <summary>
            Contains global settings of objects that do not have components to store settings in
            </summary>
        </member>
        <member name="P:JetBrains.Application.Configuration.SettingsTableBase.BoolProperties">
            <summary>
            Gets the boolean properties.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Configuration.SettingsTableBase.IntProperties">
            <summary>
            Gets the integer properties.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Configuration.SettingsTableBase.StringProperties">
            <summary>
            Gets the string properties.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Configuration.SettingsTableBase.PropertiesCollection`1">
            <summary>
            Represent the properties collection.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsTableBase.PropertiesCollection`1.Add(JetBrains.DataFlow.IProperty{`0})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsTableBase.PropertiesCollection`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsTableBase.PropertiesCollection`1.Contains(JetBrains.DataFlow.IProperty{`0})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
            
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsTableBase.PropertiesCollection`1.CopyTo(JetBrains.DataFlow.IProperty{`0}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsTableBase.PropertiesCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsTableBase.PropertiesCollection`1.Remove(JetBrains.DataFlow.IProperty{`0})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsTableBase.PropertiesCollection`1.System#Collections#Generic#IEnumerable{JetBrains#DataFlow#IProperty{TValue}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:JetBrains.Application.Configuration.SettingsTableBase.PropertiesCollection`1.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String@JetBrains#DataFlow#IProperty{TValue}}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:JetBrains.Application.Configuration.SettingsTableBase.PropertiesCollection`1.Item(System.String)">
            <summary>
            Gets a property by its name.
            Creates a new one if missing.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Configuration.SettingsTableBase.PropertiesCollection`1.Item(System.String,`0)">
            <summary>
            Gets a property by its name.
            Creates a new one if missing.
            The second parameter is the default value for the case the property does not yet exist.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Configuration.SettingsTableBase.PropertiesCollection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            
        </member>
        <member name="P:JetBrains.Application.Configuration.SettingsTableBase.PropertiesCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.
            </returns>
            
        </member>
        <member name="T:JetBrains.Application.Configuration.XmlConfigurableComponentAttribute">
            <summary>
            Allows to mark a component as XML Configurable.
            An XML configuration will be loaded and applied to the component's <see cref="M:JetBrains.Application.Configuration.IXmlConfigurable.ConfigureFromXml(System.Xml.XmlElement)"/> before reading the component settings (<see cref="M:JetBrains.Application.Configuration.IXmlExternalizable.ReadFromXml(System.Xml.XmlElement)"/>) and calling its <see cref="M:JetBrains.Application.Components.IComponent.Init"/>.
            If you call the <see cref="M:JetBrains.Application.Configuration.IXmlExternalizable.ReadFromXml(System.Xml.XmlElement)"/> from <see cref="M:JetBrains.Application.Configuration.IXmlConfigurable.ConfigureFromXml(System.Xml.XmlElement)"/>, an XML Configuration becomes the default settings for the component.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlConfigurableComponentAttribute.#ctor(System.String)">
            <param name="configurationResourceName">
            Name of the embedded resource in either the component's assembly or the product's <see cref="!:IApplicationDescriptor.ConfigurationAssembly"/> that contains the XML to be passed into the component's <see cref="M:JetBrains.Application.Configuration.IXmlConfigurable.ConfigureFromXml(System.Xml.XmlElement)"/> before its <see cref="M:JetBrains.Application.Components.IComponent.Init"/>.
            </param>
        </member>
        <member name="P:JetBrains.Application.Configuration.XmlConfigurableComponentAttribute.ConfigurationResourceName">
            <summary>
            Name of the embedded resource in either the component's assembly or the product's <see cref="!:IApplicationDescriptor.ConfigurationAssembly"/> that contains the XML to be passed into the component's <see cref="M:JetBrains.Application.Configuration.IXmlConfigurable.ConfigureFromXml(System.Xml.XmlElement)"/> before its <see cref="M:JetBrains.Application.Components.IComponent.Init"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Configuration.XmlExternalizableAttribute">
            <summary>
            Use this attribute to mark those fields and properties of a class that should be serialized to XML.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Configuration.XmlExternalizableAttribute.DefaultValue">
            <summary>
            <para>The default value for this entry. You do not need to initialize the field itself in the inline initializer or the constructor. Instead, you MUST set this to the desired initial value, for serialization to work consistently.</para>
            <para>The possible values are:</para>
            <para>• <c>Null</c>,.which means the default value for the <see cref="T:System.Type"/> of the field (<c>Null</c> for reference types and zero memory for value types).</para>
            <para>• Some value of the same type as the <see cref="T:System.Type"/> of the field, or a value type convertible to it.</para>
            <para>• An invariant string representation of a value that cannot be presented inline in the attribute ctor. value of the same type as the <see cref="T:System.Type"/> of the field, or a value type convertible to it. The appropriate <see cref="T:System.ComponentModel.TypeConverter"/> is used for reading the value.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Configuration.XmlExternalizableAttribute.SettingName">
            <summary>
            Use this property to specify settings name used in the xml, if different from the property (field) name.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Configuration.XmlExternalizableAttribute.UseXmlSerializer">
            <summary>
            Gets or sets whether the XML Serializer should be used for serializing the value of this field.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Configuration.XmlExternalizationScope">
            <summary>
            Defines the scopes for the externalizable components.
            The define the sets of isolated components that are serialized to separate storages.
            You may use one of the base values, or introduce your own ones as integers, as the string representations are never used.
            The scopes are normally not persisted, because they define a settings storage on serialization and are defined by the storage on deserialization.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Configuration.XmlExternalizationScope.Any">
            <summary>
            Don't return from components.
            Means that, when filtering, all the scopes should be allowed.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Configuration.XmlExternalizationScope.Local">
            <summary>
            Locally-stored settings of a project or a solution.
            They're not intended to be shared in the team or added to the SCC.
            Typically, they're persisted in a “.resharper.user” file.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Configuration.XmlExternalizationScope.Shared">
            <summary>
            Team-shared settings of a project or a solution.
            They're intended to be added to the SCC.
            Typically, they're persisted in a “.resharper” file.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Configuration.XmlExternalizationScope.UserSettings">
            <summary>
            User settings of the product.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Configuration.XmlExternalizationScope.WorkspaceSettings">
            <summary>
            Workspace settings of the product.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Configuration.GlobalSettingsTable">
            <summary>
            Contains global settings of objects that do not have components to store settings in
            </summary>
        </member>
        <member name="T:JetBrains.Application.Configuration.KnownSettings`1">
            <summary>
            Maintains a table of the pre-registered setting identities that are validated as much as possible.
            The settings can be accessed thru a strongly-typed key, with their type and default value consistent across all the calls.
            The settings are still stored in the <see cref="T:JetBrains.Application.Configuration.GlobalSettingsTable"/>.
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="F:JetBrains.Application.Configuration.KnownSettings`1.myKnownSettings">
            <summary>
            The list of the known settings.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.KnownSettings`1.#ctor">
            <summary>
            Creates an empty table to be filled with <see cref="M:JetBrains.Application.Configuration.KnownSettings`1.Register(JetBrains.Application.Configuration.KnownSettings{`0}.SettingDescriptor)"/> afterwards.
            <see cref="M:JetBrains.Application.Configuration.KnownSettings`1.AssertAllRegistered"/> is not called, it's up to you.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.KnownSettings`1.#ctor(JetBrains.Application.Configuration.KnownSettings{`0}.SettingDescriptor[])">
            <summary>
            Creates an initialized table, uses <see cref="M:JetBrains.Application.Configuration.KnownSettings`1.AssertAllRegistered"/> to check that there are no orphaned keys in the <typeparamref name="TKey"/> enum.
            </summary>
            <param name="descriptors"></param>
        </member>
        <member name="M:JetBrains.Application.Configuration.KnownSettings`1.AssertKnownType(System.Type)">
            <summary>
            Checks whether we support settings of the type <paramref name="type"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.KnownSettings`1.AssertAllRegistered">
            <summary>
            Checks that all the keys from the <see cref="T:JetBrains.Util.Key"/> enum are present in the table.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.KnownSettings`1.Get``1(`0)">
            <summary>
            Gets a setting by its strongly-typed key.
            </summary>
            <typeparam name="T">Type of the setting. Must exactly match the expected setting value type.</typeparam>
            <param name="key">The strongly-typed key for the setting.</param>
            <returns>The setting value, if available.</returns>
        </member>
        <member name="M:JetBrains.Application.Configuration.KnownSettings`1.Register(JetBrains.Application.Configuration.KnownSettings{`0}.SettingDescriptor)">
            <summary>
            Adds a new known setting.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.KnownSettings`1.Register(`0,System.Object)">
            <summary>
            Adds a new known setting.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.KnownSettings`1.Register(`0,System.String,System.Object)">
            <summary>
            Adds a new known setting.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Configuration.KnownSettings`1.SettingDescriptor">
            <summary>
            Describes a known setting with its type and default value.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Configuration.KnownSettings`1.SettingDescriptor.DefaultValue">
            <summary>
            Default value, must be of type <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Configuration.KnownSettings`1.SettingDescriptor.Key">
            <summary>
            The key in the known settings table.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Configuration.KnownSettings`1.SettingDescriptor.SettingKey">
            <summary>
            The settings-key in the underlying settings store.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.KnownSettings`1.SettingDescriptor.#ctor(`0,System.String,System.Object)">
            <summary>
            Validates and fills in.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.KnownSettings`1.SettingDescriptor.#ctor(`0,System.Object)">
            <summary>
            Validates and fills in.
            The settings key name is deferred from the key value.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.KnownSettings`1.SettingDescriptor.AssertValid">
            <summary>
            Throws if fields are invalid.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Configuration.XmlExternalizationUtil">
            <summary>
            Utility class to externalize values of fields and properties of given instance via reflection.
            Helpful for implementing <see cref="T:JetBrains.Application.Configuration.IXmlExternalizable"/> interface.
            Values of all fields and properties marked with <see cref="T:JetBrains.Application.Configuration.XmlExternalizableAttribute"/> are saved/restored.
            The following value types are supported: <see cref="T:System.Boolean"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.String"/>, <see cref="T:System.Enum"/>s, <see cref="T:System.DateTime"/>s and one-dimensional arrays of the above types (as well as arrays of arrays).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Configuration.XmlExternalizationUtil.XmlIsNullAttrName">
            <summary>
            Controls the element nullity in the new serialization behavior.
            New behavior: elements with non-empty content are not-null values, and IsNull attribute must be present on elements with empty content to tell apart Null and empty string serialization (or empty arrays).
            Old behavior: if the IsNull attr is missing on an empty-content element, a self-closed tag is considered Null, and an opening+closing pair is considered an empty string.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Configuration.XmlExternalizationUtil.XmlExternalizableElementName">
            <summary>
            Name of the root element of the settings we write.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Configuration.XmlExternalizationUtil.XmlStreamElementName">
            <summary>
            Name of the <see cref="M:JetBrains.Application.Configuration.XmlExternalizationUtil.WriteStreamToXml(System.Xml.XmlElement,System.Action{System.Xml.XmlWriter})"/> / <see cref="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ReadStreamFromXml(System.Xml.XmlElement,System.Action{System.Xml.XmlReader})"/> root element.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ApplyDefaults(System.Object)">
            <summary>
            Enumerates the XML-externalizable fields of the <paramref name="externalizable"/> object and sets them to the default values, if such are given in the <see cref="P:JetBrains.Application.Configuration.XmlExternalizableAttribute.DefaultValue"/> property.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ApplyDefaults(System.Object,System.Object)">
            <summary>
            Enumerates the XML-externalizable fields of the <paramref name="externalizable"/> object and sets them to the default values, if such are given in the <see cref="P:JetBrains.Application.Configuration.XmlExternalizableAttribute.DefaultValue"/> property.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ReadStreamElementsFromXml(System.Xml.XmlElement,System.Action{System.Xml.XmlReader})">
            <summary>
            XML Serial access to the CDATA element content.
            Called on each top-level element under the stream root element.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ReadStreamFromXml(System.Xml.XmlElement,System.Action{System.Xml.XmlReader})">
            <summary>
            XML Serial access to the CDATA element content.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.WriteStreamToXml(System.Xml.XmlElement,System.Action{System.Xml.XmlWriter})">
            <summary>
            XML Serial access to the CDATA element content.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.GetExternalizableMembers(System.Object)">
            <summary>
            Gets the members supported for XML Externalization.
            That is, fields or properties with the <see cref="T:JetBrains.Application.Configuration.XmlExternalizableAttribute"/> attribute.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ReadFromXml_FillMembersWithValues_Value(System.Xml.XmlReader,System.Type)">
            <summary>
            Reads a value from the reader, returns either that value of type <paramref name="type"/>, or <c>Null</c>.
            </summary>
            <param name="reader">XML Reader positioned at the element whose value should be parsed.</param>
            <param name="type">Expected value type.</param>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ReadFromXml_FillMembersWithValues_Value(System.Xml.XmlElement,System.Type)">
            <summary>
            Reads the value, returns it if available, or <see cref="F:System.Convert.DBNull"/> otherwise.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ReadFromXml_FillMembersWithValues_ValueXmlSerializer(System.Xml.XmlReader,JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember)">
            <summary>
            Value deserialization for the <see cref="P:JetBrains.Application.Configuration.XmlExternalizableAttribute.UseXmlSerializer"/> case.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember.GetMemberType">
            <summary>
            Gets the type of the member values.
            Supports fields and properties of a CLR and <see cref="T:JetBrains.DataFlow.IProperty`1"/> type.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember.GetMemberValue(System.Object)">
            <summary>
            Retrieves a value of the member.
            Supports fields and properties of a CLR and <see cref="T:JetBrains.DataFlow.IProperty`1"/> type.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember.GetMemberValueRaw">
            <summary>
            Retrieves a value of the member in a raw manner.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember.HasDefaultValue">
            <summary>
            Gets whether there's a default value specified for the member in its <see cref="P:JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember.Attribute"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember.ParseDefaultValue">
            <summary>
            Analyses and parses the default value, as given by the <see cref="P:JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember.Attribute"/>-&gt;<see cref="P:JetBrains.Application.Configuration.XmlExternalizableAttribute.DefaultValue"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember.SetMemberValue(System.Object,System.Object)">
            <summary>
            Assigns a value to the member.
            Supports fields and properties of a CLR and <see cref="T:JetBrains.DataFlow.IProperty`1"/> type.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember.SetMemberValueRaw(System.Object)">
            <summary>
            Sets the value of the member in a raw manner.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj" /> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember.CompareTo(JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other" /> parameter.Zero This object is equal to <paramref name="other" />. Greater than zero This object is greater than <paramref name="other" />. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember.Equals(JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="P:JetBrains.Application.Configuration.XmlExternalizationUtil.ExternalizableMember.UserValue">
            <summary>
            The value read from the member, or the value to be written to the member. Temporary storage. Not operated by this class, read and written by external consumers.
            Initially, <see cref="F:System.Convert.DBNull"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.DataContext.IDataConstant">
            <summary>
            Identifies a piece of data that could be requested from an <see cref="T:JetBrains.Application.DataContext.IDataContext"/>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.DataContext.IDataConstant.Id">
            <summary>
            Gets the unique ID of this data constant instance.
            </summary>
        </member>
        <member name="P:JetBrains.Application.DataContext.IDataConstant.Type">
            <summary>
            Gets the type of the constant. Somewhen soon enough this is likely to become the identity of the constant.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataConstant`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.Application.DataContext.DataContext">
            <summary>
            <para>The Action Manager's implementation of IDataContext.</para>
            <para>If you'd like to create your own data context, use one of the <see cref="T:JetBrains.Application.DataContext.DataContexts"/> methods (import <see cref="T:JetBrains.Application.DataContext.DataContexts"/>). With it, you can add any rules or constants on your own, and create the data context on a specific control or point, or without any local context (the default global context).</para>
            <para>In the rare case when you need entirely your own datacontext without standard data rules, implement <see cref="T:JetBrains.Application.DataContext.IDataContext"/> directly.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.DataContext.IDataContext">
            <summary>
            The context, passed to Action.
            Must be used immediately ONLY, within the same <see cref="T:JetBrains.Threading.ReentrancyGuard"/> execution session.
            If you're deferring the execution, extract these parameters and store in your own structures.
            </summary>
        </member>
        <member name="F:JetBrains.Application.DataContext.DataContext.myDataConstantsInUse">
            <summary>
            Recursion prevention.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataContext.#ctor(JetBrains.DataFlow.Lifetime,System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule},JetBrains.Util.OneToListMap{JetBrains.Application.DataContext.IDataConstant,JetBrains.Application.DataContext.IDataRule})">
            <summary>
            <para>Creates the data context.</para>
            <para>If you'd like to create your own data context, use one of the <see cref="T:JetBrains.Application.DataContext.DataContexts"/> methods (import <see cref="T:JetBrains.Application.DataContext.DataContexts"/>). With it, you can add any rules or constants on your own, and create the data context on a specific control or point, or without any local context (the default global context).</para>
            <para>From all the rules lists (plain and pre-sorted), rules are picked first by priority, then (within the same priority, which is usually the case because nearly all the rules have the default priority) — first from the plain list in order of appearance, then from the sorted list. The precedence of the plain list comes from the fact that it's usually the context-specific one (from focused control or moused control etc), while the pre-sorted list is the global list of the Action Manager.</para>
            </summary>
            <param name="lifetime">Limiting lifetime.</param>
            <param name="datarulesPlain">Optional. The plain list of data rules for the context.</param>
            <param name="datarulesSorted">Optional. As Action Manager has a large persistent list of data rules, they're given in a way that they're pre-tossed by constant and pre-sorted by priority for each constant.</param>
        </member>
        <member name="F:JetBrains.Application.DataContext.DataContext.Dispatcher">
            <summary>
            Thread affinity.
            </summary>
        </member>
        <member name="F:JetBrains.Application.DataContext.DataContext.myDebugInstanceId">
            <summary>
            For diagnostyx.
            </summary>
        </member>
        <member name="F:JetBrains.Application.DataContext.DataContext.Evaluator.myDebugInstanceId">
            <summary>
            For diagnostyx.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataContext.Evaluator.#ctor(System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule},JetBrains.Util.OneToListMap{JetBrains.Application.DataContext.IDataConstant,JetBrains.Application.DataContext.IDataRule},System.String)">
            <summary>
            From all the rules lists (plain and pre-sorted), rules are picked first by priority, then (within the same priority, which is usually the case because nearly all the rules have the default priority) — first from the plain list in order of appearance, then from the sorted list. The precedence of the plain list comes from the fact that it's usually the context-specific one (from focused control or moused control etc), while the pre-sorted list is the global list of the Action Manager.
            </summary>
            <param name="datarulesPlain">Optional. The plain list of data rules for the context.</param>
            <param name="datarulesSorted">Optional. As Action Manager has a large persistent list of data rules, they're given in a way that they're pre-tossed by constant and pre-sorted by priority for each constant.</param>
            <param name="debugInstanceId"></param>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataContext.Evaluator.TryEvaluateDataRules(JetBrains.Application.DataContext.IDataConstant,JetBrains.Application.DataContext.IDataContext)">
            <summary>
            Tries to get the constant value by evaluating all of the data rules in both lists.
            </summary>
        </member>
        <member name="P:JetBrains.Application.DataContext.DataContext.Evaluator.IsEmpty">
            <summary>
            Gets if there're no rules at all in this datacontext.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataContexts.RegisterDataRule``1(JetBrains.DataFlow.Lifetime,System.String,JetBrains.Application.DataContext.DataConstant{``0},System.Func{JetBrains.Application.DataContext.IDataContext,``0})">
            <summary>
            Registers a data rule that will apply to data contexts created by this object.
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="lifetime"></param>
            <param name="name">Required for debugging data constant values inference. Allows to track the rule supplying the questionable constant value.</param>
            <param name="constant">The rule knows how to produce this constant out of some other constants or the environment.</param>
            <param name="FRule"></param>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataContexts.RegisterDataRule(JetBrains.DataFlow.Lifetime,JetBrains.Application.DataContext.IDataRule)">
            <summary>
            Registers a data rule that will apply to data contexts created by this object.
            </summary>
            <param name="lifetime"></param>
            <param name="rule"></param>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataContexts.CreateOnActiveControl(JetBrains.DataFlow.Lifetime,System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule})">
            <summary>
            Gets the data context for executing the actions in the control that currently has user input focus.
            </summary>
            <param name="lifetime"></param>
            <param name="datarulesAdditional">Manually-supplied additional data rules. Takes precedence over any other data rules (of the same priority).</param>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataContexts.Create(JetBrains.DataFlow.Lifetime,System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule})">
            <summary>
            Gets the data context for executing the actions based on the given data rules.
            Note that the focused control is not used for collecting data rules in this overload.
            This method is different from creating a <see cref="T:JetBrains.Application.DataContext.DataContext"/> explicitly on these providers because <see cref="M:JetBrains.Application.DataContext.DataContexts.RegisterDataRule``1(JetBrains.DataFlow.Lifetime,System.String,JetBrains.Application.DataContext.DataConstant{``0},System.Func{JetBrains.Application.DataContext.IDataContext,``0})">registered data rules</see> are added to the data rules pool (with a lower priority than your manually-supplied list).
            </summary>
            <param name="lifetime"></param>
            <param name="datarulesAdditional">Manually-supplied additional data rules. Takes precedence over any other data rules (of the same priority).</param>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataContexts.CreateWithoutDataRules(JetBrains.DataFlow.Lifetime,System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule})">
            <summary>
            Gets the data context for executing the actions based on the given data rules.
            Note that the focused control is not used for collecting data rules in this overload.
            The registered data rules are not taking part in this data context.
            </summary>
            <param name="lifetime"></param>
            <param name="datarulesAdditional">Manually-supplied additional data rules. Takes precedence over any other data rules (of the same priority).</param>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataContexts.CreateAtScreenPoint(JetBrains.DataFlow.Lifetime,System.Windows.Point,System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule})">
            <summary>
            Gets the data context for executing the actions in the given screen location.
            Basically, this is <see cref="M:JetBrains.Application.DataContext.DataContexts.CreateOnControl(JetBrains.DataFlow.Lifetime,JetBrains.UI.CrossFramework.EitherControl,System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule})">the context for the UI control</see> at the given screen location.
            </summary>
            <param name="lifetime"></param>
            <param name="ptScreen">Point, in screen coordinates.</param>
            <param name="datarulesAdditional">Manually-supplied additional data rules. Takes precedence over any other data rules (of the same priority).</param>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataContexts.CreateOnControl(JetBrains.DataFlow.Lifetime,JetBrains.UI.CrossFramework.EitherControl,System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule})">
            <summary>
            Gets the data context for executing actions within the given control.
            </summary>
            <param name="lifetime"></param>
            <param name="control">The control of either kind.</param>
            <param name="datarulesAdditional">Manually-supplied additional data rules. Takes precedence over any other data rules (of the same priority).</param>
        </member>
        <member name="P:JetBrains.Application.DataContext.DataContexts.FindDataRules">
            <summary>
            Exposes the aggregator of registered data rule finders.
            </summary>
        </member>
        <member name="P:JetBrains.Application.DataContext.DataContexts.Empty">
            <summary>
            A data context that knows no data constants at all.
            </summary>
        </member>
        <member name="F:JetBrains.Application.DataContext.DataConstants.ScreenPoint">
            <summary>
            A point, in screen coordinates.
            Available if the context has been created from a screen point: <see cref="M:JetBrains.Application.DataContext.DataContexts.CreateAtScreenPoint(JetBrains.DataFlow.Lifetime,System.Windows.Point,System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule})"/> (or if published by some data provider).
            </summary>
        </member>
        <member name="T:JetBrains.Application.DataContext.ExportFindDataRulesAttribute">
            <summary>
            Attribute for <see cref="T:JetBrains.Application.DataContext.IFindDataRules"/> impls.
            </summary>
        </member>
        <member name="F:JetBrains.Application.DataContext.ExportFindDataRulesAttribute.Priority">
            <summary>
            The higher the priority, the sooner the finder is asked (and can promote its own result in precedence of the others).
            </summary>
        </member>
        <member name="T:JetBrains.Application.DataContext.FindDataRules">
            <summary>
            Takes <see cref="T:JetBrains.Application.DataContext.IFindDataRules"/>, prioritizes, and runs queries on them.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.IDataContextEx.ToPropertyBag(JetBrains.Application.DataContext.IDataContext,JetBrains.Application.DataContext.IDataConstant[])">
            <summary>
            Creates a new property bag with a snapshot of this data context.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.IDataContextEx.ToPropertyId(JetBrains.Application.DataContext.IDataConstant)">
            <summary>
            Creates a property ID identified by a data constant.
            We convert it to a generic <see cref="T:JetBrains.Application.DataContext.DataConstant`1"/> type, and then instantiate <see cref="T:JetBrains.Application.DataContext.DataConstantPropertyId`1"/> for the same <c>T</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.IDataContextEx.ToPropertyId``1(JetBrains.Application.DataContext.DataConstant{``0})">
            <summary>
            Creates a property ID identified by a data constant.
            </summary>
        </member>
        <member name="T:JetBrains.Application.DataContext.IDataRuleProvider">
            <summary>
            The Windows Forms specific way of providing ui-context-spefific <see cref="T:JetBrains.Application.DataContext.IDataRule"/>s on UI controls.
            </summary>
        </member>
        <member name="T:JetBrains.Application.DataContext.IDataRule">
            <summary>
            A data rule that is the internal mechanism of the default <see cref="!:IActionManager"/>'s implementation of <see cref="T:JetBrains.Application.DataContext.IDataContext"/> for evaluating values of constants. When a constant is requested from the data context, it's evaluated transitively by a chain of rules where the first rule in the chain uses no inputs and just tells the value (e.g. current text control from the environment), and other rules transform it to get the desired data constant out of it (e.g. document from the current text control).
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.IDataRule.Evaluate(JetBrains.Application.DataContext.IDataContext)">
            <summary>
            Attempts to evaluate the data rule.
            </summary>
            <param name="context">The data context from which the data rule could optionally get any other constants to calculate the rule result upon.</param>
            <returns>
            <para>Returns the value if it could be calculated. The possible return values are:</para>
            <para>(1) A valid value, if the rule was evaluated successfully. No rules would be further evaluated. The value must be of type specified by <see cref="P:JetBrains.Application.DataContext.IDataRule.OutputType"/>.</para>
            <para>(2) A <c>Null</c> value if this rule has insufficient information for evaluation, such as a "text control selection from text control" when no text control could be taken from data context. The remaining rules will be evaluated in this case.</para>
            <para>(3) The <see cref="F:System.Reflection.Missing.Value">VT_ERROR/DISP_E_PARAMNOTFOUND</see> value, which means that the rule knows and understands this context and usually can produce a result, but right now (with current user selection etc) cannot yield a value. In this case rules with larger priority values will not be processed, and <c>Null</c> will be returned from the data context for this constant, unless some of the remaining rules of the same priority provides a value. Evaluation of the remaining rules of the same priority is not prevented because their relative order is not well defined.</para>
            </returns>
        </member>
        <member name="P:JetBrains.Application.DataContext.IDataRule.Name">
            <summary>
            Semantic name of the rule. Crucial for debugging data constants inference.
            </summary>
        </member>
        <member name="P:JetBrains.Application.DataContext.IDataRule.OutputType">
            <summary>
            The output type of the rule.
            </summary>
        </member>
        <member name="P:JetBrains.Application.DataContext.IDataRule.Priority">
            <summary>
            <para>The rule priority. The lower the priority, the earlier the rule gets chance to contribute. Evaluation stops after some rule yields a valid value.</para>
            <para>The order of execution for rules of the same priority is undefined in most cases. However, as rules are collected from UI context by bubbling out of the active our mouse-hit control, rules of the control closer to the bubbling origin would be preferred.</para>
            <para>See <see cref="T:JetBrains.Application.DataContext.DataRulePriorityClasses"/> for typical values. As you create a rule with <see cref="T:JetBrains.Application.DataContext.DataRule`1"/> class or one of the helper methods, it gets the default priority of <see cref="F:JetBrains.Application.DataContext.DataRulePriorityClasses.Default"/>.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.DataContext.DataRule`1">
            <summary>
            The default data rule implementation with default priority.
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataRule`1.#ctor(System.String,JetBrains.Application.DataContext.DataConstant{`0},`0)">
            <summary>
            Creates a constant data rule (no evaluation involved).
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataRule`1.#ctor(System.String,JetBrains.Application.DataContext.DataConstant{`0},System.Func{JetBrains.Application.DataContext.IDataContext,`0})">
            <summary>
            <para>Creates a data rule that evaluates a function, possibly requesting other constants from the data context transitively.</para>
            <para>Out of the <see cref="M:JetBrains.Application.DataContext.IDataRule.Evaluate(JetBrains.Application.DataContext.IDataContext)"/> return type variations supports <c>Null</c> and a meaningful value. For the usually-available-but-now-missing value, see another overload.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataRule`1.#ctor(System.String,JetBrains.Application.DataContext.DataConstant{`0},System.Func{JetBrains.Application.DataContext.IDataContext,JetBrains.Util.JetTuple{`0,System.Boolean}})">
            <summary>
            <para>Creates a data rule that evaluates a function, possibly requesting other constants from the data context transitively.</para>
            <para>Unlike the other overload, supports all of the <see cref="M:JetBrains.Application.DataContext.IDataRule.Evaluate(JetBrains.Application.DataContext.IDataContext)"/> return type variations. The boolean in the tuple means whether the value would usually be available in this context. Your function could return the following tuple combinations:</para>
            <para>(1) {meaningful-value, True}: evaluation succeeded.</para>
            <para>(2) {Null, True}: evaluation recognized the context and usually would return smth, but right now there is no value available. See <see cref="M:JetBrains.Application.DataContext.IDataRule.Evaluate(JetBrains.Application.DataContext.IDataContext)"/> for further details.</para>
            <para>(3) {Null, False}: evaluation has no idea as of what to return. See <see cref="M:JetBrains.Application.DataContext.IDataRule.Evaluate(JetBrains.Application.DataContext.IDataContext)"/> for further details.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.DataContext.DataRule`1.DesperateDataRule">
            <summary>
            The last-chance data rule to be called only even no other data rules for this constant could yield a result.
            </summary>
        </member>
        <member name="T:JetBrains.Application.DataContext.DataRules">
            <summary>
            Helper class for creating lists of data rules.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataRules.AddRule``1(System.String,JetBrains.Application.DataContext.DataConstant{``0},System.Func{JetBrains.Application.DataContext.IDataContext,``0})">
            <summary>
            Starts a new list of data rules.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataRules.AddRule``1(System.String,JetBrains.Application.DataContext.DataConstant{``0},``0)">
            <summary>
            Starts a new list of data rules.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataRules.AddRule``1(System.Collections.Generic.IList{JetBrains.Application.DataContext.IDataRule},System.String,JetBrains.Application.DataContext.DataConstant{``0},System.Func{JetBrains.Application.DataContext.IDataContext,``0})">
            <summary>
            Adds another rule to the rules list. Modifies the original list. Fluent.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.DataRules.AddRule``1(System.Collections.Generic.IList{JetBrains.Application.DataContext.IDataRule},System.String,JetBrains.Application.DataContext.DataConstant{``0},``0)">
            <summary>
            Adds another rule to the rules list. Modifies the original list. Fluent.
            </summary>
        </member>
        <member name="T:JetBrains.Application.DataContext.DataRulePriorityClasses">
            <summary>
            Sample priority classes for data rules.
            </summary>
        </member>
        <member name="F:JetBrains.Application.DataContext.DataRulePriorityClasses.Default">
            <summary>
            Default priority. Most of data rules be at this level.
            </summary>
        </member>
        <member name="F:JetBrains.Application.DataContext.DataRulePriorityClasses.Ambient">
            <summary>
            Ambient data rules taking context from the environment. For example, Visual Studio selected hierarchy item is turned into a project model element. Would not be called if any of the product rules are able to provide a value for the constant.
            </summary>
        </member>
        <member name="F:JetBrains.Application.DataContext.DataRulePriorityClasses.Desperate">
            <summary>
            Last-chance data rules providing an arguebly useful value in case it couldn't be inferred from normal rules or host environment. For example, if there're no declared elements available, use the project model element to expose it as a "declared path" to make it searchable etc.
            </summary>
        </member>
        <member name="T:JetBrains.Application.DataContext.AmbientDataRule`1">
            <summary>
            Overrides the data rule priority to make it a last-chance-fallback to VS.
            </summary>
        </member>
        <member name="T:JetBrains.Application.DataContext.IFindDataRules">
            <summary>
            An entity to look for an <see cref="T:JetBrains.Application.DataContext.IDataRuleProvider"/> based on the current cursor position or current UI control.
            </summary>
            <seealso cref="T:JetBrains.Application.DataContext.ExportFindDataRulesAttribute"/>.
        </member>
        <member name="M:JetBrains.Application.DataContext.IFindDataRules.FindActiveDataRules">
            <summary>
            Gets the data provider for the control that currently has user input focus.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.IFindDataRules.FindDataRulesAtPoint(System.Windows.Point)">
            <summary>
            Gets the data provider for the control that is located at the given screen point.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataContext.IFindDataRules.FindDataRulesInControl(JetBrains.UI.CrossFramework.EitherControl)">
            <summary>
            Gets the data provider for the given control.
            </summary>
        </member>
        <member name="T:JetBrains.Application.ExceptionReport.ManagedThreadNameExceptionReportDataProvider">
            <summary>
            Adds managed thread name to the submitted exception data.
            </summary>
        </member>
        <member name="T:JetBrains.Application.ExceptionReport.IExceptionReportDataProvider">
            <summary>
            Components exporting this interface are called to add data to the exception when an exception is about to be reported.
            Use <see cref="M:JetBrains.Util.ExceptionEx.AddData``1(``0,System.String,System.Func{System.Object})"/> on the <see cref="T:System.Exception"/> object of the data you're given to add exception data to the exception object.
            </summary>
        </member>
        <member name="T:JetBrains.Application.ExceptionReport.PlatformSccRevisionExceptionReportDataProvider">
            <summary>
            Exposes the SCC revision of the codebase off which the platform was built.
            Note: in case of platform sharing, platform and products might be built off different SCC revisions.
            </summary>
        </member>
        <member name="T:JetBrains.Application.ExceptionReport.ProductSccRevisionExceptionReportDataProvider">
            <summary>
            Exposes the SCC revision of the codebase off which the product was built.
            Note: in case of platform sharing, platform and products might be built off different SCC revisions.
            TODO: make sure it uses per-product defines when we have shell sharing.
            </summary>
        </member>
        <member name="T:JetBrains.Application.IHostCommandLine">
            <summary>
            Command line of the host, which includes both product-shared keys and all keys that belong to each product.
            In VS, created over the VS command line object. In standalone, created over a string array.
            </summary>
        </member>
        <member name="M:JetBrains.Application.IHostCommandLine.MakeFullCommandLineKeyName(System.String)">
            <summary>
            <para>Gets the string to be passed on the command line to this host so that the product-specific command lines would get <paramref name="sKeyWithProductDecoration"/> for parsing.</para>
            <para>For calling from <see cref="T:JetBrains.Application.IProductCommandLine"/>s to serve their <see cref="M:JetBrains.Application.IProductCommandLine.MakeFullCommandLineKeyName(System.String)"/> requests.</para>
            <para>For example, let's consider a non-default Visual Studio hive with root suffix “<c>Exp</c>”, a key with short name of “<c>SelfDestruction</c>”, for the product named “<c>Kalabash</c>”. This method is given the product-decorated “<c>Kalabash.SelfDestruction</c>” key name (formed from the short name by some <see cref="T:JetBrains.Application.IProductCommandLine"/>), and yields the full ready-for-VS-command-line “<c>Kalabash.SelfDestruction.Exp</c>” key name.</para>
            <para>In non-VS or VS default hive, returns the original string. If the product is also the default product of the host (not applicable to VS), the resulting full name will just be the short key name.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.IHostCommandLineEx.IsKeyDefinedInAnyProduct(JetBrains.Application.IHostCommandLine,System.String,System.Boolean)">
            <summary>
            Checks if the key is defined in any product loaded in this host.
            </summary>
        </member>
        <member name="T:JetBrains.Application.ProductCommandLine">
            <summary>
            Implements the command line of the product over a host command line.
            Selects those keys that have the prefix of a specific product (or no prefix at all, for host-default product).
            </summary>
        </member>
        <member name="M:JetBrains.Application.ProductCommandLine.#ctor(JetBrains.Application.IHostCommandLine,System.String,System.Boolean)">
            <summary>
            Init.
            </summary>
            <param name="cmdlHost">Host command line to filter and strip key names.</param>
            <param name="sProductPrefix">Prefix of the product (dot not included). Keys with this prefix (followed by a dot) are attributed to the current product and given out. Case-sensitivity flags of the command line request also applies to the prefix.</param>
            <param name="isKeyPrefixOptional">If the host has a default product, then keys without prefix are also attributed to that product. An example is a standalone application (eg DotTrace).</param>
        </member>
        <member name="P:JetBrains.Application.Install.InstallerAttributeBase.VsVersionAffinity">
            <summary>
            Specifies whether this installation is interested in the VS version, and how.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.IStaticInstaller">
            <summary>
            A class marked with <see cref="T:JetBrains.Application.Install.StaticInstallerAttribute"/> must implement this interface in order to be called once per the registration process.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.IStaticInstaller.InstallStatic(JetBrains.Application.Install.Installer)">
            <summary>
            Called once on the object during the registration process.
            </summary>
            <param name="installer">The installer object that provides the installation data.</param>
            <returns>The list of the Registry entries to write, or <c>Null</c> if none.</returns>
        </member>
        <member name="T:JetBrains.Application.Install.ITypeAttributeInstaller">
            <summary>
            A class marked with <see cref="T:JetBrains.Application.Install.TypeAttributeInstallerAttribute"/> must implement this interface in order to be called for processing each of the type attributes it handles.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.ITypeAttributeInstaller.InstallInstance(JetBrains.Application.Install.Installer,System.Type,System.Object)">
            <summary>
            Called for each of the attributes of the requested type encountered in the known assemblies.
            </summary>
            <param name="installer">The installer object that provides the installation data.</param>
            <param name="attributeOwner">The type owning the attribute</param>
            <param name="attributeInstance">Instance of the attribute to process.</param>
            <returns>The list of the Registry entries to write, or <c>Null</c> if none.</returns>
        </member>
        <member name="T:JetBrains.Application.Install.StaticInstallerAttribute">
            <summary>
            An attribute to mark the classes that called once to perform attribute-independent installation.
            The class must implement the <see cref="T:JetBrains.Application.Install.ITypeAttributeInstaller"/> interface.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.StaticInstallerAttribute.#ctor(JetBrains.Application.Install.InstallerVsVersionAffinity)">
            <summary>
            Creates the attribute.
            </summary>
            <param name="vsversionaffinity">Specifies the affinity of this installer to the VS version, see enum member summaries for details.</param>
        </member>
        <member name="T:JetBrains.Application.Install.TypeAttributeInstallerAttribute">
            <summary>
            An attribute to mark the classes that process the installation data written in the form of type attributes of type <see cref="P:JetBrains.Application.Install.TypeAttributeInstallerAttribute.AttributeToInstall"/> during registration and unregistration.
            The class must implement the <see cref="T:JetBrains.Application.Install.ITypeAttributeInstaller"/> interface.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.TypeAttributeInstallerAttribute.#ctor(System.Type,JetBrains.Application.Install.InstallerVsVersionAffinity)">
            <summary>
            Creates the attribute.
            </summary>
            <param name="typeAttributeToInstall">Type of the attribute for which the class marked by <see cref="T:JetBrains.Application.Install.TypeAttributeInstallerAttribute"/> should be invoked to process the installation</param>
            <param name="vsversionaffinity">Specifies the affinity of this installer to the VS version, see enum member summaries for details.</param>
        </member>
        <member name="P:JetBrains.Application.Install.TypeAttributeInstallerAttribute.AttributeToInstall">
            <summary>
            Gets the type of the attribute for which the class marked by <see cref="T:JetBrains.Application.Install.AssemblyAttributeInstallerAttribute"/> should be invoked to process the installation.
            </summary>
        </member>
        <member name="T:JetBrains.Application.License.TimeBombComponent">
            <summary>
            A timebomb that renders the product unusable after a period of time.
            Makes sure Beta builds cannot be used forever.
            </summary>
        </member>
        <member name="M:JetBrains.Application.License.TimeBombComponent.ReportBetaExpired">
            <summary>
            Show UI or do whatever applicable to the environment you override this in.
            </summary>
        </member>
        <member name="P:JetBrains.Application.License.TimeBombComponent.TimeBombPeriod">
            <summary>
            <para>If <c>Null</c>, there is no timebomb in the build.</para>
            <para>A positive value denotes the period of time after the build date (<see cref="P:JetBrains.Application.IApplicationDescriptor.BuiltOn"/>) within which the product is operational. When the timeout expires, the product cannot be used anymore.</para>
            <para>Do not use non-positive time spans.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.PlatformProduct.PlatformApplicationDescriptor">
            <summary>
            Describes the platform products. It's not 
            Currently, the platform product is of no use when run, so it just  applies to tests (populates the test environment with components).
            </summary>
        </member>
        <member name="T:JetBrains.Application.ApplicationDescriptor">
            <summary>
            Describes the product.
            The instances are spawned by the shell and populated with the assembly configuration and product edition parameters.
            </summary>
        </member>
        <member name="T:JetBrains.Application.IApplicationDescriptor">
            <summary>
            <para>For a JetBrains .NET Platform based product, describes the static <see cref="T:JetBrains.Application.PlatformObsoleteStatics"/> properties for that product.</para>
            Being static, an Application Descriptor can be created without a Shell. It's used for getting static product info without a running product, eg for packing the assemblies for the setup package, or harvesting entities like registration attributes from all of the product assemblies.
            The AD can tell product properties, like name, version, build date, and URIs, and the list of product assemblies for various product configurations. A configuration is defined elsewhere, when starting the Shell over this AD, or specified for the setup package builder to tell which DLLs should go into setup.
            To start a Shell, create an AD of the specific type, give it enough context as needed, and call its overload of <c>StartShell</c>. A Shell cannot be created directly. A newly-created Shell remembers its underlying AD and uses it to get the list of the assemblies to run for the product.
            Even though you can create an AD directly, things Visual Studio integration package and setup package builder use autodiscovery to locate the AD because they're not product-specific and cannot know the exact AD class type. An <see cref="T:JetBrains.Application.ApplicationDescriptorAttribute"/> defnies the Application Descriptor to be created.
            <para>Note: <see cref="T:JetBrains.Application.IApplicationDescriptor"/> is all-static and the same throughout all the product runs, <see cref="!:IShellStarter"/> is bound to the single product run (but multiple shell runs, if needed), so it binds to cmdline and VS version, and the <see cref="T:JetBrains.Application.PlatformObsoleteStatics"/> is for a single Shell run (in Visual Studio, our Shell can be started and stopped multiple times within the same VS run), and its <see cref="!:PlatformObsoleteStatics.AssemblyConfigurations"/> is unique per run.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.IApplicationDescriptor.AllAssembliesResourceAssembly">
            <summary>
            Gets the assembly that contains the <see cref="P:JetBrains.Application.IApplicationDescriptor.AllAssembliesXml"/> data in the <see cref="P:JetBrains.Application.IApplicationDescriptor.AllAssembliesResourceName"/> resource.
            </summary>
        </member>
        <member name="P:JetBrains.Application.IApplicationDescriptor.AllAssembliesResourceName">
            <summary>
            Gets the name of the resource in <see cref="P:JetBrains.Application.IApplicationDescriptor.AllAssembliesResourceAssembly"/> that contains the serialized <see cref="P:JetBrains.Application.IApplicationDescriptor.AllAssembliesXml"/> data.
            </summary>
        </member>
        <member name="P:JetBrains.Application.IApplicationDescriptor.AllAssembliesXml">
            <summary>
            The “All Assemblies” XML file, deserialized.
            Contains the list of product assemblies to be loaded, as well as the configurations filters.
            </summary>
        </member>
        <member name="P:JetBrains.Application.IApplicationDescriptor.Bag">
            <summary>
            A property bag with arbitrary additional properties that bear information about the product.
            </summary>
        </member>
        <member name="P:JetBrains.Application.IApplicationDescriptor.BuiltOn">
            <summary>
            Gets the date and time when the current product was built.
            </summary>
        </member>
        <member name="P:JetBrains.Application.IApplicationDescriptor.BuyURL">
            <summary>
            Gets the URL that takes to the “Buy Product” page.
            </summary>
        </member>
        <member name="P:JetBrains.Application.IApplicationDescriptor.DoCheckLicenseReuseOverNetwork">
            <summary>
            Determines whether the product should check for multiple instances running simultaneousely over the network.
            </summary>
        </member>
        <member name="P:JetBrains.Application.IApplicationDescriptor.EvaluationURL">
            <summary>
            Gets the URL that takes to the page that provides an eval license.
            </summary>
        </member>
        <member name="P:JetBrains.Application.IApplicationDescriptor.LicenseSupport">
            <summary>
            Gets the licensing implementation.
            </summary>
        </member>
        <member name="P:JetBrains.Application.IApplicationDescriptor.ProductAboutBoxImage">
            <summary>
            AboutBox for the product shows this image. Recommended minimum width: <c>200h</c>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.IApplicationDescriptor.ProductDialogHeaderImage">
            <summary>
            All license-related dialogs shows this image to ease disambiguation between products. Recommended size: <c>521x54</c>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.IApplicationDescriptor.ProductBirthDate">
            <summary>
            The birth date of the product. Used for the lower copyright year and so on.
            </summary>
        </member>
        <member name="P:JetBrains.Application.IApplicationDescriptor.ProductFullName">
            <summary>
            Gets the product full name, which is typically the <see cref="!:ProductName"/> plus the short version number.
            </summary>
        </member>
        <member name="P:JetBrains.Application.IApplicationDescriptor.ProductIcon">
            <summary>
            Gets the product icon.
            </summary>
        </member>
        <member name="P:JetBrains.Application.IApplicationDescriptor.ProductURL">
            <summary>
            Gets the URL that takes to the Product page.
            </summary>
        </member>
        <member name="P:JetBrains.Application.IApplicationDescriptor.UpdatesFilterUri">
            <summary>
            Gets the URI to request for the product updates, if available. //TODO:link to updates format info
            </summary>
        </member>
        <member name="F:JetBrains.Application.ApplicationDescriptor.myAllAssembliesXml">
            <summary>
            Caches the <see cref="T:JetBrains.Build.AllAssemblies.AllAssembliesXml"/> file, which should be loaded only once.
            </summary>
        </member>
        <member name="F:JetBrains.Application.ApplicationDescriptor.myBag">
            <summary>
            <see cref="P:JetBrains.Application.ApplicationDescriptor.Bag"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.ApplicationDescriptor.myBuiltOn">
            <summary>
            Lazy-init-caches the <see cref="P:JetBrains.Application.ApplicationDescriptor.BuiltOn"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.ApplicationDescriptor.myProductVersion">
            <summary>
            Lazy-init-caches the <see cref="P:JetBrains.Application.ApplicationDescriptor.ProductVersion"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ApplicationDescriptor.CreateInstance(JetBrains.Application.ApplicationDescriptorAttribute)">
            <summary>
            Creates an <see cref="T:JetBrains.Application.IApplicationDescriptor"/> instance based on the construction data that describes the class and ctor arguments.
            Throws on errors.
            </summary>
            <param name="attribute">The declaring attribute that has spawned this descriptor.</param>
        </member>
        <member name="M:JetBrains.Application.ApplicationDescriptor.CreateInstance(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Creates an <see cref="T:JetBrains.Application.IApplicationDescriptor"/> instance based on the attributes identifying the descriptor (looked up in <paramref name="assemblies"/>) and spawning it with universal configurations/editions.
            Such a descriptor is not suitable for runtime use, but suits for picking the static properties.
            The instance is NOT cached.
            Throws on errors.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ApplicationDescriptor.FindAttribute(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Looks up a <see cref="T:JetBrains.Application.ApplicationDescriptorAttribute"/> that instructs on how to spawn an <see cref="T:JetBrains.Application.IApplicationDescriptor"/> in the specified assemblies.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptor.AllAssembliesResourceAssembly">
            <summary>
            Gets the assembly that contains the <see cref="P:JetBrains.Application.ApplicationDescriptor.AllAssembliesXml"/> data.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptor.AllAssembliesResourceName">
            <summary>
            Gets the name of the resource in <see cref="P:JetBrains.Application.IApplicationDescriptor.AllAssembliesResourceAssembly"/> that contains the serialized <see cref="P:JetBrains.Application.IApplicationDescriptor.AllAssembliesXml"/> data.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptor.AllAssembliesXml">
            <summary>
            The “All Assemblies” XML file, deserialized.
            Contains the list of product assemblies to be loaded, as well as the configurations filters.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptor.Bag">
            <summary>
            A property bag with arbitrary additional properties that bear information about the product.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptor.BuiltOn">
            <summary>
            Gets the date and time when the current product was built.
            By default, returns the assembly file modification time of the configuration assembly.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptor.BuyURL">
            <summary>
            Gets the URL that takes to the “Buy Product” page.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptor.DoCheckLicenseReuseOverNetwork">
            <summary>
            Determines whether the product should check for multiple instances running simultaneousely over the network.
            The default behavior is <c>True</c> when we have licensing.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptor.EvaluationURL">
            <summary>
            Gets the URL that takes to the page that provides an eval license.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptor.LicenseSupport">
            <summary>
            Gets the licensing implementation.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptor.ProductAboutBoxImage">
            <summary>
            AboutBox for the product shows this image. Recommended minimum width: <c>200h</c>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptor.ProductDialogHeaderImage">
            <summary>
            All license-related dialogs shows this image to ease disambiguation between products. Recommended minimum width: <c>200h</c>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptor.ProductBirthDate">
            <summary>
            The birth date of the product. Used for the lower copyright year and so on.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptor.ProductFullName">
            <summary>
            Gets the product full name, which is typically the <see cref="!:IApplicationDescriptor.ProductName"/> plus the short version number.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptor.ProductIcon">
            <summary>
            Gets the product icon.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptor.ProductName">
            <summary>
            Gets the bare product name in the shortest form (no company, no version).
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptor.ProductVersion">
            <summary>
            Gets the product full version.
            By default, returns the assembly version of the configuration assembly.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptor.UpdatesFilterUri">
            <summary>
            Gets the URI to request for the product updates, if available. //TODO:link to updates format info
            </summary>
        </member>
        <member name="T:JetBrains.Application.PluginSupport.CollectPluginsInProductFolders">
            <summary>
            Looks for plugins in eligible folders: product installation location, roaming or local per-user or global data folders.
            </summary>
        </member>
        <member name="M:JetBrains.Application.PluginSupport.CollectPluginsInProductFolders.GetPluginsFolderMachine(JetBrains.Application.Env.Components.ProductSettingsLocation)">
            <summary>
            Directory with per-machine plugins.
            </summary>
        </member>
        <member name="M:JetBrains.Application.PluginSupport.CollectPluginsInProductFolders.GetPluginsFoldersInUserSettings(JetBrains.Application.Env.Components.AnyProductSettingsLocation,JetBrains.Application.IProductNameAndVersion)">
            <summary>
            Directory with per-user plugins (roaming, non-roaming, per-product-version, all-versions, etc).
            </summary>
            <param name="productSettingsLocation"></param>
        </member>
        <member name="M:JetBrains.Application.PluginSupport.CollectPluginsInProductFolders.GetAllPredefinedPluginsFolders(JetBrains.Application.Env.Components.ProductSettingsLocation)">
            <summary>
            All predefined directories with plugins.
            If you'd like to add your own, create the <see cref="T:JetBrains.Application.PluginSupport.Plugin"/> descriptor with <see cref="T:JetBrains.Application.PluginSupport.DiscoverPluginsInDirectory"/> and publish them to <see cref="T:JetBrains.Application.PluginSupport.PluginsDirectory"/> for loading.
            </summary>
        </member>
        <member name="P:JetBrains.Application.PluginSupport.CollectPluginsInProductFolders.IsEnabled">
            <summary>
            Override to suppress std folder plugins discovery.
            </summary>
        </member>
        <member name="T:JetBrains.Application.PluginSupport.CollectPluginsOnCommandLine">
            <summary>
            Loads plugins from what was given on the command line: a list of filenames, or directories, or assembly names, or mixed.
            </summary>
        </member>
        <member name="F:JetBrains.Application.PluginSupport.CollectPluginsOnCommandLine.PluginCommandLineSwitch">
            <summary>
            Name of the command line switch that instructs the product to load an arbitrary DLL file as a plugin.
            </summary>
        </member>
        <member name="P:JetBrains.Application.PluginSupport.CollectPluginsOnCommandLine.IsEnabled">
            <summary>
            Override to suppress command line plugins discovery.
            </summary>
        </member>
        <member name="T:JetBrains.Application.PluginSupport.DiscoverPluginsInDirectory">
            <summary>
            Helper for creating plugins out of files/folders.
            </summary>
        </member>
        <member name="M:JetBrains.Application.PluginSupport.DiscoverPluginsInDirectory.CreatePluginsFromDirectory(JetBrains.DataFlow.Lifetime,JetBrains.Util.FileSystemPath,JetBrains.Application.IApplicationDescriptor,System.Collections.Generic.ICollection{JetBrains.Application.PluginSupport.PluginsDirectory.Record},JetBrains.Metadata.Reader.API.MetadataLoader)">
            <summary>
            Searches the directory for plugin files and creates one or multiple plugins on them.
            </summary>
            <param name="lifetime">Lifetime for the created plugin.</param>
            <param name="pathDirectory">Directory to look in, recursively.</param>
            <param name="product">The originating product that has provided the plugin.</param>
            <param name="infoRecords">Plugin discovery log entries destination.</param>
            <param name="loader">Cached loader.</param>
            <returns>Plugins found.</returns>
        </member>
        <member name="M:JetBrains.Application.PluginSupport.DiscoverPluginsInDirectory.CreatePluginsFromFileSet(JetBrains.DataFlow.Lifetime,System.Collections.Generic.IEnumerable{JetBrains.Util.JetTuple{System.String,JetBrains.Util.FileSystemPath}},JetBrains.Application.IApplicationDescriptor,System.Collections.Generic.ICollection{JetBrains.Application.PluginSupport.PluginsDirectory.Record},JetBrains.Metadata.Reader.API.MetadataLoader)">
            <summary>
            Creates one or multiple plugins from the file set.
            </summary>
            <param name="lifetime">Lifetime for plugins.</param>
            <param name="pluginfiles">List of plugin files. The string member of the tuple is the optional plugin origin hint string (command line entry, directory name, etc).</param>
            <param name="product">The originating product that has provided the plugin.</param>
            <param name="infoRecords">Log entries target.</param>
            <param name="loader">Cached loader.</param>
        </member>
        <member name="M:JetBrains.Application.PluginSupport.DiscoverPluginsInDirectory.TryGetPluginTitleFromFile(System.String,JetBrains.Util.FileSystemPath,JetBrains.Metadata.Reader.API.MetadataLoader,System.Collections.Generic.ICollection{JetBrains.Application.PluginSupport.PluginsDirectory.Record})">
            <summary>
            Checks if the plugin assembly file has any plugin title attribute in it.
            </summary>
            <param name="sPluginOrigin">Optional plugin origin string (eg command line arg, directory name, etc) — for diagnostics.</param>
            <param name="path">Plugin assembly file path.</param>
            <param name="loader">Cached loader.</param>
            <param name="infoRecords">Log entries target.</param>
            <returns><c>Null</c> on errors, <c>""</c> if there's no title in the assembly, the title otherwise.</returns>
        </member>
        <member name="T:JetBrains.Application.PluginSupport.PluginLoader">
            <summary>
            As the plugins get discovered and published in the <see cref="T:JetBrains.Application.PluginSupport.PluginsDirectory"/>, loads them into the product.
            </summary>
        </member>
        <member name="M:JetBrains.Application.PluginSupport.PluginLoader.PluginsToCatalogs(JetBrains.DataFlow.Lifetime,JetBrains.DataFlow.ICollectionEvents{JetBrains.Application.PluginSupport.Plugin})">
            <summary>
            Maintains the list of assemblies to be loaded into the product.
            Each plugin consists of one or more assemblies, or zero if the plugin is not enabled, and some of the assemblies might intersect.
            </summary>
        </member>
        <member name="T:JetBrains.Application.PluginSupport.PluginPresentation">
            <summary>
            Display info on a <see cref="T:JetBrains.Application.PluginSupport.Plugin"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.PluginSupport.PluginsDirectory">
            <summary>
            Lists the discovered plugins, loaded or not, as well as any discovery errors or info.
            Plugins to be loaded are published here, by standard collectors like <see cref="T:JetBrains.Application.PluginSupport.CollectPluginsInProductFolders"/> and <see cref="T:JetBrains.Application.PluginSupport.CollectPluginsOnCommandLine"/>, or by you.
            </summary>
        </member>
        <member name="F:JetBrains.Application.PluginSupport.PluginsDirectory.Plugins">
            <summary>
            The list of discovered plugins. Some of them might be disabled and will not thus load until enabled.
            </summary>
        </member>
        <member name="F:JetBrains.Application.PluginSupport.PluginsDirectory.InfoRecords">
            <summary>
            Debug and information messages on loading the plugins, like files that were not detected as plugins, errors encountered, etc. Plugin-bound messages are stored with plugins themselves.
            </summary>
        </member>
        <member name="F:JetBrains.Application.PluginSupport.Plugin.IsEnabled">
            <summary>
            Gets or sets whether the plugin is enabled and can be loaded.
            The initial <c>Null</c> means plugin loader should use MRU enabled setting from previous run, any speicifc boolean value overrides MRU settings.
            </summary>
        </member>
        <member name="F:JetBrains.Application.PluginSupport.Plugin.Presentation">
            <summary>
            Display info on a <see cref="T:JetBrains.Application.PluginSupport.Plugin"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.PluginSupport.Plugin.#ctor(JetBrains.DataFlow.Lifetime,System.Collections.Generic.IEnumerable{JetBrains.Util.FileSystemPath},JetBrains.Application.IApplicationDescriptor,JetBrains.Application.PluginSupport.PluginPresentation,JetBrains.Metadata.Reader.API.MetadataLoader)">
            <summary>
            
            </summary>
            <param name="lifetime">Lifetime for plugin properties.</param>
            <param name="assemblyPaths">Paths to plugin assemblies.</param>
            <param name="product">The originating product that has provided the plugin.</param>
            <param name="presentation">Plugin presentation (title, version, etc), if known. Otherwise, will be collected from the assemblies.</param>
            <param name="metadataloader"><c>Null</c> if <paramref name="presentation"/> is supplied. Otherwise, optional cached metadata loader for reading assemblies.</param>
        </member>
        <member name="F:JetBrains.Application.PluginSupport.Plugin.RuntimeInfoRecords">
            <summary>
            Diagnostics or errors upon loading the plugin.
            These should include runtime errors on the discovered plugin only. Any plugin discovery info should go to the global <see cref="F:JetBrains.Application.PluginSupport.PluginsDirectory.InfoRecords"/> log.
            </summary>
        </member>
        <member name="F:JetBrains.Application.PluginSupport.Plugin.Product">
            <summary>
            The originating product that has provided the plugin.
            </summary>
        </member>
        <member name="F:JetBrains.Application.PluginSupport.PluginManager.myPluginIdToStateMap">
            <summary>
            Indicates the plugin's enabled state.
            Filled in by <see cref="!:ReadFromXml"/>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.PluginSupport.PluginManager.PluginsDirectoryMachine">
            <summary>
            Directory with per-machine plugins.
            </summary>
        </member>
        <member name="P:JetBrains.Application.PluginSupport.PluginManager.PluginsDirectoryUserLocal">
            <summary>
            Directory with per-user plugins that aren't roamed within a network.
            </summary>
        </member>
        <member name="P:JetBrains.Application.PluginSupport.PluginManager.PluginsDirectoryUserRoaming">
            <summary>
            Directory with per-user plugins that would roam within a network.
            </summary>
        </member>
        <member name="M:JetBrains.Application.src.Settings.SettingsStore.EnumMappingKeys_GetMappingKeysSerialized(System.String,JetBrains.Application.src.Settings.SettingsStorageOnMountPoints)">
            <summary>
            Helper for enumerating mapping keys of map-entry or mapped-key.
            Given the storage key of the mapping, parses out the serialized values of the mapping keys (queries for child keys, strips off '=', removes duplicates).
            </summary>
        </member>
        <member name="M:JetBrains.Application.src.Settings.SettingsStore.ResetValue(JetBrains.Application.DataContext.IDataContext,JetBrains.Application.src.Settings.SettingsScalarEntry,System.Collections.Generic.IDictionary{JetBrains.Application.src.Settings.SettingsKey,System.Object})">
            <summary>
            Resets the value in the most concrete store of the given context.
            The local value in the store will be removed. A value from one of the underlying stores, if any, will be used. If none, the default value will be used.
            </summary>
        </member>
        <member name="M:JetBrains.Application.src.Settings.SettingsStore.ResetValue``1(JetBrains.Application.DataContext.IDataContext,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Resets the value in the most concrete store of the given context.
            The local value in the store will be removed. A value from one of the underlying stores, if any, will be used. If none, the default value will be used.
            </summary>
        </member>
        <member name="M:JetBrains.Application.src.Settings.SettingsStore.AdviseChange(JetBrains.DataFlow.Lifetime,JetBrains.Application.src.Settings.SettingsScalarEntry,System.Action,System.Collections.Generic.IDictionary{JetBrains.Application.src.Settings.SettingsKey,System.Object})">
            <summary>
            Advises the setting change event.
            </summary>
            <param name="lifetime">Duration.</param>
            <param name="entry"></param>
            <param name="FOnChange"></param>
        </member>
        <member name="M:JetBrains.Application.src.Settings.SettingsStore.AdviseChange(JetBrains.DataFlow.Lifetime,JetBrains.Application.src.Settings.SettingsKey,System.Action)">
            <summary>
            Advises the settings key change event.
            Fires on any change in settings entries in any child key.
            </summary>
            <param name="lifetime">Duration.</param>
            <param name="key"></param>
            <param name="FOnChange"></param>
        </member>
        <member name="M:JetBrains.Application.src.Settings.SettingsStore.GetValueLive``1(JetBrains.DataFlow.Lifetime,System.Func{JetBrains.DataFlow.Lifetime,JetBrains.Application.DataContext.DataContexts,JetBrains.Application.DataContext.IDataContext},JetBrains.Application.src.Settings.SettingsScalarEntry)">
            <summary>
            Gets the live value of the setting in the given context.
            </summary>
            <typeparam name="TEntryMemberType">Value type.</typeparam>
            <param name="lifetime">Duration.</param>
            <param name="FDataContext">Identifies the context in which the retained-state value should be maintained. As the data context is lifetime-bound and expires on guard release, needs a function to produce the context at need. This function is guaranteed to be called on the primary thread under a guard.</param>
            <param name="entry">The entry whose value is to be monitored.</param>
            <returns>A property that changes live as the setting changes.</returns>
        </member>
        <member name="M:JetBrains.Application.src.Settings.SettingsStore.GetValueLive``2(JetBrains.DataFlow.Lifetime,System.Func{JetBrains.DataFlow.Lifetime,JetBrains.Application.DataContext.DataContexts,JetBrains.Application.DataContext.IDataContext},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the live value of the setting in the given context.
            </summary>
            <typeparam name="TEntryMemberType">Value type.</typeparam>
            <typeparam name="TKeyClass">Settings key class owning the settings entry.</typeparam>
            <param name="lifetime">Duration.</param>
            <param name="FDataContext">Identifies the context in which the retained-state value should be maintained. As the data context is lifetime-bound and expires on guard release, needs a function to produce the context at need. This function is guaranteed to be called on the primary thread under a guard.</param>
            <param name="lambdaexpression">The entry whose value is to be monitored.</param>
            <returns>A property that changes live as the setting changes.</returns>
        </member>
        <member name="M:JetBrains.Application.src.Settings.SettingsEntryToSettingsStorageSerialization.DeserializeValue(JetBrains.Application.src.Settings.SettingsEntrySerializerType,System.Object,System.Type)">
            <summary>
            <para>Deserializes a value in the settings storage back into the CLR type.</para>
            </summary>
            <returns>Note: serialization for taking part in a settings storage key has much more limitations than serializing for storing in the settings storage value, that's why there're two sets of serialization functions.</returns>
        </member>
        <member name="M:JetBrains.Application.src.Settings.SettingsEntryToSettingsStorageSerialization.SerializeValue(JetBrains.Application.src.Settings.SettingsEntrySerializerType,System.Object,System.Type)">
            <summary>
            <para>Serializes a runtime CLR object for storing the value in the settings storage.</para>
            </summary>
            <returns>Note: serialization for taking part in a settings storage key has much more limitations than serializing for storing in the settings storage value, that's why there're two sets of serialization functions.</returns>
        </member>
        <member name="M:JetBrains.Application.src.Settings.SettingsEntryToSettingsStorageSerialization.DeserializeKey(JetBrains.Application.src.Settings.SettingsEntrySerializerType,System.String,System.Type)">
            <summary>
            <para>Deserializes a value taken out of a settings storage key part back into the CLR type.</para>
            </summary>
            <returns>Note: serialization for taking part in a settings storage key has much more limitations than serializing for storing in the settings storage value, that's why there're two sets of serialization functions.</returns>
        </member>
        <member name="M:JetBrains.Application.src.Settings.SettingsEntryToSettingsStorageSerialization.SerializeKey(JetBrains.Application.src.Settings.SettingsEntrySerializerType,System.Object)">
            <summary>
            <para>Serializes a runtime CLR object for using as a local name part of a settings storage key.</para>
            </summary>
            <returns>Note: serialization for taking part in a settings storage key has much more limitations than serializing for storing in the settings storage value, that's why there're two sets of serialization functions.</returns>
        </member>
        <member name="F:JetBrains.Application.src.Settings.WellKnownContext.Global">
            <summary>
            <para>Forces looking for settings in the global context only, without any binding to specific context (such as solution, project, file, etc).</para>
            <para>Not recommended for reading settings: you should use more specific context wherever possible.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.src.Settings.WellKnownContext.FromFocus">
            <summary>
            <para>For reading settings. Uses the context of the currently active control to look up most relevant settings.</para>
            <para>Not recommended for writing settings: it might be unexpected by the user that changing the setting only affects a small area.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.src.Settings.WellKnownContext.FromMouse">
            <summary>
            <para>For reading settings. Uses the context of the mouse cursor location to look up most relevant settings.</para>
            <para>Not recommended for writing settings: it might be unexpected by the user that changing the setting only affects a small area.</para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:JetBrains.Application.src.Settings.SettingsSchema" -->
        <member name="F:JetBrains.Application.src.Settings.SettingsSchemaCollector.mySettingsKeyTypesFromCatalogs">
            <summary>
            Raw data from catalog: the type of the settings key class, plus some metainfo on it from the attribute.
            Updated sync on changes from catalogset (under main thread guard). Update invalidates the <see cref="F:JetBrains.Application.src.Settings.SettingsSchemaCollector.myMapTypeToSettingsKey"/>'s <see cref="P:JetBrains.Util.JetTuple`2.A"/> flag, and on next access to the schema the keys set is rebuilt (newcomer keys are intraspected for entries, etc).
            Locked with <see cref="F:JetBrains.Application.src.Settings.SettingsSchemaCollector.myLockSettingsKeyTypesFromCatalogs"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.src.Settings.SettingsSchemaCollector.myMapTypeToSettingsKey">
            <summary>
            The main cache of the schema. Call <see cref="M:JetBrains.Application.src.Settings.SettingsSchemaCollector.EnsureValidCache"/> before any use.
            CopyOnWrite, so requires no locking for read access. Modifications are quite rare, so we can afford COW here.
            The first item of the tuple says whether the cache is valid at all.
            Note: must be a reference type to ensure atomic replacement.
            </summary>
        </member>
        <member name="M:JetBrains.Application.src.Settings.SettingsSchemaCollector.Intraspection.EnsureValidCache_AddNew_KeysReadEntries_MetaType_Member(JetBrains.Application.src.Settings.SettingsKey,JetBrains.Metadata.Reader.API.IMetadataTypeMember)">
            <summary>
            Processes a single member in the settings entry class.
            </summary>
        </member>
        <member name="M:JetBrains.Application.src.Settings.SettingsSchemaCollector.Intraspection.EnsureValidCache_AddNew_KeysReadEntries_MetaType_Member_CreatePartType(JetBrains.Metadata.Reader.API.IMetadataType)">
            <summary>
            Detaches a metadata type from the metadata reader (by converting it to a <see cref="T:JetBrains.Application.Parts.PartCatalogueType"/>) so that it can be used after the reader is released, in a way which can be late-bound to the actual CLR <see cref="T:System.RuntimeType"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.src.Settings.SettingsSchemaCollector.TypeInWeakAssembly">
            <summary>
            Stores the full name of the type and the short name of the assembly (without the strong name, version, etc).
            Using this identity for types allows us to avoid problems with binding redirections not quite working in our metadata assembly APIs.
            </summary>
        </member>
        <member name="F:JetBrains.Application.src.Settings.SettingsKey.MappingKeyType">
            <summary>
            <para>For simple keys, this is <c>NULL</c>.</para>
            <para>For mapped keys (which take part as values in some key-to-value settings mapping), this is the type of the mapping key.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.src.Settings.SettingsKey.Description">
            <summary>
            Gets the string that explains the setting for the means of human-readable settings serialization or settings browser.
            </summary>
        </member>
        <member name="F:JetBrains.Application.src.Settings.SettingsKey.MappingKeySerializer">
            <summary>
            <para>For simple keys (<see cref="F:JetBrains.Application.src.Settings.SettingsKey.MappingKeyType"/> is <c>NULL</c>), this is N/A.</para>
            <para>For mapped keys (which take part as values in some key-to-value settings mapping), this is the kind of the serializer to use for the mapping key.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.src.Settings.SettingsEntry">
            <summary>
            Base class for entries of a settings key.
            </summary>
        </member>
        <member name="F:JetBrains.Application.src.Settings.SettingsEntry.LocalName">
            <summary>
            <para>Local name of the entry.</para>
            <para>Appended to the full name of the containing settings key to get the actual key in the settings storage key-value store.</para>
            <para>Complies with the identifier rules (<see cref="M:JetBrains.Application.src.Settings.SettingsStorageHelpers.AssertValidLocalName(System.String)"/>).</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.src.Settings.SettingsEntry.Description">
            <summary>
            Gets the string that explains the setting for the means of human-readable settings serialization or settings browser.
            </summary>
        </member>
        <member name="F:JetBrains.Application.src.Settings.SettingsEntry.EntryMemberType">
            <summary>
            Gets the type of the member (field, property, etc) representing the entry in the settings key class.
            </summary>
        </member>
        <member name="F:JetBrains.Application.src.Settings.SettingsScalarEntry.RawDefaultValue">
            <summary>
            Gets the default value to be used for this settings entry in case it's not set for this context.
            Note that the type of this default value is neither <see cref="F:JetBrains.Application.src.Settings.SettingsScalarEntry.SettingsStorageEntryType"/> nor the settings key class member type.
            </summary>
        </member>
        <member name="F:JetBrains.Application.src.Settings.SettingsScalarEntry.ValueSerializer">
            <summary>
            Gets how the value of the field/property should be serialized.
            </summary>
        </member>
        <member name="F:JetBrains.Application.src.Settings.SettingsScalarEntry.SettingsStorageEntryType">
            <summary>
            The type of this entry in the setting storage. This isn't necessarily the same as the settings key class member type.
            </summary>
        </member>
        <member name="M:JetBrains.Application.src.Settings.SettingsScalarEntry.GetDefaultValueInEntryMemberType">
            <summary>
            Converts the raw default value to the type as defined by the member carrying the <see cref="T:JetBrains.Application.src.Settings.SettingsEntryAttribute"/>.
            If possible, should not let exceptions out.
            </summary>
        </member>
        <member name="M:JetBrains.Application.src.Settings.SettingsScalarEntry.GetDefaultValue``2(JetBrains.Application.src.Settings.SettingsStore,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            <para>Gets the entry default value. Accessible even when the settings store is not available at the point (e.g. in a static context or when running in fallback mode without the Shell).</para>
            </summary>
            <typeparam name="TKeyClass"></typeparam>
            <typeparam name="TEntryMemberType"></typeparam>
            <param name="settings">The settings store, if available. If specified, will be for a quick look up of the entry default value. If <c>Null</c>, the default value will be parsed out of the entry itself, which might be slow.</param>
            <param name="lambdaexpression">Identifies the entry.</param>
            <returns></returns>
        </member>
        <member name="F:JetBrains.Application.src.Settings.SettingsMapEntry.KeySerializer">
            <summary>
            The way mapping keys should be serialized.
            Note that the final algorithm is a bit different from what's applied to serializing entry values because keys take part in the settings storage keys as local names, which implies strict limitations on their character set.
            </summary>
        </member>
        <member name="F:JetBrains.Application.src.Settings.SettingsMapEntry.ValueSerializer">
            <summary>
            The way mapping values should be serialized. Equivalent to <see cref="F:JetBrains.Application.src.Settings.SettingsScalarEntry.ValueSerializer"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.src.Settings.SettingsMapEntry.SettingsStorageMappingValueType">
            <summary>
            The type in settings storage with which mapping values are stored.
            </summary>
        </member>
        <member name="F:JetBrains.Application.src.Settings.SettingsMapEntry.SettingsStorageMappingKeyType">
            <summary>
            The type in settings storage with which mapping keys might be stored as settings storage values.
            Note that normally mapping keys are used as local names within the settings storage key path, where they must always be strings.
            However, for human readability, we're writing a copy of the key into the value, in which case it's serialized against the same rules as normal settings entry values. That's where this datum applies.
            </summary>
        </member>
        <member name="F:JetBrains.Application.src.Settings.SettingsMapEntry.MappingKeyClrType">
            <summary>
            <para>The CLR type of the keys to this mapping.</para>
            <para>This is the first generic actual parameter on <see cref="F:JetBrains.Application.src.Settings.SettingsEntry.EntryMemberType"/>.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.src.Settings.SettingsMapEntry.MappingValueClrType">
            <summary>
            <para>The CLR type of the values of this mapping.</para>
            <para>This is the second generic actual parameter on <see cref="F:JetBrains.Application.src.Settings.SettingsEntry.EntryMemberType"/>.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.src.Settings.SettingsStorageMountPoint">
            <summary>
            Default implementation for a mountpoint.
            </summary>
        </member>
        <member name="M:JetBrains.Application.src.Settings.SettingsStorageHelpers.AssertValidLocalName(System.String)">
            <summary>
            The storage key string (full name) is a slash-separated list of local names. Each local name must comply with the identified rules (Ll,Lu,Lt,Lo,Lm,Nd,Pc).
            </summary>
        </member>
        <member name="M:JetBrains.Application.src.Settings.SettingsStorageHelpers.ValueEquals(System.Object,System.Object)">
            <summary>
            <para>Value “equals” to take possible byte arrays into account.</para>
            <para>Possible raw storage value types include a few primitive POD types, strings, and byte arrays. The latter need some special Equals handling.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.src.Settings.SettingsStorageHelpers.ResolveAutoSerializer(JetBrains.Application.src.Settings.SettingsEntrySerializerType,System.String)">
            <summary>
            If the serializer choice (<paramref name="serializer"/>) is <see cref="F:JetBrains.Application.src.Settings.SettingsEntrySerializerType.Auto"/>, picks a specific serializer based on the actual value type (<paramref name="sTypeFullName"/>). Otherwise, returns the serializer choice AS IS.
            </summary>
        </member>
        <member name="M:JetBrains.Application.src.Settings.SettingsStorageHelpers.GetSettingsStorageSerializedType(System.String,JetBrains.Application.src.Settings.SettingsEntrySerializerType)">
            <summary>
            <para>Gets the type by which this entry would be represented in the settings key-value storage.</para>
            <para>The settings store only supports primitive types; complex ones are serialized, and their storage type depends on the particular serializer used.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.src.Settings.SettingsStorageHelpers.CoerceEntryDefaultValueToRuntimeType(System.Object,System.Type)">
            <summary>
            <para>When a value has to be specified on an attribute, its type is limited to primitive types. Also, the primitive types might not match if an integer is specified where a floating-point type is expected.</para>
            <para>Conversion logic: basically, it's the <see cref="M:JetBrains.Extension.TypeEx.CoercePrimitiveValueToType(System.Object,System.Type)"/>, but with the addition that the default value for a string is <c>""</c> instead of <c>NULL</c> (because generally settings entries only store non-<c>NULL</c> values).</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.src.Settings.SettingsStorageHelpers.LogicalSchema.KeyPathSeparator">
            <summary>
            Separates local names of settings keys and entries in the path making the settings storage key.
            </summary>
        </member>
        <member name="F:JetBrains.Application.src.Settings.SettingsStorageHelpers.LogicalSchema.AttributePrefix">
            <summary>
            The last component of the settings storage key pointing to actual data usually has this prefix, to tell it apart from keys/entries coming from user logical schema.
            </summary>
        </member>
        <member name="F:JetBrains.Application.src.Settings.SettingsStorageHelpers.LogicalSchema.ValueInLocalNamePrefix">
            <summary>
            When one of the key path components are formed from a user-supplied value (for example, map-keys of map entries), denotes such keys for telling them apart from from keys/entries coming from user logical schema. 
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.ISettingsStorage">
            <summary>
            Interface to the key-value settings storage (representing a physical storage on disk or a file from the Web).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.ISettingsStorage.Get(System.String)">
            <summary>
            Tries to get the value of the key. 
            </summary>
            <param name="key">Key.</param>
            <returns>Either a value of one of the predefined types (<see cref="T:JetBrains.Application.src.Settings.SettingsStorageHelpers.StorageValueTypeId"/>), or <c>Null</c> if the value for this key is not set.</returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.ISettingsStorage.Set(System.String,System.Object)">
            <summary>
            Sets or resets the value of the key.
            </summary>
            <param name="key">Key.</param>
            <param name="value">Either a value of one of the predefined types (<see cref="T:JetBrains.Application.src.Settings.SettingsStorageHelpers.StorageValueTypeId"/>) to assign, or <c>Null</c> to reset the value of the given key.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.ISettingsStorage.EnumKeys(System.String)">
            <summary>
            <para>Gets the list of keys to the entries in this storage starting with the given key prefix.</para>
            <para>As the storage might be modified concurrently, returns a committed list instead of a live enumeration.</para>
            </summary>
            <param name="keyPrefix">Keys starting with this prefix will be returned.</param>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.ISettingsStorage.Name">
            <summary>
            Gets the user-friendly storage name. This is used for telling storages apart in the mount points list
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.ISettingsStorage.Changed">
            <summary>
            Fires when some key in the storage changes its value.
            This happens both when setting a new value thru <see cref="M:JetBrains.Application.Settings.Storage.ISettingsStorage.Set(System.String,System.Object)"/> and when synchronizing to external changes to the disk storage.
            </summary>
        </member>
        <member name="T:JetBrains.Application.src.Settings.Proivder`1">
            <summary>
            Default implementation of the <see cref="T:JetBrains.Application.src.Settings.IProvider`1"/> interface.
            </summary>
        </member>
        <member name="M:JetBrains.Application.src.Settings.SettingsStorageOnMountPoints.GetWithStorage(System.String)">
            <summary>
            Gets the value along with the exact storage in which the value was found.
            If the value is not found in either storage, the whole return value is <c>Null</c>, not only the tuple components.
            </summary>
        </member>
        <member name="T:JetBrains.Application.src.Settings.GlobalAllProductsStorage">
            <summary>
            User settings: the storage serving the Global context, for all the products.
            </summary>
        </member>
        <member name="T:JetBrains.Application.src.Settings.SettingsStorageMountPointPriorityClasses">
            <summary>
            Standard priority classes for well-known settings storages.
            </summary>
        </member>
        <member name="F:JetBrains.Application.src.Settings.SettingsStorageMountPointPriorityClasses.AmbientStorage">
            <summary>
            Storages providing default settings.
            For example, built-in live templates, SSR patterns mounted by plugins, etc.
            </summary>
        </member>
        <member name="F:JetBrains.Application.src.Settings.SettingsStorageMountPointPriorityClasses.GlobalAllProductStorage">
            <summary>
            One more global storage for per-user settings, for all products. Settings could be promoted here from per-product global user storage.
            </summary>
        </member>
        <member name="F:JetBrains.Application.src.Settings.SettingsStorageMountPointPriorityClasses.GlobalPerProductStorage">
            <summary>
            The default global storage for per-user settings. Specific to the product.
            </summary>
        </member>
        <member name="F:JetBrains.Application.src.Settings.SettingsStorageMountPointPriorityClasses.HierarchyStorage">
            <summary>
            Base priority for nested storages within the hierarchy (for R#, these are solution/project storages).
            If you need more than one priority level per hierarchy, use different mantissa with the same exponent (i. e. multiply by a positive number below ten).
            </summary>
        </member>
        <member name="T:JetBrains.Application.src.Settings.GlobalPerProductStorage">
            <summary>
            User settings: the storage serving the Global context, specific to the current product.
            </summary>
        </member>
        <member name="T:JetBrains.Application.src.Settings.SettingsMapEntryAttribute">
            <summary>
            Use this attribute to mark those fields and properties of a class that should be settings store entry-to-entry maps.
            </summary>
        </member>
        <member name="P:JetBrains.Application.src.Settings.SettingsEntryAttributeBase.EntryNameOverride">
            <summary>
            <para><c>Null</c> to use the field/property name as the settings entry local name.</para>
            <para>Non-empty to override the local name with a custom string (must comply to key/entry local name rules).</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.src.Settings.SettingsEntryAttributeBase.Description">
            <summary>
            Gets the string that explains the setting for the means of human-readable settings serialization or settings browser.
            </summary>
        </member>
        <member name="P:JetBrains.Application.src.Settings.SettingsEntryAttributeBase.ValueSerializer">
            <summary>
            Gets or sets how the value of the field/property should be serialized.
            </summary>
        </member>
        <member name="F:JetBrains.Application.src.Settings.SettingsEntryAttributeBase.ReflectionHelpers.myMapPrimitiveTypeNamesToStorageTypesWithCoersion">
            <summary>
            By a name of a primitive mscorlib type, gives out the storage type that will be holding this type (possibly, after coersion).
            </summary>
        </member>
        <member name="M:JetBrains.Application.src.Settings.SettingsEntryAttributeBase.ReflectionHelpers.GuessValueSerializer(JetBrains.Application.Parts.PartCatalogueAttribute,JetBrains.Metadata.Reader.API.IMetadataType)">
            <summary>
            If the value serializer type is <see cref="F:JetBrains.Application.src.Settings.SettingsEntrySerializerType.Auto"/>, guesses the actual type by the member type.
            </summary>
        </member>
        <member name="P:JetBrains.Application.src.Settings.SettingsMapEntryAttribute.KeySerializer">
            <summary>
            Gets or sets how map keys should be serialized.
            </summary>
        </member>
        <member name="M:JetBrains.Application.src.Settings.SettingsMapEntryAttribute.ReflectionHelpers.GuessKeySerializer(JetBrains.Application.Parts.PartCatalogueAttribute,JetBrains.Metadata.Reader.API.IMetadataType)">
            <summary>
            Reads the key serializer, also resolves <see cref="F:JetBrains.Application.src.Settings.SettingsEntrySerializerType.Auto"/> into a specific type.
            </summary>
        </member>
        <member name="T:JetBrains.Application.src.Settings.SettingsEntryAttribute">
            <summary>
            Use this attribute to mark those fields and properties of a class that should be settings store entries.
            </summary>
        </member>
        <member name="P:JetBrains.Application.src.Settings.SettingsEntryAttribute.DefaultValue">
            <summary>
            <para>The default value for this entry. You do not need to initialize the field itself in the inline initializer or the constructor. Instead, you MUST set this to the desired initial value, for serialization to work consistently.</para>
            <para>The possible values are:</para>
            <para>• <c>Null</c>, which means the default value for the <see cref="T:System.Type"/> of the field (<c>Null</c> for reference types and zero memory for value types).</para>
            <para>• Some value of the same type as the <see cref="T:System.Type"/> of the field, or a value type convertible to it.</para>
            <para>• An invariant string representation of a value that cannot be presented inline in the attribute ctor. value of the same type as the <see cref="T:System.Type"/> of the field, or a value type convertible to it. The appropriate <see cref="T:System.ComponentModel.TypeConverter"/> is used for reading the value.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.src.Settings.SettingsEntryAttribute.ReflectionHelpers.GetDefaultValueFromRuntimeType``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            <para>Uses Reflection to get the entry default value from the loaded runtime type. Avoid using wherever possible because it needs a loaded assembly. For use in static context where settings store is not available and the settings key/entry class is about to be used anyway. NOT for use in any of the Settings Store infrastructure code.</para>
            </summary>
            <param name="lambdaexpression">Identifies the entry.</param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Application.src.Settings.XmlFileSettingsStorage">
            <summary>
            Implements a storage with a disk XML file backend.
            </summary>
        </member>
        <member name="M:JetBrains.Application.src.Settings.XmlFileSettingsStorage.#ctor(JetBrains.DataFlow.Lifetime,System.String,JetBrains.DataFlow.IProperty{JetBrains.Util.FileSystemPath},JetBrains.Threading.IThreading,JetBrains.Application.FileSystemTracker.FileSystemTrackerEvents)">
            <summary>
            
            </summary>
            <param name="lifetime"></param>
            <param name="name"></param>
            <param name="path">
            <para>The path to the file, or <c>Null</c> if the file location is not currently available.</para>
            <para>The value is used for reading (<c>Null</c> will cause a clean storage) or writing (<c>Null</c> will skip writing and keep all changes in memory).</para>
            <para>Also the path is watched for changes to reload new content when the file is modified (e.g. from SCC or another instance).</para>
            <para>When you point the path at the new location, it gets overwritten with the current in-memory changes.</para>
            </param>
            <param name="threading"></param>
            <param name="filetracker"></param>
        </member>
        <member name="M:JetBrains.Application.src.Settings.XmlFileSettingsStorage.ReloadFromDiskRequested">
            <summary>
            Requests an async reload of settings from disk in some near future.
            </summary>
        </member>
        <member name="M:JetBrains.Application.src.Settings.XmlFileSettingsStorage.ReloadFromDiskNow">
            <summary>
            Reloads from disk synchronously.
            </summary>
        </member>
        <member name="M:JetBrains.Application.src.Settings.XmlFileSettingsStorage.SaveToDiskRequested">
            <summary>
            Requests an async saving of settings to disk in some near future.
            Note that the settings are saved even if there're no in-memory changes (there's no need to request a save with in-memory changes because it will occur automatically).
            </summary>
        </member>
        <member name="M:JetBrains.Application.src.Settings.XmlFileSettingsStorage.SaveToDiskNow">
            <summary>
            Saves to disk synchronously.
            </summary>
        </member>
        <member name="F:JetBrains.Application.src.Settings.XmlFileSettingsStorage.SettingsStorageFileExtension">
            <summary>
            The default extensions for Settings Storage files in XML format.
            </summary>
        </member>
        <member name="P:JetBrains.Application.src.Settings.XmlFileSettingsStorage.DeleteFileWhenNoContent">
            <summary>
            Whether the file should be deleted if there're no settings in it (and no unrecognized content we're obliged to keep).
            </summary>
        </member>
        <member name="F:JetBrains.Application.src.Settings.SettingsEntrySerializerType.Auto">
            <summary>
            Chooses the best serializer automatically based on the member type of the member annotated with the attribute.
            For primitive types, it's <see cref="F:JetBrains.Application.src.Settings.SettingsEntrySerializerType.Primitive"/>. In most other cases, <see cref="F:JetBrains.Application.src.Settings.SettingsEntrySerializerType.TypeConverterToInvariantString"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.src.Settings.SettingsEntrySerializerType.Primitive">
            <summary>
            The value is serialized AS IS, as a primitive type. Is not applicable to non-primitive types (those not directly supported by the settings store types).
            </summary>
        </member>
        <member name="F:JetBrains.Application.src.Settings.SettingsEntrySerializerType.TypeConverterToInvariantString">
            <summary>
            The <see cref="T:System.ComponentModel.TypeDescriptor"/> is queried for <see cref="T:System.ComponentModel.TypeConverter"/> and it is used to convert between the typed value and an invariant string.
            </summary>
        </member>
        <member name="F:JetBrains.Application.src.Settings.SettingsEntrySerializerType.XmlSerializer">
            <summary>
            The object is serialized into string and back with <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.src.Settings.SettingsEntrySerializerType.XamlSerializer">
            <summary>
            The object is serialized into string with <see cref="T:System.Windows.Markup.XamlWriter"/> and back with <see cref="T:System.Windows.Markup.XamlReader"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.src.Settings.SettingsEntrySerializerType.BinaryFormatter">
            <summary>
            The object is serialized into BLOB and back with <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.src.Settings.SettingsKeyAttributeBase.#ctor(System.Type,System.String)">
            <param name="Parent">
            <para>The parent settings key. </para>
            <para><see cref="T:System.Reflection.Missing"/> denotes top-level settings keys. You should only have a few in the product. Consider mounting to an existing category instead of creating an new one.</para>
            </param>
            <param name="Description">The string that explains the setting for the means of human-readable settings serialization or settings browser.</param>
        </member>
        <member name="P:JetBrains.Application.src.Settings.SettingsKeyAttributeBase.Description">
            <summary>
            Gets the string that explains the setting for the means of human-readable settings serialization or settings browser.
            </summary>
        </member>
        <member name="P:JetBrains.Application.src.Settings.SettingsKeyAttributeBase.Parent">
            <summary>
            <para>Gets the parent settings key. </para>
            <para><see cref="T:System.Reflection.Missing"/> denotes top-level settings keys. You should only have a few in the product. Consider mounting to an existing category instead of creating an new one.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.src.Settings.SettingsKeyAttributeBase.KeyNameOverride">
            <summary>
            By default, the class name is used as the settings key name (but for the "Settings" suffix).
            If this property is non-empty, its value will be used as the key name instead.
            </summary>
        </member>
        <member name="M:JetBrains.Application.src.Settings.SettingsKeyAttributeBase.ReflectionHelpers.GetParentTypeIfNotRoot(JetBrains.Application.Parts.PartCatalogueAttribute)">
            <summary>
            Reads the parent specification out of the attribute, returns its type info (unless it's pointing to the special root type).
            </summary>
        </member>
        <member name="T:JetBrains.Application.src.Settings.SettingsKeyAttribute">
            <summary>
            Marks a class that will be used as a frontend to settings.
            Represents a settings key.
            </summary>
        </member>
        <member name="M:JetBrains.Application.src.Settings.SettingsKeyAttribute.#ctor(System.Type,System.String)">
            <param name="Parent">
            <para>The parent settings key. </para>
            <para><see cref="T:System.Reflection.Missing"/> denotes top-level settings keys. You should only have a few in the product. Consider mounting to an existing category instead of creating an new one.</para>
            </param>
            <param name="Description">The string that explains the setting for the means of human-readable settings serialization or settings browser.</param>
        </member>
        <member name="T:JetBrains.Application.src.Settings.SettingsMappedKeyAttribute">
            <summary>
            Marks a class that will be used as a frontend to settings.
            Represents a settings key which is the value part of some key-value mapping.
            </summary>
        </member>
        <member name="M:JetBrains.Application.src.Settings.SettingsMappedKeyAttribute.#ctor(System.Type,System.String,System.Type)">
            <param name="Parent">
            <para>The parent settings key. </para>
            <para><see cref="T:System.Reflection.Missing"/> denotes top-level settings keys. You should only have a few in the product. Consider mounting to an existing category instead of creating an new one.</para>
            </param>
            <param name="Description">The string that explains the setting for the means of human-readable settings serialization or settings browser.</param>
            <param name="MappingKeyType">Type of the key of the mapping (the composite value type is defined by the class annotated with this attribute).</param>
        </member>
        <member name="P:JetBrains.Application.src.Settings.SettingsMappedKeyAttribute.MappingKeyType">
            <summary>
            Gets the type of the key of the mapping (the composite value type is defined by the class annotated with this attribute).
            </summary>
        </member>
        <member name="P:JetBrains.Application.src.Settings.SettingsMappedKeyAttribute.MappingKeySerializer">
            <summary>
            Gets or sets how maping keys should be serialized.
            </summary>
        </member>
        <member name="M:JetBrains.Application.src.Settings.SettingsMappedKeyAttribute.ReflectionHelpers.GuessKeySerializer(JetBrains.Application.Parts.PartCatalogueAttribute,JetBrains.Application.Parts.PartCatalogueType)">
            <summary>
            Reads the key serializer, also resolves <see cref="F:JetBrains.Application.src.Settings.SettingsEntrySerializerType.Auto"/> into a specific type.
            </summary>
        </member>
        <member name="T:JetBrains.Application.src.Settings.EnvironmentSettings">
            <summary>
            <para>Root key for Environment settings.</para>
            <para>Refer to it in your settings classes that should be directly parented under Environment — but preferrably choose any of the existing nodes under Environment.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.ISettingsStorageEntriesSerialization">
            <summary>
            The basic serialization interface for the default storage implementation.
            Works right on in-memory representation of the storage entries.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.ISettingsStorageSerializationCommon.GetInMemoryChangesDiffCopy">
            <summary>
            Gets the list of entries changed in-memory (<c>Null</c> value means it should be reset).
            Used mostly for diagnostics needs.
            Creates a copy of the dictionary (so use sparingly), because the actual dictionary access is lock-protected.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.ISettingsStorageSerializationCommon.Name">
            <summary>
            Gets the user-friendly storage name. This is used for telling storages apart in the mount points list
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.ISettingsStorageSerializationCommon.IsDirty">
            <summary>
            Gets whether the storage has any dirty (in-memory) changes pending for save. Free-threaded.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.ISettingsStorageSerializationCommon.IsEmpty">
            <summary>
            Gets if there're no entries in the storage. This includes both entries-from-stream and dirty entries.
            This allows for optimized behavior if we've got nothing to save.
            Yields <c>Null</c> when it's a bit too expensive to calculate the result.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.ISettingsStorageEntriesSerialization.Load(JetBrains.Application.Settings.Storage.SettingsStorageBase.LoadFlag,System.Func{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            Loads entries into the storage.
            If the storage has any in-memory changes, they remain intact.
            </summary>
            <param name="flag"></param>
            <param name="FReadEntries">Storage calls this function when it needs to read the entries. This makes sure it sets any applicable locks around the read operation.</param>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.ISettingsStorageEntriesSerialization.Save(System.Func{System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean})">
            <summary>
            Saves the entries from the storage.
            </summary>
            <param name="FSave">Storage calls this function on the exact entries to be saved. The return value indicates whether the save succeeds (if the storage can assume in-memory diff applied).</param>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.SettingsStorageXmlStreamSerialization">
            <summary>
            Operates over <see cref="T:JetBrains.Application.Settings.Storage.ISettingsStorageEntriesSerialization"/> (whose serialization works on entries' in-memory representation). Uses <see cref="T:JetBrains.Application.Settings.Storage.EntriesReader"/> and <see cref="T:JetBrains.Application.Settings.Storage.EntriesWriter"/> to convert it into XML serialization over the given stream.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.SettingsStoreChangeArgs">
            <summary>
            Args for <see cref="P:JetBrains.Application.Settings.Storage.ISettingsStorage.Changed"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.SettingsStoreChangeArgs.Keys">
            <summary>
            <para>The list of the keys which were assigned to a new value or whose value was reset.</para>
            <para>Empty list means the sending party cannot determine the set and you should assume that all the key values might have changed.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.EntriesReader">
            <summary>
            State machine for reading settings entries from a possibly-broken XML stream.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.EntriesReader.myXmlReader">
            <summary>
            The XML reader actually used for reading. Non-NULL while we're operational.
            Could be either directly the reader passed in, or the wrapping positional XML reader, if we're recording positions.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.EntriesReader.myLocationAwareXmlReader">
            <summary>
            Wrapping XML reader to know the positions, if we're recording positions. Otherwise, NULL. Also indicates whether we're recording positions.
            When non-NULL, points to the same object as <see cref="F:JetBrains.Application.Settings.Storage.EntriesReader.myXmlReader"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.EntriesReader.Entries">
            <summary>
            What we've read from the stream up to the current moment.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.EntriesReader.Errors">
            <summary>
            Errors encountered so far. Never fired (and reader exceptions are also intercepted), stored in this list.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.EntriesReader.EntryPositions">
            <summary>
            Records positions of the entries encountered as pairs of entry key and position.
            Note that entry keys are not unique here because each entry might be encountered multiple times in the stream (which is not valid, but possible). The count might be larger than <see cref="F:JetBrains.Application.Settings.Storage.EntriesReader.Entries"/> for that reason.
            Note that this list might contain positions of invalid entries (without a key, with an invalid value, and so on).
            Empty unless <see cref="F:JetBrains.Application.Settings.Storage.EntriesReader.EntryPositionsFlag.Record"/> in ctor.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.EntriesReader.ResourceDictionaryPositions">
            <summary>
            Records positions of <see cref="T:System.Windows.ResourceDictionary"/> elements (normally the root element holding all of the entries) encountered in the stream.
            A valid stream should have exactly one, at the root, parenting all of the entries.
            Empty unless <see cref="F:JetBrains.Application.Settings.Storage.EntriesReader.EntryPositionsFlag.Record"/> in ctor.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.EntriesReader.Run(System.Xml.XmlReader,JetBrains.Application.Settings.Storage.EntriesReader.EntryPositionsFlag)">
            <summary>
            Runs the reader. Fluent.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.EntriesReader.Step_ReadEntryElementStart_GetEntryKey">
            <summary>
            The key is in the x:Key attribute on the entry element.
            As our entry elements are only convertible from a string value (cannot be assigned thru a proeprty in either attribute or element syntax), the value must be given as text content of the element (this cannot be mixed content, XAML parser fails on that "Cannot have property elements on objects created via TypeConverter"). Thus there's no place to give x:Key in element syntax, and it can be only in the attribute.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.EntriesReader.Step_Any_GetEntryTypeId">
            <summary>
            When reader is at an element (opening tag of an element, or an empty element), checks the element fq name to see if it's a settings entry element. Throws if it's not.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.EntriesReader.Step_Any_IsResourceDictionaryElement">
            <summary>
            Gets if the current element is a resource dictionary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.EntriesReader.Step_Any_TryGetEntryTypeId">
            <summary>
            When reader is at an element (opening tag of an element, or an empty element), checks the element fq name to see if it's a settings entry element. <c>Null</c> if it's not.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.EntriesReader.ReadEntryValueData.XmlSpace">
            <summary>
            XML Space (preserve/default) will be applied to value content after reading it thru, when we'll be positioned on the next element already, must use the actual entry element's value.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.EntriesReader.State.Initial">
            <summary>
            Before stepping.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.EntriesReader.State.GenericRead">
            <summary>
            Default reading state. Waiting for an entry element.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.EntriesReader.State.UsedUp">
            <summary>
            When done.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.EntriesReader.State.ReadEntryElementStart">
            <summary>
            We've encountered an element which is likely an entry, called when the reader is positioned on this element to acknowledge entry type/key and start reading its value.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.EntriesReader.State.ReadEntryValueBegin">
            <summary>
            After acknowledging the entry element, initializes into value reading. Still positioned on the entry element.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.EntriesReader.State.ReadEntryValueEndClear">
            <summary>
            We're thru with reading entry value content nodes, store the entry value and proceed to generic-read.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.EntriesReader.State.ReadEntryValueNodes">
            <summary>
            The reader is positioned inside the value content, we're reading the nodes and collecting the content.
            Looking for either end tag of content element (checking by reader depth) or for any other entries which might erronousely be placed inside (eg when an element closing tag is lost during merge).
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.EntriesReader.EntryPositionsFlag">
            <summary>
            Whether to record locations of the entries when scanning through the XML document.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.EntriesWriter">
            <summary>
            Utility for writing settings entry into an XML stream based on the existing possibly-broken XML stream with entries and various other XML data.
            The writer must persist the existing non-settings element and order of the already-existing entries.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.EntriesWriter.Run(System.Collections.Generic.Dictionary{System.String,System.Object},System.Action{System.Action{System.Xml.XmlReader}},System.Action{System.Action{System.Xml.XmlWriter}})">
            <summary>
            Runs the task.
            </summary>
            <param name="entries">The entries to be written.</param>
            <param name="FCreateReader">
            <para>Opens the reader to the previously existing XML stream which should be updated with the new entries.</para>
            <para>Might be called up to two times, first for choosing the writing positions for the new entries, then for streaming into the output writer.</para>
            <para>Yield <c>NULL</c> if there were no pre-existing stream (e.g. writing for the first time).</para>
            <para>Note: <paramref name="FCreateReader"/> and <paramref name="FCreateWriter"/> cannot be on the same stream (file, etc) because they might be created at the same time to pipe the content thru.</para>
            </param>
            <param name="FCreateWriter">
            <para>Opens the writer to emit the new XML stream (which includes the new entries and any other nodes from the previously existing stream, if there were any).</para>
            <para>If this function is never called during the run, then the output is empty and you might delete the storage altogether.</para>
            <para>Note: <paramref name="FCreateReader"/> and <paramref name="FCreateWriter"/> cannot be on the same stream (file, etc) because they might be created at the same time to pipe the content thru.</para>
            </param>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.EntriesWriter.XX_WriteThruSingleNode(System.Xml.XmlWriter,System.Xml.XmlReader)">
            <summary>
            For simple node types, writes them thru.
            Based on <see cref="M:System.Xml.XmlWriter.WriteNode(System.Xml.XmlReader,System.Boolean)"/>, but only handles single-node types and never calls Read on the reader.
            The abovementioned std method is only good for elements. When called on a text node, also kills the next element ('cause it awats for some kind of EndElement to stop).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.EntriesWriter.XX_WriteThroughElementOpeningTag(JetBrains.Application.Settings.Storage.LocationAwareXmlReader,System.Xml.XmlWriter)">
            <summary>
            Pipes the opening tag of an element thru.
            </summary>
            <param name="xmlreader"></param>
            <param name="xmlwriter"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.EntriesWriter.XX_WriteElementAndChildrenAsIs(System.Xml.XmlReader,System.Xml.XmlWriter)">
            <summary>
            On an element that has to be kept in the output, and that has no child entries, pipes its content AS IS into output.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.EntriesWriter.XX_IsElementWithEntriesInside(System.Collections.Generic.List{JetBrains.Application.Settings.Storage.EntriesWriter.PositionAction},System.Int32,JetBrains.Application.Settings.Storage.LocationAwareXmlReader.NodePosition)">
            <summary>
            Looks up quickly if there're any entry positions child to the element identified by the position.
            </summary>
            <param name="elementactions">Sorted actions list.</param>
            <param name="nIndexInElementActions">Index of the current position in the sorted actions list. Must be AFTER a <see cref="M:JetBrains.Application.Settings.Storage.EntriesWriter.XX_TryGetEntryElementAction(System.Collections.Generic.List{JetBrains.Application.Settings.Storage.EntriesWriter.PositionAction},JetBrains.Application.Settings.Storage.LocationAwareXmlReader.NodePosition,System.Int32@,JetBrains.Application.Settings.Storage.EntriesWriter.EntryElementAction@,System.String@)"/> lookup for the current position.</param>
            <param name="position">Position of the element we're checking for child entries.</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.EntriesWriter.XX_IsElementEntrysFirstChild(System.Collections.Generic.List{JetBrains.Application.Settings.Storage.EntriesWriter.PositionAction},System.Int32,JetBrains.Application.Settings.Storage.LocationAwareXmlReader.NodePosition)">
            <summary>
            Looks up quickly if this element is the first child of an entry.
            Removing the first entry child element “reveals” the content nodes of the parent that were previously blocked by this element.
            </summary>
            <param name="elementactions">Sorted actions list.</param>
            <param name="nIndexInElementActions">Index of the current position in the sorted actions list. Must be AFTER a <see cref="M:JetBrains.Application.Settings.Storage.EntriesWriter.XX_TryGetEntryElementAction(System.Collections.Generic.List{JetBrains.Application.Settings.Storage.EntriesWriter.PositionAction},JetBrains.Application.Settings.Storage.LocationAwareXmlReader.NodePosition,System.Int32@,JetBrains.Application.Settings.Storage.EntriesWriter.EntryElementAction@,System.String@)"/> lookup for the current position.</param>
            <param name="position">Position of the element we're checking for being the first child.</param>
            <remarks>How: look into the previous position, if it's our parent =&gt; we're the first child.</remarks>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.EntriesWriter.XX_TryGetEntryElementAction(System.Collections.Generic.List{JetBrains.Application.Settings.Storage.EntriesWriter.PositionAction},JetBrains.Application.Settings.Storage.LocationAwareXmlReader.NodePosition,System.Int32@,JetBrains.Application.Settings.Storage.EntriesWriter.EntryElementAction@,System.String@)">
            <summary>
            Looks up the next sequential item in the sorted list.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.EntriesWriter.XX_GetValueAndTypeId(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},JetBrains.Application.src.Settings.SettingsStorageHelpers.StorageValueTypeId@,System.Object@)">
            <summary>
            Safely gets the value out of the map, checks that it's of a valid type, and gets its Type ID.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.EntriesWriter.Errors">
            <summary>
            Errors encountered so far. Never fired (and reader exceptions are also intercepted), stored in this list.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.EntriesWriter.ReaderErrors">
            <summary>
            Errors encountered by the reader when loading the old version of the stream.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.EntriesWriter.AllErrors">
            <summary>
            <see cref="F:JetBrains.Application.Settings.Storage.EntriesWriter.Errors"/> + <see cref="F:JetBrains.Application.Settings.Storage.EntriesWriter.ReaderErrors"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.EntriesWriter.RunResult">
            <summary>
            What's been done to the output stream, and how you should treat it.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.EntriesWriter.RunResult.NewSignificantContent">
            <summary>
            The XML Writer creator was called, the new significant content (different from the previous one) has been written. Should be persisted to media.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.EntriesWriter.RunResult.NoChange">
            <summary>
            There're no changes to do to the content, the old one could be used. If a file, just don't touch.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.EntriesWriter.RunResult.NoSignificantContent">
            <summary>
            There're no entries to write.
            The XML Writer creator was called, the insignificant content (any non-entry elements encountered in the input stream) has been written.
            Generally, should be persisted to media (to maintain any content we don't understand, eg from newer versions).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.EntriesWriter.RunResult.NoContentAtAll">
            <summary>
            There're no entries to write, and there were no insignificant content (any non-entry elements encountered in the input stream).
            The XML Writer creator was called, and the settings storage XML stream infrastructure has been emitted, but there's nothing else.
            If the file presence is important (e.g. per-project settings), the file might be freely deleted.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.Format.Base64Blob">
            <summary>
            Represents serialization of the BLOB type as a BASE64 string.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.LocationAwareXmlReader">
            <summary>
            A wrapping XML reader that can tell the (stable enough) position of the current node. These positions have linear order and can be used to identify the same node when reading the document for the next time.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.LocationAwareXmlReader.CurrentPositionSnapshot">
            <summary>
            Creates a copy of the current node hierarchical position (contains a list of indices, so a snapshot is required of you'd like to store it for later use).
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.LocationAwareXmlReader.CurrentPositionVolatile">
            <summary>
            Returns a view on the current position (without cloning its byref part). Cannot be stored for later use because will be invalidated on the next step.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.LocationAwareXmlReader.NodeAbsoluteIndex">
            <summary>
            Zero-based absolute index of the node.
            Note that this depends on reader settings (whether to autoexpand entities or not) and read process decisions (whether to resolve into each particular entity or not), so it's recommended to use the <see cref="M:JetBrains.Application.Settings.Storage.LocationAwareXmlReader.CurrentPositionSnapshot"/>, which is accurate on element nodes.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.LocationAwareXmlReader.NodePosition.ElementIndices">
            <summary>
            Hierarchical index of the current element (if it's the current node), or the element containing the current node for non-element nodes (such as text, comments, whitespace, etc).
            The first item is the index of the top-level element (always <c>0</c> in a valid XML document, could be above zero in XML fragments), the second is the index of its child element, and so on.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.LocationAwareXmlReader.NodePosition.OffsetFromElementTag">
            <summary>
            If the current node is the element tag, <c>0</c> for opening, closing, and self-closed tags (see <see cref="F:JetBrains.Application.Settings.Storage.LocationAwareXmlReader.NodePosition.ElementTagKind"/> for kind).
            If the current node is not an element tag, the number of nodes encountered since the last element opening, closing, or self-closed tag (see <see cref="F:JetBrains.Application.Settings.Storage.LocationAwareXmlReader.NodePosition.ElementTagKind"/>for kind: <see cref="F:JetBrains.Application.Settings.Storage.LocationAwareXmlReader.NodePosition.ElementTagKinds.Opening"/> means the node is after the opening tag and is a child of that element; <see cref="F:JetBrains.Application.Settings.Storage.LocationAwareXmlReader.NodePosition.ElementTagKinds.Closing"/> or <see cref="F:JetBrains.Application.Settings.Storage.LocationAwareXmlReader.NodePosition.ElementTagKinds.EmptyElement"/> means it's after the closing or self-closed tag, i.e. the node is on the same level as the element).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.LocationAwareXmlReader.NodePosition.ElementTagKind">
            <summary>
            For an element tag node: the kind of that tag.
            For a non-element node: <see cref="F:JetBrains.Application.Settings.Storage.LocationAwareXmlReader.NodePosition.ElementTagKinds.Opening"/> means that <see cref="F:JetBrains.Application.Settings.Storage.LocationAwareXmlReader.NodePosition.ElementIndices"/> points to the parent element of this node (there were no previous sibling elements to address from yet), and other values mean that <see cref="F:JetBrains.Application.Settings.Storage.LocationAwareXmlReader.NodePosition.ElementIndices"/> is some prev-prev-...-sibling of this node, and nodes are counted starting with its closing tag (which is <see cref="F:JetBrains.Application.Settings.Storage.LocationAwareXmlReader.NodePosition.OffsetFromElementTag"/>=<c>0</c>), or the self-closed tag.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.LocationAwareXmlReader.NodePosition.Clone">
            <summary>
            Snapshots the position.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.LocationAwareXmlReader.NodePosition.IsElement">
            <summary>
            Gets whether this node is either an element opening tag or an empty element's self-closed tag.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.LocationAwareXmlReader.NodePosition.CreateFromXmlElement(System.Xml.XmlElement)">
            <summary>
            Creates a node position from an XML element in an XML document.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.LocationAwareXmlReader.NodePosition.GetXmlElementByPosition(System.Xml.XmlDocument)">
            <summary>
            Looks up an element in the XML document by this position.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.LocationAwareXmlReader.NodePosition.Depth">
            <summary>
            Gets the depth of the node indicated by the position, just the same way as <see cref="P:System.Xml.XmlReader.Depth"/> would do.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.SettingsStorageXmlHelpers">
            <summary>
            Helpers for serializing Settings Storage entries to and from XML.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.SettingsStorageXmlHelpers.NamespaceUri.SystemWindows">
            <summary>
            XML NS alias for the System.Windows namespace (and a couple others).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.SettingsStorageXmlHelpers.NamespaceUri.SystemInMscorlib">
            <summary>
            XML NS for the System namespace in mscorlib (CLR NS form only, no URI alias).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.SettingsStorageXmlHelpers.NamespaceUri.SystemWindowsMarkup">
            <summary>
            XML NS alias for the System.Windows.Markup namespace.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.SettingsStorageXmlHelpers.NamespaceUri.SettingsStorageFormat">
            <summary>
            XML NS alias for our CLR namespace that contains the BLOB class.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.SettingsStorageXmlHelpers.XmlNamespaceDescriptions.ResolveNamespaceUri(System.String)">
            <summary>
            Tries to resolve XML namespace URI in any form to one of the known kinds (could be a CLR namespace, an alias URI, etc).
            </summary>
        </member>
        <member name="T:JetBrains.Application.Settings.Storage.SettingsStoreSerializationToXmlDiskFile">
            <summary>
            Binds <see cref="T:JetBrains.Application.Settings.Storage.SettingsStorageBase"/> to a disk file.
            </summary>
            <remarks>
            <para>Path is supplied as a property. Whenever the property value changes, or the file content pointed to by the path changes, the settings storage is reloaded.</para>
            <para>Behavior depending on the path and its file conditions (when discovered):</para>
            <para>• Path is <c>Null</c>: means the disk storage is not available, operate in-memory only (e.g. temp solution — doesn't have the file yet). Action: memory storage operates normally (do not clear), no reload actions are taken. We hope to have some path for the final save, but if not, the settings will be dropped.</para>
            <para>• Path is non-<c>Null</c>, but the file does not exist: possible causes: either the storage got empty and the file has been deleted, or the file has been temporarily deleted during a write or merge operation, or the storage path has changed to the new location. Action: if path has changed, save in-memory storage ASAP to the new location; otherwise, keep memory storage intact for some amount of time or until a forced save is requested; at then, reload as if from the empty storage (all in-memory content but for the dirty diff is deleted).</para>
            <para>• Path is non-<c>Null</c>, the file exists, but its content is invalid: keep the in-memory copy for as long as possible; when forced to save, overwrite the corrupted content.</para>
            <para>• Path is non-<c>Null</c>, the file exists, and its content is valid: read to replace the from-stream cache of the storage, the dirty diff remains as-is.</para>
            </remarks>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.SettingsStoreSerializationToXmlDiskFile.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.Application.Settings.Storage.ISettingsStorageStreamSerialization,JetBrains.DataFlow.IProperty{JetBrains.Util.FileSystemPath},JetBrains.Application.FileSystemTracker.FileSystemTrackerEvents,JetBrains.Threading.IThreading)">
            <summary>
            
            </summary>
            <param name="lifetime"></param>
            <param name="storage">What loads and saves from the stream on our file.</param>
            <param name="path">
            <para>The path to the file, or <c>Null</c> if the file location is not currently available.</para>
            <para>The value is used for reading (<c>Null</c> will cause a clean storage) or writing (<c>Null</c> will skip writing and keep all changes in memory).</para>
            <para>Also the path is watched for changes to reload new content when the file is modified (e.g. from SCC or another instance).</para>
            <para>When you point the path at the new location, it gets overwritten with the current in-memory changes.</para>
            </param>
            <param name="filetracker">Enables watching for external changes.</param>
            <param name="threading"></param>
        </member>
        <member name="M:JetBrains.Application.Settings.Storage.SettingsStoreSerializationToXmlDiskFile.Init_SaveOnDirty(JetBrains.DataFlow.Lifetime,JetBrains.Application.Settings.Storage.ISettingsStorageStreamSerialization,JetBrains.Threading.IThreading)">
            <summary>
            Schedulles save operation when the storage gets dirty.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.SettingsStoreSerializationToXmlDiskFile.myLockSerialization">
            <summary>
            Protects the file read-write operations in the whole.
            Also synchronizes lifetime termination on this object.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.SettingsStoreSerializationToXmlDiskFile.OptionWaitForDisappearedFileTimeout">
            <summary>
            See remarks to class. When the file disappears, we expect it might come back within this amount of time.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.SettingsStoreSerializationToXmlDiskFile.myIsStorageCorruptedOnLoad">
            <summary>
            See remarks on the class.
            Means we should not auto-overwrite the settings, assuming the corruption might be due to the SCC conflict and might be fixed soon.
            Only overwrite on forced save if there is dirty content (but make a backup in such a case).
            </summary>
        </member>
        <member name="P:JetBrains.Application.Settings.Storage.SettingsStoreSerializationToXmlDiskFile.DeleteFileWhenNoContent">
            <summary>
            Whether the file should be deleted if there're no settings in it (and no unrecognized content we're obliged to keep).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.SettingsStoreSerializationToXmlDiskFile.SaveDiffFlags.ApplyInMemoryDiff">
            <summary>
            Normal behavior. The modifications done to the storage are applied to what we got on disk.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:JetBrains.Application.Settings.Storage.SettingsStoreSerializationToXmlDiskFile.SaveDiffFlags.OverwriteWithMemoryContent" -->
        <member name="F:JetBrains.Application.Settings.Storage.SettingsStoreSerializationToXmlDiskFile.SaveForcedFlags.WriteIfPossible">
            <summary>
            Just some new settings have been written to the storage, and that would be a nice idea to save it to the disk.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.SettingsStoreSerializationToXmlDiskFile.SaveForcedFlags.ForcedWrite">
            <summary>
            We really have to save now. For example, we're exiting and there're dirty changes.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:JetBrains.Application.Settings.Storage.SettingsStorageBase" -->
        <member name="M:JetBrains.Application.Settings.Storage.SettingsStorageBase.#ctor(JetBrains.DataFlow.Lifetime,System.String)">
            <summary>
            
            </summary>
            <param name="lifetime">Limiting lifetime for the storage objects.</param>
            <param name="name">Diagnostics name of this storage.</param>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.SettingsStorageBase.myDiffToStream">
            <summary>
            <para><see cref="F:JetBrains.Application.Settings.Storage.SettingsStorageBase.myEntriesInStream"/> diff: what should be applied to the settings storage on save to ensure merging of the conflicts.</para>
            <para>Protected with <see cref="F:JetBrains.Application.Settings.Storage.SettingsStorageBase.myLockDiffToStream"/>.</para>
            <para>Set to <c>Null</c> when empty to enabled lock-free checks for the “no-dirty” state.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.SettingsStorageBase.myEntriesInStream">
            <summary>
            <para>The settings storage entries, as read from the persistent storage.</para>
            <para>Maps keys to values.</para>
            <para>In-memory changes are stored in <see cref="F:JetBrains.Application.Settings.Storage.SettingsStorageBase.myDiffToStream"/> until persisted to the storage.</para>
            <para>Protected with the <see cref="F:JetBrains.Application.Settings.Storage.SettingsStorageBase.myLockEntriesInStream"/>.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Settings.Storage.SettingsStorageBase.myLockSerialization">
            <summary>
            Held while a save or load process is in progress to avoid runnnig one more in parallel.
            </summary>
        </member>
        <member name="T:JetBrains.Application.ApplyCommandLineKeysToLogger">
            <summary>
            Applies the command line arguments to the logger.
            </summary>
        </member>
        <member name="T:JetBrains.Application.PlatformObsoleteStatics">
            <summary>
            Interface which represents root point for environment API.
            Use the <see cref="P:JetBrains.Application.PlatformObsoleteStatics.Instance"/> property to obtain the <i>Shell</i> instance.  
            </summary>
        </member>
        <member name="P:JetBrains.Application.PlatformObsoleteStatics.HasInstance">
            <summary>
            Tells whether the <see cref="P:JetBrains.Application.PlatformObsoleteStatics.Instance"/> is available, and the property could be read.
            When <c>False</c>, <see cref="P:JetBrains.Application.PlatformObsoleteStatics.Instance"/> throws an exception.
            </summary>
            <remarks>Notes to inheritors: <see cref="P:JetBrains.Application.PlatformObsoleteStatics.HasInstance"/> and <see cref="P:JetBrains.Application.PlatformObsoleteStatics.Instance"/> must be overridden in sync.</remarks>
        </member>
        <member name="P:JetBrains.Application.PlatformObsoleteStatics.Instance">
            <summary>
            Gets the instance of the Application Shell.
            If not available, throws an exception. Check the <see cref="P:JetBrains.Application.PlatformObsoleteStatics.HasInstance"/> property value to see if <see cref="P:JetBrains.Application.PlatformObsoleteStatics.Instance"/> can be accessed. 
            </summary>
            <remarks>Notes to inheritors: <see cref="P:JetBrains.Application.PlatformObsoleteStatics.HasInstance"/> and <see cref="P:JetBrains.Application.PlatformObsoleteStatics.Instance"/> must be overridden in sync.</remarks>
        </member>
        <member name="P:JetBrains.Application.PlatformObsoleteStatics.Components">
            <summary>
            <para>Provides access to the major application-global components and subsystems.</para>
            <para>As all of the members of this class are <see cref="T:System.Runtime.CompilerServices.ExtensionAttribute">extension methods</see>, use R# Type Completion after dot to see the complete member list.</para>
            </summary>
            <remarks>Note to implementors: typically, you would create a static class called <c>ShellComponentsEx</c> in your own project and place the extension methods into it.</remarks>
        </member>
        <member name="T:JetBrains.Application.AddProductIdentityToLogs">
            <summary>
            On product shell start-stop, exposes the product info in the logs.
            </summary>
        </member>
        <member name="M:JetBrains.Application.AddProductIdentityToLogs.FormatBuildDescription(JetBrains.Application.IApplicationDescriptor,System.Collections.Generic.IEnumerable{JetBrains.Application.AssemblyConfiguration})">
            <summary>
            Gets the plaintext description that identifies the current build.
            </summary>
            <param name="descriptor">Application descriptor. Take from <see cref="!:PlatformObsoleteStatics.Descriptor"/> when <see cref="P:JetBrains.Application.PlatformObsoleteStatics.HasInstance"/>. VS Package bootstrapper or exception reporter might have descriptor available from its own sources. If <c>Null</c>, some of the info will be retrieved from <see cref="T:JetBrains.Application.Defines"/> instead.</param>
            <param name="assemblyconfigurations">Assembly configurations of the currently running Shell. Take from <see cref="!:PlatformObsoleteStatics.AssemblyConfigurations"/> when <see cref="P:JetBrains.Application.PlatformObsoleteStatics.HasInstance"/>. If <c>Null</c>, this information will not be available.</param>
        </member>
        <member name="F:JetBrains.Application.AddProductIdentityToLogs.PropExtendBuildDescription">
            <summary>
            If the <see cref="T:JetBrains.Application.IApplicationDescriptor"/> has this entry in its bag, it will be called to extend the standard <see cref="M:JetBrains.Application.AddProductIdentityToLogs.FormatBuildDescription(JetBrains.Application.IApplicationDescriptor,System.Collections.Generic.IEnumerable{JetBrains.Application.AssemblyConfiguration})"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.AssertShellLocksAreGuarded">
            <summary>
            Prevents <see cref="T:JetBrains.Threading.Invocator"/> reentrancy when a lock is taken (temporary).
            Asserts that any primary-thread lock is guarded by <see cref="T:JetBrains.Threading.Invocator"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.AdjustSystemTraceListeners">
            <summary>
            Remove default trace listener (with msgboxes on exceptions).
            Add own listener to intercept problems on callstacks where our code (any) is present, and submit to exception reporting.
            </summary>
        </member>
        <member name="T:JetBrains.Application.HostCulture">
            <summary>
            WTF
            </summary>
        </member>
        <member name="P:JetBrains.Application.HostCulture.Culture">
            <summary>
            WTF
            </summary>
        </member>
        <member name="T:JetBrains.Application.ShellComponents">
            <summary>
            The anchor class for various extension methods that expose the app-global components via <see cref="P:JetBrains.Application.PlatformObsoleteStatics.Components"/>. Should not have any class members. All of the members should be added as extension methods, even in this assembly (otherwise, some of them might get less discoverable).
            </summary>
            <remarks>Notes to implementors: use the <see cref="P:JetBrains.Application.ShellComponents.ComponentContainer"/> prop to get the component instead of its own statics, as this is more consistent against the known instance of the component container.</remarks>
        </member>
        <member name="P:JetBrains.Application.ShellComponents.ComponentContainer">
            <summary>
            Gets the <see cref="P:JetBrains.Application.ShellComponents.ComponentContainer"/> instance whose components this object is serving.
            </summary>
        </member>
        <member name="T:JetBrains.Application.ShellComponentsEx">
            <summary>
            <see cref="T:JetBrains.Application.ShellComponents"/> in this assembly.
            </summary>
            <remarks>Excluded: <see cref="T:JetBrains.Application.OneTimeInitializationManager"/>, <see cref="!:OleUndoManagerFactory"/>.</remarks>
        </member>
        <member name="M:JetBrains.Application.ShellComponentsEx.Get``1(JetBrains.Application.ShellComponents)">
            <summary>
            Gets the component whose interface type is <typeparamref name="TInterface"/>.
            Throws if there is no such component. Use <see cref="M:JetBrains.Application.ShellComponentsEx.Has``1(JetBrains.Application.ShellComponents)"/> to check.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ShellComponentsEx.Has``1(JetBrains.Application.ShellComponents)">
            <summary>
            Gets whether a component whose interface type is <typeparamref name="TInterface"/> is available.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Configuration.ShellSettingsComponent.myUserSettingsText">
            <summary>
            Caches the initial content of the User Settings file, to check for modifications before overwriting the file on exit or explicit save (eg Options::OK).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Configuration.ShellSettingsComponent.myUserSettingsTimestamp">
            <summary>
            Timestamp of the file loaded as user settings, to check for external modifications when we're about to save the file on exit or explicit save (eg Options::OK).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.ShellSettingsComponent.QueryOverwriteUserSettingsFile">
            <summary>
            Determines if the <see cref="F:JetBrains.Application.Configuration.XmlExternalizationScope.UserSettings"/> file should be overwritten.
            Called if the file has been changed since loading, and there were external changes to the settings file on part of some other process at the same time.
            For example, the UI Shell implementation is to show a Message Box prompt.
            The default implementation would always overwrite the settings file.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.ShellSettingsComponent.GetWorkspaceDocument">
            <summary>
            Tries to load the XML Document for <see cref="F:JetBrains.Application.Configuration.XmlExternalizationScope.UserSettings"/> (either from current version location, or any of the legacy dirs for an upgrade).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.ShellSettingsComponent.GetUserSettingsDocument_CurrentVersion">
            <summary>
            Looks for just the current version. Also saves initial content and timestamp to check for overwrites.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.ShellSettingsComponent.GetUserSettingsDocument_LegacyVersion">
            <summary>
            Settings from prev versions for upgrade. Initial-content/timestamp not saved in this branch.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.ShellSettingsComponent.GetUserSettingsDocument">
            <summary>
            Tries to load the XML Document for <see cref="F:JetBrains.Application.Configuration.XmlExternalizationScope.UserSettings"/> (either from current version location, or any of the legacy dirs for an upgrade).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Configuration.ShellSettingsComponent.GetUserSettingsLastWriteTime">
            <summary>
            Save reader of the <see cref="F:JetBrains.Application.Configuration.XmlExternalizationScope.UserSettings"/> XML file (current version only) modification timestamp.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Configuration.ShellSettingsComponent.PropGetLegacySettingsFiles">
            <summary>
            A property that <see cref="T:JetBrains.Application.IApplicationDescriptor"/>s could put into their <see cref="P:JetBrains.Application.IApplicationDescriptor.Bag"/>s to look for older-version settings in non-standard folders when there are no up-to-date-version settings found and we would like to upgrade from an older version.
            The strings are file path names.
            The versions are versions of the product to which the settings supposedly belong.
            </summary>
        </member>
        <member name="F:JetBrains.Util.UnguardedAlarm.ourRequests">
            <summary>
            Maps requests to invocation times
            </summary>
        </member>
        <member name="F:JetBrains.Util.UnguardedAlarm.myRequests">
            <summary>
            List of requests for specific alarm
            </summary>
        </member>
        <member name="F:JetBrains.Util.UnguardedAlarm.ourTimer">
            <summary>
            The alarms timer
            </summary>
        </member>
        <member name="T:JetBrains.Application.ApplicationDescriptorLite">
            <summary>
            Implements most of the <see cref="T:JetBrains.Application.ApplicationDescriptor"/> members and leaves only the most crucial ones for the author.
            Not recommended for use in full-blown products.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ApplicationDescriptorLite.#ctor(System.String,System.Reflection.Assembly,System.String)">
            <summary>
            Inits the descriptor, assigning values to the minimum of the parameters.
            </summary>
            <param name="sProductName">Name for the Shell product.</param>
            <param name="allAssembliesResourceAssembly">The assembly that contains the <paramref name="allAssembliesResourceName"/> AllAssembliesXml data.</param>
            <param name="allAssembliesResourceName">The resource with the AllAssembliesXml assemblies list data.</param>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptorLite.AllAssembliesResourceAssembly">
            <summary>
            Gets the assembly that contains the <see cref="P:JetBrains.Application.ApplicationDescriptor.AllAssembliesXml"/> data.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptorLite.AllAssembliesResourceName">
            <summary>
            Gets the name of the resource in <see cref="P:JetBrains.Application.IApplicationDescriptor.AllAssembliesResourceAssembly"/> that contains the serialized <see cref="P:JetBrains.Application.IApplicationDescriptor.AllAssembliesXml"/> data.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptorLite.BuyURL">
            <summary>
            Gets the URL that takes to the “Buy Product” page.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptorLite.DoCheckLicenseReuseOverNetwork">
            <summary>
            Determines whether the product should check for multiple instances running simultaneousely over the network.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptorLite.EvaluationURL">
            <summary>
            Gets the URL that takes to the page that provides an eval license.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptorLite.LicenseSupport">
            <summary>
            Gets the licensing implementation.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptorLite.ProductBirthDate">
            <summary>
            The birth date of the product. Used for the lower copyright year and so on.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptorLite.ProductFullName">
            <summary>
            Gets the product full name, which is typically the <see cref="!:IApplicationDescriptor.ProductName"/> plus the short version number.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptorLite.ProductIcon">
            <summary>
            Gets the product icon.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptorLite.ProductName">
            <summary>
            Gets the bare product name in the shortest form (no company, no version).
            </summary>
        </member>
        <member name="T:JetBrains.Application.AssemblyConfiguration">
            <summary>
            Validates the list of assembly configurations.
            </summary>
        </member>
        <member name="T:JetBrains.Application.KnownValue">
            <summary>
            Describes a single known value form the <see cref="T:JetBrains.Build.AllAssemblies.AllAssembliesXml"/> file.
            The string value of the item is checked to be valid against the predefined values list.
            </summary>
        </member>
        <member name="F:JetBrains.Application.KnownValue.myAllAssembliesXml">
            <summary>
            <see cref="P:JetBrains.Application.KnownValue.AllAssembliesXml"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.KnownValue.myValue">
            <summary>
            <see cref="P:JetBrains.Application.KnownValue.Value"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.KnownValue.#ctor(System.String,JetBrains.Build.AllAssemblies.AllAssembliesXml,System.Boolean)">
            <summary>
            Validates the string value and wraps it into the configuration.
            </summary>
            <param name="value"><see cref="P:JetBrains.Application.KnownValue.Value"/>.</param>
            <param name="allassembliesxml"><see cref="P:JetBrains.Application.KnownValue.AllAssembliesXml"/>.</param>
            <param name="validate">For internal needs. Allows to bypass the slow validation when building a list of configs from a known list.</param>
        </member>
        <member name="M:JetBrains.Application.KnownValue.AssertValidValue(System.String)">
            <summary>
            Checks whether the <paramref name="valuename"/> is indeed known to the all-assemblies-xml file.
            </summary>
        </member>
        <member name="M:JetBrains.Application.KnownValue.GetKnownValuesCollection">
            <summary>
            Gets the collection of the known values, for validation.
            </summary>
        </member>
        <member name="M:JetBrains.Application.KnownValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Application.KnownValue.Equals(System.String)">
            <summary>
             Checks whether this value is equal to another value whose string value is passed in as a parameter.
             You should use this method rather than comparing the <see cref="P:JetBrains.Application.KnownValue.Value"/> to a string, because this method would validate the <paramref name="other"/> against the known values list.
            </summary>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
            <param name="other">String value to compare with, is validated against the known values list.</param>
        </member>
        <member name="P:JetBrains.Application.KnownValue.UniversalValue">
            <summary>
            Gets the string value of the universal known value.
            </summary>
        </member>
        <member name="P:JetBrains.Application.KnownValue.AllAssembliesXml">
            <summary>
            Gets the <see cref="T:JetBrains.Build.AllAssemblies.AllAssembliesXml"/> file that defines and owns the configuration.
            The configuration validness is checked against the file.
            </summary>
        </member>
        <member name="P:JetBrains.Application.KnownValue.IsUniversal">
            <summary>
            Gets whether this configuration is the Universal configuration, ie includes all of the assemblies regardless of their configurations.
            </summary>
        </member>
        <member name="P:JetBrains.Application.KnownValue.IsUniversalAllowed">
            <summary>
            Gets whether the universal value (string value <see cref="P:JetBrains.Application.KnownValue.UniversalValue"/>) is available on this set of items.
            </summary>
        </member>
        <member name="P:JetBrains.Application.KnownValue.Value">
            <summary>
            Gets the string value of the configuration, as written in the <see cref="T:JetBrains.Build.AllAssemblies.AllAssembliesXml"/> file.
            </summary>
        </member>
        <member name="M:JetBrains.Application.AssemblyConfiguration.GetKnownValuesCollection">
            <summary>
            Gets the collection of the known values, for validation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:JetBrains.Application.AssemblyConfiguration.IsUniversalAllowed">
            <summary>
            Gets whether the universal value (string value <see cref="P:JetBrains.Application.KnownValue.UniversalValue"/>) is available on this set of items.
            </summary>
        </member>
        <member name="T:JetBrains.Application.ApplicationDescriptorAttribute">
            <summary>
            Defines a product by the means of the type that should be instantiated so that to serve as its <see cref="T:JetBrains.Application.IApplicationDescriptor"/>.
            To provide for loading more than one product into the appdomain, the search for attributes is constrained to the startup assembly. In case of a Visual Studio Add-In / Package, the startup assembly is that one containing the Add-In / Package.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ApplicationDescriptorAttribute.ApplicationDescriptorType">
            <summary>
            Gets the class that should be instantiated as the application descriptor, see <see cref="T:JetBrains.Application.IApplicationDescriptor"/>.
            The class must have a public “<c>.ctor()</c>” or “<c>.ctor(<see cref="T:JetBrains.Application.ApplicationDescriptorAttribute"/>)</c>”.
            </summary>
        </member>
        <member name="T:JetBrains.Application.ProductEdition">
            <summary>
            Validates the list of product editions.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ProductEdition.RegistryLoadProductEdition(System.String,JetBrains.Build.AllAssemblies.AllAssembliesXml)">
            <summary>
            Loads the cached product edition from the Registry.
            LicenseSupport knows which one to use, but we do not have License Support until we start up a Shell with some Product Edition, that's why we'd like to cache it from the previous run.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ProductEdition.RegistrySaveProductEdition(System.String)">
            <summary>
            Saves the cached product edition to the Registry.
            LicenseSupport knows which one to use, but we do not have License Support until we start up a Shell with some Product Edition, that's why we'd like to cache it from the previous run.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ProductEdition.GetKnownValuesCollection">
            <summary>
            Gets the collection of the known values, for validation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:JetBrains.Application.ProductEdition.Description">
            <summary>
            Freehand description for the user interface.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ProductEdition.DisplayName">
            <summary>
            A user-friendly name for this edition. Should not include the “Edition” suffix. Used for display in user interfaces.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ProductEdition.IsUniversalAllowed">
            <summary>
            Gets whether the universal value (string value <see cref="P:JetBrains.Application.KnownValue.UniversalValue"/>) is available on this set of items.
            Note that a universal product edition can be encountered in two cases:
            (1) On a product that does not support product editions (<see cref="P:JetBrains.Build.AllAssemblies.AllAssembliesXml.DefaultProductEdition"/> is also Universal in this case), in which case it's the only allowed edition.
            (2) When there's no cached product edition for the installation, in which case you're not allowed to use this value and must change it to <see cref="P:JetBrains.Build.AllAssemblies.AllAssembliesXml.DefaultProductEdition"/> ASAP.
            </summary>
        </member>
        <member name="T:JetBrains.Application.AssemblyManager">
            <summary>
            Controls execution of the assembly-load-time-handlers in various assemblies of the product.
            </summary>
        </member>
        <member name="M:JetBrains.Application.AssemblyManager.LoadAssemblies(System.String,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Creates the descriptors for the already-loaded assemblies (eg plugins') and executes load handlers for 'em.
            </summary>
        </member>
        <member name="T:JetBrains.Application.ChangeEventArgs">
            <summary>
            Represents arguments of change event
            </summary>
        </member>
        <member name="M:JetBrains.Application.ChangeManager.ExecuteAfterChange(System.Action)">
            <summary>
            Executes the specified action after the current change has finished or immediately if there
            is no change currently in progress.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ChangeManager.RegisterChangeProvider(JetBrains.Application.IChangeProvider)">
            <summary>
            Registers change provider in the dispatching scheme.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ChangeManager.UnregisterChangeProvider(JetBrains.Application.IChangeProvider)">
            <summary>
            Unregisters change provider from the dispatching scheme.
            </summary>
            <remarks>Remove all dependencies in which the provider participates</remarks>
        </member>
        <member name="M:JetBrains.Application.ChangeManager.OnProviderChanged(JetBrains.Application.IChangeProvider,System.Object,JetBrains.Application.Progress.ITaskExecutor)">
            <summary>
            Initiates the event dispatching process using the specified provider as a starting point.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ChangeManager.AddDependency(JetBrains.Application.IChangeProvider,JetBrains.Application.IChangeProvider)">
            <summary>
            Adds dependency between two providers.
            </summary>
            <remarks>Both providers must have already been registered</remarks>
        </member>
        <member name="M:JetBrains.Application.ChangeManager.RemoveDependency(JetBrains.Application.IChangeProvider,JetBrains.Application.IChangeProvider)">
            <summary>
            Removes dependency between two providers.
            </summary>
            <remarks>Both providers must have already been registered</remarks>
        </member>
        <member name="M:JetBrains.Application.ChangeManager.Dump(System.IO.TextWriter)">
            <summary>
            Dumps the internal structure into the specified writer.
            </summary>
        </member>
        <member name="F:JetBrains.Application.ChangeManager.Changed2">
            <summary>
            The event about changes in the system.
            Supports lifetimes.
            </summary>
        </member>
        <member name="E:JetBrains.Application.ChangeManager.Changed">
            <summary>
            The event about changes in the system.
            Does not support lifetimes, see for <see cref="F:JetBrains.Application.ChangeManager.Changed2"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.IChangeUnit">
            <summary>
            Represents an abstract change unit.
            </summary>
        </member>
        <member name="T:JetBrains.ProjectModel.Pattern">
            <summary>
            Defines set of file names that match the specified regular expression
            </summary>
        </member>
        <member name="P:JetBrains.Application.HostCommandLine.Keys">
            <summary>
            Array of defined keys: /Key[=Value]
            </summary> 
        </member>
        <member name="P:JetBrains.Application.HostCommandLine.NonKeyedParameters">
            <summary>
            Strings, that does not start with '/'.
            </summary> 
        </member>
        <member name="T:JetBrains.Application.CommandLineSwitchAttribute">
            <summary>
            Defines a command-line switch that will be known to the shell and registered with the hosting app, as needed.
            </summary>
        </member>
        <member name="M:JetBrains.Application.CommandLineSwitchAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Defines a command-line switch that will be known to the shell and registered with the hosting app, as needed.
            </summary>
            <param name="name">The name of the command line switch, without the prefix.</param>
            <param name="parameterscount">The number of parameters of the command line switch.</param>
        </member>
        <member name="P:JetBrains.Application.CommandLineSwitchAttribute.Name">
            <summary>
            Gets the name of the command line switch, without the prefix.
            </summary>
        </member>
        <member name="P:JetBrains.Application.CommandLineSwitchAttribute.ParametersCount">
            <summary>
            Gets the number of parameters of the command line switch.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.IAssemblyAttributeInstaller">
            <summary>
            A class marked with <see cref="T:JetBrains.Application.Install.AssemblyAttributeInstallerAttribute"/> must implement this interface in order to be called for processing each of the assembly attributes it handles.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.IAssemblyAttributeInstaller.InstallInstance(JetBrains.Application.Install.Installer,System.Object)">
            <summary>
            Called for each of the attributes of the requested type encountered in the known assemblies.
            </summary>
            <param name="installer">The installer object that provides the installation data.</param>
            <param name="attributeInstance">Instance of the attribute to process.</param>
            <returns>The list of the Registry entries to write, or <c>Null</c> if none.</returns>
        </member>
        <member name="T:JetBrains.Application.Install.AssemblyAttributeInstallerAttribute">
            <summary>
            An attribute to mark the classes that process the installation data written in the form of assembly attributes of type <see cref="P:JetBrains.Application.Install.AssemblyAttributeInstallerAttribute.AttributeToInstall"/> during registration and unregistration.
            Such classes will also be called once to perform their own attribute-independent installation.
            The class must implement the <see cref="T:JetBrains.Application.Install.IAssemblyAttributeInstaller"/> interface.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.AssemblyAttributeInstallerAttribute.#ctor(System.Type,JetBrains.Application.Install.InstallerVsVersionAffinity)">
            <summary>
            Creates the attribute.
            </summary>
            <param name="typeAttributeToInstall">Type of the attribute for which the class marked by <see cref="T:JetBrains.Application.Install.AssemblyAttributeInstallerAttribute"/> should be invoked to process the installation.</param>
            <param name="vsversionaffinity">Specifies the affinity of this installer to the VS version, see enum member summaries for details.</param>
        </member>
        <member name="P:JetBrains.Application.Install.AssemblyAttributeInstallerAttribute.AttributeToInstall">
            <summary>
            Gets the type of the attribute for which the class marked by <see cref="T:JetBrains.Application.Install.AssemblyAttributeInstallerAttribute"/> should be invoked to process the installation.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.Installer">
            <summary>
            Invokes installation/uninstallation related services.
            This class should not be made static (and, conscequently, public interface methods on it), so that it were created and disposed accordingly, with its underlying <see cref="T:JetBrains.Metadata.Utils.AssemblyResolver"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.myMapAssemblyAttributeToInstallers">
            <summary>
            Maps the assembly attributes storing the installation data to the objects that process their registration and unregistration.
            Don't use, see <see cref="P:JetBrains.Application.Install.Installer.MapAssemblyAttributeToInstallers"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.myMapTypeAttributeToInstallers">
            <summary>
            Maps the type attributes storing the installation data to the objects that process their registration and unregistration.
            Don't use, see <see cref="P:JetBrains.Application.Install.Installer.MapTypeAttributeToInstallers"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.myStaticInstallers">
            <summary>
            Stores static installers
            Maps the attributes storing the installation data to the objects that process their registration and unregistration.
            Don't use, see <see cref="P:JetBrains.Application.Install.Installer.StaticInstallers"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.myMapInstallerTypeToInstance">
            <summary>
            Maps the installer types to the created instances of their objects.
            Don't use, see <see cref="P:JetBrains.Application.Install.Installer.MapInstallerTypeToInstance"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.myApplicationDescriptor">
            <summary>
            The product descriptor that provides the essential data on the product being installed or uninstalled.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.myMetadataLoader">
            <summary>
            Loads metadata without loading the assembly. Needed mostly for looking for the installer attributes, because doing so via reflection would cause looking up the referenced assemblies, which could be missing on the build site (eg VS 10 when building with netfx 3.5).
            Lifetime: Installer.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Installer.#ctor(JetBrains.DataFlow.Lifetime,System.String)">
            <summary>
            A constructor for spawning the installer on an application descriptor that is defined in an attribute.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.AssemblyConfigurations">
            <summary>
            Gets the assembly configurations in which the product is running, which defines the set of assemblies from <see cref="T:JetBrains.Build.AllAssemblies.AllAssembliesXml"/> to load.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.AssemblyConfigurationsString">
            <summary>
            The assembly configurations string value, as passed to the ctor.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.Installer.BeforeInstallationDataHarvestComplete">
            <summary>
            Fired after the <see cref="T:JetBrains.Application.Install.IAssemblyAttributeInstaller"/> handlers are called for the installation data, but before it's handed out to consumers (and stored in the cache).
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Installer.DumpInstallationData(JetBrains.Application.Install.InstallationData.InstallationData,JetBrains.Util.FileSystemPath)">
            <summary>
            Dupms the given Registry data into a file.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Installer.ComSelfRegister(JetBrains.Application.Install.RegistrationStage)">
            <summary>
            Self-registers for COM those assemblies that require such registration.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Installer.GetInstallationData">
            <summary>
            Gets all the Registry data that should be written to or erased from the Registry upon installation or uninstallation.
            This includes the static app-global Registry data and dynamic registration info collected from the Assembly attributes.
            The first call is slow (the installation data is harvested), subsequent calls are fast because the result is cached.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Installer.CollectInstallers">
            <summary>
            Collects the handlers that implement installation.
            Do not call, use <see cref="P:JetBrains.Application.Install.Installer.MapAssemblyAttributeToInstallers"/>, <see cref="P:JetBrains.Application.Install.Installer.MapTypeAttributeToInstallers"/>,  <see cref="P:JetBrains.Application.Install.Installer.StaticInstallers"/>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Installer.InvokeAssemblyAttributeInstallers(JetBrains.Application.Install.InstallationData.InstallationData)">
            <summary>
            Invokes the registration handlers for assembly attributes, see <see cref="P:JetBrains.Application.Install.Installer.MapAssemblyAttributeToInstallers"/>, from the assemblies listed in the <c>AllAssemblies.xml</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Installer.InvokeTypeAttributeInstallers(JetBrains.Application.Install.InstallationData.InstallationData)">
            <summary>
            Invokes the registration handlers for type attributes, see <see cref="P:JetBrains.Application.Install.Installer.MapTypeAttributeToInstallers"/>, from the assemblies listed in the <c>AllAssemblies.xml</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Installer.InvokeStaticInstallers(JetBrains.Application.Install.InstallationData.InstallationData)">
            <summary>
            Collects the one-time global registration data from the static installers, one that is not per-attribute or per-assembly.
            Invoked from <see cref="M:JetBrains.Application.Install.Installer.HarvestInstallationData"/>, don't call manually.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Installer.AssertVersionSpecific">
            <summary>
            Throws if <see cref="P:JetBrains.Application.Install.Installer.IsVsVersionNeutral"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Installer.LoadMetadataAssembly(JetBrains.Build.AllAssemblies.AssemblyNameXml)">
            <summary>
            Loads the assembly with metadata reader based on the assembly name.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.Installer.ApplicationDescriptor">
            <summary>
            Gets the product descriptor that provides the essential data on the product being installed or uninstalled.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.Installer.IsVsVersionNeutral">
            <summary>
            <para>Gets whether the installer is currently running in the VS-version-neutral mode.</para>
            <para>The installer is conscequently run on the same data for each of VS versions supported, to produce VS-version-specific data for each VS.</para>
            <para>Also it's run once in VS-version-neutral mode to collect the shared things (and avoid collecting them more than once, if included in version-specific runs).</para>
            <para>When <c>False</c>, you can use the <see cref="P:JetBrains.Application.Install.Installer.VsVersion"/>, <see cref="P:JetBrains.Application.Install.Installer.VsRootSuffix"/>, and <see cref="P:JetBrains.Application.Install.Installer.VsHive"/> attributes to learn the version. When <c>True</c>, the abovementioned properties cannot be access, and will throw.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.Installer.MapInstallerTypeToInstance">
            <summary>
            Maps the attribute-installer types to the created instances of their objects.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.Installer.ResolveSourceDirRoot">
            <summary>
            Gets or sets the resolver that allows to get a physical file system path for the given source file system directory root.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.Installer.VsHive">
            <summary>
            Gets the VS Hive that is the VS Version + VS RootSuffix.
            Examples: “8.0”, “8.0ReSharper”.
            The installation data is bound to a specific hive.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.Installer.VsRootSuffix">
            <summary>
            Gets the VS Root Suffix, eg the main one (an empty string) or the experimental one (eg “ReSharper”).
            The installation data is bound to a specific hive.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.Installer.VsVersion">
            <summary>
            Gets the version of the Visual Studio. Example: “8.0”.
            If the installer is running in the VS-version-neutral mode, throws an exception.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.Installer.MapAssemblyAttributeToInstallers">
            <summary>
            Maps the assembly attributes storing the installation data to the objects that process their registration and unregistration.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.Installer.StaticInstallers">
            <summary>
            Maps the assembly attributes storing the installation data to the objects that process their registration and unregistration.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.Installer.MapTypeAttributeToInstallers">
            <summary>
            Maps the type attributes storing the installation data to the objects that process their registration and unregistration.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallerApplicationDescriptor.myDescriptorInstalledProduct">
            <summary>
            Descriptor of the product we're installing.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.RegistrationStage">
            <summary>
            Defines the exact stage of the registration process of which the handler is being queried.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.RegistrationStage.Register">
            <summary>
            The assembly is being registered.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.RegistrationStage.Unregister">
            <summary>
            The assembly is being unregistered.
            </summary>
        </member>
        <member name="M:JetBrains.Application.License.ILicenseSupport.CreateLicenseData(System.String,System.String,System.String)">
            <summary>
            Creates license data using licenseKey, userName and company name. If only one type of licenses is acceptable,
            normally returns new LicenseData(...). Otherwise some additional processing should take place
            </summary>
        </member>
        <member name="M:JetBrains.Application.License.ILicenseSupport.GetLicenseAgreement(JetBrains.Application.License.LicenseType)">
            <summary>
            License agreement in rich text. NULL if no license agreement is necessary
            </summary>
        </member>
        <member name="P:JetBrains.Application.License.ILicenseSupport.ProductGuid">
            <summary>
            Guid (with braces), that is used to store Date marker
            </summary>
        </member>
        <member name="P:JetBrains.Application.License.ILicenseSupport.FreeTrialPeriod">
            <summary>
            Number of days, free trial period lasts
            </summary>
        </member>
        <member name="P:JetBrains.Application.License.ILicenseSupport.FeedbackRequestPeriod">
            <summary>
            Number of free trial days, after which feedback is requested.
            Negative value means feedback is never requested.
            </summary>
        </member>
        <member name="P:JetBrains.Application.License.ILicenseSupport.LeftDaysNotification">
            <summary>
            Identifies, when to start informing user that, his free trial
            period ends up 
            </summary>
        </member>
        <member name="P:JetBrains.Application.License.ILicenseSupport.ProductFamily">
            <summary>
            JetBrains license server supports ProductFamily as guid without braces !!!
            </summary>
        </member>
        <member name="P:JetBrains.Application.License.LicenseChecker.IsChecksumOK">
            does stored checksum corresponds to the username's one?
            checksum occupies 16 bits
        </member>
        <member name="P:JetBrains.Application.License.LicenseChecker.Version">
            gets OmniaMea version stored in the license code
            occupies 16 bits
        </member>
        <member name="P:JetBrains.Application.License.LicenseChecker.Type">
            gets type of the license stored in the license code
            occupies 8 bits
        </member>
        <member name="P:JetBrains.Application.License.LicenseChecker.GenerationDate">
            gets license generation date stored in the license code
            occupies 16 bits
        </member>
        <member name="P:JetBrains.Application.License.LicenseChecker.ExpirationDate">
            gets license expiration date stored in the license code
            occupies 16 bits
        </member>
        <member name="M:JetBrains.Application.OneTimeInitializationManager.OnCheckFailed(System.Exception)">
            <summary>
            Invoked when one-time-init fails to read/write the Regsitry. Should report to the user in an app-dependent manner.
            </summary>
        </member>
        <member name="P:JetBrains.Application.OneTimeInitializationManager.IsOneTimeInitAllowed">
            <summary>
            Gets whether the one-time-init is allowed to run at the moment, eg the main window has already been created.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Progress.ProgressIndicatorExtensions.Advance(JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            <para>Advances the progress by default fraction (1.0) within the range, as defined by the <see cref="M:JetBrains.Application.Progress.ProgressIndicatorExtensions.Start(JetBrains.Application.Progress.IProgressIndicator,System.Int32,System.String)"/> call.</para>
            <para><see cref="M:JetBrains.Application.Progress.ProgressIndicatorExtensions.Start(JetBrains.Application.Progress.IProgressIndicator,System.Int32,System.String)"/> MUST be called first.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.Progress.ProgressIndicatorExtensions.Advance(JetBrains.Application.Progress.IProgressIndicator,System.Double,System.Action{JetBrains.Application.Progress.IProgressIndicator})">
            <summary>
            <para>Advances the <paramref name="progressParent"/> by <paramref name="fUnitsInParentIndicator"/> units, while running the <paramref name="funcAdvanceSubprogress"/> task.</para>
            <para>Unlike the core <see cref="M:JetBrains.Application.Progress.IProgressIndicator.Advance(System.Double)"/> method, the increment goes gradually, as the <paramref name="funcAdvanceSubprogress"/> calls <see cref="M:JetBrains.Application.Progress.IProgressIndicator.Start(System.Int32)"/>-<see cref="M:JetBrains.Application.Progress.IProgressIndicator.Advance(System.Double)"/>-<see cref="M:JetBrains.Application.Progress.IProgressIndicator.Stop"/> on the <see cref="T:JetBrains.Application.Progress.IProgressIndicator"/> it is given as a parameter. Note that its units are totally indipendent of the <paramref name="fUnitsInParentIndicator"/> in the <paramref name="progressParent"/>. Any range it chooses in its <see cref="M:JetBrains.Application.Progress.IProgressIndicator.Start(System.Int32)"/> will result in <paramref name="fUnitsInParentIndicator"/> advance of the parent.</para>
            </summary>
            <param name="progressParent">The parent progress.</param>
            <param name="fUnitsInParentIndicator">The number of units used up from the <paramref name="progressParent"/>, in terms of its parent <see cref="M:JetBrains.Application.Progress.IProgressIndicator.Advance(System.Double)"/>, when you do <see cref="M:JetBrains.Application.Progress.IProgressIndicator.Start(System.Int32)"/>-<see cref="M:JetBrains.Application.Progress.IProgressIndicator.Stop"/> on this subprogress with any units of your liking.</param>
            <param name="funcAdvanceSubprogress">The subtask that gets its own subprogress.</param>
        </member>
        <member name="M:JetBrains.Application.Progress.ProgressIndicatorExtensions.CreateSubProgress(JetBrains.Application.Progress.IProgressIndicator,System.Double)">
            <summary>
            <para>A sub-routine runs the whole <see cref="M:JetBrains.Application.Progress.IProgressIndicator.Start(System.Int32)"/>-<see cref="M:JetBrains.Application.Progress.IProgressIndicator.Stop"/> run on the subprogress, with units of its own choice in <see cref="M:JetBrains.Application.Progress.IProgressIndicator.Start(System.Int32)"/> and <see cref="M:JetBrains.Application.Progress.IProgressIndicator.Advance(System.Double)"/> on the subprogress, which uses up only <paramref name="fUnitsInParentIndicator"/> in the parent <paramref name="progressParent"/>, in terms of its parent <see cref="M:JetBrains.Application.Progress.IProgressIndicator.Advance(System.Double)"/>.</para>
            <para>This way, a few tasks could share the full progress range without knowing that they're using it together, each one running the whole length of its subprogress.</para>
            </summary>
            <param name="progressParent">The parent progress.</param>
            <param name="fUnitsInParentIndicator">The number of units used up from the <paramref name="progressParent"/>, in terms of its parent <see cref="M:JetBrains.Application.Progress.IProgressIndicator.Advance(System.Double)"/>, when you do <see cref="M:JetBrains.Application.Progress.IProgressIndicator.Start(System.Int32)"/>-<see cref="M:JetBrains.Application.Progress.IProgressIndicator.Stop"/> on this subprogress with any units of your liking.</param>
        </member>
        <member name="M:JetBrains.Application.Progress.ProgressIndicatorExtensions.CreateSubProgress(JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
              <para>
                A sub-routine runs the whole <see cref="M:JetBrains.Application.Progress.IProgressIndicator.Start(System.Int32)"/>-<see cref="M:JetBrains.Application.Progress.IProgressIndicator.Stop"/>
                run on the subprogress, with units of its own choice in <see cref="M:JetBrains.Application.Progress.IProgressIndicator.Start(System.Int32)"/> and
                <see cref="M:JetBrains.Application.Progress.IProgressIndicator.Advance(System.Double)"/> on the subprogress, in terms of its parent
                <see cref="M:JetBrains.Application.Progress.IProgressIndicator.Advance(System.Double)"/>.
              </para>
              <para>
                This way, a few tasks could share the full progress range without knowing that they're using it together,
                each one running the whole length of its subprogress.
              </para>
            </summary>
            <param name="progressParent">The parent progress.</param>
        </member>
        <member name="M:JetBrains.Application.Progress.ProgressIndicatorExtensions.ForEachWithProgressImpl``1(System.Collections.Generic.ICollection{``0},JetBrains.Application.Progress.IProgressIndicator,System.String,System.Boolean,System.Action{JetBrains.Application.Progress.IProgressIndicator,``0})">
            <summary>
            A LINQ-like FOREACH with progress.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Progress.ProgressIndicatorExtensions.ForEachWithProgress``1(System.Collections.Generic.ICollection{``0},JetBrains.Application.Progress.IProgressIndicator,System.String,System.Boolean,System.Action{``0,JetBrains.Application.Progress.IProgressIndicator})">
            <summary>
            A LINQ-like FOREACH with progress.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Progress.ProgressIndicatorExtensions.ForEachWithProgress``1(System.Collections.Generic.ICollection{``0},JetBrains.Application.Progress.IProgressIndicator,System.String,System.Action{``0,JetBrains.Application.Progress.IProgressIndicator})">
            <summary>
            A LINQ-like FOREACH with progress.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Progress.ProgressIndicatorExtensions.ForEachWithProgress``1(System.Collections.Generic.ICollection{``0},JetBrains.Application.Progress.IProgressIndicator,System.String,System.Boolean,System.Action{``0})">
            <summary>
            A LINQ-like FOREACH with progress.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Progress.ProgressIndicatorExtensions.ForEachWithProgress``1(System.Collections.Generic.ICollection{``0},JetBrains.Application.Progress.IProgressIndicator,System.String,System.Action{``0})">
            <summary>
            A LINQ-like FOREACH with progress.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Progress.ProgressIndicatorExtensions.SelectWProgress``2(System.Collections.Generic.ICollection{``0},JetBrains.Application.Progress.IProgressIndicator,System.String,System.Func{``0,``1})">
            <summary>
            A LINQ-like SELECT statement with progress.
            Works on <see cref="T:System.Collections.Generic.ICollection`1"/>, returns a committed <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <typeparam name="TSource">Source item types.</typeparam>
            <typeparam name="TResult">Resulting item types.</typeparam>
            <param name="source">Source items.</param>
            <param name="progress">The progress to track the source items iteration.</param>
            <param name="taskname">Name for the progress run.</param>
            <param name="selector">Selector function.</param>
            <returns>The resulting items.</returns>
        </member>
        <member name="M:JetBrains.Application.Progress.ProgressIndicatorExtensions.Start(JetBrains.Application.Progress.IProgressIndicator,System.Int32,System.String)">
            <summary>
            <para>Starts the progress to run through the [0..totalWorkUnits] range. You MUST call <see cref="M:JetBrains.Application.Progress.IProgressIndicator.Stop"/> at the end. Use <see cref="M:JetBrains.Application.Progress.ProgressIndicatorExtensions.Advance(JetBrains.Application.Progress.IProgressIndicator)"/> to move the progress across the range.</para>
            <para>Generally, you SHOULD set the <see cref="P:JetBrains.Application.Progress.IProgressIndicator.TaskName"/> to identify the current execution span, once per <see cref="M:JetBrains.Application.Progress.ProgressIndicatorExtensions.Start(JetBrains.Application.Progress.IProgressIndicator,System.Int32,System.String)"/>-<see cref="M:JetBrains.Application.Progress.IProgressIndicator.Stop"/>, and change the <see cref="P:JetBrains.Application.Progress.IProgressIndicator.CurrentItemText"/> when doing <see cref="M:JetBrains.Application.Progress.ProgressIndicatorExtensions.Advance(JetBrains.Application.Progress.IProgressIndicator)"/> to comment on the progress.</para>
            <para>If you would like to delegate a sub-range to a nested routine, you SHOULD create a <see cref="T:JetBrains.Application.Progress.SubProgressIndicator"/> and pass the resulting <see cref="T:JetBrains.Application.Progress.IProgressIndicator"/> to the routine, so that it ran a whole range from its point of view, which would then map to a sub-range of this progress indicator.</para>
            </summary>
            <param name="progress">Progress indicator.</param>
            <param name="totalWorkUnits">The inclusive upper limit of the progress range.</param>
            <param name="sTaskName">The <see cref="P:JetBrains.Application.Progress.IProgressIndicator.TaskName"/> value to be set for the run. You SHOULD NOT leave it unmodified, unless you are running a subprogress.</param>
        </member>
        <member name="M:JetBrains.Application.Progress.ProgressIndicatorExtensions.StartProgress(JetBrains.Application.Progress.IProgressIndicator,System.Int32)">
            <summary>
            <para>Just call <see cref="M:JetBrains.Application.Progress.IProgressIndicator.Start(System.Int32)"/> and return the same instance of <see cref="T:JetBrains.Application.Progress.IProgressIndicator"/>. See <see cref="M:JetBrains.Application.Progress.IProgressIndicator.Start(System.Int32)"/> for details.</para>
            </summary>
            <param name="progress">Progress indicator.</param>
            <param name="totalWorkUnits">The inclusive upper limit of the progress range.</param>
            <returns>The same instance of IProgressIndicator in order to use fluent interface.</returns>
        </member>
        <member name="M:JetBrains.Application.Progress.ProgressIndicatorExtensions.StartProgress(JetBrains.Application.Progress.IProgressIndicator,System.Int32,System.String)">
            <summary>
            <para>Just call <see cref="M:JetBrains.Application.Progress.IProgressIndicator.Start(System.Int32)"/> and return the same instance of <see cref="T:JetBrains.Application.Progress.IProgressIndicator"/>. See <see cref="M:JetBrains.Application.Progress.IProgressIndicator.Start(System.Int32)"/> for details.</para>
            </summary>
            <param name="progress">Progress indicator.</param>
            <param name="taskName">The <see cref="P:JetBrains.Application.Progress.IProgressIndicator.TaskName"/> value to be set for the run. You SHOULD NOT leave it unmodified, unless you are running a subprogress.</param>
            <param name="totalWorkUnits">The inclusive upper limit of the progress range.</param>
            <returns>The same instance of IProgressIndicator in order to use fluent interface.</returns>
        </member>
        <member name="M:JetBrains.Application.Progress.ProgressIndicatorExtensions.StartStop(JetBrains.Application.Progress.IProgressIndicator,System.Int32,System.String,System.Action)">
            <summary>
            <para>Starts the progress to run through the [0..totalWorkUnits] range, executes <paramref name="action"/>, and then stops the progress. Use <see cref="M:JetBrains.Application.Progress.ProgressIndicatorExtensions.Advance(JetBrains.Application.Progress.IProgressIndicator)"/> to move the progress across the range.</para>
            <para>Generally, you SHOULD set the <see cref="P:JetBrains.Application.Progress.IProgressIndicator.TaskName"/> to identify the current execution span, once per <see cref="M:JetBrains.Application.Progress.IProgressIndicator.Start(System.Int32)"/>-<see cref="M:JetBrains.Application.Progress.IProgressIndicator.Stop"/>, and change the <see cref="P:JetBrains.Application.Progress.IProgressIndicator.CurrentItemText"/> when doing <see cref="M:JetBrains.Application.Progress.ProgressIndicatorExtensions.Advance(JetBrains.Application.Progress.IProgressIndicator)"/> to comment on the progress.</para>
            <para>If you would like to delegate a sub-range to a nested routine, you SHOULD create a <see cref="T:JetBrains.Application.Progress.SubProgressIndicator"/> and pass the resulting <see cref="T:JetBrains.Application.Progress.IProgressIndicator"/> to the routine, so that it ran a whole range from its point of view, which would then map to a sub-range of this progress indicator.</para>
            </summary>
            <param name="progress">Progress indicator.</param>
            <param name="totalWorkUnits">The inclusive upper limit of the progress range.</param>
            <param name="taskName">The <see cref="P:JetBrains.Application.Progress.IProgressIndicator.TaskName"/> value to be set for the run. You SHOULD NOT leave it unmodified, unless you are running a subprogress.</param>
            <param name="action">The task to execute in between <see cref="M:JetBrains.Application.Progress.IProgressIndicator.Start(System.Int32)"/> and <see cref="M:JetBrains.Application.Progress.IProgressIndicator.Stop"/>.</param>
        </member>
        <member name="M:JetBrains.Application.InterruptableReadActivity.Start">
            <summary>
            Override this method with activity that should happen in primary thread before background thread
            </summary>
        </member>
        <member name="M:JetBrains.Application.InterruptableReadActivity.Work">
            <summary>
            Override this method with activity that happens in background thread.
            </summary>
            This method should periodically check return value of <c>interrupt</c> and either return or 
            throw <c>ProcessCancelledException</c>
        </member>
        <member name="M:JetBrains.Application.InterruptableReadActivity.EndWorkerThread">
            <summary>
            This method will always be invoked at the end of worker thread
            </summary>
        </member>
        <member name="M:JetBrains.Application.InterruptableReadActivity.Finish">
            <summary>
            Override this method with activity that will happen in primary thread after worker thread finishesþ
            </summary>
        </member>
        <member name="M:JetBrains.Application.InterruptableReadActivity.OnInterruptSyncWorkerThread">
            <summary>
            This method is invoked immediately when worked detected interruption. It could be invoked in wrong thread. This method is invoked under continous read lock!
            </summary>
        </member>
        <member name="M:JetBrains.Application.InterruptableReadActivity.OnInterrupt">
            <summary>
            This method is invoked in primary thread if work is interrupted. 
            <b>NOTE: read lock is released between interruption and this method call!</b>
            If this method is invoked, <cref>Finish</cref> will NOT be called.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Progress.CommandLineProgressIndicator.Render">
            <summary>
              Renders current state of Console progress
            </summary>
        </member>
        <member name="T:JetBrains.Application.Progress.CommandLineTaskExecutor">
            <summary>
            Task executor for progress in console
            </summary>
        </member>
        <member name="T:JetBrains.Application.Progress.ITaskExecutor">
            <summary>
            Can execute a task.
            </summary>
            <remarks>
            This object is stateless, and thus not disposable.
            Execution of each of the tasks is an action in itself, with its own disposable scope.
            </remarks>
        </member>
        <member name="M:JetBrains.Application.Progress.ITaskExecutor.ExecuteTask(System.String,JetBrains.Application.Progress.TaskCancelable,System.Action{JetBrains.Application.Progress.IProgressIndicator})">
            <summary>
            Executes the task without exiting the method until the task is completed.
            </summary>
            <param name="name">
            <para>Task title, short form.</para>
            <para>This is used for the progress window title by the UI progress indicators.</para>
            <para>The long form of the task caption should go to the <see cref="P:JetBrains.Application.Progress.IProgressIndicator.TaskName"/> of the <paramref name="task"/>'s <see cref="T:JetBrains.Application.Progress.IProgressIndicator"/>.</para>
            <para>Prepended with the product name automatically. Might be empty, in which case the product name will be used.</para>
            </param>
            <param name="task">The task to execute.</param>
            <param name="cancelable">
            <para>Whether the task could be canceled by the user, if the task progress indication provided by <see cref="T:JetBrains.Application.Progress.ITaskExecutor"/> supports canceling.</para>
            <para>The <see cref="T:JetBrains.Application.Progress.ProcessCancelledException"/> pattern is supported, which means that an <see cref="T:JetBrains.Application.InterruptableActivityCookie"/> is plugged on the task thread to throw a <see cref="T:JetBrains.Application.Progress.ProcessCancelledException"/> when called for a check with a <see cref="P:JetBrains.Application.Progress.IProgressIndicatorModel.IsCanceled"/> <c>False</c>; such an exception is called by the task executor and converted into a <c>False</c> return value.</para>
            </param>
            <returns>Whether the task has completed execution (i.e. was not canceled). Note that even a <see cref="F:JetBrains.Application.Progress.TaskCancelable.No"/> task could be canceled by setting <see cref="P:JetBrains.Application.Progress.IProgressIndicatorModel.IsCanceled"/> to <c>False</c> or throwing a <see cref="T:JetBrains.Application.Progress.ProcessCancelledException"/> or letting some other exception out of the <paramref name="task">task function</paramref>.</returns>
            <remarks>If you would like to return any values from the <paramref name="task"/>, assign them to local variables within the closure.</remarks>
        </member>
        <member name="T:JetBrains.Application.Progress.ProcessCancelledException">
            <summary>
            A special Platform exception that fires when an interruptible activity is aborted.
            </summary>
        </member>
        <member name="T:JetBrains.Build.AllAssemblies.AllAssembliesXml">
            <remarks/>
        </member>
        <member name="F:JetBrains.Build.AllAssemblies.AllAssembliesXml.myAssemblyConfigurationAliases">
            <summary>
            Lists the assembly configuration aliases. Maps them to the the expression defined by the alias.
            </summary>
        </member>
        <member name="F:JetBrains.Build.AllAssemblies.AllAssembliesXml.myHashProductEditionAssemblyConfigurations">
            <summary>
            All assembly configurations that could be attributed to product editions. Lazy-filled by <see cref="M:JetBrains.Build.AllAssemblies.AllAssembliesXml.LoadCore_CacheProductEditions"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Build.AllAssemblies.AllAssembliesXml.myKnownAssemblyConfigurations">
            <summary>
            Lists the assembly configurations from <see cref="P:JetBrains.Build.AllAssemblies.AllAssembliesXml.KnownConfigurations"/>. Maps to usage data (<c>True</c> means there's at least one assembly using this config).
            </summary>
        </member>
        <member name="F:JetBrains.Build.AllAssemblies.AllAssembliesXml.myMapAssemblyConfigurationsToProductEdition">
            <summary>
            Mapping for product edition translations, lazy-filled by <see cref="M:JetBrains.Build.AllAssemblies.AllAssembliesXml.LoadCore_CacheProductEditions"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Build.AllAssemblies.AllAssembliesXml.myMapProductAssemblies">
            <summary>
            Allows to learn quickly if the assembly is a product assembly or not.
            </summary>
        </member>
        <member name="F:JetBrains.Build.AllAssemblies.AllAssembliesXml.myMapProductEditionToAssemblyConfigurations">
            <summary>
            Mapping for product edition translations, lazy-filled by <see cref="M:JetBrains.Build.AllAssemblies.AllAssembliesXml.LoadCore_CacheProductEditions"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AllAssembliesXml.Load(System.IO.Stream)">
            <summary>
            Loads and validates the All Assemblies schema.
            </summary>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AllAssembliesXml.ExecuteConfigurationExpression(System.String,System.Collections.Generic.JetHashSet{System.String})">
            <summary>
            Executes the configurations logical expression from <paramref name="expression"/> that could contain configuration names, aliases, and logical operations. <paramref name="activeconfigs"/> gives the list of configurations that are considered active.
            </summary>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AllAssembliesXml.GetOrphanedConfigs">
            <summary>
            Gets the list of known configurations that were defined but are not used by any of the assembiles or aliases.
            </summary>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AllAssembliesXml.ParseAssemblyConfiguration(System.String)">
            <summary>
            Parses the string value of the assembly configuration and creates the configuration object.
            Validates the value against the known configurations list.
            </summary>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AllAssembliesXml.ParseProductEdition(System.String)">
            <summary>
            Parses the string value of the product edition and creates the edition object.
            Note that this value should be the <see cref="P:JetBrains.Application.KnownValue.Value"/> not <see cref="P:JetBrains.Application.ProductEdition.DisplayName"/>.
            Validates the value against the known configurations list.
            </summary>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AllAssembliesXml.ProductEditionFromAssemblyConfigurations(System.Collections.Generic.ICollection{JetBrains.Application.AssemblyConfiguration},System.Boolean,System.Action{System.Exception})">
            <summary>
            <para>A product edition has two representations: (1) a <see cref="T:JetBrains.Application.ProductEdition"/> that's basically a string identifier that is used for the license information and user display, and (2) a set of assembly configurations that comprise the given edition.</para>
            <para>This function converts between these representations.</para>
            </summary>
            <param name="assemblyconfigurations">The list of assembly configurations to be parsed as a product edition.</param>
            <param name="bAllowOtherConfigurations">Whether other assembly configurations not controlled by the product edition are allowed in the collection. This is the case when the configuration of a running Shell is passed in, because it also might include public/internal, VS version and other configurations.</param>
            <param name="FOnError">Called when an error is encountered. Throw the exception to have a never-returning-Null function, or pass in <see cref="M:JetBrains.Util.Logger.LogException(System.Exception)"/> to handle failures softly.</param>
            <returns>Product edition on success, a <see cref="P:JetBrains.Application.KnownValue.UniversalValue"/> in case of a failure or for a product that does not support product editions.</returns>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AllAssembliesXml.ProductEditionToAssemblyConfigurations(JetBrains.Application.ProductEdition,JetBrains.Util.OnError)">
            <summary>
            <para>A product edition has two representations: (1) a <see cref="T:JetBrains.Application.ProductEdition"/> that's basically a string identifier that is used for the license information and user display, and (2) a set of assembly configurations that comprise the given edition.</para>
            <para>This function converts between these representations.</para>
            </summary>
            <param name="productedition">Product edition ID. <see cref="P:JetBrains.Application.KnownValue.UniversalValue"/> is only allowed if the product has no product editions, in which case it's the only allowed value.</param>
            <param name="onerror">Called when an error is encountered. Throw the exception to have a never-returning-Null function, or pass in <see cref="M:JetBrains.Util.Logger.LogException(System.Exception)"/> to handle failures softly.</param>
            <returns>Product edition assembly configurations on success, an empty collection in case of a failure or for a product that does not support product editions.</returns>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AllAssembliesXml.ResolveConfigurations(System.String)">
            <summary>
            Resolves a space-separated list of assembly configurations or configuration aliases into the list of actual configurations.
            </summary>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AllAssembliesXml.TryGetProductAssembly(System.String)">
            <summary>
            Allows to quickly check if an assembly is a product assembly or not.
            </summary>
            <param name="name">Assembly name.</param>
            <returns>Product assembly descriptor, if found.</returns>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AllAssembliesXml.EnumAllPossibleAssemblies">
            <summary>
            Enums all the assemblies in the list (not only product assemblies, but also product/platform/gac refs).
            </summary>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AllAssembliesXml.LoadCore_CacheProductEditions">
            <summary>
            Uses <see cref="P:JetBrains.Build.AllAssemblies.AllAssembliesXml.ProductEditions"/> to fill the caching structures like <see cref="F:JetBrains.Build.AllAssemblies.AllAssembliesXml.myMapProductEditionToAssemblyConfigurations"/>, <see cref="F:JetBrains.Build.AllAssemblies.AllAssembliesXml.myHashProductEditionAssemblyConfigurations"/>, <see cref="F:JetBrains.Build.AllAssemblies.AllAssembliesXml.myMapAssemblyConfigurationsToProductEdition"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AllAssembliesXml.LoadCore_ResolveAssemblyConfigs">
            <summary>
            (1) Calls resolve on config string of all the configurable assemblies.
            (2) Maintains the list of unused configs.
            </summary>
        </member>
        <member name="M:JetBrains.Build.AllAssemblies.AllAssembliesXml.ResolveConfigurationsCore(System.String,System.Boolean)">
            <summary>
            Impl for <see cref="M:JetBrains.Build.AllAssemblies.AllAssembliesXml.ResolveConfigurations(System.String)"/>.
            </summary>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.AllAssembliesXml.KnownConfigurations">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.AllAssembliesXml.ConfigurationAliases">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.AllAssembliesXml.ProductEditions">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.AllAssembliesXml.Assemblies">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.AllAssembliesXml.PlatformReferences">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.AllAssembliesXml.ProductReferences">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.AllAssembliesXml.GacReferences">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.AllAssembliesXml.Product">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.AllAssembliesXml.AllAssembliesXmlSchema">
            <summary>
            Gets the XSD for the AllAssemblies.xml.
            </summary>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.AllAssembliesXml.DefaultProductEdition">
            <summary>
            Gets the default product edition.
            For a product that does not support editions, returns a <see cref="P:JetBrains.Application.KnownValue.UniversalValue"/> value.
            </summary>
        </member>
        <member name="T:JetBrains.Build.AllAssemblies.KnownValueXml">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.KnownValueXml.Name">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.KnownValueXml.Description">
            <remarks/>
        </member>
        <member name="T:JetBrains.Build.AllAssemblies.ReferencesXml">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.ReferencesXml.Reference">
            <remarks/>
        </member>
        <member name="T:JetBrains.Build.AllAssemblies.ReferenceAssemblyXml">
            <remarks/>
        </member>
        <member name="T:JetBrains.Build.AllAssemblies.InstalledAssemblyXml">
            <remarks/>
        </member>
        <member name="T:JetBrains.Build.AllAssemblies.AssemblyXml">
            <remarks/>
        </member>
        <member name="T:JetBrains.Build.AllAssemblies.ConfiguredAssemblyXml">
            <remarks/>
        </member>
        <member name="T:JetBrains.Build.AllAssemblies.AssemblyNameXml">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.AssemblyNameXml.Name">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.ConfiguredAssemblyXml.Configurations">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.AssemblyXml.ComSelfRegister">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.AssemblyXml.HasAppConfig">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.AssemblyXml.HasMainfest">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.AssemblyXml.HasXmlSerializers">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.AssemblyXml.HasXmlDoc">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.AssemblyXml.HasProgramDatabase">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.InstalledAssemblyXml.MsiComponentGuid">
            <remarks/>
        </member>
        <member name="T:JetBrains.Build.AllAssemblies.GacAssemblyXml">
            <remarks/>
        </member>
        <member name="T:JetBrains.Build.AllAssemblies.ProductAssemblyXml">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.ProductAssemblyXml.ExcludedType">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.ProductAssemblyXml.IsMEF">
            <remarks/>
        </member>
        <member name="T:JetBrains.Build.AllAssemblies.ExcludedTypeXml">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.ExcludedTypeXml.Name">
            <remarks/>
        </member>
        <member name="T:JetBrains.Build.AllAssemblies.PlatformReferencesXml">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.PlatformReferencesXml.PlatformName">
            <remarks/>
        </member>
        <member name="T:JetBrains.Build.AllAssemblies.ConfigurationAliasXml">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.ConfigurationAliasXml.Name">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.ConfigurationAliasXml.Configurations">
            <remarks/>
        </member>
        <member name="T:JetBrains.Build.AllAssemblies.AssemblyConfigurationRefXml">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.AssemblyConfigurationRefXml.Name">
            <remarks/>
        </member>
        <member name="T:JetBrains.Build.AllAssemblies.ProductEditionXml">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.ProductEditionXml.AssemblyConfigurationRef">
            <remarks/>
        </member>
        <member name="P:JetBrains.Build.AllAssemblies.ProductEditionXml.DisplayName">
            <remarks/>
        </member>
        <member name="T:JetBrains.Application.Install.Guids.GuidEntry">
            <summary>
            An entry in the GUID Store.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.Guids.GuidEntry.Guid">
            <summary>
            GUID value of this entry.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.Guids.GuidEntry.Key">
            <summary>
            Key to this entry. Must be unique throughout the dictionary.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.Guids.GuidEntryKey">
            <summary>
            Key to the GUID in the GUID Store.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Guids.GuidEntryKey.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Application.Install.Guids.GuidEntryKey.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Application.Install.Guids.GuidEntryKey.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Application.Install.Guids.GuidEntryKey.Equals(JetBrains.Application.Install.Guids.GuidEntryKey)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="P:JetBrains.Application.Install.Guids.GuidEntryKey.Name">
            <summary>
            Gets the name of the key.
            This is the only key identity.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.Guids.GuidEntryKeyConverter">
            <summary>
            Knows how to switch between <see cref="T:JetBrains.Application.Install.Guids.GuidEntryKey"/>s and <see cref="T:System.String"/>s.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Guids.GuidEntryKeyConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param><param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from. </param>
        </member>
        <member name="M:JetBrains.Application.Install.Guids.GuidEntryKeyConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param><param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to. </param>
        </member>
        <member name="M:JetBrains.Application.Install.Guids.GuidEntryKeyConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param><param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture. </param><param name="value">The <see cref="T:System.Object"/> to convert. </param><exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:JetBrains.Application.Install.Guids.GuidEntryKeyConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context. </param><param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed. </param><param name="value">The <see cref="T:System.Object"/> to convert. </param><param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to. </param><exception cref="T:System.ArgumentNullException">The <paramref name="destinationType"/> parameter is null. </exception><exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="T:JetBrains.Application.Install.Guids.GuidEntryKeys">
            <summary>
            Well-known values for <see cref="T:JetBrains.Application.Install.Guids.GuidEntryKey"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.Guids.GuidStore">
            <summary>
            Represents a store of GUIDs keyed by strings.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Guids.GuidStore.GetEntry(JetBrains.Application.Install.Guids.GuidEntryKey)">
            <summary>
            Tries to get an entry by its key.
            Throws if missing.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Guids.GuidStore.TryGetEntry(JetBrains.Application.Install.Guids.GuidEntryKey)">
            <summary>
            Tries to get an entry by its key.
            <c>Null</c>s if missing.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.Guids.GuidStore.TryGetEntryOrPropose(JetBrains.Application.Install.Guids.GuidEntryKey)">
            <summary>
            Tries to get an entry by its key.
            If missing, adds a new entry to the <see cref="P:JetBrains.Application.Install.Guids.GuidStore.ProposedEntries"/> collection, and returns an empty (but still non-<c>Null</c>) GUID.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.Guids.GuidStore.Entries">
            <summary>
            A GUID value with its key.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.Guids.GuidStore.ProposedEntries">
            <summary>
            For GUID values whose keys were missing from the store, new entries are emitted into this collection, so that they could be moved into the main <see cref="P:JetBrains.Application.Install.Guids.GuidStore.Entries"/> collection by the operator.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.InstallationData">
            <summary>
            The root element of the product installation data.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstallationData.MergeWith(JetBrains.Application.Install.InstallationData.InstallationData)">
            <summary>
            Merges the <paramref name="addon"/> installation data into the host's, and destroys the former.
            All of the collections are guaranteed to be non-Null
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstallationData.RemoveDuplicates">
            <summary>
            Checks for duplicate keys and values, removes, if any.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstallationData.Folders">
            <summary>
            Gets the list of folders with files to install.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstallationData.Registry">
            <summary>
            Gets the installed Registry keys and values.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.InstalledFileItemBase">
            <summary>
            Base class for all of the files installed to the target system by the Installation Data items.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledFileItemBase.#ctor(System.String)">
            <summary>
            Sets the name of the file item on the target filesystem.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledFileItemBase.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledFileItemBase.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledFileItemBase.System#IComparable{JetBrains#Application#Install#InstallationData#InstalledFileItemBase}#CompareTo(JetBrains.Application.Install.InstallationData.InstalledFileItemBase)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledFileItemBase.Equals(JetBrains.Application.Install.InstallationData.InstalledFileItemBase)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledFileItemBase.TargetName">
            <summary>
            The local name of the file on the target system. If left empty, will be the same as the source name. Must be left empty if the source name matches more than one file.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.InstalledFolder">
            <summary>
            Folders that contain files that should be installed on the target system.
            In MSI, they create <c>Directory</c>s and <c>Component</c>s.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledFolder.Id">
            <summary>
            An ID for this folder entry, from which the component, folder and file IDs in the installation database are derived.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledFolder.SourceDir">
            <summary>
            Relative path from the <see cref="P:JetBrains.Application.Install.InstallationData.InstalledFolder.SourceRoot">specified root</see> to the directory on the source system.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledFolder.SourceRoot">
            <summary>
            One of the root folders to locate the file on the source system.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledFolder.TargetDir">
            <summary>
            Relative path from the <see cref="P:JetBrains.Application.Install.InstallationData.InstalledFolder.TargetRoot">specified root</see> to the directory on the target system.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledFolder.TargetRoot">
            <summary>
            One of the root folders to locate the file on the target system.
            </summary>
        </member>
        <member name="T:JetBrains.Application.IApplicationDescriptorEx">
            <summary>
            Extensions to <see cref="T:JetBrains.Application.IApplicationDescriptor"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.IApplicationDescriptorEx.GetProductAssembliesXml(JetBrains.Application.IApplicationDescriptor,System.Collections.Generic.IList{JetBrains.Application.AssemblyConfiguration})">
            <summary>
            Gets the list of assemblies defined by the <see cref="P:JetBrains.Application.IApplicationDescriptor.AllAssembliesXml"/> file, filtered down by the active configuration.
            </summary>
        </member>
        <member name="M:JetBrains.Application.IApplicationDescriptorEx.GetVersionStringForAboutBox(JetBrains.Application.IApplicationDescriptor,System.Boolean,System.Collections.Generic.ICollection{JetBrains.Application.AssemblyConfiguration})">
            <summary>
            <para>Gets the version string for the current product, without the company name.</para>
            <para>Examples:</para>
            <code>
            ReSharper 5 Full Edition build 5.0.666.239 on 2009-06-12
            ReSharper 5 build 5.0.666.239 on 2009-06-12
            build 5.0.666.239 on 2009-06-12
            Full Edition build 5.0.666.239 on 2009-06-12
            </code>
            </summary>
            <param name="descriptor">Descriptor.</param>
            <param name="bPrependProductFullName">Whether the string should start with the product name.</param>
            <param name="configsForProductEdition">Optional. If the product is running, passing its configuration allows to show the product edition after the product name.</param>
        </member>
        <member name="M:JetBrains.Application.IApplicationDescriptorEx.CreatePartCatalog(JetBrains.Application.IApplicationDescriptor)">
            <summary>
            Creates a part catalog with parts from all of the product assemblies. No filtering by configurations is applied at this stage.
            </summary>
        </member>
        <member name="M:JetBrains.Application.IApplicationDescriptorEx.CreatePartCatalogForConfiguration(JetBrains.Application.IApplicationDescriptor,System.Collections.Generic.IList{JetBrains.Application.AssemblyConfiguration})">
            <summary>
            Creates a part catalog with parts from all of the product assemblies. No filtering by configurations is applied at this stage.
            </summary>
        </member>
        <member name="M:JetBrains.Application.IApplicationDescriptorEx.CreatePartCatalogFilterForConfiguration(JetBrains.Application.IApplicationDescriptor,System.Collections.Generic.IList{JetBrains.Application.AssemblyConfiguration})">
            <summary>
            Creates a part catalog filter that limits down product parts to those in the given configuration. Non-product assemblies are let thru as is.
            </summary>
        </member>
        <member name="M:JetBrains.Application.IApplicationDescriptorEx.FilterPartCatalogSetByConfiguration(JetBrains.Application.IApplicationDescriptor,JetBrains.DataFlow.Lifetime,JetBrains.Application.Parts.PartsCatalogueSet,System.Collections.Generic.IList{JetBrains.Application.AssemblyConfiguration})">
            <summary>
            Applies product configuration to narrow down the parts set in the catalog set. Live within the lifetime (applies to new catalogs in the set also).
            </summary>
        </member>
        <member name="M:JetBrains.Application.ProductEditionEx.GetCurrentProductEditon(JetBrains.Application.Env.RunsProducts.ProductConfigurations,JetBrains.Application.IApplicationDescriptor)">
            <summary>
            Gets the product edition of the currently running product instance.
            </summary>
            <param name="configurations"></param>
            <param name="product"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Application.ProductEditionEx.IsEditionIncluded(JetBrains.Application.Env.RunsProducts.ProductConfigurations,JetBrains.Application.ProductEdition,JetBrains.Application.IApplicationDescriptor)">
            <summary>
            Gets whether the current product edition includes the given edition.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ProductEditionEx.IsEditionIncluded(JetBrains.Application.Env.RunsProducts.ProductConfigurations,System.String,JetBrains.Application.IApplicationDescriptor)">
            <summary>
            Gets whether the current product edition includes the given edition.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ProductEditionEx.SupportsEditions(JetBrains.Application.IApplicationDescriptor)">
            <summary>
            Gets whether the current product supports editions.
            If no, only <see cref="P:JetBrains.Application.KnownValue.UniversalValue"/> is valid.
            If yes, <see cref="P:JetBrains.Application.KnownValue.UniversalValue"/> is invalid.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Communication.WebProxySettings">
            <summary>
            Web proxy settings. Use <see cref="T:JetBrains.Application.Communication.WebProxySettingsReader"/> to create a .NET-API-compatible proxy object.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Communication.WebProxySettingsReader">
            <summary>
            Web proxy settings. Use <see cref="T:JetBrains.Application.Communication.WebProxySettingsReader"/> to create a .NET-API-compatible proxy object.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Communication.WebProxySettingsReader.GetProxySettings(JetBrains.Application.DataContext.IDataContext)">
            <summary>
            Gets the .NET-API-compatible proxy settings.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.InstallationMacroName">
            <summary>
            An enumeration of possible macro names, is not used directly in the XML files, but instead serves as a reference info or string constants from the code.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstallationMacroName.PackageCodeBase">
            <summary>
            Location of the Package assembly.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstallationMacroName.SystemDir">
            <summary>
            The System directory. Used to locate the mscoree.dll that is the COM Server for us.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstallationMacroName.ProductBinariesDir">
            <summary>
            The directory that contains the product binaries.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstallationMacroName.DateTime">
            <summary>
            Date and time at the moment the macro is resolved, in an arbitrary format. Use with care, because the date-time might resolve at the installation time on the user machine. The format is not defined. Fits for producing generation numbers.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstallationTargetDirRoot.InstallDir">
            <summary>
            Binaries installation directory on the remote system (the Bin folder).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstallationTargetDirRoot.DevEnvInstallDir">
            <summary>
            Visual Studio installation directory on the remote system, the one that contains the DevEnv.exe executable file (the Common7\IDE folder).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstallationTargetDirRoot.DevEnvRootDir">
            <summary>
            Visual Studio root directory on the remote system, this is two levels above the Visual Studio InstallDir that contains the DevEnv.exe executable file (the Common7\IDE folder).
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.InstalledFile">
            <summary>
            A single satellite file in the installation.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledFile.#ctor(System.String)">
            <summary>
            An installation of a file whose source name (on the source file system) and target name (on the target file system) are the same.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledFile.#ctor(System.String,System.String)">
            <summary>
            An installation of a file whose source name (on the source file system) and target name (on the target file system) are different.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstalledFile.Metadata">
            <summary>
            Any additional metadata on the files.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledFile.GetFilesByMask(JetBrains.Util.FileSystemPath)">
            <summary>
            Gets the list of files to be installed if the file specifies a wildcard.
            </summary>
            <param name="pathSourceDir">The resolved path to the actual source directory of the file.</param>
            <returns>A tuple for each discovered file: full path to the source file, and the matching name of the target file.</returns>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledFile.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledFile.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledFile.System#IComparable{JetBrains#Application#Install#InstallationData#InstalledFile}#CompareTo(JetBrains.Application.Install.InstallationData.InstalledFile)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledFile.Equals(JetBrains.Application.Install.InstallationData.InstalledFile)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledFile.SourceName">
            <summary>
            The local name of the file on the source system. May be a mask that matches more than one file.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.InstalledRegistry">
            <summary>
            Wraps all of the Registry-related data in the installation.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistry.#ctor">
            <summary>
            The default ctor, leaves the collections empty.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistry.#ctor(System.Collections.Generic.IEnumerable{JetBrains.Application.Install.InstallationData.InstalledRegistryKey},System.Collections.Generic.IEnumerable{JetBrains.Application.Install.InstallationData.InstalledRegistryValue})">
            <summary>
            Creates a <see cref="T:JetBrains.Application.Install.InstallationData.InstalledRegistry"/> object and fills it with data.
            </summary>
            <param name="keys">Keys.</param>
            <param name="values">Values.</param>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistry.MergeWith(JetBrains.Application.Install.InstallationData.InstalledRegistry)">
            <summary>
            Merges the <paramref name="addon"/> <see cref="T:JetBrains.Application.Install.InstallationData.InstalledRegistry"/> keys and values into the host's, and destroys the former.
            The <see cref="P:JetBrains.Application.Install.InstallationData.InstalledRegistry.Keys"/> or <see cref="P:JetBrains.Application.Install.InstallationData.InstalledRegistry.Values"/> colections may be <c>Null</c> on either parameter, but on return they're guaranteed to be non-<c>Null</c> in this object.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistry.RemoveDuplicates">
            <summary>
            Checks for duplicate keys and values, removes, if any.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistry.ToInstallationData">
            <summary>
            Wraps into the installation data object.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledRegistry.Keys">
            <summary>
            Registry Keys to install and then REMOVE when uninstalling.
            A regsitry value does not require that you write its parent key here. Write a key if you'd like to make sure it will be removed by uninstall.
            For that matter, do not add foreign keys (eg Visual Studio ones) into which we're writing our values.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledRegistry.Values">
            <summary>
            Individual registry values to be installed.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.InstalledRegistryKey">
            <summary>
            Registry Keys to install and then REMOVE when uninstalling.
            A regsitry value does not require that you write its parent key here. Write a key if you'd like to make sure it will be removed by uninstall.
            For that matter, do not add foreign keys (eg Visual Studio ones) into which we're writing our values.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.InstalledRegistryItemBase">
            <summary>
            Base class for installer Registry keys and values.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistryItemBase.#ctor(JetBrains.Application.Install.InstallationData.InstalledRegistryHive,System.String)">
            <summary>
            Creates a <see cref="T:JetBrains.Application.Install.InstallationData.InstalledRegistryValue"/> object.
            </summary>
            <param name="hive">Hive.</param>
            <param name="key">Path to the key under the hive.</param>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistryItemBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistryItemBase.System#IComparable{JetBrains#Application#Install#InstallationData#InstalledRegistryItemBase}#CompareTo(JetBrains.Application.Install.InstallationData.InstalledRegistryItemBase)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledRegistryItemBase.Hive">
            <summary>
            The Registry hive.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledRegistryItemBase.Key">
            <summary>
            Path to the key.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistryKey.#ctor(JetBrains.Application.Install.InstallationData.InstalledRegistryHive,System.String)">
            <summary>
            Creates a <see cref="T:JetBrains.Application.Install.InstallationData.InstalledRegistryValue"/> object.
            </summary>
            <param name="hive">Hive.</param>
            <param name="key">Path to the key under the hive.</param>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistryKey.CreateKey(System.String)">
            <summary>
            Creates a new Registry Key under the current Registry key.
            </summary>
            <param name="relpath">Relative path of the nested Key.</param>
            <returns>The new registry value.</returns>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistryKey.CreateValue(System.String,System.Object)">
            <summary>
            Creates a new Registry Value that derives its Hive and Key path from the current Registry key.
            </summary>
            <param name="name">Name of the value.</param>
            <param name="value">Value of the value, must be either a <see cref="T:System.String"/> or an <see cref="T:System.Int32"/>.</param>
            <returns>The new registry value.</returns>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistryKey.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistryKey.System#IComparable{JetBrains#Application#Install#InstallationData#InstalledRegistryKey}#CompareTo(JetBrains.Application.Install.InstallationData.InstalledRegistryKey)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstalledRegistryHive.Hkcr">
            <summary>
            <c>HKEY_CLASSES_ROOT</c>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstalledRegistryHive.Hklm">
            <summary>
            <c>HKEY_LOCAL_MACHINE</c>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstalledRegistryHive.Hkcu">
            <summary>
            <c>HKEY_CURRENT_USER</c>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstalledRegistryHive.Hkmu">
            <summary>
            <c>HKEY_LOCAL_MACHINE</c> or <c>HKEY_CURRENT_USER</c>, depending on whether the installation is per-machine or per-user.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.InstalledRegistryValue">
            <summary>
            Represents a value to be written to the Registry. On uninstallation, the value will be deleted. It is not necessary to have a key element for each value, unless you want it to be deleted upon uninstallation.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistryValue.#ctor(JetBrains.Application.Install.InstallationData.InstalledRegistryHive,System.String,System.String,System.Object)">
            <summary>
            Creates a <see cref="T:JetBrains.Application.Install.InstallationData.InstalledRegistryValue"/> object.
            </summary>
            <param name="hive">Hive.</param>
            <param name="key">Path to the key under the hive.</param>
            <param name="name">Name of the value.</param>
            <param name="value">Value of the value, must be either a <see cref="T:System.String"/> or an <see cref="T:System.Int32"/>.</param>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistryValue.ToRegistry">
            <summary>
            Creates a new Registry with just this value.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistryValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledRegistryValue.System#IComparable{JetBrains#Application#Install#InstallationData#InstalledRegistryValue}#CompareTo(JetBrains.Application.Install.InstallationData.InstalledRegistryValue)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledRegistryValue.IsPermanent">
            <summary>
            Specifies that the value should be written on registration and left intact on unregistration.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledRegistryValue.Name">
            <summary>
            Name of the value under its key, or an empty string for the default value of the key.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledRegistryValue.Type">
            <summary>
            Type of the value, which determines the type of the Windows Registry value to be created. The Value must be formatted accordingly.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledRegistryValue.Value">
            <summary>
            Value for the value.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstallationSourceDirRoot.ProductBinariesDir">
            <summary>
            A directory to which the product is built; contains all of the product binaries. Warning: when doing a local install, this is the same as the target InstallDir.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstallationSourceDirRoot.ProductHomeDir">
            <summary>
            Home directory of the product, can be used to refer to product library files (see also PlatformHomeDir). Shouldn't be used for the Bin folder, see ProductBinariesDir instead, because it may be redirected on the build.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstallationSourceDirRoot.PlatformHomeDir">
            <summary>
            Home directory of the platform, can be used to refer to platform library files.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstallationSourceDirRoot.ProductIntermediateDir">
            <summary>
            A directory into which the Product projects build writes its intermediate files.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstallationSourceDirRoot.ProductReferencesDir">
            <summary>
            A directory with the Product reference assemblies and files.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstallationSourceDirRoot.PlatformReferencesDir">
            <summary>
            A directory with the Platform reference assemblies and files.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.InstalledRegistryValueType">
            <summary>
            Lists possible types for the Registry values.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstalledRegistryValueType.Dword">
            <summary>
            An integer DWORD value.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallationData.InstalledRegistryValueType.String">
            <summary>
            A string value.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.InstallationData.InstalledShellLink">
            <summary>
            Installs a shell link (an .lnk file shortcut).
            Its <see cref="P:JetBrains.Application.Install.InstallationData.InstalledFileItemBase.TargetName"/> and parent folder's <see cref="P:JetBrains.Application.Install.InstallationData.InstalledFolder.TargetRoot"/>/<see cref="P:JetBrains.Application.Install.InstallationData.InstalledFolder.TargetDir"/> point to the place where the shell link file will be created (.lnk), while the <see cref="P:JetBrains.Application.Install.InstallationData.InstalledShellLink.ShellLinkTargetRoot"/>/<see cref="P:JetBrains.Application.Install.InstallationData.InstalledShellLink.ShellLinkTargetDir"/>/<see cref="P:JetBrains.Application.Install.InstallationData.InstalledShellLink.ShellLinkTargetName"/> point to the target the shell link will be referencing.
            The source information on the parent <see cref="T:JetBrains.Application.Install.InstallationData.InstalledFolder"/> is not used for the shell link.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledShellLink.#ctor(System.String,JetBrains.Application.Install.InstallationData.InstallationTargetDirRoot,System.String,System.String)">
             <summary>
             Sets the name of the file item on the target filesystem.
             </summary>
            <param name="sShellLinkFileTargetName">
              Name of the shell link file itself on the target filesystem.
            </param>
            <param name="shellLinkTargetRoot">
              Root folder on the target file system this Shell Link will be pointing to.
              Note that this is not the location of the shell link (.lnk) file itself.
            </param>
            <param name="shellLinkTargetDir">
              Relative path from the
              <see cref="P:JetBrains.Application.Install.InstallationData.InstalledShellLink.ShellLinkTargetRoot">root folder</see>
              on the target file system this Shell Link will be pointing to.
              Note that this is not the location of the shell link (.lnk) file itself.
            </param>
            <param name="shellLinkTargetName">
              Name of the file on the target file system this Shell Link will be pointing to.
              Note that this is not the location of the shell link (.lnk) file itself.
            </param>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledShellLink.Equals(JetBrains.Application.Install.InstallationData.InstalledShellLink)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledShellLink.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Application.Install.InstallationData.InstalledShellLink.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledShellLink.ShellLinkTargetDir">
            <summary>
            Relative path from the <see cref="P:JetBrains.Application.Install.InstallationData.InstalledShellLink.ShellLinkTargetRoot">root folder</see> on the target file system this Shell Link will be pointing to.
            Note that this is not the location of the shell link (.lnk) file itself.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledShellLink.ShellLinkTargetName">
            <summary>
            Name of the file on the target file system this Shell Link will be pointing to.
            Note that this is not the location of the shell link (.lnk) file itself.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallationData.InstalledShellLink.ShellLinkTargetRoot">
            <summary>
            Root folder on the target file system this Shell Link will be pointing to.
            Note that this is not the location of the shell link (.lnk) file itself.
            </summary>
        </member>
        <member name="T:JetBrains.Application.DataFlowEx">
            <summary>
            DataFlow extension methods that require a Shell.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataFlowEx.AssertUiThreadFiring``1(JetBrains.DataFlow.ISignal{``0})">
            <summary>
            Prevents any property modifications if called on any thread but the primary one.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataFlowEx.AssertUiThreadModifications``1(JetBrains.DataFlow.ICollectionEvents{``0})">
            <summary>
            Prevents any collection modifications if called on any thread but the primary one.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataFlowEx.AssertUiThreadModifications``1(JetBrains.DataFlow.IProperty{``0})">
            <summary>
            Prevents any property modifications if called on any thread but the primary one.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataFlowEx.BeginSetGuarded``1(JetBrains.DataFlow.IProperty{``0},``0,System.Object)">
            <summary>
            Assigns a new value to the property under a <see cref="T:JetBrains.Threading.ReentrancyGuard"/> on the primary thread, asynchronously.
            The <see cref="M:JetBrains.Threading.ReentrancyGuard.ExecuteOrQueue(System.String,System.Action)"/> logic is not used, the asynchronous <see cref="M:JetBrains.Threading.ReentrancyGuard.Queue(System.String,System.Action)"/> is always called instead, even if allowed to <see cref="M:JetBrains.Threading.ReentrancyGuard.Execute(System.String,System.Action)"/> in the moment. This guarantees that the property value assignments will always be serialized (eg a later <see cref="M:JetBrains.Threading.ReentrancyGuard.Execute(System.String,System.Action)"/> will not be overwritten when a previous <see cref="M:JetBrains.Threading.ReentrancyGuard.Queue(System.String,System.Action)"/> gets to run).
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataFlowEx.EnsureGuarded``1(JetBrains.DataFlow.Property{``0})">
            <summary>
            Ensures that the property is modified (and the events are fired) in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> only.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataFlowEx.EnsureGuarded``1(JetBrains.DataFlow.Property{``0},JetBrains.DataFlow.Lifetime,JetBrains.Threading.ReentrancyGuard)">
            <summary>
            Ensures that the property is modified (and the events are fired) in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> only.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataFlowEx.EnsureGuarded``1(JetBrains.DataFlow.Property{``0},JetBrains.DataFlow.Lifetime,JetBrains.Threading.IThreading)">
            <summary>
            Ensures that the property is modified (and the events are fired) in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> only.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataFlowEx.EnsureGuarded``1(JetBrains.DataFlow.Property{``0},JetBrains.Threading.ReentrancyGuard)">
            <summary>
            Ensures that the property is modified (and the events are fired) in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> only.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataFlowEx.EnsureGuarded``1(JetBrains.DataFlow.IProperty{``0},JetBrains.DataFlow.Lifetime,JetBrains.Threading.ReentrancyGuard)">
            <summary>
            Ensures that the property is modified (and the events are fired) in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> only.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataFlowEx.EnsureGuarded``1(JetBrains.DataFlow.Signal{``0})">
            <summary>
            Ensures that the signal is fired in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> only.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataFlowEx.EnsureGuarded(JetBrains.DataFlow.SimpleSignal)">
            <summary>
            Ensures that the signal is fired in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> only.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataFlowEx.EnsureGuarded``1(JetBrains.DataFlow.CollectionEvents{``0},JetBrains.Threading.ReentrancyGuard)">
            <summary>
            Ensures that the collection is modified (and the events are fired) in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> only.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataFlowEx.EnsureGuarded``2(JetBrains.DataFlow.DictionaryEvents{``0,``1},JetBrains.Threading.ReentrancyGuard)">
            <summary>
            Ensures that the collection is modified (and the events are fired) in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> only.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataFlowEx.EnsurePrimaryThread``1(JetBrains.DataFlow.Property{``0})">
            <summary>
            Ensures that the property is modified (and the events are fired) on the <see cref="!:PlatformObsoleteStatics.PrimaryThread"/> only.
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataFlowEx.FlowIntoGuarded_NoReplay``1(JetBrains.DataFlow.IProperty{``0},JetBrains.DataFlow.Lifetime,JetBrains.DataFlow.IProperty{``0},JetBrains.Threading.ReentrancyGuard,System.Object,System.Boolean)">
            <summary>
            <para>Establishes a data flow between two properties. The assignment to the target property only happens in the <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> on the <see cref="!:PlatformObsoleteStatics.PrimaryDispatcher">primary thread</see>.</para>
            <para>It is guaranteed that the values are properly serialized, ie a delayed early value will not overwrite a later direct execution.</para>
            <para>Returns a cookie for terminating the flow.</para>
            <para>Not suitable for high-throughput property changes, as it schedulles a new guarded execution for each change. Use <see cref="M:JetBrains.DataFlow.IPropertyEx.FlowInto_Grouped``1(JetBrains.DataFlow.IProperty{``0},JetBrains.DataFlow.Lifetime,JetBrains.DataFlow.IProperty{``0},JetBrains.Threading.GroupingEvent,JetBrains.DataFlow.StandardPreconditions.ReadonlyToken)"/> in such cases.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataFlowEx.FlowIntoGuarded_Replay``1(JetBrains.DataFlow.ICollectionEvents{``0},JetBrains.DataFlow.ICollectionEvents{``0},System.Object,System.Boolean,JetBrains.Util.Concurrency.UnguardedCallbackMerger,JetBrains.Threading.IThreading)">
            <summary>
            <para>Establishes a data flow between two collections. The changes to the target collection only happen in the <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> on the <see cref="!:PlatformObsoleteStatics.PrimaryDispatcher">primary thread</see>.</para>
            <para>It is guaranteed that the values are properly serialized, ie a delayed early value will not overwrite a later direct execution.</para>
            <para>Returns a cookie for terminating the flow.</para>
            <para>Not suitable for high-throughput changes, as it schedulles a new guarded execution for each change.</para>
            <para>Uses the given callback merger for guarding the changes.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Application.DataFlowEx.FlowIntoGuarded_Replay``1(JetBrains.DataFlow.ICollectionEvents{``0},JetBrains.DataFlow.ICollectionEvents{``0},System.Object,System.Boolean,JetBrains.Threading.IThreading)">
            <summary>
            <para>Establishes a data flow between two collections. The changes to the target collection only happen in the <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> on the <see cref="!:PlatformObsoleteStatics.PrimaryDispatcher">primary thread</see>.</para>
            <para>It is guaranteed that the values are properly serialized, ie a delayed early value will not overwrite a later direct execution.</para>
            <para>Returns a cookie for terminating the flow.</para>
            <para>Not suitable for high-throughput changes, as it schedulles a new guarded execution for each change.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.DataFlowEx.FlowIntoCollectionAction`1">
            <summary>
            Helper for <see cref="!:DataFlowEx.FlowIntoGuarded_Replay&lt;TValue&gt;(JetBrains.DataFlow.ICollectionEvents&lt;TValue&gt;,JetBrains.DataFlow.ICollectionEvents&lt;TValue&gt;,object,bool)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ExceptionReport.ExceptionData.AddExternalDataLine(System.Exception,System.String)">
            <summary>
            Adds to the <see cref="P:JetBrains.Application.ExceptionReport.ExceptionData.HeaderText"/>.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ExceptionReport.ExceptionData.HeaderText">
            <summary>
            Additional text in the header, just before the full stack traces of the exception. Might contain environmental info, build description, etc.
            Most of the technical data must be added to the exception data itself, with <see cref="M:JetBrains.Util.ExceptionEx.AddData``1(``0,System.String,System.Func{System.Object})"/> inside your implementation of <see cref="M:JetBrains.Application.ExceptionReport.IExceptionReportDataProvider.ProvideExceptionData(System.Exception)"/>. It will appear in the detailed stack traces among the data field of the outermost exception.
            If you'd like your data get into the header text, call <see cref="M:JetBrains.Application.ExceptionReport.ExceptionData.AddExternalDataLine(System.Exception,System.String)"/> inside your implementation of <see cref="M:JetBrains.Application.ExceptionReport.IExceptionReportDataProvider.ProvideExceptionData(System.Exception)"/>. Use sparingly.
            </summary>
        </member>
        <member name="T:JetBrains.Application.ExceptionReport.ExceptionReporting">
            <summary>
            Central class of the Exception Reporting subsystem.
            </summary>
        </member>
        <member name="F:JetBrains.Application.ExceptionReport.ExceptionReporting.myDispatcher">
            <summary>
            Identifies the owning thread.
            </summary>
        </member>
        <member name="F:JetBrains.Application.ExceptionReport.ExceptionReporting.myIsInInternalMode">
            <summary>
            Whether the product is running in Internal Mode. Knows this earlier than the Shell with its <see cref="!:PlatformObsoleteStatics.IsInInternalMode"/>. Cannot be reset once the session was seen in internal mode.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ExceptionReport.ExceptionReporting.IsRelevantException(System.Exception)">
            <summary>
            Looks for our company/product names in the stack trace.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ExceptionReport.ExceptionReporting.AttachToLogger">
            <summary>
            Starts listening logger events with this exception reporter.
            Previously listening exception reporters are stacked beneath and deactivated until this method is reverted by disposing of its return value.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ExceptionReport.ExceptionReporting.SetInternalMode">
            <summary>
            Tells the Exception Reporting we've entered the Internal mode. Should be called as early as it gets known.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ExceptionReport.ExceptionReporting.TaskExecutor">
            <summary>
            Gets the task executor passed to nested <see cref="M:JetBrains.Application.ExceptionReport.ExceptionReporting.SetStrategy(JetBrains.Application.ExceptionReport.IExceptionReportStrategy)">strategies</see> to handle the exceptions.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ExceptionReport.ExceptionReporting.IsShowingExceptionsToUser">
            <summary>
            Central property for deciding whether to show any exceptions to the user.
            Sometimes we'd like to suppress exception notifications at all (eg for trade show demos), in these cases this flag goes low.
            </summary>
        </member>
        <member name="F:JetBrains.Application.ExceptionReport.ExceptionReporting.ExceptionReporterAttachedToLogger.myReportersStack">
            <summary>
            Free-threaded, lock-free reads, copy-on-write.
            Stacks reporters, the last one is active.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ExceptionReport.ExceptionReporting.ExceptionReporterAttachedToLogger.AddReporter(JetBrains.Application.ExceptionReport.ExceptionReporting)">
            <summary>
            Starts listening logger events with this exception reporter.
            Previously listening exception reporters are stacked beneath and deactivated until this method is reverted by disposing of its return value.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ExceptionReport.ExceptionReporting.ExceptionReporterAttachedToLogger.OnException(System.Object,JetBrains.DataFlow.EventArgs{System.Exception})">
            <summary>
            Exception occured. Dispatch to reporter on top of stack.
            Might be empty, as we would never remove exception listener.
            </summary>
        </member>
        <member name="T:JetBrains.Application.ExecuteOrQueueSingular">
            <summary>
            Wraps <see cref="M:JetBrains.Threading.ReentrancyGuard.ExecuteOrQueue(System.String,System.Action)"/> by executing the same single action. If the execution has been delayed because another execution is in progress (<see cref="M:JetBrains.Threading.ReentrancyGuard.Queue(System.String,System.Action)"/> scenario), does not queue any more executions until the pending one is executed. When the object is disposed of, drops all of the pending executions so that they're never executed after the <see cref="M:System.IDisposable.Dispose"/>.
            Mostly like a <see cref="T:JetBrains.Threading.GroupingEvent"/>, but without any grouping or additional delaying.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ExecuteOrQueueSingular.#ctor(JetBrains.DataFlow.Lifetime,System.String,System.Action,JetBrains.Threading.IThreading)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ExecuteOrQueueSingular.#ctor(JetBrains.DataFlow.Lifetime,System.Action,System.Action{System.Action})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            Allows to specify the execute-or-queue action manually.
            </summary>
            <param name="lifetime"></param>
            <param name="FUserAction">The useful user action to be executed when the guarded context is entered.</param>
            <param name="FExecuteOrQueue">The action that causes something to be executed or queued.</param>
        </member>
        <member name="T:JetBrains.ProjectModel.Impl.FileSystemScanner">
            <summary>
            Helper class for scanning a directory for files matching a pattern
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.BindingRedirectionsInstaller.CleanupOldEntries(JetBrains.Application.Install.Installer,System.Xml.XmlDocument)">
            <summary>
            Looks for previous patchings in the config, removes them.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.BindingRedirectionsInstaller.LoadConfigFile(JetBrains.Application.Install.Installer,JetBrains.Application.Install.InstallationData.InstallationSourceDirRoot,System.String)">
            <summary>
            Loads the source config file, or creates a new one.
            Ensures it contains enough top-level elements.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.BindingRedirectionsInstaller.WriteNewEntries(JetBrains.Application.Install.Installer,System.Xml.XmlDocument)">
            <summary>
            Patches the config XML document with redirections.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.BindingRedirectionsInstaller.InstallInstance(JetBrains.Application.Install.Installer,System.Object)">
            <summary>
            Called for each of the attributes of the requested type encountered in the known assemblies.
            </summary>
            <param name="installer">The installer object that provides the installation data.</param>
            <param name="attributeInstance">Instance of the attribute to process.</param>
            <returns>The list of the Registry entries to write, or <c>Null</c> if none.</returns>
        </member>
        <member name="T:JetBrains.Application.Install.BindingRedirectionsInstaller.AssemblyBindingRedirections">
            <summary>
            Produces the default assembly binding redirections for a product assembly.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.BindingRedirectionsInstaller.Attr">
            <summary>
            Attribute names.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.BindingRedirectionsInstaller.Elem">
            <summary>
            Element names.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.BindingRedirectionsInstaller.Nsp">
            <summary>
            Namespace aliases.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.BindingRedirectionsInstaller.Xmlns">
            <summary>
            XML Namespaces.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.FileInstaller">
            <summary>
            Processes the <see cref="T:JetBrains.Application.Install.InstallFileAttribute"/> installations.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.FileInstaller.InstallInstance(JetBrains.Application.Install.Installer,System.Object)">
            <summary>
            Called for each of the attributes of the requested type encountered in the known assemblies.
            </summary>
            <param name="installer">The installer object that provides the installation data.</param>
            <param name="attributeInstance">Instance of the attribute to process.</param>
            <returns>The list of the Registry entries to write, or <c>Null</c> if none.</returns>
        </member>
        <member name="T:JetBrains.Application.Install.InstallBindingRedirectionsConfigFileAttribute">
            <summary>
            Updates (compile-time) a config file to include the binding redirections for the current version of the product.
            A new file could also be created.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallBindingRedirectionsConfigFileAttribute.#ctor(System.String)">
            <summary>
            Schedulles creation of a new assembly configuration file with binding redirections.
            </summary>
            <param name="sTargetConfigFileName">Local name of the resulting config file, including all of the extensions. This file will be installed into the <see cref="F:JetBrains.Application.Install.InstallationData.InstallationTargetDirRoot.InstallDir"/> folder.</param>
        </member>
        <member name="M:JetBrains.Application.Install.InstallBindingRedirectionsConfigFileAttribute.#ctor(System.String,JetBrains.Application.Install.InstallationData.InstallationSourceDirRoot,System.String)">
            <summary>
            Schedulles patching of an existing assembly configuration file with binding redirections.
            </summary>
            <param name="sTargetConfigFileName">Local name of the resulting config file, including all of the extensions. This file will be installed into the <see cref="F:JetBrains.Application.Install.InstallationData.InstallationTargetDirRoot.InstallDir"/> folder.</param>
            <param name="sourceroot">Root folder for looking up the original file. This could be <see cref="F:JetBrains.Application.Install.InstallationData.InstallationSourceDirRoot.ProductBinariesDir"/> (same as destination), but this is not a recommended scenario, as the file might be patched multiple times in this case. If <paramref name="sSourceRelativePath"/> is not specified, this value is ignored.</param>
            <param name="sSourceRelativePath">An optional path to the source file, relative to <paramref name="sourceroot"/>. If non-<c>Null</c>, then the binding redirections are added to the contents of that file. If <c>Null</c>, then a new file is created.</param>
        </member>
        <member name="T:JetBrains.Application.Install.InstallerVsVersionAffinity">
            <summary>
            Specifies how the installation action is interested in VisualStudio version.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallerVsVersionAffinity.Neutral">
            <summary>
            The installation data is VS-version-neutral, and the installer will be called only if <see cref="P:JetBrains.Application.Install.Installer.VsVersion"/> is <c>Null</c> (to avoid duplicating the same data coming from runs for different versions).
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallerVsVersionAffinity.Specific">
            <summary>
            The installation data depends on the VS version, and the installer will be called only when <see cref="P:JetBrains.Application.Install.Installer.VsVersion"/> is set to a specific value. Be sure not to generate the same data (target file names, MSI GUIDs) in this mode.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Install.InstallerVsVersionAffinity.CallAlways">
            <summary>
            The installer is always called, regardless of the <see cref="P:JetBrains.Application.Install.Installer.VsVersion"/> value.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.InstallFileAttribute">
            <summary>
            Adds one or more arbitrary files to the installation.
            The files may reside either in Lib or Bin folders.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.InstallFileAttribute.#ctor(System.String,JetBrains.Application.Install.InstallationData.InstallationTargetDirRoot,System.String,JetBrains.Application.Install.InstallationData.InstallationSourceDirRoot,System.String,System.String,System.Boolean)">
            <summary>
            Adds one or more arbitrary files to the installation.
            </summary>
            <param name="targetroot">Base folder on the installation site.</param>
            <param name="sTargetRelativeDir">Relative path from the base folder on the installation site.</param>
            <param name="sourceroot">Base folder on the compilation site.</param>
            <param name="sSourceRelativeDir">Relative path from the base folder on the compilation site.</param>
            <param name="sFilesMask">Mask for picking the files from the folder on the compilation site (source). More than one file is OK. File names will be the same on the installation site (target).</param>
            <param name="recursive">Process all folders recursively</param>
            <param name="id">The unique identifier for this installation entry.</param>
        </member>
        <member name="P:JetBrains.Application.Install.InstallFileAttribute.FilesMask">
            <summary>
            Mask for picking the files from the folder on the compilation site (source). More than one file is OK. File names will be the same on the installation site (target).
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallFileAttribute.Id">
            <summary>
            The unique identifier for this installation entry.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallFileAttribute.IsRecursive">
            <summary>
            Process all subfolders recursively, or not
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallFileAttribute.SourceRelativeDir">
            <summary>
            Relative path from the base folder on the compilation site.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallFileAttribute.SourceRoot">
            <summary>
            Base folder on the compilation site.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallFileAttribute.TargetRelativeDir">
            <summary>
            Relative path from the base folder on the installation site.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Install.InstallFileAttribute.TargetRoot">
            <summary>
            Base folder on the installation site.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Install.LocalInstaller">
            <summary>
            Performs local-system installations, hence “Live”.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.LocalInstaller.Install(JetBrains.Application.Install.InstallationData.InstallationData,JetBrains.Application.Install.RegistrationStage,System.Collections.Generic.IDictionary{System.String,System.String},System.Func{JetBrains.Application.Install.InstallationData.InstallationSourceDirRoot,JetBrains.Util.FileSystemPath},System.Func{JetBrains.Application.Install.InstallationData.InstallationTargetDirRoot,JetBrains.Util.FileSystemPath},System.Action{System.String})">
            <summary>
            Performs the local installation of the given installation data by writing the Registry keys and copying the files.
            </summary>
            <param name="dataxml">The installation data.</param>
            <param name="stage">Stage, either install or uninstall.</param>
            <param name="LogMessage">The logging facility.</param>
            <param name="ResolveSourceDirRoot">Resolves the source directory, for copying the files from.</param>
            <param name="ResolveTargetDirRoot">Resolves the target directory, for copying the files into.</param>
            <param name="macros">The maros to be substituted on install, if needed.</param>
        </member>
        <member name="M:JetBrains.Application.Install.LocalInstaller.GetWindowsRegistryRootKey(JetBrains.Application.Install.InstallationData.InstalledRegistryHive)">
            <summary>
            Gets the proper Windows Registry root key.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.LocalInstaller.InstallFiles(JetBrains.Application.Install.InstallationData.InstallationData,JetBrains.Application.Install.RegistrationStage,System.Action{System.String},System.Func{JetBrains.Application.Install.InstallationData.InstallationSourceDirRoot,JetBrains.Util.FileSystemPath},System.Func{JetBrains.Application.Install.InstallationData.InstallationTargetDirRoot,JetBrains.Util.FileSystemPath})">
            <summary>
            Copies or deletes the files.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.LocalInstaller.InstallRegistry(JetBrains.Application.Install.InstallationData.InstalledRegistry,JetBrains.Application.Install.RegistrationStage,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Executes the registration/unregistration operations on the Registry keys.
            </summary>
            <param name="registry">The Registry to process.</param>
            <param name="registrationStage">Processing type.</param>
            <param name="macros">The macros to substitute when processing the keys.</param>
        </member>
        <member name="M:JetBrains.Application.Install.LocalInstaller.RegisterKey(JetBrains.Application.Install.InstallationData.InstalledRegistryKey,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Writes the key to the Registry.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.LocalInstaller.RegisterValue(JetBrains.Application.Install.InstallationData.InstalledRegistryValue,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Writes the value to the Registry.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.LocalInstaller.UnregisterKey(JetBrains.Application.Install.InstallationData.InstalledRegistryKey,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Deletes the key from the Registry.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Install.LocalInstaller.UnregisterValue(JetBrains.Application.Install.InstallationData.InstalledRegistryValue,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Deletes the value from the Registry.
            </summary>
        </member>
        <member name="T:JetBrains.Application.InterruptableReadActivityThe">
            <summary>
            A non-abstract implementation for the <see cref="T:JetBrains.Application.InterruptableReadActivity"/> that allows to specify its behavior externally, without creating an inheritor.
            </summary>
        </member>
        <member name="M:JetBrains.Application.InterruptableReadActivityThe.#ctor(System.Func{System.Boolean})">
            <summary>
            Constructs the instance.
            </summary>
            <param name="funcIsCancelled">The function that will be checked for cancellation periodically by the <see cref="P:JetBrains.Application.InterruptableReadActivityThe.FuncRun"/> function.</param>
        </member>
        <member name="M:JetBrains.Application.InterruptableReadActivityThe.Finish">
            <summary>
            Override this method with activity that will happen in primary thread after worker thread finishesþ
            </summary>
        </member>
        <member name="M:JetBrains.Application.InterruptableReadActivityThe.OnInterrupt">
            <summary>
            This method is invoked in primary thread if work is interrupted. 
            </summary>
            If this method is invoked, <cref>Finish</cref> will NOT be called.
            
        </member>
        <member name="M:JetBrains.Application.InterruptableReadActivityThe.Start">
            <summary>
            Override this method with activity that should happen in primary thread before background thread
            </summary>
        </member>
        <member name="M:JetBrains.Application.InterruptableReadActivityThe.Work">
            <summary>
            Override this method with activity that happens in background thread.
            </summary>
            This method should periodically check return value of <c>d</c> and either return or 
            throw <c>ProcessCancelledException</c>
        </member>
        <member name="P:JetBrains.Application.InterruptableReadActivityThe.FuncCancelled">
            <summary>
            Gets or sets the function that is executed in case the action is aborted.
            </summary>
        </member>
        <member name="P:JetBrains.Application.InterruptableReadActivityThe.FuncCompleted">
            <summary>
            Gets or sets the function that gets executed on the UI thread in case the action completes successfully.
            </summary>
        </member>
        <member name="P:JetBrains.Application.InterruptableReadActivityThe.FuncCompletedOrCancelled">
            <summary>
            Gets or sets the function that is executed on the UI thread when the action finishes execution with either result.
            </summary>
        </member>
        <member name="P:JetBrains.Application.InterruptableReadActivityThe.FuncRun">
            <summary>
            Gets or sets the worker function that executes on the secondary thread. Its parameter is similar to <c>funcIsCancelled</c> in the <c>.ctor</c>, but includes additional conditions from the implementation. Returns the success flag.
            </summary>
        </member>
        <member name="P:JetBrains.Application.InterruptableReadActivityThe.FuncStart">
            <summary>
            Gets or sets the function that is executed on the primary thread when the action starts.
            </summary>
        </member>
        <member name="P:JetBrains.Application.InterruptableReadActivityThe.Name">
            <summary>
            Gets or sets the name for the operation, and for the worker thread of the operation.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Progress.IProgressIndicatorModel">
            <summary>
            A data-only presentation of the <see cref="T:JetBrains.Application.Progress.IProgressIndicator"/> state.
            While <see cref="T:JetBrains.Application.Progress.IProgressIndicator"/> is producer-oriented, the <see cref="T:JetBrains.Application.Progress.IProgressIndicatorModel"/> is intended for consumers.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Progress.IProgressIndicatorModel.Fraction">
            <summary>
            <para>The current position of the progress, in the [0..1] range, inclusive.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Progress.IProgressIndicatorModel.IsCanceled">
            <summary>
            <para>Whether the activity which the progress is visualizing has been canceled externally. This could be user's clicking on the "Cancel" button of the UI the progress is bound to.</para>
            <para>You should check this property periodically and cut off the remaining activity if <c>True</c>. You MIGHT throw <see cref="T:JetBrains.Application.Progress.ProcessCancelledException"/> for that, still it's recommended not to use exceptions for flow control, but check <see cref="P:JetBrains.Application.Progress.IProgressIndicatorModel.IsCanceled"/> on all of the levels of nesting.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Progress.IProgressIndicatorModel.IsRunning">
            <summary>
            Whether the producer thinks it's currently running. <see cref="P:JetBrains.Application.Progress.IProgressIndicatorModel.Fraction"/> SHOULD be at <c>1</c> when done running.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Progress.IProgressIndicatorModel.Name">
            <summary>
            <para>A title of the whole activity which the progress is visualizing.</para>
            <para>You SHOULD set <see cref="P:JetBrains.Application.Progress.IProgressIndicatorModel.Name"/> once per <see cref="P:JetBrains.Application.Progress.IProgressIndicatorModel.IsRunning"/> run, and <see cref="P:JetBrains.Application.Progress.IProgressIndicatorModel.StepName"/> once per <see cref="P:JetBrains.Application.Progress.IProgressIndicatorModel.Fraction"/> step, if applicable.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Progress.IProgressIndicatorModel.StepName">
            <summary>
            <para>A title of the current item being processed by the activity which the progress is visualizing.</para>
            <para>You SHOULD set <see cref="P:JetBrains.Application.Progress.IProgressIndicatorModel.Name"/> once per <see cref="P:JetBrains.Application.Progress.IProgressIndicatorModel.IsRunning"/> run, and <see cref="P:JetBrains.Application.Progress.IProgressIndicatorModel.StepName"/> once per <see cref="P:JetBrains.Application.Progress.IProgressIndicatorModel.Fraction"/> step, if applicable.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Progress.ProgressIndicator">
            <summary>
            <para>A self-container progress indicator implementations.</para>
            <para><see cref="T:JetBrains.Application.Progress.IProgressIndicator"/> should be given to producers, and the consumers make use of this instance thru its <see cref="T:JetBrains.Application.Progress.IProgressIndicatorModel"/>.</para>
            <para>By default, no special threading model is implied on the members. They could be modified on any thread and fire changes on any thread.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Progress.ProgressIndicator.myAdvanceFactor">
            <summary>
            The factor to be applied to the <see cref="!:Advance"/> units to make them <see cref="P:JetBrains.Application.Progress.ProgressIndicator.Fraction"/> units.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Progress.ProgressIndicator.myEpsilon">
            <summary>
            Epsilon for the <see cref="T:System.Double"/> parameters of the progress.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Progress.ProgressIndicator.myFraction">
            <summary>
            Model item.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Progress.ProgressIndicator.myIsCanceled">
            <summary>
            Model item.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Progress.ProgressIndicator.myIsRunning">
            <summary>
            Model item.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Progress.ProgressIndicator.myName">
            <summary>
            Model item.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Progress.ProgressIndicator.myStepName">
            <summary>
            Model item.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Progress.ProgressIndicator.JetBrains#Application#Progress#IProgressIndicator#Advance(System.Double)">
            <summary>
            <para>Advances the progress within the range, as defined by the <see cref="M:JetBrains.Application.Progress.IProgressIndicator.Start(System.Int32)"/> call.</para>
            <para><see cref="M:JetBrains.Application.Progress.IProgressIndicator.Start(System.Int32)"/> MUST be called first.</para>
            </summary>
            <param name="units">A whole or fractional number of units from the [0..totalWorkUnits] range, as defined by the <see cref="M:JetBrains.Application.Progress.IProgressIndicator.Start(System.Int32)"/> method.</param>
        </member>
        <member name="M:JetBrains.Application.Progress.ProgressIndicator.JetBrains#Application#Progress#IProgressIndicator#Start(System.Int32)">
            <summary>
            <para>Starts the progress to run through the [0..range] range. You MUST call <see cref="T:JetBrains.Application.Progress.SubProgressIndicator"/> at the end. Use <see cref="M:JetBrains.Application.Progress.IProgressIndicator.Stop"/> to move the progress across the range.</para>
            <para>Generally, you SHOULD set the <see cref="M:JetBrains.Application.Progress.IProgressIndicator.Advance(System.Double)"/> to identify the current execution span, once per <see cref="P:JetBrains.Application.Progress.IProgressIndicator.CurrentItemText"/>-<see cref="M:JetBrains.Application.Progress.IProgressIndicator.Start(System.Int32)"/>, and change the <see cref="M:JetBrains.Application.Progress.IProgressIndicator.Stop"/> when doing <see cref="P:JetBrains.Application.Progress.IProgressIndicator.CurrentItemText"/> to comment on the progress.</para>
            <para>If you would like to delegate a sub-range to a nested routine, you SHOULD create a <see cref="M:JetBrains.Application.Progress.IProgressIndicator.Advance(System.Double)"/> and pass the resulting <see cref="T:JetBrains.Application.Progress.IProgressIndicator"/> to the routine, so that it ran a whole range from its point of view, which would then map to a sub-range of this progress indicator.</para>
            </summary>
            <param name="range">The inclusive upper limit of the progress range.</param>
        </member>
        <member name="M:JetBrains.Application.Progress.ProgressIndicator.JetBrains#Application#Progress#IProgressIndicator#Stop">
            <summary>
            <para>Completes the progress run. You MUST call <see cref="T:JetBrains.Application.Progress.SubProgressIndicator"/> if you previously called <see cref="T:JetBrains.Application.Progress.IProgressIndicator"/>.</para>
            <para>Generally, you SHOULD always call the <see cref="T:JetBrains.Application.Progress.IProgressIndicator"/>-<see cref="T:JetBrains.Application.Progress.IProgressIndicator"/> pair on the given indicator, even if gotten no items to process, so that a <see cref="T:JetBrains.Application.Progress.IProgressIndicator"/> could use up the parent range consistently.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Progress.ProgressIndicator.ReadonlyToken">
            <summary>
            An optional readonly token used by this object for accessing the <see cref="T:JetBrains.Application.Progress.IProgressIndicatorModel"/> part.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Progress.ProgressIndicator.JetBrains#Application#Progress#IProgressIndicator#CurrentItemText">
            <summary>
            <para>A title of the current item being processed by the activity which the progress is visualizing.</para>
            <para>You SHOULD set <see cref="P:JetBrains.Application.Progress.IProgressIndicator.TaskName"/> once per <see cref="M:JetBrains.Application.Progress.IProgressIndicator.Start(System.Int32)"/>-<see cref="M:JetBrains.Application.Progress.IProgressIndicator.Stop"/> run, and <see cref="P:JetBrains.Application.Progress.IProgressIndicator.CurrentItemText"/> once per <see cref="M:JetBrains.Application.Progress.IProgressIndicator.Advance(System.Double)"/>, if applicable.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Progress.ProgressIndicator.JetBrains#Application#Progress#IProgressIndicator#IsCanceled">
            <summary>
            <para>Whether the activity which the progress is visualizing has been canceled externally. This could be user's clicking on the "Cancel" button of the UI the progress is bound to.</para>
            <para>You should check this property periodically and cut off the remaining activity if <c>True</c>. You MIGHT throw <see cref="T:JetBrains.Application.Progress.ProcessCancelledException"/> for that, still it's recommended not to use exceptions for flow control, but check <see cref="P:JetBrains.Application.Progress.IProgressIndicator.IsCanceled"/> on all of the levels of nesting.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Progress.ProgressIndicator.JetBrains#Application#Progress#IProgressIndicator#TaskName">
            <summary>
            <para>A title of the whole activity which the progress is visualizing.</para>
            <para>You SHOULD set <see cref="P:JetBrains.Application.Progress.IProgressIndicator.TaskName"/> once per <see cref="M:JetBrains.Application.Progress.IProgressIndicator.Start(System.Int32)"/>-<see cref="M:JetBrains.Application.Progress.IProgressIndicator.Stop"/> run, and <see cref="P:JetBrains.Application.Progress.IProgressIndicator.CurrentItemText"/> once per <see cref="M:JetBrains.Application.Progress.IProgressIndicator.Advance(System.Double)"/>, if applicable.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Progress.ProgressIndicator.Fraction">
            <summary>
            <para>The current position of the progress, in the [0..1] range, inclusive.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Progress.ProgressIndicator.IsCanceled">
            <summary>
            <para>Whether the activity which the progress is visualizing has been canceled externally. This could be user's clicking on the "Cancel" button of the UI the progress is bound to.</para>
            <para>You should check this property periodically and cut off the remaining activity if <c>True</c>. You MIGHT throw <see cref="T:JetBrains.Application.Progress.ProcessCancelledException"/> for that, still it's recommended not to use exceptions for flow control, but check <see cref="P:JetBrains.Application.Progress.IProgressIndicatorModel.IsCanceled"/> on all of the levels of nesting.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Progress.ProgressIndicator.IsRunning">
            <summary>
            Whether the producer thinks it's currently running. <see cref="P:JetBrains.Application.Progress.IProgressIndicatorModel.Fraction"/> SHOULD be at <c>1</c> when done running.
            </summary>
        </member>
        <member name="P:JetBrains.Application.Progress.ProgressIndicator.Name">
            <summary>
            <para>A title of the whole activity which the progress is visualizing.</para>
            <para>You SHOULD set <see cref="P:JetBrains.Application.Progress.IProgressIndicatorModel.Name"/> once per <see cref="P:JetBrains.Application.Progress.IProgressIndicatorModel.IsRunning"/> run, and <see cref="P:JetBrains.Application.Progress.IProgressIndicatorModel.StepName"/> once per <see cref="P:JetBrains.Application.Progress.IProgressIndicatorModel.Fraction"/> step, if applicable.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Application.Progress.ProgressIndicator.StepName">
            <summary>
            <para>A title of the current item being processed by the activity which the progress is visualizing.</para>
            <para>You SHOULD set <see cref="P:JetBrains.Application.Progress.IProgressIndicatorModel.Name"/> once per <see cref="P:JetBrains.Application.Progress.IProgressIndicatorModel.IsRunning"/> run, and <see cref="P:JetBrains.Application.Progress.IProgressIndicatorModel.StepName"/> once per <see cref="P:JetBrains.Application.Progress.IProgressIndicatorModel.Fraction"/> step, if applicable.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Progress.ProgressIndicatorMarshalled">
            <summary>
            As the original <see cref="T:JetBrains.Application.Progress.ProgressIndicator"/> is free-threaded, wraps it into a new <see cref="T:JetBrains.Application.Progress.IProgressIndicatorModel"/> that fires its changes on the primary thread only.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Progress.ProgressIndicatorMarshalled.Create(JetBrains.DataFlow.Lifetime,JetBrains.Application.Progress.IProgressIndicatorModel,JetBrains.Threading.IThreading)">
            <summary>
            As the original <see cref="T:JetBrains.Application.Progress.ProgressIndicator"/> is free-threaded, wraps it into a new <see cref="T:JetBrains.Application.Progress.IProgressIndicatorModel"/> that fires its changes on the primary thread only.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Progress.ProgressIndicatorMarshalled.CreateWithoutSafeThreadCheck(JetBrains.DataFlow.Lifetime,JetBrains.Application.Progress.IProgressIndicatorModel,JetBrains.Threading.IThreading)">
            <summary>
            As the original <see cref="T:JetBrains.Application.Progress.ProgressIndicator"/> is free-threaded, wraps it into a new <see cref="T:JetBrains.Application.Progress.IProgressIndicatorModel"/> that fires its changes on the primary thread only.
            Note: you should call the <see cref="M:JetBrains.Application.Progress.ProgressIndicatorMarshalled.Create(JetBrains.DataFlow.Lifetime,JetBrains.Application.Progress.IProgressIndicatorModel,JetBrains.Threading.IThreading)"/> version whenever possible.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Progress.SimpleTaskExecutor">
            <summary>
            A task executor that just calls the task method.
            </summary>
        </member>
        <member name="M:JetBrains.Application.Progress.SimpleTaskExecutor.PushProgressCanceledInterruptableCookie(JetBrains.Application.Progress.IProgressIndicator)">
            <summary>
            Throws the <see cref="T:JetBrains.Application.Progress.ProcessCancelledException"/> on <see cref="P:JetBrains.Application.Progress.IProgressIndicatorModel.IsCanceled"/>.
            This is the simple non-UI implementation. UI-related implementations should use a similar method from the <c>UITaskExecutorRun</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Application.Progress.TaskCancelable">
            <summary>
            Whether an <see cref="T:JetBrains.Application.Progress.ITaskExecutor"/> task could be user-canceled.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Progress.TaskCancelable.No">
            <summary>
            <para>The task does not quite support canceling, so there's no use in displaying the "Cancel" button to the user.</para>
            <para>Note that the task might still be canceled and your <see cref="T:JetBrains.Application.Progress.ITaskExecutor"/> run might still return <c>False</c> in some cases, like throwing <see cref="T:JetBrains.Application.Progress.ProcessCancelledException"/> from the task implementation.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Progress.TaskCancelable.Yes">
            <summary>
            The task supports canceling, looks for <see cref="P:JetBrains.Application.Progress.IProgressIndicator.IsCanceled"/>, and user should be presented with the "Cancel" option in the progress UI.
            </summary>
        </member>
        <member name="T:JetBrains.Threading.IThreading">
            <summary>
            Exposes threading tasks of the application.
            </summary>
        </member>
        <member name="P:JetBrains.Threading.IThreading.Dispatcher">
            <summary>
            <para>Gets the <see cref="T:JetBrains.Threading.JetDispatcher"/> of the home thread of this instance.</para>
            <para>If you get <see cref="T:JetBrains.Threading.IThreading">the threading object</see> imported into a component, then this is the primary thread of your component container.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Threading.IThreading.ReentrancyGuard">
            <summary>
            <para>Gets the <see cref="P:JetBrains.Threading.IThreading.ReentrancyGuard"/> of the home thread of this instance.</para>
            <para>If you get <see cref="T:JetBrains.Threading.IThreading">the threading object</see> imported into a component, then this is the primary thread of your component container.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Threading.IThreading.GroupingEvents">
            <summary>
            <para>A host that creates grouping events to be executed on the home thread of this instance (optionally, under protection of the <see cref="P:JetBrains.Threading.IThreading.ReentrancyGuard"/>).</para>
            <para>If you get <see cref="T:JetBrains.Threading.IThreading">the threading object</see> imported into a component, then this is the primary thread of your component container.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Threading.IThreading.TimedActions">
            <summary>
            <para>Schedulles one-time and recurring actions to be executed on the home thread of this instance, optionally under protection of the <see cref="P:JetBrains.Threading.IThreading.ReentrancyGuard"/>.</para>
            <para>If you get <see cref="T:JetBrains.Threading.IThreading">the threading object</see> imported into a component, then this is the primary thread of your component container.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Threading.IThreading.IsRecurringActivityAllowed">
            <summary>
            Gets or sets whether the application is currently active (and background activities are allowed).
            Used to suspend recurring actions execution when inactive.
            </summary>
        </member>
        <member name="P:JetBrains.Threading.IThreading.ThreadManager">
            <summary>
            Gets the scheduller for running background tasks on other threads.
            </summary>
        </member>
        <member name="M:JetBrains.Application.IShellLocks.AcquireReadLock">
             <summary>
             Fetches read lock - the lock which is used to control read-access to ReSharper data (such as PSI, documents, etc.) and 
             is obtained by threads that perform read-operations.
             </summary>    
             <remarks>
             Read lock cannot be acquired when the write lock is acquired by another thread and execution will be blocked until the write lock is released. 
             You do not need to acquire read lock in the UI thread (since write operations cannot be performed in any thread different from the UI thread).
             
             Use <see cref="M:JetBrains.Application.ShellLocks.ReleaseReadLock"/> method to release read lock.
            
             <b>NOTE:</b> the best way to hold read lock for a block of code is to use <see cref="!:ReadLockCookie"></see>
             </remarks>    
             <seealso cref="!:ReadLockCookie"/>
             <seealso cref="M:JetBrains.Application.ShellLocks.ReleaseReadLock"/>
        </member>
        <member name="M:JetBrains.Application.IShellLocks.AcquireWriteLock">
            <summary>
            Fetches write lock - the lock which is used to control write-access to ReSharper data (such as PSI, documents, etc.) and 
            is obtained by threads that perform write-operations.
            </summary>
            <remarks>
            Write lock cannot be acquired when the read lock is acquired by another thread and execution will be blocked until the read lock is released. 
            Acquiring of the write lock is allowed only in the UI thread (and so you cannot perform any write operations from non-UI thread).
            Note that you do not have to obtain the write lock explicitly in most of cases. All low-level write methods (such as PSI or document modifications) 
            obtain write lock automatically. You may need to obtain write lock if your subsystem (similar to PSI or documents) has its own data to be modified in write operations only.
            
            Use <see cref="M:JetBrains.Application.ShellLocks.ReleaseWriteLock"/> method to release write lock.
            
            <b>NOTE:</b> the best way to hold write lock for a block of code is to use <see cref="!:WriteLockCookie"></see>
            </remarks>    
            <seealso cref="!:WriteLockCookie"/>
            <seealso cref="M:JetBrains.Application.ShellLocks.ReleaseWriteLock"/>
        </member>
        <member name="M:JetBrains.Application.IShellLocks.GrantWriteAccess(System.Threading.Thread)">
            <summary>
            Grants write access rights to the specified secondary thread. This function can only be called from the 
            primary UI thread. The typical situation in which it can be useful is when a time-consuming 
            write operation needs to be performed. It is supposed that during this operation the UI thread
            is blocked (by e.g. a modal window). Only one thread can be granted write access at time.
            </summary>
            <seealso cref="M:JetBrains.Application.ShellLocks.RevokeWriteAccess(System.Threading.Thread)"/>
            <param name="thread">Thread to grant write access to</param>
        </member>
        <member name="M:JetBrains.Application.IShellLocks.ReleaseReadLock">
             <summary>
             Releases read lock.
            
             For more information about read lock see <see cref="M:JetBrains.Application.ShellLocks.AcquireReadLock"/>.
             </summary>
             <seealso cref="M:JetBrains.Application.ShellLocks.AcquireReadLock"/>
        </member>
        <member name="M:JetBrains.Application.IShellLocks.ReleaseWriteLock">
             <summary>
             Releases write lock.
            
             For more information about write lock see <see cref="M:JetBrains.Application.ShellLocks.AcquireWriteLock"/>.
             </summary>
             <seealso cref="M:JetBrains.Application.ShellLocks.AcquireWriteLock"/>    
        </member>
        <member name="M:JetBrains.Application.IShellLocks.RevokeWriteAccess(System.Threading.Thread)">
            <summary>
            Revokes write access from the thread that has been granted write access.
            </summary>
            <seealso cref="M:JetBrains.Application.ShellLocks.GrantWriteAccess(System.Threading.Thread)"/>
            <param name="thread">Thread to revoke write access from</param>
        </member>
        <member name="M:JetBrains.Application.IShellLocks.UsingWriteLock">
            <summary>
            Acquires the writer lock, releases when the return value is disposed of. For use with the <c>using</c> construct.
            </summary>
        </member>
        <member name="M:JetBrains.Application.IShellLocks.UsingReadLock">
            <summary>
            Acquires the reader lock, releases when the return value is disposed of. For use with the <c>using</c> construct.
            </summary>
        </member>
        <member name="P:JetBrains.Application.IShellLocks.IsReadAccessAllowed">
            <summary>
            True if read access is allowed in the current thread.
            </summary>
            <seealso cref="M:JetBrains.Application.IShellLocks.AcquireReadLock"/>    
            <seealso cref="!:AssertReadAccessAllowed()"/>    
        </member>
        <member name="P:JetBrains.Application.IShellLocks.IsReadLockHeld">
            <summary>
            Indicates that the current thread owns the read lock
            </summary>
        </member>
        <member name="P:JetBrains.Application.IShellLocks.IsWriteAccessAllowed">
            <summary>
            True if write access is allowed in the current thread. 
            </summary>
            <seealso cref="M:JetBrains.Application.IShellLocks.AcquireWriteLock"/>    
            <seealso cref="!:AssertWriteAccessAllowed()"/>    
        </member>
        <member name="P:JetBrains.Application.IShellLocks.IsWriteLockHeld">
            <summary>
            Indicates that the current thread owns the write lock
            </summary>
        </member>
        <member name="P:JetBrains.Application.IShellLocks.IsWriteLockRequested">
            <summary>
            Indicates that any thread requests for write lock, but not yet granted
            </summary>
        </member>
        <member name="P:JetBrains.Application.IShellLocks.AfterWriteLockReleased">
            <summary>
            Fires after the Writer Lock is released in any thread. Fires on that same thread.
            </summary>
        </member>
        <member name="E:JetBrains.Application.IShellLocks.AfterReadLockReleased">
            <summary>
            Fires after the Read Lock is released in any thread. Fires on that same thread.
            </summary>
        </member>
        <member name="E:JetBrains.Application.IShellLocks.BeforeAcquiringReadLock">
            <summary>
            Event which is raised before read lock is acquired. 
            </summary>
            <seealso>AcquireReadLock</seealso>
        </member>
        <member name="E:JetBrains.Application.IShellLocks.BeforeAcquiringWriteLock">
            <summary>
            Event which is raised before write lock is acquired. 
            This event can be used by background operations which need to stop/pause to allow write operation to execute.
            </summary>
            <seealso>AcquireWriteLock</seealso>
        </member>
        <member name="T:JetBrains.Application.ShellLocks">
            <summary>
            Groups the locking-related methods in the Shell.
            </summary>
        </member>
        <member name="F:JetBrains.Application.ShellLocks.Debug_LongWait_Threshold">
            <summary>
            The threshold, in milliseconds, for telling long waits. Any wait above this is "long", and is reported.
            </summary>
        </member>
        <member name="F:JetBrains.Application.ShellLocks.myDispatcher">
            <summary>
            Identifies the primary thread (for the Write Lock affinity).
            Attaches to the thread it's created on.
            </summary>
        </member>
        <member name="F:JetBrains.Application.ShellLocks.myRWLock">
            <summary>
            Implementation for the RW locks.
            </summary>
        </member>
        <member name="F:JetBrains.Application.ShellLocks.myThreadWithGrantedWriteAccess">
            <summary>
            Normally, only the primary thread can take Write Lock at any time, and this is <c>Null</c>.
            If non-<c>Null</c>, then this right is temporarily granted to another thread.
            </summary>
        </member>
        <member name="F:JetBrains.Application.ShellLocks.myAfterWriteLockReleased">
            <summary>
            Fires after the Writer Lock is released in any thread. Fires on that same thread.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ShellLocks.AcquireReadLock">
             <summary>
             Fetches read lock - the lock which is used to control read-access to ReSharper data (such as PSI, documents, etc.) and 
             is obtained by threads that perform read-operations.
             </summary>    
             <remarks>
             Read lock cannot be acquired when the write lock is acquired by another thread and execution will be blocked until the write lock is released. 
             You do not need to acquire read lock in the UI thread (since write operations cannot be performed in any thread different from the UI thread).
             
             Use <see cref="M:JetBrains.Application.ShellLocks.ReleaseReadLock"/> method to release read lock.
            
             <b>NOTE:</b> the best way to hold read lock for a block of code is to use <see cref="!:ReadLockCookie"></see>
             </remarks>    
             <seealso cref="!:ReadLockCookie"/>
             <seealso cref="M:JetBrains.Application.ShellLocks.ReleaseReadLock"/>
        </member>
        <member name="M:JetBrains.Application.ShellLocks.AcquireWriteLock">
            <summary>
            Fetches write lock - the lock which is used to control write-access to ReSharper data (such as PSI, documents, etc.) and 
            is obtained by threads that perform write-operations.
            </summary>
            <remarks>
            Write lock cannot be acquired when the read lock is acquired by another thread and execution will be blocked until the read lock is released. 
            Acquiring of the write lock is allowed only in the UI thread (and so you cannot perform any write operations from non-UI thread).
            Note that you do not have to obtain the write lock explicitly in most of cases. All low-level write methods (such as PSI or document modifications) 
            obtain write lock automatically. You may need to obtain write lock if your subsystem (similar to PSI or documents) has its own data to be modified in write operations only.
            
            Use <see cref="M:JetBrains.Application.ShellLocks.ReleaseWriteLock"/> method to release write lock.
            
            <b>NOTE:</b> the best way to hold write lock for a block of code is to use <see cref="!:WriteLockCookie"></see>
            </remarks>    
            <seealso cref="!:WriteLockCookie"/>
            <seealso cref="M:JetBrains.Application.ShellLocks.ReleaseWriteLock"/>
        </member>
        <member name="M:JetBrains.Application.ShellLocks.GrantWriteAccess(System.Threading.Thread)">
            <summary>
            Grants write access rights to the specified secondary thread. This function can only be called from the 
            primary UI thread. The typical situation in which it can be useful is when a time-consuming 
            write operation needs to be performed. It is supposed that during this operation the UI thread
            is blocked (by e.g. a modal window). Only one thread can be granted write access at time.
            </summary>
            <seealso cref="M:JetBrains.Application.ShellLocks.RevokeWriteAccess(System.Threading.Thread)"/>
            <param name="thread">Thread to grant write access to</param>
        </member>
        <member name="M:JetBrains.Application.ShellLocks.ReleaseReadLock">
             <summary>
             Releases read lock.
            
             For more information about read lock see <see cref="M:JetBrains.Application.ShellLocks.AcquireReadLock"/>.
             </summary>
             <seealso cref="M:JetBrains.Application.ShellLocks.AcquireReadLock"/>
        </member>
        <member name="M:JetBrains.Application.ShellLocks.ReleaseWriteLock">
             <summary>
             Releases write lock.
            
             For more information about write lock see <see cref="M:JetBrains.Application.ShellLocks.AcquireWriteLock"/>.
             </summary>
             <seealso cref="M:JetBrains.Application.ShellLocks.AcquireWriteLock"/>    
        </member>
        <member name="M:JetBrains.Application.ShellLocks.RevokeWriteAccess(System.Threading.Thread)">
            <summary>
            Revokes write access from the thread that has been granted write access.
            </summary>
            <seealso cref="M:JetBrains.Application.ShellLocks.GrantWriteAccess(System.Threading.Thread)"/>
            <param name="thread">Thread to revoke write access from</param>
        </member>
        <member name="M:JetBrains.Application.ShellLocks.Debug_LongWait_AfterWaitForReadLock">
            <summary>
            Called after we have completed waiting for the write lock.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ShellLocks.Debug_LongWait_AfterWaitForWriteLock">
            <summary>
            Called after we have completed waiting for the write lock.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ShellLocks.Debug_LongWait_BeforeReleaseReadLock">
            <summary>
            Read lock is about to be released, check if we kept someone waiting for a write lock.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ShellLocks.Debug_LongWait_BeforeReleaseWriteLock">
            <summary>
            Read lock is about to be released, check if we kept someone waiting for a write lock.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ShellLocks.Debug_LongWait_BeforeWaitForReadLock">
            <summary>
            Called before we start waiting for the lock, to enter the long-wait-tracking-mode.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ShellLocks.Debug_LongWait_BeforeWaitForWriteLock">
            <summary>
            Called before we start waiting for the lock, to enter the long-wait-tracking-mode.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ShellLocks.#ctor(JetBrains.Threading.IThreading)">
            <summary>
            Creates shell locks over an existing threading object.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ShellLocks.#ctor(JetBrains.DataFlow.Lifetime)">
            <summary>
            Creates shell locks over an existing threading object.
            </summary>
        </member>
        <member name="P:JetBrains.Application.ShellLocks.IsReadAccessAllowed">
            <summary>
            True if read access is allowed in the current thread.
            </summary>
            <seealso cref="M:JetBrains.Application.ShellLocks.AcquireReadLock"/>    
            <seealso cref="M:JetBrains.Application.IShellLocksEx.AssertReadAccessAllowed(JetBrains.Application.IShellLocks)"/>    
        </member>
        <member name="P:JetBrains.Application.ShellLocks.IsReadLockHeld">
            <summary>
            Indicates that the current thread owns the read lock
            </summary>
        </member>
        <member name="P:JetBrains.Application.ShellLocks.IsWriteAccessAllowed">
            <summary>
            True if write access is allowed in the current thread. 
            </summary>
            <seealso cref="M:JetBrains.Application.ShellLocks.AcquireWriteLock"/>    
            <seealso cref="M:JetBrains.Application.IShellLocksEx.AssertWriteAccessAllowed(JetBrains.Application.IShellLocks)"/>    
        </member>
        <member name="P:JetBrains.Application.ShellLocks.IsWriteLockHeld">
            <summary>
            Indicates that the current thread owns the write lock
            </summary>
        </member>
        <member name="P:JetBrains.Application.ShellLocks.IsWriteLockRequested">
            <summary>
            Indicates that any thread requests for write lock, but not yet granted
            </summary>
        </member>
        <member name="P:JetBrains.Application.ShellLocks.AfterWriteLockReleased">
            <summary>
            Fires after the Writer Lock is released in any thread. Fires on that same thread.
            </summary>
        </member>
        <member name="E:JetBrains.Application.ShellLocks.AfterReadLockReleased">
            <summary>
            Fires after the Read Lock is released in any thread. Fires on that same thread.
            </summary>
        </member>
        <member name="E:JetBrains.Application.ShellLocks.BeforeAcquiringReadLock">
            <summary>
            Event which is raised before read lock is acquired. 
            </summary>
            <seealso>AcquireReadLock</seealso>
        </member>
        <member name="E:JetBrains.Application.ShellLocks.BeforeAcquiringWriteLock">
            <summary>
            Event which is raised before write lock is acquired. 
            This event can be used by background operations which need to stop/pause to allow write operation to execute.
            </summary>
            <seealso>AcquireWriteLock</seealso>
        </member>
        <member name="M:JetBrains.Application.IShellLocksEx.AllowNestedExecutionAndReleaseLocks(JetBrains.Application.IShellLocks,System.String,System.Action)">
            <summary>
            When executed under a reentrancy guard, lifts the guard and releases all of the locks, ie constructs a clean state.
            Must be executed on the primaty thread.
            </summary>
            <param name="thіs"></param>
            <param name="name">Name for the <see cref="P:JetBrains.Threading.Invocator.ReentrancyGuard"/> lifting.</param>
            <param name="F">The action to be executed in the clean state.</param>
        </member>
        <member name="M:JetBrains.Application.IShellLocksEx.ExecuteOrQueueReadLock(JetBrains.Application.IShellLocks,System.String,System.Action)">
            <summary>
            <para>Executes an action on the <see cref="!:JetBrains.Application.myDispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see>.</para>
            <para>If called on a foreign thread, executes the action asynchronously, like <see cref="M:JetBrains.Threading.IThreadingEx.Queue(JetBrains.Threading.IThreading,JetBrains.DataFlow.Lifetime,System.String,System.Action)"/>.</para>
            <para>If called on the guarded thread, checks for reentrancy. If there are no guarded executions on the stack yet, executes the action immediately and synchronously. Otherwise, postpones the action for asynchronous execution, like <see cref="M:JetBrains.Threading.IThreadingEx.Queue(JetBrains.Threading.IThreading,JetBrains.DataFlow.Lifetime,System.String,System.Action)"/> does.</para>
            <para>Takes a read lock.</para>
            </summary>
            <param name="thіs"></param>
            <param name="name">The name for the task.</param>
            <param name="F">The action to execute. Exceptions will be trapped.</param>
            <returns><c>True</c> if executed immediately, <c>False</c> if queued (<see cref="M:JetBrains.Threading.ReentrancyGuard.TryExecute(System.String,System.Action)"/>-compatible behavior).</returns>
        </member>
        <member name="M:JetBrains.Application.IShellLocksEx.ExecuteOrQueueReadLock(JetBrains.Application.IShellLocks,JetBrains.DataFlow.Lifetime,System.String,System.Action)">
            <summary>
            <para>Executes an action on the <see cref="!:JetBrains.Application.myDispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see>.</para>
            <para>If called on a foreign thread, executes the action asynchronously, like <see cref="M:JetBrains.Threading.IThreadingEx.Queue(JetBrains.Threading.IThreading,JetBrains.DataFlow.Lifetime,System.String,System.Action)"/>.</para>
            <para>If called on the guarded thread, checks for reentrancy. If there are no guarded executions on the stack yet, executes the action immediately and synchronously. Otherwise, postpones the action for asynchronous execution, like <see cref="M:JetBrains.Threading.IThreadingEx.Queue(JetBrains.Threading.IThreading,JetBrains.DataFlow.Lifetime,System.String,System.Action)"/> does.</para>
            <para>Takes a read lock.</para>
            </summary>
            <param name="thіs"></param>
            <param name="lifetime"></param>
            <param name="name">The name for the task.</param>
            <param name="F">The action to execute. Exceptions will be trapped.</param>
            <returns><c>True</c> if executed immediately, <c>False</c> if queued (<see cref="M:JetBrains.Threading.ReentrancyGuard.TryExecute(System.String,System.Action)"/>-compatible behavior).</returns>
        </member>
        <member name="M:JetBrains.Application.IShellLocksEx.QueueReadLock(JetBrains.Application.IShellLocks,System.String,System.Action)">
            <summary>
            <para>Queues the action to execute asynchronously on the <see cref="!:JetBrains.Application.myDispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see>, as soon as possible. Free-threaded.</para>
            <para>The reentrancy between guarded actions is prevented.</para>
            <para>Takes a read lock.</para>
            </summary>
            <param name="thіs"></param>
            <param name="name">The name for the task.</param>
            <param name="F">The action to execute. Exceptions will be trapped.</param>
        </member>
        <member name="M:JetBrains.Application.IShellLocksEx.QueueReadLock(JetBrains.Application.IShellLocks,JetBrains.DataFlow.Lifetime,System.String,System.Action)">
            <summary>
            <para>Queues the action to execute asynchronously on the <see cref="!:JetBrains.Application.myDispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see>, as soon as possible. Free-threaded.</para>
            <para>The reentrancy between guarded actions is prevented.</para>
            <para>Takes a read lock.</para>
            </summary>
            <param name="thіs"></param>
            <param name="lifetime"></param>
            <param name="name">The name for the task.</param>
            <param name="F">The action to execute. Exceptions will be trapped.</param>
        </member>
        <member name="M:JetBrains.Application.IShellLocksEx.AssertReadAccessAllowed(JetBrains.Application.IShellLocks)">
            <summary>
            Checks whether read lock is acquired and issues an internal assertion if it's not true.
            Useful method to be inserted in data access methods to ensure correct use of locks.
            </summary>
            <param name="thіs"></param>
            <seealso cref="P:JetBrains.Application.ShellLocks.IsReadAccessAllowed"/>    
        </member>
        <member name="M:JetBrains.Application.IShellLocksEx.AssertWriteAccessAllowed(JetBrains.Application.IShellLocks)">
            <summary>
            Checks whether write lock is acquired and issues an internal assertion if it's not true.
            Useful method to be inserted in data modification methods to ensure correct use of locks.
            </summary>
            <param name="thіs"></param>
            <seealso cref="P:JetBrains.Application.ShellLocks.IsWriteAccessAllowed"/>    
        </member>
        <member name="T:JetBrains.Threading.Invocator">
            <summary>
            <para>A combined invocator that incapsulates both <see cref="P:JetBrains.Threading.Invocator.ReentrancyGuard"/> and <see cref="T:JetBrains.Threading.TimedActionsHost"/>.</para>
            <para>When disposed of, shuts down the <see cref="T:JetBrains.Threading.TimedActionsHost"/> and cancels all of its timed actions. It's OK for individual alarm consumers to dispose of them as well.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Threading.Invocator.myIsRecurringActivityAllowed">
            <summary>
            Gets or sets whether the application is currently active (and background activities are allowed).
            Used to suspend recurring actions execution when inactive.
            </summary>
        </member>
        <member name="P:JetBrains.Threading.Invocator.TimedActions">
            <summary>
            Provides access to the underlying <see cref="T:JetBrains.Threading.TimedActionsHost"/>, <see cref="P:JetBrains.Threading.Invocator.ReentrancyGuard"/>, <see cref="T:JetBrains.Threading.JetDispatcher"/>, and <see cref="T:System.Threading.Thread"/>.
            </summary>
        </member>
        <member name="P:JetBrains.Threading.Invocator.ReentrancyGuard">
            <summary>
            Gets the reentrancy guard that implements the non-timed actions of this Invocator.
            </summary>
        </member>
        <member name="P:JetBrains.Threading.Invocator.Dispatcher">
            <summary>
            Gets the dispatcher of the thread served by this Invocator.
            On a Shell's invocator, this would be the application's main thread.
            </summary>
        </member>
        <member name="P:JetBrains.Threading.Invocator.IsRecurringActivityAllowed">
            <summary>
            Gets or sets whether the application is currently active (and background activities are allowed).
            Used to suspend recurring actions execution when inactive.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.IThreadingEx.LogAssertGuarded(JetBrains.Threading.IThreading)">
            <summary>
            <para>Checks that the activity is executed on the proper thread and is being guarded from reentrancy.</para>
            <para>Does not break execution, just logs the failure — the common case of the failure is adding new guard-checks, in which case the features could go on functioning “as before” without breaking execution, but logging the failure.</para>
            </summary>
            <param name="thіs"></param>
        </member>
        <member name="M:JetBrains.Threading.IThreadingEx.ExecuteOrQueue(JetBrains.Threading.IThreading,System.String,System.Action)">
            <summary>
            <para>Executes an action on the <see cref="P:JetBrains.Threading.IThreading.Dispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see>.</para>
            <para>If called on a foreign thread, executes the action asynchronously, like <see cref="M:JetBrains.Threading.IThreadingEx.Queue(JetBrains.Threading.IThreading,JetBrains.DataFlow.Lifetime,System.String,System.Action)"/>.</para>
            <para>If called on the guarded thread, checks for reentrancy. If there are no guarded executions on the stack yet, executes the action immediately and synchronously, like <see cref="M:JetBrains.Threading.ReentrancyGuard.Execute(System.String,System.Action)"/>. Otherwise, postpones the action for asynchronous execution, like <see cref="M:JetBrains.Threading.IThreadingEx.Queue(JetBrains.Threading.IThreading,JetBrains.DataFlow.Lifetime,System.String,System.Action)"/> does.</para>
            </summary>
            <param name="thіs"></param>
            <param name="name">The name for the task.</param>
            <param name="action">The action to execute. Exceptions will be trapped.</param>
            <returns><c>True</c> if executed immediately, <c>False</c> if queued (<see cref="M:JetBrains.Threading.ReentrancyGuard.TryExecute(System.String,System.Action)"/>-compatible behavior).</returns>
        </member>
        <member name="M:JetBrains.Threading.IThreadingEx.ExecuteOrQueue(JetBrains.Threading.IThreading,JetBrains.DataFlow.Lifetime,System.String,System.Action)">
            <summary>
            <para>Executes an action on the <see cref="P:JetBrains.Threading.IThreading.Dispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see>.</para>
            <para>If called on a foreign thread, executes the action asynchronously, like <see cref="M:JetBrains.Threading.IThreadingEx.Queue(JetBrains.Threading.IThreading,JetBrains.DataFlow.Lifetime,System.String,System.Action)"/>.</para>
            <para>If called on the guarded thread, checks for reentrancy. If there are no guarded executions on the stack yet, executes the action immediately and synchronously, like <see cref="M:JetBrains.Threading.ReentrancyGuard.Execute(System.String,System.Action)"/>. Otherwise, postpones the action for asynchronous execution, like <see cref="M:JetBrains.Threading.IThreadingEx.Queue(JetBrains.Threading.IThreading,JetBrains.DataFlow.Lifetime,System.String,System.Action)"/> does.</para>
            </summary>
            <param name="thіs"></param>
            <param name="lifetime"></param>
            <param name="name">The name for the task.</param>
            <param name="action">The action to execute. Exceptions will be trapped.</param>
            <returns><c>True</c> if executed immediately, <c>False</c> if queued (<see cref="M:JetBrains.Threading.ReentrancyGuard.TryExecute(System.String,System.Action)"/>-compatible behavior).</returns>
        </member>
        <member name="M:JetBrains.Threading.IThreadingEx.Queue(JetBrains.Threading.IThreading,JetBrains.DataFlow.Lifetime,System.String,System.Action)">
            <summary>
            <para>Queues the action to execute asynchronously on the <see cref="P:JetBrains.Threading.IThreading.Dispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see>, as soon as possible. Reclaims the queueing and cancels the action from executing when the lifetime ends.</para>
            <para>The reentrancy between guarded actions is prevented.</para>
            </summary>
            <param name="thіs"></param>
            <param name="lifetime"></param>
            <param name="name">The name for the task.</param>
            <param name="F">The action to execute. Exceptions will be trapped.</param>
            <returns>You may optionally dispose of the return value to prevent the action from executing later.</returns>
        </member>
        <member name="M:JetBrains.Threading.IThreadingEx.Queue(JetBrains.Threading.IThreading,System.String,System.Action)">
            <summary>
            <para>Queues the action to execute asynchronously on the <see cref="P:JetBrains.Threading.IThreading.Dispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see>, as soon as possible. Free-threaded.</para>
            <para>The reentrancy between guarded actions is prevented.</para>
            </summary>
            <param name="thіs"></param>
            <param name="name">The name for the task.</param>
            <param name="action">The action to execute. Exceptions will be trapped.</param>
        </member>
        <member name="M:JetBrains.Threading.IThreadingEx.QueueAt(JetBrains.Threading.IThreading,System.String,System.TimeSpan,System.Action)">
            <summary>
            <para>Queues the action to execute once on the <see cref="P:JetBrains.Threading.IThreading.Dispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> when the timeout elapses.</para>
            <para>Returns a token that cancels the action execution. The token disposal is optional.</para>
            <para>A <see cref="T:JetBrains.Threading.ReentrancyGuard"/> is preventing reentrancy between the actions.</para>
            </summary>
            <param name="thіs"></param>
            <param name="name">The name for the task.</param>
            <param name="action">The action to execute. Exceptions will be trapped.</param>
            <param name="interval">A non-negative time interval.</param>
        </member>
        <member name="M:JetBrains.Threading.IThreadingEx.QueueAt(JetBrains.Threading.IThreading,JetBrains.DataFlow.Lifetime,System.String,System.TimeSpan,System.Action)">
            <summary>
            <para>Queues the action to execute once on the <see cref="P:JetBrains.Threading.IThreading.Dispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> when the timeout elapses.</para>
            <para>A <see cref="T:JetBrains.Threading.ReentrancyGuard"/> is preventing reentrancy among the actions.</para>
            </summary>
            <param name="thіs"></param>
            <param name="lifetime">Limiting lifetime. If the lifetime ends before the action is executed, the execution is canceled.</param>
            <param name="name">The name for the task.</param>
            <param name="action">The action to execute. Exceptions will be trapped.</param>
            <param name="interval">A non-negative time interval.</param>
        </member>
        <member name="M:JetBrains.Threading.IThreadingEx.QueueAt_NoReentrancyGuarding(JetBrains.Threading.IThreading,JetBrains.DataFlow.Lifetime,System.String,System.TimeSpan,System.Action)">
            <summary>
            <para>Queues the action to execute once on the <see cref="P:JetBrains.Threading.IThreading.Dispatcher">primary thread</see> when the timeout elapses.</para>
            <para>The action does not use <see cref="T:JetBrains.Threading.ReentrancyGuard"/> to execute.</para>
            </summary>
            <param name="thіs"></param>
            <param name="lifetime">Limiting lifetime. If the lifetime ends before the action is executed, the execution is canceled.</param>
            <param name="name">The name for the task.</param>
            <param name="action">The action to execute. Exceptions will be trapped.</param>
            <param name="interval">A non-negative time interval.</param>
        </member>
        <member name="M:JetBrains.Threading.IThreadingEx.CreateGroupingEvent(JetBrains.Threading.IThreading,JetBrains.DataFlow.Lifetime,System.String,System.TimeSpan,System.Action)">
            <summary>
            <para>Creates and registers an event that groups multiple incoming signals within a time span and issues only one outgoing signal for them.</para>
            <para>This allows to accomodate for external events firing at a high rate and execute the handler only when their activity suspends.</para>
            <para>The object is thread-safe: the incoming event may fire on any thread, the outgoing activity always happens on the <see cref="P:JetBrains.Threading.IThreading.Dispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see>.</para>
            <para>This function is free-threaded.</para>
            </summary>
            <param name="thіs"></param>
            <param name="lifetime">Limiting lifetime. If the lifetime ends before the action is executed, the execution is canceled.</param>
            <param name="name">A name to identify the event.</param>
            <param name="interval">The grouping interval. The incoming events are grouped until there's a pause of the <paramref name="interval"/> length, and after that the outgoing event is fired. The interval must be not above <see cref="F:JetBrains.Threading.GroupingEvent.MaxInterval"/>.</param>
            <param name="action">Optional. The action for the outgoing event. This action will be executed on the primaty thread and under the <see cref="T:JetBrains.Threading.ReentrancyGuard"/>. If you omit this action, advise the <see cref="P:JetBrains.Threading.GroupingEvent.Outgoing"/> event on the return value.</param>
            <returns>The event on which the incoming events can be fired. Must be disposed of.</returns>
        </member>
        <member name="M:JetBrains.Threading.IThreadingEx.QueueRecurring(JetBrains.Threading.IThreading,System.String,System.TimeSpan,System.Action)">
            <summary>
            <para>Queues the action to execute asynchronously on the <see cref="P:JetBrains.Threading.IThreading.Dispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> at recurring intervals. Can be used on the primary thread only.</para>
            <para>Returns a token that cancels the recurring action execution. This token must be eventually disposed of.</para>
            <para>When the application gets inactive, the action is executed once, and then suspends until the application gets activated again.</para>
            <para>A <see cref="T:JetBrains.Threading.ReentrancyGuard"/> is preventing reentrancy between the actions.</para>
            </summary>
            <param name="thіs"></param>
            <param name="name">The name for the task.</param>
            <param name="action">The action to execute. Exceptions will be trapped.</param>
            <param name="interval">A non-negative time interval.</param>
        </member>
        <member name="M:JetBrains.Threading.IThreadingEx.QueueRecurring(JetBrains.Threading.IThreading,JetBrains.DataFlow.Lifetime,System.String,System.TimeSpan,System.Action)">
            <summary>
            <para>Queues the action to execute asynchronously on the <see cref="P:JetBrains.Threading.IThreading.Dispatcher">primary thread</see> in a <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded context</see> at recurring intervals. Can be used on the primary thread only.</para>
            <para>Returns a token that cancels the recurring action execution. This token must be eventually disposed of.</para>
            <para>When the application gets inactive, the action is executed once, and then suspends until the application gets activated again.</para>
            <para>A <see cref="T:JetBrains.Threading.ReentrancyGuard"/> is preventing reentrancy between the actions.</para>
            </summary>
            <param name="thіs"></param>
            <param name="lifetime">Limiting lifetime. If the lifetime ends before the action is executed, the execution is canceled.</param>
            <param name="name">The name for the task.</param>
            <param name="action">The action to execute. Exceptions will be trapped.</param>
            <param name="interval">A non-negative time interval.</param>
        </member>
        <member name="M:JetBrains.Threading.IThreadingEx.ExecuteOrQueueWhenNotGuarded(JetBrains.Threading.IThreading,JetBrains.DataFlow.Lifetime,System.String,System.Action)">
            <summary>
            Executes the activity at the moment when there's no <see cref="T:JetBrains.Threading.ReentrancyGuard"/> running.
            </summary>
        </member>
        <member name="F:JetBrains.Application.Threading.MultiCoreFiberStrategy.Disable">
            <summary>
            Do not use multi-core fibers
            </summary>
        </member>
        <member name="F:JetBrains.Application.Threading.MultiCoreFiberStrategy.Normal">
            <summary>
            Regular fiber usage. Number of fibers equals to processur number
            </summary>
        </member>
        <member name="F:JetBrains.Application.Threading.MultiCoreFiberStrategy.Agressive">
            <summary>
            Agressive fiber usage. Number od fibers is twice processor count
            </summary>
        </member>
        <member name="M:JetBrains.Application.Threading.IMultiCoreFibers.EnqueueJob(System.Action)">
            <summary>
            Add job to the end fof the queue
            </summary>
        </member>
        <member name="M:JetBrains.Application.Threading.IMultiCoreFibers.EnqueuePriorityJob(System.Action)">
            <summary>
            Add job to the beginning fof the queue
            </summary>
        </member>
        <member name="T:JetBrains.Application.Threading.MultiCoreFibersPool">
            <summary>
            Utility class to parallelize jobs on multiple processor cores
            </summary>
        </member>
        <member name="T:JetBrains.Application.ExceptionReport.StoringExceptionReportService">
            <summary>
            Stores all of the reported exceptions (with either reporting method) without showing them to the user.
            </summary>
        </member>
        <member name="M:JetBrains.Application.OneTimeInitializationChecker.IsInitializationNeeded(System.String,System.Boolean,System.Action{System.Exception},JetBrains.Application.Env.Components.ProductSettingsLocation)">
            <summary>
            Checks if the one-time-init is needed.
            Optionally, marks it as done in the Registry (write-touches Current User hive only).
            </summary>
            <param name="identity">Identity of user</param>
            <param name="bMarkAsDone">Whether to mark one-time-init as performed for this config.</param>
            <param name="failed">Action to execute if check failed, or null</param>
            <returns>Whether one-time-init was required.</returns>
        </member>
        <member name="M:JetBrains.Application.OneTimeInitializationChecker.GetActualIdentity(JetBrains.Application.IApplicationDescriptor)">
            <summary>
            If the per-machine one-time-init value is not available, this value is used instead.
            </summary>
            <param name="applicationDescriptor"></param>
        </member>
        <member name="T:JetBrains.Application.Defines">
             <summary>Pre-compile-time defined constants that emulate the C++ #define that has a value.</summary>
            <remarks>The set of #defines and their default values are given in an MSBuild file. The defauls could be overridden on the build server.</remarks>
        </member>
        <member name="F:JetBrains.Application.Defines.CompanyName">
             <summary>
              <para>
                <c>#define CompanyName JetBrains</c>
              </para>
              <para>Short company name.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.DateTimeProductBirth">
             <summary>
              <para>
                <c>#define DateTimeProductBirth 2003-01-01</c>
              </para>
              <para>The date when the product was founded. Used for the lower copyright year and so on.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.GuidProductUpgradeCodeInstallationCenter">
             <summary>
              <para>
                <c>#define GuidProductUpgradeCodeInstallationCenter {2D580069-BF69-4B47-BDEA-AF2986412F11}</c>
              </para>
              <para>Upgrade Code for the Installation Center family setups. In use starting with Platform-4.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.IsModeAnnotateCallStacks">
             <summary>
              <para>
                <c>#define IsModeAnnotateCallStacks True</c>
              </para>
              <para>Whether call stacks should be annotated when calling standard object methods. If there's a graph of standard objects identifyable only by names (eg IProperty, ICollection, ISignal, etc), a callstack of their interaction does not give out the names of the entities, unless this option is turned on. Has a perf impact.</para>
              <para>Default is ON. OFF for production builds.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.IsModeAssert">
             <summary>
              <para>
                <c>#define IsModeAssert True</c>
              </para>
              <para>Whether debug asserts should be active and throw runtime exceptions.</para>
              <para>Default is ON. OFF for production builds.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.IsModeStatistics">
             <summary>
              <para>
                <c>#define IsModeStatistics False</c>
              </para>
              <para>Whether statistics should be collected by the Statistics class.</para>
              <para>Default is OFF.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.IsMsiIncludePdb">
             <summary>
              <para>
                <c>#define IsMsiIncludePdb True</c>
              </para>
              <para>Whether PDBs for product binaries should be packed into the Setup.</para>
              <para>If True, it is an error if a PDB is missing.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.IsMsiIncludeXmlDoc">
             <summary>
              <para>
                <c>#define IsMsiIncludeXmlDoc True</c>
              </para>
              <para>Whether XmlDocs for product binaries should be packed into the Setup.</para>
              <para>If True, it is an error if an XmlDoc file is missing.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.IsMsiProductBinariesStrongName">
             <summary>
              <para>
                <c>#define IsMsiProductBinariesStrongName True</c>
              </para>
              <para>Whether product binaries packed into MSI must have strong names. If True, Setup build will fail unless assemblies have strong names.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.IsProductionBuild">
             <summary>
              <para>
                <c>#define IsProductionBuild False</c>
              </para>
              <para>Defines whether this is the Production Build — that is, production license should be used instead of the EAP license, and any optional checks should be deactivated.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.IsReSharper">
             <summary>
              <para>
                <c>#define IsReSharper True</c>
              </para>
              <para>Demo Define.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.LicenseProductFamily">
             <summary>
              <para>
                <c>#define LicenseProductFamily 5931F436-2506-415E-A0A9-27F50D7F62BF</c>
              </para>
              <para>A license GUID identifying the product family of the license. Now as we're using version numbers in the license (unlike early versions of ReSharper), this should be persisted throughout the product lifetime.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.LicenseSeed">
             <summary>
              <para>
                <c>#define LicenseSeed RLA90VMnIfMXmT4jbUVOo64qnJqs6APs7SgNXcQVoeeLMp5BpmU4fdw+impX+Wpd</c>
              </para>
              <para>The license state written to the Registry by the installer, which provides for a free trial.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.LicenseSupportIdentifier">
             <summary>
              <para>
                <c>#define LicenseSupportIdentifier BA057D9F-70E9-40B3-B565-87E743F8337F</c>
              </para>
              <para>An identifier for the evaluation license. Change it to reset the evaluation period.</para>
              <para>Note: do not change LicenseSupportIdentifier here, edit the property on TeamCity instead.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.ModeAnnotateCallStacksName">
             <summary>
              <para>
                <c>#define ModeAnnotateCallStacksName JET_MODE_ANNOTATE_CALL_STACKS</c>
              </para>
              <para>Name of the IsModeAssert-induced conditional compilation symbol.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.ModeAssertName">
             <summary>
              <para>
                <c>#define ModeAssertName JET_MODE_ASSERT</c>
              </para>
              <para>Name of the IsModeAssert-induced conditional compilation symbol.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.ModeStatisticsName">
             <summary>
              <para>
                <c>#define ModeStatisticsName JET_MODE_STATISTICS</c>
              </para>
              <para>Name of the IsModeAssert-induced conditional compilation symbol.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NetfxRequiredVersionBuild">
             <summary>
              <para>
                <c>#define NetfxRequiredVersionBuild 0</c>
              </para>
              <para>The minimum .NET Framework version (Build component) required for installing &amp; runnning this product. The platform default is the minimum version required by the platform itself. Usually it's the same for the product.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NetfxRequiredVersionMajor">
             <summary>
              <para>
                <c>#define NetfxRequiredVersionMajor 3</c>
              </para>
              <para>The minimum .NET Framework version (Major component) required for installing &amp; runnning this product. The platform default is the minimum version required by the platform itself. Usually it's the same for the product.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NetfxRequiredVersionMinor">
             <summary>
              <para>
                <c>#define NetfxRequiredVersionMinor 5</c>
              </para>
              <para>The minimum .NET Framework version (Minor component) required for installing &amp; runnning this product. The platform default is the minimum version required by the platform itself. Usually it's the same for the product.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NetfxRequiredVersionRevision">
             <summary>
              <para>
                <c>#define NetfxRequiredVersionRevision 0</c>
              </para>
              <para>The minimum .NET Framework version (Revision component) required for installing &amp; runnning this product. The platform default is the minimum version required by the platform itself. Usually it's the same for the product.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NumLicenseAppVersion">
             <summary>
              <para>
                <c>#define NumLicenseAppVersion 6000</c>
              </para>
              <para>Application version for the licensing subsystem. Usually changes along with the ProductVersionMajor, but has its own numbering plan.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NumLicenseFeedbackRequestDays">
             <summary>
              <para>
                <c>#define NumLicenseFeedbackRequestDays 10</c>
              </para>
              <para>Number of days after installation and before feedback of whatever kind is requested.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NumLicenseFreeTrialDays">
             <summary>
              <para>
                <c>#define NumLicenseFreeTrialDays 30</c>
              </para>
              <para>Free trial days for a newly-installed product.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NumLicenseLeftDaysNotification">
             <summary>
              <para>
                <c>#define NumLicenseLeftDaysNotification 3</c>
              </para>
              <para>Number of days before license expires to notify the user of that.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NumTimeBombDays">
             <summary>
              <para>
                <c>#define NumTimeBombDays 0</c>
              </para>
              <para>The product will be inoperational when this time since build date expires. 0 means never expire (release mode), which is the default.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NUnitCpu">
             <summary>
              <para>
                <c>#define NUnitCpu x86</c>
              </para>
              <para>CPU platform of the NUnit runner process. Tests will be executed in this environment. Values: x86, x64, ANY.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NUnitInParallel">
             <summary>
              <para>
                <c>#define NUnitInParallel True</c>
              </para>
              <para>Allows running NUnit in parallel (one process per assembly, max CPU-count processes total).</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NUnitRuntime">
             <summary>
              <para>
                <c>#define NUnitRuntime v4.0</c>
              </para>
              <para>CLR version of the NUnit runner process. Tests will be executed in this environment. Values: v1.1, v2.0, v4.0, ANY.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.NUnitVersion">
             <summary>
              <para>
                <c>#define NUnitVersion NUnit-2.5.10</c>
              </para>
              <para>Version of the NUnit runner used on TeamCity server. The special ReSharper make does better formatting of exception stack traces (without reversing the stacks).</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.PragmaOnce_Platform_Defines_Targets">
             <summary>
              <para>
                <c>#define PragmaOnce_Platform_Defines_Targets True</c>
              </para>
              <para>Pragma Once.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.PragmaOnce_Product_Defines_Targets">
             <summary>
              <para>
                <c>#define PragmaOnce_Product_Defines_Targets True</c>
              </para>
              <para>Pragma Once.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.ProductFullName">
             <summary>
              <para>
                <c>#define ProductFullName ReSharper 6.0</c>
              </para>
              <para>This full name is actually displayed in the User Interface in the About Boxes and such.
                  It should include the short product name and the marketing version of the product.
                  The bugfix upgate versions are visible thru this field only (eg “ProductName + " 3.0.2"”) and do not get into the actual technical file versions. Those can be found in the ProductInformation file linked into each of the projects.</para>
              <para>You MUST NOT use this define where an Application Descriptor is available (this includes any time when Shell is running). This is ONLY 
                for out-of-shell and build-time uses.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.ProductName">
             <summary>
              <para>
                <c>#define ProductName ReSharper</c>
              </para>
              <para>Name of the current product. If there're multiple products built on these sources, their least common generic name.</para>
              <para>The short ID-like product name, without any version suffixes.</para>
              <para>You MUST NOT use this define where an Application Descriptor is available (this includes any time when Shell is running). This is ONLY 
                for out-of-shell and build-time uses.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.ProductUpgradeCodeLegacyVS0800">
             <summary>
              <para>
                <c>#define ProductUpgradeCodeLegacyVS0800 {F790F14F-E662-4D25-89A0-9CC8677DE27A}</c>
              </para>
              <para>Main historical Upgrade Code for the R# product line. In 3.0 era, was used by the VS80 branch only. Not used by the new products.</para>
              <para>Used by Installation Centers for detecting pre-Platform-4 products in VS80.</para>
              <para>Empty by default. Not a GUID type just to allow empty string values.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.ProductUpgradeCodeLegacyVS0900">
             <summary>
              <para>
                <c>#define ProductUpgradeCodeLegacyVS0900 {5595D9CA-0517-4A8E-9129-F973460986E0}</c>
              </para>
              <para>Side Upgrade Code for the R# products. Was in use in the 3.0 era only, was used by the VS90 branch that had an upgrade line separate from that of VS80. Should be checked for when detecting older versions.</para>
              <para>Used by Installation Centers for detecting pre-Platform-4 products in VS90.</para>
              <para>Empty by default. Not a GUID type just to allow empty string values.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.ProductUpgradeCodeLegacyVS1000">
             <summary>
              <para>
                <c>#define ProductUpgradeCodeLegacyVS1000 </c>
              </para>
              <para>Same as other ProductUpgradeCodeLegacy, but empty in all the products. Introduced for safe looping thru VS versions. Not a GUID type just to allow empty string values.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.SccRevision">
             <summary>
              <para>
                <c>#define SccRevision CompiledWithoutBuildServer</c>
              </para>
              <para>Source code control revision string, if available. For a single SVN root, should be the revision number; for complicated cases — a freehand string exposing the source code control state.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.UriBuy">
             <summary>
              <para>
                <c>#define UriBuy http://www.jetbrains.com/resharper/buy/index.html</c>
              </para>
              <para>URI of the Webpage where the user could buy the product.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.UriCompany">
             <summary>
              <para>
                <c>#define UriCompany http://www.jetbrains.com</c>
              </para>
              <para>URI of the company Website.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.UriEvaluate">
             <summary>
              <para>
                <c>#define UriEvaluate http://confluence.jetbrains.net/display/ReSharper/ReSharper+6.0+Nightly+Builds</c>
              </para>
              <para>URI of the Webpage where the user can download an evaluation version of the product.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.UriProduct">
             <summary>
              <para>
                <c>#define UriProduct http://www.jetbrains.com/resharper/</c>
              </para>
              <para>Main product webpage URI. Also used for ARPURLINFOABOUT in the installer.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.UriProductCommunityNewsgroups">
             <summary>
              <para>
                <c>#define UriProductCommunityNewsgroups news://news.jetbrains.com/jetbrains.resharper.community</c>
              </para>
              <para>URI to the product community (support/discussion) newsgroups.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.UriProductHelp">
             <summary>
              <para>
                <c>#define UriProductHelp http://www.jetbrains.com/resharper/documentation/index.html</c>
              </para>
              <para>URI to Product Help. Used for Online F1 in the product and ARPHELPLINK in the installer.</para>
              <para>NOTE: UriProductHelp points to the SINGLE page for all R# versions starting with v4.0. See ReSharperWebHelp class on how the complete URI is producted out of this base: exact product version is appended, plus the options keyword whose help page should be opened. Based on the version number, user is redirected to help for his exact version. Thus, you cannot easily change this URI in a newer version without affecting already-released products.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.UriProductSupportEmail">
             <summary>
              <para>
                <c>#define UriProductSupportEmail mailto:support@jetbrains.com</c>
              </para>
              <para>Email to request for product support. The default is suitable for all JetBrains products.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.UriProductUninstallFeedback">
             <summary>
              <para>
                <c>#define UriProductUninstallFeedback http://www.jetbrains.com/resharper/uninstall/resharper.jsp</c>
              </para>
              <para>An URI to submit the Uninstall Feedback from the installer.</para>
              <para>This URI has query string parameters that are defined in the installer itself (one of its CAs).</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.UriProductUpdateInfoForInstaller">
             <summary>
              <para>
                <c>#define UriProductUpdateInfoForInstaller http://blogs.jetbrains.com/dotnet/category/news/</c>
              </para>
              <para>Installer's ARPURLUPDATEINFO. Default is applicable for dotnet products.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.UriUpdatesFilterXslt">
             <summary>
              <para>
                <c>#define UriUpdatesFilterXslt http://www.jetbrains.com/resharper/updates/online.Updates.xslt</c>
              </para>
              <para>URI to get the XSLT with updates info from (see UpdatesManager).</para>
            </summary>
        </member>
        <member name="T:JetBrains.Application.Defines.Const">
             <summary>Literal versions of the properties.</summary>
            <remarks>Use these const fields only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly.</remarks>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.CompanyName">
             <summary>
              <para>
                <c>#define CompanyName JetBrains</c>
              </para>
              <para>Short company name.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.DateTimeProductBirth">
             <summary>
              <para>
                <c>#define DateTimeProductBirth 2003-01-01</c>
              </para>
              <para>The date when the product was founded. Used for the lower copyright year and so on.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.GuidProductUpgradeCodeInstallationCenter">
             <summary>
              <para>
                <c>#define GuidProductUpgradeCodeInstallationCenter {2D580069-BF69-4B47-BDEA-AF2986412F11}</c>
              </para>
              <para>Upgrade Code for the Installation Center family setups. In use starting with Platform-4.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.IsModeAnnotateCallStacks">
             <summary>
              <para>
                <c>#define IsModeAnnotateCallStacks True</c>
              </para>
              <para>Whether call stacks should be annotated when calling standard object methods. If there's a graph of standard objects identifyable only by names (eg IProperty, ICollection, ISignal, etc), a callstack of their interaction does not give out the names of the entities, unless this option is turned on. Has a perf impact.</para>
              <para>Default is ON. OFF for production builds.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.IsModeAssert">
             <summary>
              <para>
                <c>#define IsModeAssert True</c>
              </para>
              <para>Whether debug asserts should be active and throw runtime exceptions.</para>
              <para>Default is ON. OFF for production builds.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.IsModeStatistics">
             <summary>
              <para>
                <c>#define IsModeStatistics False</c>
              </para>
              <para>Whether statistics should be collected by the Statistics class.</para>
              <para>Default is OFF.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.IsMsiIncludePdb">
             <summary>
              <para>
                <c>#define IsMsiIncludePdb True</c>
              </para>
              <para>Whether PDBs for product binaries should be packed into the Setup.</para>
              <para>If True, it is an error if a PDB is missing.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.IsMsiIncludeXmlDoc">
             <summary>
              <para>
                <c>#define IsMsiIncludeXmlDoc True</c>
              </para>
              <para>Whether XmlDocs for product binaries should be packed into the Setup.</para>
              <para>If True, it is an error if an XmlDoc file is missing.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.IsMsiProductBinariesStrongName">
             <summary>
              <para>
                <c>#define IsMsiProductBinariesStrongName True</c>
              </para>
              <para>Whether product binaries packed into MSI must have strong names. If True, Setup build will fail unless assemblies have strong names.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.IsProductionBuild">
             <summary>
              <para>
                <c>#define IsProductionBuild False</c>
              </para>
              <para>Defines whether this is the Production Build — that is, production license should be used instead of the EAP license, and any optional checks should be deactivated.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.IsReSharper">
             <summary>
              <para>
                <c>#define IsReSharper True</c>
              </para>
              <para>Demo Define.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.LicenseProductFamily">
             <summary>
              <para>
                <c>#define LicenseProductFamily 5931F436-2506-415E-A0A9-27F50D7F62BF</c>
              </para>
              <para>A license GUID identifying the product family of the license. Now as we're using version numbers in the license (unlike early versions of ReSharper), this should be persisted throughout the product lifetime.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.LicenseSeed">
             <summary>
              <para>
                <c>#define LicenseSeed RLA90VMnIfMXmT4jbUVOo64qnJqs6APs7SgNXcQVoeeLMp5BpmU4fdw+impX+Wpd</c>
              </para>
              <para>The license state written to the Registry by the installer, which provides for a free trial.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.LicenseSupportIdentifier">
             <summary>
              <para>
                <c>#define LicenseSupportIdentifier BA057D9F-70E9-40B3-B565-87E743F8337F</c>
              </para>
              <para>An identifier for the evaluation license. Change it to reset the evaluation period.</para>
              <para>Note: do not change LicenseSupportIdentifier here, edit the property on TeamCity instead.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.ModeAnnotateCallStacksName">
             <summary>
              <para>
                <c>#define ModeAnnotateCallStacksName JET_MODE_ANNOTATE_CALL_STACKS</c>
              </para>
              <para>Name of the IsModeAssert-induced conditional compilation symbol.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.ModeAssertName">
             <summary>
              <para>
                <c>#define ModeAssertName JET_MODE_ASSERT</c>
              </para>
              <para>Name of the IsModeAssert-induced conditional compilation symbol.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.ModeStatisticsName">
             <summary>
              <para>
                <c>#define ModeStatisticsName JET_MODE_STATISTICS</c>
              </para>
              <para>Name of the IsModeAssert-induced conditional compilation symbol.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NetfxRequiredVersionBuild">
             <summary>
              <para>
                <c>#define NetfxRequiredVersionBuild 0</c>
              </para>
              <para>The minimum .NET Framework version (Build component) required for installing &amp; runnning this product. The platform default is the minimum version required by the platform itself. Usually it's the same for the product.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NetfxRequiredVersionMajor">
             <summary>
              <para>
                <c>#define NetfxRequiredVersionMajor 3</c>
              </para>
              <para>The minimum .NET Framework version (Major component) required for installing &amp; runnning this product. The platform default is the minimum version required by the platform itself. Usually it's the same for the product.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NetfxRequiredVersionMinor">
             <summary>
              <para>
                <c>#define NetfxRequiredVersionMinor 5</c>
              </para>
              <para>The minimum .NET Framework version (Minor component) required for installing &amp; runnning this product. The platform default is the minimum version required by the platform itself. Usually it's the same for the product.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NetfxRequiredVersionRevision">
             <summary>
              <para>
                <c>#define NetfxRequiredVersionRevision 0</c>
              </para>
              <para>The minimum .NET Framework version (Revision component) required for installing &amp; runnning this product. The platform default is the minimum version required by the platform itself. Usually it's the same for the product.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NumLicenseAppVersion">
             <summary>
              <para>
                <c>#define NumLicenseAppVersion 6000</c>
              </para>
              <para>Application version for the licensing subsystem. Usually changes along with the ProductVersionMajor, but has its own numbering plan.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NumLicenseFeedbackRequestDays">
             <summary>
              <para>
                <c>#define NumLicenseFeedbackRequestDays 10</c>
              </para>
              <para>Number of days after installation and before feedback of whatever kind is requested.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NumLicenseFreeTrialDays">
             <summary>
              <para>
                <c>#define NumLicenseFreeTrialDays 30</c>
              </para>
              <para>Free trial days for a newly-installed product.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NumLicenseLeftDaysNotification">
             <summary>
              <para>
                <c>#define NumLicenseLeftDaysNotification 3</c>
              </para>
              <para>Number of days before license expires to notify the user of that.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NumTimeBombDays">
             <summary>
              <para>
                <c>#define NumTimeBombDays 0</c>
              </para>
              <para>The product will be inoperational when this time since build date expires. 0 means never expire (release mode), which is the default.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NUnitCpu">
             <summary>
              <para>
                <c>#define NUnitCpu x86</c>
              </para>
              <para>CPU platform of the NUnit runner process. Tests will be executed in this environment. Values: x86, x64, ANY.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NUnitInParallel">
             <summary>
              <para>
                <c>#define NUnitInParallel True</c>
              </para>
              <para>Allows running NUnit in parallel (one process per assembly, max CPU-count processes total).</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NUnitRuntime">
             <summary>
              <para>
                <c>#define NUnitRuntime v4.0</c>
              </para>
              <para>CLR version of the NUnit runner process. Tests will be executed in this environment. Values: v1.1, v2.0, v4.0, ANY.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.NUnitVersion">
             <summary>
              <para>
                <c>#define NUnitVersion NUnit-2.5.10</c>
              </para>
              <para>Version of the NUnit runner used on TeamCity server. The special ReSharper make does better formatting of exception stack traces (without reversing the stacks).</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.PragmaOnce_Platform_Defines_Targets">
             <summary>
              <para>
                <c>#define PragmaOnce_Platform_Defines_Targets True</c>
              </para>
              <para>Pragma Once.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.PragmaOnce_Product_Defines_Targets">
             <summary>
              <para>
                <c>#define PragmaOnce_Product_Defines_Targets True</c>
              </para>
              <para>Pragma Once.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.ProductFullName">
             <summary>
              <para>
                <c>#define ProductFullName ReSharper 6.0</c>
              </para>
              <para>This full name is actually displayed in the User Interface in the About Boxes and such.
                  It should include the short product name and the marketing version of the product.
                  The bugfix upgate versions are visible thru this field only (eg “ProductName + " 3.0.2"”) and do not get into the actual technical file versions. Those can be found in the ProductInformation file linked into each of the projects.</para>
              <para>You MUST NOT use this define where an Application Descriptor is available (this includes any time when Shell is running). This is ONLY 
                for out-of-shell and build-time uses.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.ProductName">
             <summary>
              <para>
                <c>#define ProductName ReSharper</c>
              </para>
              <para>Name of the current product. If there're multiple products built on these sources, their least common generic name.</para>
              <para>The short ID-like product name, without any version suffixes.</para>
              <para>You MUST NOT use this define where an Application Descriptor is available (this includes any time when Shell is running). This is ONLY 
                for out-of-shell and build-time uses.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.ProductUpgradeCodeLegacyVS0800">
             <summary>
              <para>
                <c>#define ProductUpgradeCodeLegacyVS0800 {F790F14F-E662-4D25-89A0-9CC8677DE27A}</c>
              </para>
              <para>Main historical Upgrade Code for the R# product line. In 3.0 era, was used by the VS80 branch only. Not used by the new products.</para>
              <para>Used by Installation Centers for detecting pre-Platform-4 products in VS80.</para>
              <para>Empty by default. Not a GUID type just to allow empty string values.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.ProductUpgradeCodeLegacyVS0900">
             <summary>
              <para>
                <c>#define ProductUpgradeCodeLegacyVS0900 {5595D9CA-0517-4A8E-9129-F973460986E0}</c>
              </para>
              <para>Side Upgrade Code for the R# products. Was in use in the 3.0 era only, was used by the VS90 branch that had an upgrade line separate from that of VS80. Should be checked for when detecting older versions.</para>
              <para>Used by Installation Centers for detecting pre-Platform-4 products in VS90.</para>
              <para>Empty by default. Not a GUID type just to allow empty string values.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.ProductUpgradeCodeLegacyVS1000">
             <summary>
              <para>
                <c>#define ProductUpgradeCodeLegacyVS1000 </c>
              </para>
              <para>Same as other ProductUpgradeCodeLegacy, but empty in all the products. Introduced for safe looping thru VS versions. Not a GUID type just to allow empty string values.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.SccRevision">
             <summary>
              <para>
                <c>#define SccRevision CompiledWithoutBuildServer</c>
              </para>
              <para>Source code control revision string, if available. For a single SVN root, should be the revision number; for complicated cases — a freehand string exposing the source code control state.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.UriBuy">
             <summary>
              <para>
                <c>#define UriBuy http://www.jetbrains.com/resharper/buy/index.html</c>
              </para>
              <para>URI of the Webpage where the user could buy the product.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.UriCompany">
             <summary>
              <para>
                <c>#define UriCompany http://www.jetbrains.com</c>
              </para>
              <para>URI of the company Website.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.UriEvaluate">
             <summary>
              <para>
                <c>#define UriEvaluate http://confluence.jetbrains.net/display/ReSharper/ReSharper+6.0+Nightly+Builds</c>
              </para>
              <para>URI of the Webpage where the user can download an evaluation version of the product.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.UriProduct">
             <summary>
              <para>
                <c>#define UriProduct http://www.jetbrains.com/resharper/</c>
              </para>
              <para>Main product webpage URI. Also used for ARPURLINFOABOUT in the installer.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.UriProductCommunityNewsgroups">
             <summary>
              <para>
                <c>#define UriProductCommunityNewsgroups news://news.jetbrains.com/jetbrains.resharper.community</c>
              </para>
              <para>URI to the product community (support/discussion) newsgroups.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.UriProductHelp">
             <summary>
              <para>
                <c>#define UriProductHelp http://www.jetbrains.com/resharper/documentation/index.html</c>
              </para>
              <para>URI to Product Help. Used for Online F1 in the product and ARPHELPLINK in the installer.</para>
              <para>NOTE: UriProductHelp points to the SINGLE page for all R# versions starting with v4.0. See ReSharperWebHelp class on how the complete URI is producted out of this base: exact product version is appended, plus the options keyword whose help page should be opened. Based on the version number, user is redirected to help for his exact version. Thus, you cannot easily change this URI in a newer version without affecting already-released products.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.UriProductSupportEmail">
             <summary>
              <para>
                <c>#define UriProductSupportEmail mailto:support@jetbrains.com</c>
              </para>
              <para>Email to request for product support. The default is suitable for all JetBrains products.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.UriProductUninstallFeedback">
             <summary>
              <para>
                <c>#define UriProductUninstallFeedback http://www.jetbrains.com/resharper/uninstall/resharper.jsp</c>
              </para>
              <para>An URI to submit the Uninstall Feedback from the installer.</para>
              <para>This URI has query string parameters that are defined in the installer itself (one of its CAs).</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.UriProductUpdateInfoForInstaller">
             <summary>
              <para>
                <c>#define UriProductUpdateInfoForInstaller http://blogs.jetbrains.com/dotnet/category/news/</c>
              </para>
              <para>Installer's ARPURLUPDATEINFO. Default is applicable for dotnet products.</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Application.Defines.Const.UriUpdatesFilterXslt">
             <summary>
              <para>
                <c>#define UriUpdatesFilterXslt http://www.jetbrains.com/resharper/updates/online.Updates.xslt</c>
              </para>
              <para>URI to get the XSLT with updates info from (see UpdatesManager).</para>
              <para>Use this const field only where use of a constant is mandatory. Otherwise use the static readonly field in the outer class, which stands better in the compiled assembly, and has a more concrete type for non-primitive-type properties.</para>
            </summary>
        </member>
    </members>
</doc>
