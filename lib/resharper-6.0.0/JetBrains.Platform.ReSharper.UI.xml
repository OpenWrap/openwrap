<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.Platform.ReSharper.UI</name>
    </assembly>
    <members>
        <member name="T:JetBrains.UI.resources.StringTable">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.ActionCantInsertAnchorNotInGroup">
            <summary>
              Looks up a localized string similar to Cannot insert actions because the anchoring action is not included in the actions group we&apos;re inserting into..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.ActionCantInsertCantLoad">
            <summary>
              Looks up a localized string similar to Failed to insert an action into the group because it failed to load..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.ActionCantInsertConflictingAnchor">
            <summary>
              Looks up a localized string similar to Could not insert actions because the anchoring action was specified, which conflicts with the relative positioning value..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.ActionCantInsertIntoNonexistentGroup">
            <summary>
              Looks up a localized string similar to Cannot insert actions because the target action group does not exist..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.ActionCantInsertIntoNonGroupAction">
            <summary>
              Looks up a localized string similar to Cannot insert actions because the target action ID belongs to an action that is not an action group..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.ActionCantInsertInvalidAnchor">
            <summary>
              Looks up a localized string similar to Cannot insert actions because the anchoring action does not exist..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.ActionCantInsertInvalidRelativePosition">
            <summary>
              Looks up a localized string similar to Cannot insert actions because the relative positioning value is invalid..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.ActionCantInsertMissingAnchor">
            <summary>
              Looks up a localized string similar to Could not insert actions because the anchoring action was not specified, as required by the relative positioning value..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.ActionCantLoad">
            <summary>
              Looks up a localized string similar to Failed to load the product action {0}..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.ActionUnnamedXmlElementName">
            <summary>
              Looks up a localized string similar to Unnamed &lt;{0}&gt; Element.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.JetPopupMenuMainThread">
            <summary>
              Looks up a localized string similar to The popup menu must be used on the UI thread only..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.JetPopupMenuNoItemsBanner">
            <summary>
              Looks up a localized string similar to There are no items to show in this menu..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.MenuAlreadyVisible">
            <summary>
              Looks up a localized string similar to The menu is already visible..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.MenuItemKeyMustBeNonNull">
            <summary>
              Looks up a localized string similar to The menu item key is expected to be non-Null..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.NoItemsCaseShouldHaveBeenCutOffEarlier">
            <summary>
              Looks up a localized string similar to The no-items case should&apos;ve been cut off earlier..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdAllowDownloadCheckbox">
            <summary>
              Looks up a localized string similar to Download the list of available updates from the Web.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdAllowDownloadComment">
            <summary>
              Looks up a localized string similar to No personally identifiable information is uploaded to the server.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdAreNewPluginVersionsAvailable">
            <summary>
              Looks up a localized string similar to There are new plugin versions available..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdAreNewProductVersionsAvailable">
            <summary>
              Looks up a localized string similar to There are new {0} versions available..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdDownloadLink">
            <summary>
              Looks up a localized string similar to Download.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdEstimatedPrice">
            <summary>
              Looks up a localized string similar to Estimated price.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdFree">
            <summary>
              Looks up a localized string similar to free.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdIsNewPluginVersionAvailable">
            <summary>
              Looks up a localized string similar to There is a new plugin version available..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdIsNewProductVersionAvailable">
            <summary>
              Looks up a localized string similar to There is a new {0} version available..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdKindFeatures">
            <summary>
              Looks up a localized string similar to feature release.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdKindGeneric">
            <summary>
              Looks up a localized string similar to update.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdKindPreview">
            <summary>
              Looks up a localized string similar to prerelease build.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdKindService">
            <summary>
              Looks up a localized string similar to service update.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdNoUpdatesAvailable">
            <summary>
              Looks up a localized string similar to There are no updates available..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdNoUpdatesAvailableForProduct">
            <summary>
              Looks up a localized string similar to There are no updates available for {0}..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdPluginUpdates">
            <summary>
              Looks up a localized string similar to Plugin Updates.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdProductUpdates">
            <summary>
              Looks up a localized string similar to {0} Updates.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdReadMoreLink">
            <summary>
              Looks up a localized string similar to Read More.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdThisUpdateInstallsInstalls">
            <summary>
              Looks up a localized string similar to installs.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdThisUpdateInstallsPre">
            <summary>
              Looks up a localized string similar to This.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdUnidentifiedProduct">
            <summary>
              Looks up a localized string similar to Unidentified Product.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdUnknownCompany">
            <summary>
              Looks up a localized string similar to Unknown Company.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdUntitledUpdate">
            <summary>
              Looks up a localized string similar to Untitled.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.ToolStripEx">
            <summary>
            This class adds click-through behaviour to ToolStrip
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.ToolStripEx.ClickThrough">
            <summary>
            Gets or sets whether the ToolStripEx honors item clicks when its containing form does
            not have input focus.
            </summary>
            <remarks>
            Default value is false, which is the same behavior provided by the base ToolStrip class.
            </remarks>
        </member>
        <member name="M:JetBrains.ActionManagement.IActionBar.CreateDataContext(JetBrains.DataFlow.Lifetime)">
            <summary>
            You must dispose of the return value.
            </summary>
            <param name="lifetime"></param>
        </member>
        <member name="M:JetBrains.ActionManagement.IActionBarManager.CreateActionBar(JetBrains.ActionManagement.IActionGroup,System.Boolean,System.Func{System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule}})">
            <summary>
            
            </summary>
            <param name="actionGroup">Child actions of this group will populate the created action bar.</param>
            <param name="autoUpdate"></param>
            <param name="FGetDataRules">Helps with creating a Data Context each time the actions on the bar have to be updated or executed. System-wide data providers (and data rules) are mixed in when <see cref="M:JetBrains.ActionManagement.IActionBar.CreateDataContext(JetBrains.DataFlow.Lifetime)">Data Context is created</see>. If you're creating an action bar for a local control, you can use <see cref="P:JetBrains.ActionManagement.IActionManager.DataContexts"/> :: <see cref="M:JetBrains.Application.DataContext.FindDataRules.FindDataRulesInControl(JetBrains.UI.CrossFramework.EitherControl)"/> as an implementation for this functor.</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.ActionManagement.IActionBarManager.CreateActionContextMenu(JetBrains.ActionManagement.IActionGroup,System.Func{System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule}})">
            <summary>
            Creates a context menu.
            This menu will be registered in the action bars list, so you must make sure it's disposed of. 
            Calling <see cref="M:JetBrains.ActionManagement.IActionContextMenu.BeginShow(System.Windows.Point)"/> makes sure it's disposed of after showing or instead of showing if failed to show.
            </summary>
            <param name="actionGroup">Child actions of this group will populate the created action bar.</param>
            <param name="FGetDataRules">Helps with creating a Data Context each time the actions on the bar have to be updated or executed. System-wide data providers (and data rules) are mixed in when <see cref="M:JetBrains.ActionManagement.IActionBar.CreateDataContext(JetBrains.DataFlow.Lifetime)">Data Context is created</see>. If you're creating an action bar for a local control, you can use <see cref="P:JetBrains.ActionManagement.IActionManager.DataContexts"/> :: <see cref="M:JetBrains.Application.DataContext.FindDataRules.FindDataRulesInControl(JetBrains.UI.CrossFramework.EitherControl)"/> as an implementation for this functor.</param>
        </member>
        <member name="M:JetBrains.ActionManagement.IActionBarManager.CreateActionMenu(JetBrains.ActionManagement.IActionGroup,System.Func{System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule}})">
            <summary>
            
            </summary>
            <param name="actionGroup">Child actions of this group will populate the created action bar.</param>
            <param name="FGetDataRules">Helps with creating a Data Context each time the actions on the bar have to be updated or executed. System-wide data providers (and data rules) are mixed in when <see cref="M:JetBrains.ActionManagement.IActionBar.CreateDataContext(JetBrains.DataFlow.Lifetime)">Data Context is created</see>. If you're creating an action bar for a local control, you can use <see cref="P:JetBrains.ActionManagement.IActionManager.DataContexts"/> :: <see cref="M:JetBrains.Application.DataContext.FindDataRules.FindDataRulesInControl(JetBrains.UI.CrossFramework.EitherControl)"/> as an implementation for this functor.</param>
        </member>
        <member name="M:JetBrains.ActionManagement.IActionContextMenu.BeginShow(System.Windows.Point)">
            <summary>
            Shows the menu async at the given screen point.
            Don't dispose of the menu right after calling this method because it might be still operated onscreen.
            The menu will dispose of itself after you call this method, either when it's executed/dismissed, or immediately if it could not be shown (eg no items to show).
            </summary>
        </member>
        <member name="M:JetBrains.UI.ActionSystem.ActionBar.ActionStripSplitButton.OnClick(System.EventArgs)">
            <summary>Raises the <see cref="E:System.Windows.Forms.Control.Click"></see> event.</summary>
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        </member>
        <member name="M:JetBrains.UI.ActionSystem.ActionBar.ActionStripSplitButton.OnCheckedChanged(System.EventArgs)">
            <summary>Raises the <see cref="E:JetBrains.UI.ActionSystem.ActionBar.ActionStripSplitButton.CheckedChanged"></see> event.</summary>
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        </member>
        <member name="M:JetBrains.UI.ActionSystem.ActionBar.ActionStripSplitButton.OnCheckStateChanged(System.EventArgs)">
            <summary>Raises the <see cref="E:JetBrains.UI.ActionSystem.ActionBar.ActionStripSplitButton.CheckStateChanged"></see> event.</summary>
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        </member>
        <member name="P:JetBrains.UI.ActionSystem.ActionBar.ActionStripSplitButton.Checked">
            <summary>Gets or sets a value indicating whether the <see cref="T:System.Windows.Forms.ToolStripButton"></see> is pressed or not pressed.</summary>
            <returns>true if the <see cref="T:System.Windows.Forms.ToolStripButton"></see> is pressed in or not pressed in; otherwise, false. The default is false.</returns>
        </member>
        <member name="P:JetBrains.UI.ActionSystem.ActionBar.ActionStripSplitButton.CheckOnClick">
            <summary>Gets or sets a value indicating whether the <see cref="T:System.Windows.Forms.ToolStripButton"></see> should automatically appear pressed in and not pressed in when clicked.</summary>
            <returns>true if the <see cref="T:System.Windows.Forms.ToolStripButton"></see> should automatically appear pressed in and not pressed in when clicked; otherwise, false. The default is false.</returns>
        </member>
        <member name="P:JetBrains.UI.ActionSystem.ActionBar.ActionStripSplitButton.CheckState">
            <summary>Gets or sets a value indicating whether the <see cref="T:System.Windows.Forms.ToolStripButton"></see> is in the pressed or not pressed state by default, or is in an indeterminate state.</summary>
            <returns>One of the <see cref="T:System.Windows.Forms.CheckState"></see> values. The default is Unchecked.</returns>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value assigned is not one of the <see cref="T:System.Windows.Forms.CheckState"></see> values. </exception>
        </member>
        <member name="E:JetBrains.UI.ActionSystem.ActionBar.ActionStripSplitButton.CheckedChanged">
            <summary>Occurs when the value of the <see cref="P:JetBrains.UI.ActionSystem.ActionBar.ActionStripSplitButton.Checked"></see> property changes.</summary>
        </member>
        <member name="E:JetBrains.UI.ActionSystem.ActionBar.ActionStripSplitButton.CheckStateChanged">
            <summary>Occurs when the value of the <see cref="P:JetBrains.UI.ActionSystem.ActionBar.ActionStripSplitButton.CheckState"></see> property changes.</summary>
        </member>
        <member name="T:JetBrains.ActionManagement.IActionBarManagerAvalonEx">
            <summary>
            WPF-related helpers for <see cref="T:JetBrains.ActionManagement.IActionBarManager"/>.
            </summary>
            <seealso cref="T:JetBrains.ActionManagement.IActionBarManagerEx"/>
        </member>
        <member name="M:JetBrains.ActionManagement.IActionBarManagerAvalonEx.AttachPopupMenuToAvalonElement(JetBrains.ActionManagement.IActionBarManager,System.Windows.FrameworkElement,System.String,JetBrains.DataFlow.Lifetime)">
            <summary>
            Starts listening for the context menu event, shows the menu when requested.
            </summary>
            <param name="thіs">Object.</param>
            <param name="element">The WPF element originating the menu and providing the data context.</param>
            <param name="sActionGroupId">ID of the action group of the menu.</param>
            <param name="disposables"></param>
        </member>
        <member name="M:JetBrains.ActionManagement.IActionBarManagerAvalonEx.ShowPopupMenuInAvalonElement(JetBrains.ActionManagement.IActionBarManager,System.Windows.FrameworkElement,System.String,System.Windows.Point)">
            <summary>
            WPF specific overload.
            </summary>
            <param name="thіs">Object.</param>
            <param name="element">The WPF element originating the menu. It's used for (1) populating the data context for query-statusing and executing the actions and (2) calculating screen point from <paramref name="ptClient">client point</paramref> relatively to the control.</param>
            <param name="sActionGroupId">ID of the action group of the menu.</param>
            <param name="ptClient">Menu position, in client coordinates of the <paramref name="element"/>.</param>
        </member>
        <member name="T:JetBrains.ActionManagement.IActionBarManagerEx">
            <summary>
            UI-framework-agnostic helpers for <see cref="T:JetBrains.ActionManagement.IActionBarManager"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ActionManagement.IActionBarManagerEx.Update(JetBrains.ActionManagement.IActionBar)">
            <summary>
            Combines <see cref="M:JetBrains.ActionManagement.IActionBar.Update(JetBrains.Application.DataContext.IDataContext)"/> and <see cref="M:JetBrains.ActionManagement.IActionBar.CreateDataContext(JetBrains.DataFlow.Lifetime)"/>.
            </summary>
        </member>
        <member name="T:JetBrains.ActionManagement.IActionBarManagerWinFormsEx">
            <summary>
            WinForms-related helpers for <see cref="T:JetBrains.ActionManagement.IActionBarManager"/>. 
            </summary>
            <seealso cref="T:JetBrains.ActionManagement.IActionBarManagerEx"/>
        </member>
        <member name="M:JetBrains.ActionManagement.IActionBarManagerWinFormsEx.CreateActionBarForWinFormsControl(JetBrains.ActionManagement.IActionBarManager,System.String,System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Wraps <see cref="M:JetBrains.ActionManagement.IActionBarManager.CreateActionBar(JetBrains.ActionManagement.IActionGroup,System.Boolean,System.Func{System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule}})"/> for simple use on WinForms controls.
            </summary>
            <param name="thіs">Object.</param>
            <param name="sActionGroupId">String ID of the action group.</param>
            <param name="controlDataProviding">This control will be asked for data providers each time a data context is to be created for updating or executing the actions.</param>
            <param name="isAutoUpdate">Whether to auto-update the bar periodically.</param>
        </member>
        <member name="M:JetBrains.ActionManagement.IActionBarManagerWinFormsEx.ShowPopupMenuInWinFormsControl(JetBrains.ActionManagement.IActionBarManager,System.Windows.Forms.Control,System.Windows.Forms.Control,System.String,System.Drawing.Point)">
            <summary>
            WinForms control specific overload.
            </summary>
            <param name="thіs">Object.</param>
            <param name="control">The WinForms control originating the menu. It's used for calculating screen point from <paramref name="ptClient">client point</paramref> relatively to the control.</param>
            <param name="dataContextControl">The WinForms control owning the menu. It's used for populating the data context for query-statusing and executing the actions.</param>
            <param name="sActionGroupId">ID of the action group of the menu.</param>
            <param name="ptClient">Menu position, in client coordinates of the <paramref name="control"/>.</param>
        </member>
        <member name="M:JetBrains.ActionManagement.ActionLoader.ActionLoader.ProcessInsert(System.Xml.XmlElement,JetBrains.ActionManagement.ActionsXmlInfo)">
            <summary>
            Handles the <c>insert</c> statement in ActionsXml.
            Loads the nested actions and mounts them into the target group.
            </summary>
        </member>
        <member name="M:JetBrains.ActionManagement.ActionLoader.ActionLoader.ProcessInsert_ParsePosition(System.Xml.XmlElement,JetBrains.ActionManagement.ActionsXmlInfo)">
            <summary>
            Parses and validates the position, fallbacks to <see cref="F:JetBrains.ActionManagement.ActionLoader.ActionLoader.AnchorPosition.Last"/> and proceeds on failures.
            </summary>
        </member>
        <member name="T:JetBrains.ActionManagement.Impl.ActionInfo">
            <summary>
            Initialization-time Action information
            </summary>
        </member>
        <member name="M:JetBrains.ActionManagement.Impl.ActionInfo.GetActionFromActionHandler(JetBrains.ActionManagement.IActionHandler,JetBrains.ActionManagement.IActionManager)">
            <summary>
            Gets the action that is handled by the given <paramref name="handler"/>, if the handler is a class that has the <see cref="T:JetBrains.ActionManagement.ActionHandlerAttribute"/>.
            </summary>
        </member>
        <member name="M:JetBrains.ActionManagement.Impl.ActionInfo.GetActionFromActionHandler(System.Type,JetBrains.ActionManagement.IActionManager)">
            <summary>
            Gets the action that is handled by the given <paramref name="typeHandler"/>, if the handler is a class that has the <see cref="T:JetBrains.ActionManagement.ActionHandlerAttribute"/>.
            </summary>
        </member>
        <member name="F:JetBrains.ActionManagement.ActionManager.myMapMergedToContainer">
            <summary>
            When an aciton group gets merged into another action group (<see cref="!:AttrEmbed"/>), adds a mapping from the child (the group being merged) to the parent (the group into which the actions from the child are being merged).
            This map allows to see, for some action, which groups this action is mounted into. Needed for updating UI dynamically.
            // TODO: what should we do for INSERT elements?
            </summary>
        </member>
        <member name="M:JetBrains.ActionManagement.ActionManager.GetUpdatableAction(System.String)">
            <summary>
            Gets an updatable action by its unique ID. Fails if there is no such action or it is not updatable.
            </summary>
        </member>
        <member name="M:JetBrains.ActionManagement.ActionManager.GetExecutableAction(System.String)">
            <summary>
            Gets an executable action by its unique ID. Fails if there is no such action or it is not executable.
            </summary>
        </member>
        <member name="M:JetBrains.ActionManagement.ActionManager.GetActionGroup(System.String)">
            <summary>
            Gets an action group by its unique ID. Fails if there is no such action ID or it is not an action group.
            </summary>
        </member>
        <member name="M:JetBrains.ActionManagement.ActionManager.ExecuteShortcut(System.Windows.Forms.Keys,System.Boolean)">
            <summary>
            Attempts to execute the keyboard shortcut.
            Composite keyboard shortcuts, eg “Ctrl+K,F”, should be executed twice, once for each of the components.
            </summary>
            <param name="shortcut">The keyboard shortcut to execute. May be a part of a composite shortcut.</param>
            <param name="bIncludeHostActions">In a standalone configuration, has no meaning. In an embedded configurations, includes the host actions in the search list together with own actions managed by the action-manager.</param>
            <returns>Whether the action has been executed.</returns>
        </member>
        <member name="M:JetBrains.ActionManagement.ActionManager.OnActionPresentationChanged(JetBrains.ActionManagement.IUpdatableAction,JetBrains.ActionManagement.ActionPresentation,JetBrains.ActionManagement.ActionPresentation)">
            <summary>
            Called when any action changes its presentation during an update.
            </summary>
        </member>
        <member name="T:JetBrains.ActionManagement.ActionManagerUIEx">
            <summary>
            Extensions for <see cref="T:JetBrains.ActionManagement.IActionManager"/> — only those that cannot be put into the same assembly as the Action Manager itself.
            </summary>
        </member>
        <member name="M:JetBrains.ActionManagement.ActionManagerUIEx.GetHowToExecuteAction(JetBrains.ActionManagement.IActionManager,System.String,JetBrains.ActionManagement.IShortcutManager)">
            <summary>
            Tells the user how to execute the given action.
            This includes the main menu location (if present in main menu) and keyboard shortcut (if set).
            If neither is available, displays the action name for binding in the keyboard customizations dialog.
            </summary>
            <param name="actionMan">Action Manager.</param>
            <param name="actionID">ID of the action to hint on.</param>
        </member>
        <member name="M:JetBrains.ActionManagement.ActionManagerUIEx.GetHowToExecuteAction(JetBrains.ActionManagement.IActionManager,JetBrains.ActionManagement.IShortcutManager,System.Type)">
            <summary>
            Tells the user how to execute the given action.
            This includes the main menu location (if present in main menu) and keyboard shortcut (if set).
            If neither is available, displays the action name for binding in the keyboard customizations dialog.
            </summary>
            <param name="actionMan">Action Manager.</param>
            <param name="typeActionHandler">Type of the action handler class for the action that should be hinted. Allows to make a strongly-type reference to the action instead of using the action ID.</param>
        </member>
        <member name="F:JetBrains.ActionManagement.ActionsXmlInfo.IsProduct">
            <summary>
            Whether this ActionsXml is statically compiled into the product. <c>False</c> for plugins and other dynamically loaded action sets.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ActionSystem.ActionManager.ShortcutManagerEx.GetShortcutString(JetBrains.ActionManagement.IShortcutManager,JetBrains.ActionManagement.IUpdatableAction)">
            <summary>
            Makes a string out of <see cref="!:IActionManager.GetShortcuts"/>.
            To show the combined action execution hint, use <see cref="!:ActionManagerUIEx.GetHowToExecuteAction(JetBrains.ActionManagement.IActionManager,string)"/>.
            </summary>
        </member>
        <member name="T:JetBrains.ActionManagement.ActionsXmlAttribute">
            <summary>
            Use this attribute to specify resource name of XML file with actions configuration
            </summary>
        </member>
        <member name="F:JetBrains.UI.ActionSystem.Actions.CloseAll.CloseAll.ActionGroupId">
            <summary>
            ID of the action group with the “Close All” family actions.
            </summary>
        </member>
        <member name="F:JetBrains.UI.ActionSystem.Actions.CloseAll.CloseAll.DataConstant">
            <summary>
            Data constant for publishing the “Close All” family actions availability with <see cref="T:JetBrains.Application.DataContext.IDataContext"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ActionSystem.Actions.CloseAll.CloseAllItem.#ctor(System.String,System.Boolean,System.Action)">
            <param name="text">Item title.</param>
            <param name="isCurrent">If this is the “Current” item. “Close All but This” shouldn't touch this item.</param>
            <param name="FClose">Close action for closeable items, <c>Null</c> for non-closeable.</param>
        </member>
        <member name="F:JetBrains.UI.ActionSystem.Actions.CloseAll.CloseAllItem.Close">
            <summary>
            Closes this item (if it's closeable), does nothing otherwise.
            </summary>
        </member>
        <member name="F:JetBrains.UI.ActionSystem.Actions.CloseAll.CloseAllItem.IsCloseable">
            <summary>
            Whether this item could be closed (there're noncloseable tabs sometimes).
            </summary>
        </member>
        <member name="F:JetBrains.UI.ActionSystem.Actions.CloseAll.CloseAllItem.IsCurrent">
            <summary>
            If this is the “Current” item. “Close All but This” shouldn't touch this item.
            </summary>
        </member>
        <member name="F:JetBrains.UI.ActionSystem.Actions.CloseAll.CloseAllItem.Text">
            <summary>
            Item title.
            </summary>
        </member>
        <member name="T:JetBrains.ActionManagement.IExpandCollapseProvider">
            <summary>
            Implement this interface to use standard expand/collapse actions
            </summary>
        </member>
        <member name="T:JetBrains.ActionManagement.ActionHandlerAttribute">
            <summary>
            A class marked with this attribute implements action and is registered at the startup automatically.
            The class must be an inheritor of <see cref="T:JetBrains.ActionManagement.IActionHandler"/>.
            Specify one or more IDs of the actions this handler will handle, a separate instance of the class will be created for each ID and will get the ID it should serve as a ctor parameter.
            If you do not specify an ID, the class name will be used for an ID, without the “<c>Action</c>” or “<c>ActionHandler</c>” suffix.
            </summary>
        </member>
        <member name="M:JetBrains.ActionManagement.ActionHandlerAttribute.#ctor">
            <summary>
            Marks an action handler for an action whose ID is derived from the class name.
            </summary>
        </member>
        <member name="M:JetBrains.ActionManagement.ActionHandlerAttribute.#ctor(System.String[])">
            <summary>
            Marks an action handler for multiple actions, one instance per action, use ctor param to tell them apart.
            </summary>
        </member>
        <member name="M:JetBrains.ActionManagement.ActionCollection.InsertAction(System.Int32,JetBrains.ActionManagement.IActionBase)">
            <summary>
            Inserts an action to collection or bounds it to the existing one
            </summary>
            <param name="pos"></param>
            <param name="action"></param>
            <returns>true if inserted new action, false if bound to already existing one</returns>
        </member>
        <member name="T:JetBrains.ActionManagement.DefaultActionHandler">
            <summary>
            Default ActionHandler does nothing
            </summary>
        </member>
        <member name="T:JetBrains.ActionManagement.NextActionHandler">
            <summary>
            NextActionHandler delegate
            </summary>
        </member>
        <member name="T:JetBrains.ActionManagement.ControlActionHandler">
            <summary>
            ActionHandler for actions, that works while the control specified contains focus only.
            </summary>
        </member>
        <member name="T:JetBrains.ActionManagement.IDataContextHolder">
            <summary>
            A menu or toolbar, that holds DataCantext to use by subitems.
            </summary>
        </member>
        <member name="M:JetBrains.ActionManagement.FindWinFormsDataRules.FindDataRulesInControl(System.Windows.Forms.Control)">
            <summary>
            Control's data provider goes first, then parents are tried.
            </summary>
        </member>
        <member name="T:JetBrains.ActionManagement.EscapeActionHandlerBase">
            <summary>
            Base class for implementing escape action handlers
            </summary>
        </member>
        <member name="M:JetBrains.ActionManagement.OneOfaListActionHandler.IsAvailable(JetBrains.Application.DataContext.IDataContext)">
            <summary>
            When overriden in inheritors determines whether the handler is available in the current context.
            </summary>
        </member>
        <member name="M:JetBrains.ActionManagement.OneOfaListActionHandler.Execute(JetBrains.Application.DataContext.IDataContext)">
            <summary>
            When overriden in inheritors performs the handler action
            </summary>
        </member>
        <member name="F:JetBrains.ActionManagement.ShortcutUtil.ourWinFormAndVSKeyPairs">
            <summary>
            Warning! Duplicates from both sides
            </summary>
        </member>
        <member name="T:JetBrains.UI.Application.ApplicationIdleEvent">
            <summary>
            Fires periodically during the application idle time.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.ApplicationIdleEvent.InitStandardBindings(JetBrains.DataFlow.Lifetime,JetBrains.Threading.IThreading)">
            <summary>
            Binds to the WinForms/OLE Idle event.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.ApplicationIdleEvent.Idle">
            <summary>
            Fires periodically during the application idle time.
            </summary>
        </member>
        <member name="P:JetBrains.UI.CommonControls.Fonts.FontsManager.DefaultCodeFont">
            <summary>
            Gets editor font
            </summary>
        </member>
        <member name="P:JetBrains.UI.CommonControls.Fonts.FontsManager.LookupFont">
            <summary>
            Gets lookup font
            </summary>
        </member>
        <member name="P:JetBrains.UI.CommonControls.Fonts.FontsManager.ListFont">
            <summary>
            Font for pop-up lists
            </summary>
        </member>
        <member name="P:JetBrains.UI.CommonControls.Fonts.FontsManager.TipFont">
            <summary>
            Font for pop-up tips
            </summary>
        </member>
        <member name="P:JetBrains.UI.CommonControls.Fonts.FontsManager.DialogFont">
            <summary>
            Font for dialogs
            </summary>
        </member>
        <member name="P:JetBrains.UI.CommonControls.Fonts.FontsManager.MenuFont">
            <summary>
            A font to be used for menu item labels.
            </summary>
        </member>
        <member name="T:JetBrains.UI.CommonControls.Fonts.FontsManagerImpl">
            <summary>
            Implementation for the <see cref="T:JetBrains.UI.CommonControls.Fonts.FontsManager"/> class.
            Standalone/test version.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Components.GetCursorPosWowFix.myIsEverHooked">
            <summary>
            A component is created every time Shell is restarted, but we do not want to hook more than once.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Components.GetCursorPosWowFix.IsEnvironmentAffected">
            <summary>
            Gets whether we could possibly have problems with GetCursorPos on this environment.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Application.IIsApplicationActiveState">
            <summary>
            Tracks the application active state (whether any of its windows currently have focus).
            </summary>
        </member>
        <member name="P:JetBrains.UI.Application.IIsApplicationActiveState.IsEnabled">
            <summary>
            When set to <c>True</c>, starts tracking the active state of the application and promoting the values into the <see cref="P:JetBrains.UI.Application.IIsApplicationActiveState.IsApplicationActive"/>.
            Initially, OFF. The default implementation sets to <c>True</c> for the Shell lifetime.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Application.IIsApplicationActiveState.IsApplicationActive">
            <summary>
            Gets whether the application currently has user focus. Readonly.
            When <c>False</c>, you should generally cease any user-oriented activity.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Hooks.AvalonOperationCrisp">
            <summary>
            Enforses crisp fonts in avalon controls.
            Call whenever you're about to use Avalon, before or after doing so.
            All the calls but the first one will be ignored.
            </summary>
            <remarks>
            Hooks the MILCORE so that it obtained somehow improved information about the system settings.
            </remarks>
        </member>
        <member name="M:JetBrains.UI.Hooks.AvalonOperationCrisp.Execute_InstallHook">
            <summary>
            Injects the hook.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Hooks.AvalonOperationCrisp.Execute_InvalidateMil">
            <summary>
            A kick for the MILCORE to query for the display settings again, this time with our improved data.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Hooks.AvalonOperationCrisp.OnSystemParametersInfoW(System.UInt32,System.UInt32,System.Void*,System.UInt32)">
            <summary>
            Our replacement function which we hook into the MILCORE's IAT.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Hooks.AvalonOperationCrispComponent">
            <summary>
            Executes the <see cref="T:JetBrains.UI.Hooks.AvalonOperationCrisp"/> on shell startup.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.Interop.DwmStatus">
            <summary>
            DWM Status properties.
            The properties are statically available, but their values are tracked only within the component's lifetime.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.Interop.DwmStatus.IsDwmCompositionEnabled">
            <summary>
            Gets whether the Desktop Window Manager composition is currently enabled.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Interop.DwmStatus.UpdateIsDwmCompositionEnabled">
            <summary>
            Updates the <see cref="F:JetBrains.UI.Avalon.Interop.DwmStatus.IsDwmCompositionEnabled"/> property value.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.Interop.DwmStatus.ReadonlyToken">
            <summary>
            A separate class to ensure initorder, otherwise csc3 fails to arrange static fields properly.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Application.IsApplicationActiveStateDummy">
            <summary>
            Dummy implementation for operations without a component container.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Application.IsApplicationActiveState">
            <summary>
            Tracks the application active state (whether any of its windows currently have focus).
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.IsApplicationActiveState.UpdateActive(JetBrains.DataFlow.IProperty{System.Boolean})">
            <summary>
            Checks the active window to update the active state.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Application.MouseWheelRedirector">
            <summary>
            Fixes the mouse wheel behavior so that it were redirected to the hovered window, not the focused one.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.MouseWheelRedirector.OnHookedMessage(System.Object,JetBrains.UI.Interop.HookEventArgs)">
            <summary>
            The hook function.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Application.ShellComponentsEx">
            <summary>
            <see cref="T:JetBrains.Application.ShellComponents"/> in this assembly.
            </summary>
            <remarks>Excluded: <see cref="T:JetBrains.Application.OneTimeInitializationManager"/>, <see cref="T:JetBrains.Application.OleUndoManagerFactory"/>.</remarks>
        </member>
        <member name="T:JetBrains.UI.Components.SuspendFileSystemTrackerWhenInactive">
            <summary>
            Suspends processing changes when the application does not have keyboard input focus.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.TrackFocus.WM_GIMMEFOCUS">
            <summary>
            A special Visual Studio message that sets focus to its window in a deferred manner. Nice to track too.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.TrackFocus.ReportFocusedWindow(System.Void*,System.Text.StringBuilder,System.Boolean)">
            <summary>
            Adds details about a window, like its depth, title, netfx class, hwnd path from owner.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.TrackFocus.InitDevenvGimmeFocus(JetBrains.UI.Application.WindowsMessageHookManager)">
            <summary>
            Special case for DEVENV and its <see cref="F:JetBrains.UI.Application.Progress.TrackFocus.WM_GIMMEFOCUS"/> messages.
            </summary>
            <param name="hookman"></param>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.TrackFocus.InitWinApiFocus(JetBrains.UI.Application.WindowsMessageHookManager)">
            <summary>
            Tracks <c>WM_SETFOCUS</c>, <c>WM_KILLFOCUS</c> as it's applied to <see cref="M:JetBrains.Interop.WinApi.User32Dll.GetFocus"/>.
            </summary>
            <param name="hookman"></param>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.TrackFocus.LogFocusedWindow(System.Void*)">
            <summary>
            Adds details about a window, like its depth, title, netfx class, hwnd path from owner.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.TrackFocus.LogEntry.ScreenBounds">
            <summary>
            Total screen bounds (<see cref="F:JetBrains.UI.Application.Progress.TrackFocus.LogEntry.WindowRecord.BoundsOnScreen"/> are within these limits unless the window is larger than screen).
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.TrackFocus.LogEntry.WindowRecord.BoundsOnScreen">
            <summary>
            Bounds on screen, <c>Null</c> if not visible.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Application.UIApplication">
            <summary>
            Tracks and exposes various aspects of the UI Application functions and state.
            Even if those components are excluded from the application, provides the fallback implementation.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.UIApplication.MainWindow">
            <summary>
            Gets a handle to the application main window that could be used for owning dialog boxes, and such.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.UIApplication.IsApplicationActive">
            <summary>
            Gets whether the application currently has user focus. Readonly.
            When <c>False</c>, you should generally cease any user-oriented activity.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.UIApplication.Idle">
            <summary>
            Fires periodically during the application idle time.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.UIApplication.OpenUri(System.Uri)">
            <summary>
            Opens the specific URI in the default Web browser.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.UIApplication.OpenUri(System.String)">
            <summary>
            Opens the specific URI in the default Web browser.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.UIApplicationShellSettingsComponent.myIsSettingsLoaded">
            <summary>
            Because license check cancels loading settings and does not cancel saving settings, the settings file gets overwritten by an empty one.
            This flag is a temp solution to prevent this.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.UIApplicationShellSettingsComponent.QueryOverwriteUserSettingsFile">
            <summary>
            Determines if the <see cref="F:JetBrains.Application.Configuration.XmlExternalizationScope.UserSettings"/> file should be overwritten.
            Called if the file has been changed since loading, and there were external changes to the settings file on part of some other process at the same time.
            The UI Shell implementation is to show a Message Box prompt.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Components.UserActivityMonitor">
            <summary>
            Monitors the user activity and suggests the optimal time for notifications.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Components.UserActivityMonitor.IncomingContextSwitchDeferTime">
            <summary>
            Note: don't keep too low, otherwise, the series of changes after Vista unlock will go separately. Recommended: 2 sec.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Components.UserActivityMonitor.IncomingUserContextSwitchDetected">
            <summary>
            Could be fired on any thread, means a user context switch has just been detected.
            Adjacent firings are collected, and after the app is activated the <see cref="F:JetBrains.UI.Components.UserActivityMonitor.UserContextSwitch"/> is fired on the primary thread.
            Don't sink this event; instead, sink the outgoing <see cref="F:JetBrains.UI.Components.UserActivityMonitor.UserContextSwitch"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Components.UserActivityMonitor.UserContextSwitch">
            <summary>
            Fires when the user switches its attention in our out, and we could potentially show our notifications without breaking the user context.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.ActiveRichText.FontInfo">
            <summary>
            Font information
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.ActiveRichText.FormattedText">
            <summary>
            Text markup
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.ActiveRichText.FormattedText.Lines">
            <summary>
            Gets array of lines to paint
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.ActiveRichText.IActiveText">
            <summary>
            Represents an active text
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.ActiveRichText.IActiveText.Paint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint the text
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.ActiveRichText.IActiveText.CalculateHeight(System.Drawing.Graphics,System.Int32)">
            <summary>
            Gets text full height
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.ActiveRichText.IActiveText.NotifyMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Notify active text about mouse move
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.ActiveRichText.IActiveText.GetAnchor(System.Drawing.Point)">
            <summary>
            Gets currently hovered anchor
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.ActiveRichText.IActiveText.ColorScheme">
            <summary>
            Gets or sets color scheme
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.ActiveRichText.IActiveText.Content">
            <summary>
            Gets or sets content
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.ActiveRichText.IActiveText.DefaultFont">
            <summary>
            Gets or sets default font for text
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.ActiveRichText.Impl.TextMarkup">
            <summary>
            Summary description for MarkupModel.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.ActiveRichText.TextLine">
            <summary>
            Line of text
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.ActiveRichText.TextPart">
            <summary>
            Part of text line with common text attributes
            </summary>
        </member>
        <member name="T:JetBrains.UI.ActiveText.FileProtocolHandler">
            <summary>
            Special handling of local file links
            Treat hash as windows explorer verb
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.Controls.Automation.AutomationProviders">
            <summary>
            See <see cref="M:JetBrains.UI.Avalon.Controls.Automation.AutomationProviders.Initialize"/>.
            Also, if we're running in the mode that includes this assembly, winds up the automation providers automatically.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.AutomationProviders.Initialize">
            <summary>
            Call this method to enable all of the automation peers.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ElementProviderFromPoint(System.Double,System.Double)">
            <summary>
            Retrieves the element in this fragment that is at the specified point. 
            </summary>
            <returns>
            The provider for the child element at the specified point, if one exists, or the root provider if the point is on this element but not on any child element. Otherwise returns null.
            </returns>
            <param name="x">The X coordinate,.</param>
            <param name="y">The Y coordinate.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.GetEmbeddedFragmentRoots">
            <summary>
            Retrieves an array of fragment roots that are embedded in the UI Automation element tree rooted at the current element.
            </summary>
            <returns>
            An array of root fragments, or null.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.GetFocus">
            <summary>
            Retrieves the element in this fragment that has the input focus.
            </summary>
            <returns>
            The provider for the element in this fragment that has the input focus, if any; otherwise, a null reference (Nothing in Visual Basic).
            </returns>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.GetPatternProvider(System.Int32)">
            <summary>
            Retrieves an object that provides support for a control pattern on a UI Automation element.
            </summary>
            <returns>
            Object that implements the pattern interface, or null if the pattern is not supported.
            </returns>
            <param name="patternId">Identifier of the pattern.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.GetPropertyValue(System.Int32)">
            <summary>
            Retrieves the value of a property supported by the UI Automation provider.
            </summary>
            <returns>
            The property value, or a null if the property is not supported by this provider, or <see cref="F:System.Windows.Automation.AutomationElementIdentifiers.NotSupported" /> if it is not supported at all.
            </returns>
            <param name="propertyId">The property identifier.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.GetRuntimeId">
            <summary>
            Retrieves the runtime identifier of an element. 
            </summary>
            <returns>
            The unique run-time identifier of the element.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.Navigate(System.Windows.Automation.Provider.NavigateDirection)">
            <summary>
            Retrieves the UI Automation element in a specified direction within the tree.
            </summary>
            <returns>
            The element in the specified direction, or null if there is no element in that direction
            </returns>
            <param name="direction">The direction in which to navigate.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.SetFocus">
            <summary>
            Sets the focus to this element. 
            </summary>
        </member>
        <member name="P:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.BoundingRectangle">
            <summary>
            Gets the bounding rectangle of this element.
            </summary>
            <returns>
            The bounding rectangle, in screen coordinates.
            </returns>
        </member>
        <member name="P:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.FragmentRoot">
            <summary>
            Retrieves the root node of the fragment.
            </summary>
            <returns>
            The root node. 
            </returns>
        </member>
        <member name="P:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.HostRawElementProvider">
            <summary>
            Gets a base provider for this element.
            </summary>
            <returns>
            The base provider, or null.
            </returns>
        </member>
        <member name="P:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ProviderOptions">
            <summary>
            Gets a value that specifies characteristics of the UI Automation provider; for example, whether it is a client-side or server-side provider. 
            </summary>
            <returns>
            Either <see cref="F:System.Windows.Automation.Provider.ProviderOptions.ClientSideProvider" /> or <see cref="F:System.Windows.Automation.Provider.ProviderOptions.ServerSideProvider" />.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarItemViewFragment.Invoke">
            <summary>
            Sends a request to activate a control and initiate its single, unambiguous action.
            </summary>
            <returns>
            </returns>
            <exception cref="T:System.Windows.Automation.ElementNotEnabledException">If the control is not enabled.</exception>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarItemViewFragment.GetEmbeddedFragmentRoots">
            <summary>
            Retrieves an array of fragment roots that are embedded in the UI Automation element tree rooted at the current element.
            </summary>
            <returns>
            An array of root fragments, or null.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarItemViewFragment.GetPatternProvider(System.Int32)">
            <summary>
            Retrieves an object that provides support for a control pattern on a UI Automation element.
            </summary>
            <returns>
            Object that implements the pattern interface, or null if the pattern is not supported.
            </returns>
            <param name="patternId">Identifier of the pattern.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarItemViewFragment.GetPropertyValue(System.Int32)">
            <summary>
            Retrieves the value of a property supported by the UI Automation provider.
            </summary>
            <returns>
            The property value, or a null if the property is not supported by this provider, or <see cref="F:System.Windows.Automation.AutomationElementIdentifiers.NotSupported" /> if it is not supported at all.
            </returns>
            <param name="propertyId">The property identifier.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarItemViewFragment.GetRuntimeId">
            <summary>
            Retrieves the runtime identifier of an element. 
            </summary>
            <returns>
            The unique run-time identifier of the element.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarItemViewFragment.Navigate(System.Windows.Automation.Provider.NavigateDirection)">
            <summary>
            Retrieves the UI Automation element in a specified direction within the tree.
            </summary>
            <returns>
            The element in the specified direction, or null if there is no element in that direction
            </returns>
            <param name="direction">The direction in which to navigate.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarItemViewFragment.SetFocus">
            <summary>
            Sets the focus to this element. 
            </summary>
        </member>
        <member name="P:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarItemViewFragment.BoundingRectangle">
            <summary>
            Gets the bounding rectangle of this element.
            </summary>
            <returns>
            The bounding rectangle, in screen coordinates.
            </returns>
        </member>
        <member name="P:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarItemViewFragment.FragmentRoot">
            <summary>
            Retrieves the root node of the fragment.
            </summary>
            <returns>
            The root node. 
            </returns>
        </member>
        <member name="P:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarItemViewFragment.HostRawElementProvider">
            <summary>
            Gets a base provider for this element.
            </summary>
            <returns>
            The base provider, or null.
            </returns>
        </member>
        <member name="P:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarItemViewFragment.ProviderOptions">
            <summary>
            Gets a value that specifies characteristics of the UI Automation provider; for example, whether it is a client-side or server-side provider. 
            </summary>
            <returns>
            Either <see cref="F:System.Windows.Automation.Provider.ProviderOptions.ClientSideProvider" /> or <see cref="F:System.Windows.Automation.Provider.ProviderOptions.ServerSideProvider" />.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarViewFragment.ElementProviderFromPoint(System.Double,System.Double)">
            <summary>
            Retrieves the element in this fragment that is at the specified point. 
            </summary>
            <returns>
            The provider for the child element at the specified point, if one exists, or the root provider if the point is on this element but not on any child element. Otherwise returns null.
            </returns>
            <param name="x">The X coordinate,.</param>
            <param name="y">The Y coordinate.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarViewFragment.GetFocus">
            <summary>
            Retrieves the element in this fragment that has the input focus.
            </summary>
            <returns>
            The provider for the element in this fragment that has the input focus, if any; otherwise, a null reference (Nothing in Visual Basic).
            </returns>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarViewFragment.Invoke">
            <summary>
            Sends a request to activate a control and initiate its single, unambiguous action.
            </summary>
            <returns>
            </returns>
            <exception cref="T:System.Windows.Automation.ElementNotEnabledException">If the control is not enabled.</exception>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarViewFragment.GetEmbeddedFragmentRoots">
            <summary>
            Retrieves an array of fragment roots that are embedded in the UI Automation element tree rooted at the current element.
            </summary>
            <returns>
            An array of root fragments, or null.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarViewFragment.GetPatternProvider(System.Int32)">
            <summary>
            Retrieves an object that provides support for a control pattern on a UI Automation element.
            </summary>
            <returns>
            Object that implements the pattern interface, or null if the pattern is not supported.
            </returns>
            <param name="patternId">Identifier of the pattern.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarViewFragment.GetPropertyValue(System.Int32)">
            <summary>
            Retrieves the value of a property supported by the UI Automation provider.
            </summary>
            <returns>
            The property value, or a null if the property is not supported by this provider, or <see cref="F:System.Windows.Automation.AutomationElementIdentifiers.NotSupported" /> if it is not supported at all.
            </returns>
            <param name="propertyId">The property identifier.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarViewFragment.GetRuntimeId">
            <summary>
            Retrieves the runtime identifier of an element. 
            </summary>
            <returns>
            The unique run-time identifier of the element.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarViewFragment.Navigate(System.Windows.Automation.Provider.NavigateDirection)">
            <summary>
            Retrieves the UI Automation element in a specified direction within the tree.
            </summary>
            <returns>
            The element in the specified direction, or null if there is no element in that direction
            </returns>
            <param name="direction">The direction in which to navigate.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarViewFragment.SetFocus">
            <summary>
            Sets the focus to this element. 
            </summary>
        </member>
        <member name="P:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarViewFragment.BoundingRectangle">
            <summary>
            Gets the bounding rectangle of this element.
            </summary>
            <returns>
            The bounding rectangle, in screen coordinates.
            </returns>
        </member>
        <member name="P:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarViewFragment.FragmentRoot">
            <summary>
            Retrieves the root node of the fragment.
            </summary>
            <returns>
            The root node. 
            </returns>
        </member>
        <member name="P:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarViewFragment.HostRawElementProvider">
            <summary>
            Gets a base provider for this element.
            </summary>
            <returns>
            The base provider, or null.
            </returns>
        </member>
        <member name="P:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuTitleViewAutomationProvider.ToolbarViewFragment.ProviderOptions">
            <summary>
            Gets a value that specifies characteristics of the UI Automation provider; for example, whether it is a client-side or server-side provider. 
            </summary>
            <returns>
            Either <see cref="F:System.Windows.Automation.Provider.ProviderOptions.ClientSideProvider" /> or <see cref="F:System.Windows.Automation.Provider.ProviderOptions.ServerSideProvider" />.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuViewAutomationProvider.Invoke">
            <summary>
            Sends a request to activate a control and initiate its single, unambiguous action.
            </summary>
            <returns>
            </returns>
            <exception cref="T:System.Windows.Automation.ElementNotEnabledException">If the control is not enabled.</exception>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuViewAutomationProvider.GetPatternProvider(System.Int32)">
            <summary>
            Retrieves an object that provides support for a control pattern on a UI Automation element.
            </summary>
            <returns>
            Object that implements the pattern interface, or null if the pattern is not supported.
            </returns>
            <param name="patternId">Identifier of the pattern.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuViewAutomationProvider.GetPropertyValue(System.Int32)">
            <summary>
            Retrieves the value of a property supported by the UI Automation provider.
            </summary>
            <returns>
            The property value, or a null if the property is not supported by this provider, or <see cref="F:System.Windows.Automation.AutomationElementIdentifiers.NotSupported" /> if it is not supported at all.
            </returns>
            <param name="propertyId">The property identifier.</param>
        </member>
        <member name="P:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuViewAutomationProvider.HostRawElementProvider">
            <summary>
            Gets a base provider for this element.
            </summary>
            <returns>
            The base provider, or null.
            </returns>
        </member>
        <member name="P:JetBrains.UI.Avalon.Controls.Automation.Providers.JetPopupMenuViewAutomationProvider.ProviderOptions">
            <summary>
            Gets a value that specifies characteristics of the UI Automation provider; for example, whether it is a client-side or server-side provider. 
            </summary>
            <returns>
            Either <see cref="F:System.Windows.Automation.Provider.ProviderOptions.ClientSideProvider" /> or <see cref="F:System.Windows.Automation.Provider.ProviderOptions.ServerSideProvider" />.
            </returns>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.TipControlViewAutomationProvider.GetPatternProvider(System.Int32)">
            <summary>
            Retrieves an object that provides support for a control pattern on a UI Automation element.
            </summary>
            <returns>
            Object that implements the pattern interface, or null if the pattern is not supported.
            </returns>
            <param name="patternId">Identifier of the pattern.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.TipControlViewAutomationProvider.GetPropertyValue(System.Int32)">
            <summary>
            Retrieves the value of a property supported by the UI Automation provider.
            </summary>
            <returns>
            The property value, or a null if the property is not supported by this provider, or <see cref="F:System.Windows.Automation.AutomationElementIdentifiers.NotSupported" /> if it is not supported at all.
            </returns>
            <param name="propertyId">The property identifier.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.Automation.Providers.TipControlViewAutomationProvider.SetValue(System.String)">
            <summary>
            Sets the value of a control.
            </summary>
            <returns>
            </returns>
            <param name="value">The value to set. The provider is responsible for converting the value to the appropriate data type.</param>
            <exception cref="T:System.InvalidOperationException">If locale-specific information is passed to a control in an incorrect format such as an incorrectly formatted date. </exception>
            <exception cref="T:System.ArgumentException">If a new value cannot be converted from a string to a format the control recognizes.</exception>
            <exception cref="T:System.Windows.Automation.ElementNotEnabledException">When an attempt is made to manipulate a control that is not enabled.</exception>
        </member>
        <member name="P:JetBrains.UI.Avalon.Controls.Automation.Providers.TipControlViewAutomationProvider.HostRawElementProvider">
            <summary>
            Gets a base provider for this element.
            </summary>
            <returns>
            The base provider, or null.
            </returns>
        </member>
        <member name="P:JetBrains.UI.Avalon.Controls.Automation.Providers.TipControlViewAutomationProvider.ProviderOptions">
            <summary>
            Gets a value that specifies characteristics of the UI Automation provider; for example, whether it is a client-side or server-side provider. 
            </summary>
            <returns>
            Either <see cref="F:System.Windows.Automation.Provider.ProviderOptions.ClientSideProvider" /> or <see cref="F:System.Windows.Automation.Provider.ProviderOptions.ServerSideProvider" />.
            </returns>
        </member>
        <member name="P:JetBrains.UI.Avalon.Controls.Automation.Providers.TipControlViewAutomationProvider.IsReadOnly">
            <summary>
            Gets a value that specifies whether the value of a control is read-only. 
            </summary>
            <returns>
            true if the value is read-only; false if it can be modified. 
            </returns>
        </member>
        <member name="P:JetBrains.UI.Avalon.Controls.Automation.Providers.TipControlViewAutomationProvider.Value">
            <summary>
            Gets the value of the control.
            </summary>
            <returns>
            The value of the control as a string. 
            </returns>
        </member>
        <member name="T:JetBrains.UI.Avalon.Controls.AvalonStatusBarShim">
            <summary>
            Applies a list of <see cref="T:JetBrains.UI.StatusBar.JetStatusBarIndicator"/>s to an Avalon <see cref="T:System.Windows.Controls.Primitives.StatusBar"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.Controls.AvalonStatusBarShim.OptionDevTenBeta2PlantIntoStatusDockPanel">
            <summary>
            In DevTen Beta2, the status bar itself lives on another thread, which makes it planting our controls very complicated because of the threading issues.
            That's why we prefer planting to the dock panel that hosts the status bar.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.Controls.AvalonStatusBarShim.AvalonStatusBar">
            <summary>
            When non-<c>Null</c>, means the status bar we should be attached to.
            Note: this is used along the code path when we have the status bar hosted on the UI thread (VS10 beta 1). In VS 10 Beta 2, another approach is used. This code remains for possible other shells.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.Controls.AvalonStatusBarShim.StatusDockPanel">
            <summary>
            When non-<c>Null</c>, means the <see cref="T:System.Windows.Controls.DockPanel"/> on the bottom of the window, to which our status indicators should be added in a dock-right fashion. Usually the status bar itself sits in the same dock panel. This approach is used when we cannot deal with the status bar itself to put the items into it properly. The case in VS 10 beta 2, where the status bar control itself sits on another thread and causes a marshalling pain for us if operated directly.
            It's expected to be a <see cref="T:System.Windows.Controls.DockPanel"/> really, but we'd fallback for cases when we find ourselves in an unexpected layout and  look for just any suitable panel.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.AvalonStatusBarShim.TryFindStatusBarInHwnd(System.IntPtr)">
            <summary>
            Tries to find an Avalon status bar in the given window. The window must be fully inited by the moment.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.AvalonStatusBarShim.TryFindStatusDockPanelInHwnd(System.IntPtr)">
            <summary>
            Tries to detect the status line of the window
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.AvalonStatusBarShim.AddItemsHostToStatusBar(JetBrains.DataFlow.Lifetime,System.Windows.DependencyObject,System.Windows.Controls.ItemsControl)">
            <summary>
            Helper for attaching to a status bar. Places a panel for our items in among its indicators.
            Must be executed on the status bar thread.
            </summary>
            <param name="lifetime"></param>
            <param name="statbar">The status bar to plant into.</param>
            <param name="panelToHostOnStatusBar">The Avalon element to put on the status bar as its item.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.AvalonStatusBarShim.AddItemsHostToStatusDockPanel(JetBrains.DataFlow.Lifetime,System.Windows.Controls.Panel,System.Windows.Controls.ItemsControl)">
            <summary>
            Helper for attaching to the status line of a window. Places a panel for our items in between the status bar and resize grip.
            Must be executed on the UI thread.
            </summary>
            <param name="lifetime"></param>
            <param name="statusdock">The dock panel of the window status line.</param>
            <param name="panelToHostOnStatusBar">The Avalon element to put on the status bar as its item.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.AvalonStatusBarShim.TryFindStatusBarInHwnd_UiThread(System.Windows.PresentationSource)">
            <summary>
            Take 1: find all explicit status bars in the application window.
            Workable on VS10 up to Beta2 (non-inclusive).
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.AvalonStatusBarShim.TryFindStatusBarInHwnd_WorkerThread(System.Windows.PresentationSource)">
            <summary>
            Take 2: in VS 10 beta 2, the status bar is hosted in another thread. There seems to be no legal way for ripping out the nested object graph. Do some hacks.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.Controls.WindowlessControlElement">
            <summary>
            Renders an <see cref="T:JetBrains.CommonControls.IWindowlessControl"/>
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.Controls.WindowlessControlElement.myFArrangeOverride">
            <summary>
            Switchable implementation that's activated only when we have a presentation.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.Controls.WindowlessControlElement.myFMeasureOverride">
            <summary>
            Switchable implementation that's activated only when we have a presentation.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.Controls.WindowlessControlElement.myFRender">
            <summary>
            Switchable implementation that's activated only when we have a presentation.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.Controls.WindowlessControlElement.AlphaChannel">
            <summary>
            Gets or sets whether the windowless control will be rendered with an alpha channel or not.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.Controls.WindowlessControlElement.Presentation">
            <summary>
            Sets the presentation for the UI element. Get collapsed on <c>Null</c>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.Controls.WindowlessControlElement.TooltipRequested">
            <summary>
            Fires when we're queried for a tooltip.
            Retranslates the WPF <see cref="F:JetBrains.UI.Avalon.Tooltips.AvalonTooltipManagerComponent.GetJetTooltipEvent"/> event intercepted on the windowless control element level.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.WindowlessControlElement.InitTooltips">
            <summary>
            Tooltips support thru <see cref="T:JetBrains.UI.Tooltips.ITooltipManager"/> and <see cref="F:JetBrains.UI.Avalon.Tooltips.AvalonTooltipManagerComponent.GetJetTooltipEvent"/> and <see cref="F:JetBrains.UI.Avalon.Controls.WindowlessControlElement.TooltipRequested"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.AvalonStatusBarShim.IndicatorView.#ctor(JetBrains.UI.StatusBar.JetStatusBarIndicator,JetBrains.UI.CommonControls.Fonts.FontsManager,JetBrains.Application.Configuration.GlobalSettingsTable,JetBrains.UI.Tooltips.ITooltipManager,JetBrains.Threading.IThreading,JetBrains.UI.Application.IMainWindow)">
            <summary>
            Wraps the given indicator, detaches on dispose.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.Controls.AvalonStatusBarShim.IndicatorView.Data">
            <summary>
            The data item to be presented. A property (non-readonly) because we sometimes want to explicitly detach the backend and its resources from the view (by setting <see cref="F:JetBrains.UI.Avalon.Controls.AvalonStatusBarShim.IndicatorView.Data"/> to <c>Null</c>).
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.AvalonStatusBarShim.IndicatorView.InitTooltips">
            <summary>
            Forwards tooltip requests to the indicator.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.IWindowlessControl">
            <summary>
            An interface for the objects that implement a part of the control.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.IConstrainableControl">
            <summary>
            An interface that extends the standard control functionality by allowing it to negotiate for its size and focus on activation.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.IConstrainableControl.GetDesiredSize(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Performs the bottom-up layouting stage, when the control calculates its desired size using the given constraints.
            Should give generally the same results as <see cref="T:JetBrains.CommonControls.IConstrainableControl"/>, but could employ the <paramref name="gc"/> device context for the sake of optimization.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="limit">The maximum available space (that could affect the shape of the control, or strip down unnecessary calculations over the invisible items).
            May be a <see cref="T:System.Drawing.Size"/> with width and height equal to <see cref="F:System.Int32.MaxValue"/>, which means that the size is not limited.</param>
            <returns>The desired size, must be no larger than <paramref name="limit"/>.</returns>
        </member>
        <member name="M:JetBrains.CommonControls.IConstrainableControl.SetLayout(JetBrains.UI.LayoutResult)">
            <summary>
            Tells the control the details about the new layout applied to it by the controlling entity in conjunction with some <see cref="T:JetBrains.UI.IPopupLayouter"/>.
            Typically, the control need not apply the given size and location because that should be done by the controlling entity.
            The control may change its presentation in response to the layouting details, for example, whether it's attached to the top or the bottom of the anchoring rect.
            </summary>
            <param name="layout">The layouting details.</param>
        </member>
        <member name="P:JetBrains.CommonControls.IConstrainableControl.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.IConstrainableControl.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.IWindowlessControl.Paint(System.Drawing.Graphics)">
            <summary>
            Renders the context of the windowless control. The rendering bounds are given by the most recent call to the <see cref="M:JetBrains.CommonControls.IWindowlessControl.SetBounds(JetBrains.UI.IGraphicsContainer,System.Drawing.Rectangle)"/> method.
            </summary>
            <param name="g">The device context.</param>
        </member>
        <member name="M:JetBrains.CommonControls.IWindowlessControl.SetBounds(JetBrains.UI.IGraphicsContainer,System.Drawing.Rectangle)">
            <summary>
            Performs the top-down layouting stage, when the control lais out its parts within the given bounds.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="bounds">The new bounds. From now on, this value should be returned from the <see cref="P:JetBrains.CommonControls.IWindowlessControl.Bounds"/> property.</param>
        </member>
        <member name="P:JetBrains.CommonControls.IWindowlessControl.Bounds">
            <summary>
            The windowless control bounds in the parent coordinates. The implementor should just store and return the value set by the owner.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.IWindowlessControl.GottenDirty">
            <summary>
            The control has gotten dirty and should be repainted.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.Controls.AvalonStatusBarShim.IndicatorsItemsControl">
            <summary>
            A custom items control for the indicator. Changes the measuring layout pass logic to fir the height of the existing Visual Studio status bar (VS itself asks for the vertical-size as unbounded, we default to actual status bar size as the vertical bound, or to the scrollwidth if not calculated yet).
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.BitmapWindowlessControl">
            <summary>
            A simple windowless control that just renders a bitmap.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.BitmapWindowlessControl.GetDesiredSize(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Performs the bottom-up layouting stage, when the control calculates its desired size using the given constraints.
            Should give generally the same results as <see cref="T:JetBrains.CommonControls.IConstrainableControl"/>, but could employ the <paramref name="gc"/> device context for the sake of optimization.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="limit">The maximum available space (that could affect the shape of the control, or strip down unnecessary calculations over the invisible items).
            May be a <see cref="T:System.Drawing.Size"/> with width and height equal to <see cref="F:System.Int32.MaxValue"/>, which means that the size is not limited.</param>
            <returns>The desired size, must be no larger than <paramref name="limit"/>.</returns>
        </member>
        <member name="M:JetBrains.CommonControls.BitmapWindowlessControl.Paint(System.Drawing.Graphics)">
            <summary>
            Renders the context of the windowless control. The rendering bounds are given by the 
            </summary>
            <param name="g">The device context.</param>
        </member>
        <member name="M:JetBrains.CommonControls.BitmapWindowlessControl.SetBounds(JetBrains.UI.IGraphicsContainer,System.Drawing.Rectangle)">
            <summary>
            Performs the top-down layouting stage, when the control lais out its parts within the given bounds.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="bounds">The new bounds. From now on, this value should be returned from the <see cref="P:JetBrains.CommonControls.IWindowlessControl.Bounds"/> property.</param>
        </member>
        <member name="M:JetBrains.CommonControls.BitmapWindowlessControl.SetLayout(JetBrains.UI.LayoutResult)">
            <summary>
            Tells the control the details about the new layout applied to it by the controlling entity in conjunction with some <see cref="T:JetBrains.UI.IPopupLayouter"/>.
            Typically, the control need not apply the given size and location because that should be done by the controlling entity.
            The control may change its presentation in response to the layouting details, for example, whether it's attached to the top or the bottom of the anchoring rect.
            </summary>
            <param name="layout">The layouting details.</param>
        </member>
        <member name="P:JetBrains.CommonControls.BitmapWindowlessControl.Bitmap">
            <summary>
            Gets or sets the image to be rendered in the windowless control.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.BitmapWindowlessControl.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.BitmapWindowlessControl.Bounds">
            <summary>
            The windowless control bounds in the parent coordinates. The implementor should just store and return the value set by the owner.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.BitmapWindowlessControl.GottenDirty">
            <summary>
            The control has gotten dirty and should be repainted.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.BitmapWindowlessControl.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.BorderedPanel">
            <summary>
            A panel that has a lower border.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.BorderedPanel.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint"></see> event.
            </summary>
            
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"></see> that contains the event data. </param>
        </member>
        <member name="P:JetBrains.UI.Controls.BorderedPanel.BorderColor">
            <summary>
            Gets or sets the border color. <see cref="P:System.Windows.Forms.Control.ForeColor"/> is not used so that to avoid inheriting it in the child controls.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.BorderedPanel.BorderWidth">
            <summary>
            Gets or sets which borders to paint.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.BorderedPanel.FillColor">
            <summary>
            Gets or sets the fill color. <see cref="P:System.Windows.Forms.Control.BackColor"/> is not used so that to avoid inheriting it in the child controls.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.Browser.HtmlViewControl">
            <summary>
            A control that displays the HTML content.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Browser.HtmlViewControl.OnDocumentCompleted(System.Windows.Forms.WebBrowserDocumentCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.WebBrowser.DocumentCompleted"></see> event.
            </summary>
            
            <param name="e">A <see cref="T:System.Windows.Forms.WebBrowserDocumentCompletedEventArgs"></see> that contains the event data. </param>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Windows.Forms.WebBrowser"></see> instance is no longer valid.</exception>
            <exception cref="T:System.InvalidOperationException">A reference to an implementation of the IWebBrowser2http://msdn.microsoft.com/workshop/browser/webbrowser/reference/ifaces/iwebbrowser2/iwebbrowser2.asp could not be retrieved from the underlying ActiveX WebBrowserhttp://msdn.microsoft.com/library/default.asp?url=/workshop/browser/webbrowser/browser_control_node_entry.asp.</exception>
        </member>
        <member name="P:JetBrains.CommonControls.Browser.HtmlViewControl.DocumentText">
            <summary>
            Gets or sets the HTML contents of the page displayed in the System.Windows.Forms.WebBrowser control.
            Wraps the base implementation to catch the setter silly exceptions.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupWindowManager.PopupWindowContext">
            <summary>
            The default implementation of the <see cref="T:JetBrains.UI.PopupWindowManager.IPopupWindowContext"/> interface.
            Represents an empty window context and a base class for meaningful window contexts.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupWindowManager.IPopupWindowContext">
            <summary>
            Represents the owning context for a popup window.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.IPopupWindowContext.CreateLayouter(JetBrains.DataFlow.Lifetime)">
            <summary>
            Gets the default position provider for the view. 
            Usually gets position provider which provides position bound to the current selection or insertion point of the view.
            </summary>
            <param name="lifetime">Lifetime for the layouter.</param>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.IPopupWindowContext.FireAnyOtherAction">
            <summary>
            Fires the <see cref="E:JetBrains.UI.PopupWindowManager.IPopupWindowContext.AnyOtherAction"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.IPopupWindowContext.FireDeactivated">
            <summary>
            Fires the <see cref="E:JetBrains.UI.PopupWindowManager.IPopupWindowContext.Deactivated"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.IPopupWindowContext.FireScroll">
            <summary>
            Fires the <see cref="E:JetBrains.UI.PopupWindowManager.IPopupWindowContext.Scroll"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.IPopupWindowContext.FireSelectionChanged">
            <summary>
            Fires the <see cref="E:JetBrains.UI.PopupWindowManager.IPopupWindowContext.SelectionChanged"/> event.
            </summary>
        </member>
        <member name="E:JetBrains.UI.PopupWindowManager.IPopupWindowContext.AnyOtherAction">
            <summary>
            Fires when some action occurs in the context owner.
            </summary>
        </member>
        <member name="E:JetBrains.UI.PopupWindowManager.IPopupWindowContext.Deactivated">
            <summary>
            Fires when the context owner is deactivated.
            </summary>
        </member>
        <member name="E:JetBrains.UI.PopupWindowManager.IPopupWindowContext.EscapePressed">
            <summary>
            Fires when the ESCAPE key is pressed in the owning context. Works as a stack of handlers instead of a multicast event, that is, always notifies only the most-recently-added event in the stack, and then removes it from the stack.
            </summary>
        </member>
        <member name="E:JetBrains.UI.PopupWindowManager.IPopupWindowContext.Scroll">
            <summary>
            Fires when the context owner is scrolled.
            </summary>
        </member>
        <member name="E:JetBrains.UI.PopupWindowManager.IPopupWindowContext.SelectionChanged">
            <summary>
            Fires when selection changes in the context owner.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupWindowContext.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.ActionManagement.IActionManager)">
            <summary>
            A protected constructor for use from the inheritors.
            To get a default window context, use <see cref="T:System.Empty"/> instead.
            </summary>
            <param name="lifetime">Limiting lifetime.</param>
            <param name="actionManager">Action manager, required for handling of the ESC action.</param>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupWindowContext.GetEmpty(JetBrains.DataFlow.Lifetime,JetBrains.UI.PopupWindowManager.MainWindowPopupWindowContext)">
            <summary>
            Gets the default popup window context.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupWindowContext.GetEmptySource(JetBrains.UI.PopupWindowManager.MainWindowPopupWindowContext)">
            <summary>
            Gets the default popup window context.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupWindowContext.CreateLayouter(JetBrains.DataFlow.Lifetime)">
            <summary>
            Creates the default layouter that positiones its entities in the center of the DEVENV window.
            </summary>
            <param name="lifetime"></param>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupWindowContext.FireAnyOtherAction">
            <summary>
            Fires the <see cref="E:JetBrains.UI.PopupWindowManager.PopupWindowContext.AnyOtherAction"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupWindowContext.FireDeactivated">
            <summary>
            Fires the <see cref="E:JetBrains.UI.PopupWindowManager.PopupWindowContext.Deactivated"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupWindowContext.FireScroll">
            <summary>
            Fires the <see cref="E:JetBrains.UI.PopupWindowManager.PopupWindowContext.Scroll"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupWindowContext.FireSelectionChanged">
            <summary>
            Fires the <see cref="E:JetBrains.UI.PopupWindowManager.PopupWindowContext.SelectionChanged"/> event.
            </summary>
        </member>
        <member name="E:JetBrains.UI.PopupWindowManager.PopupWindowContext.EscapePressed">
            <summary>
            Fires when the ESCAPE key is pressed in the owning context. Works as a stack of handlers instead of a multicast event, that is, always notifies only the most-recently-added event in the stack, and then removes it from the stack.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.Controls.Browser.MshtmlBrowserControl2.CreateWebBrowserSiteBase">
            <summary>
            Returns a reference to the unmanaged WebBrowser ActiveX control site, which you can extend to customize the managed <see cref="T:System.Windows.Forms.WebBrowser"></see> control.
            </summary>
            
            <returns>
            A <see cref="T:System.Windows.Forms.WebBrowser.WebBrowserSite"></see> that represents the WebBrowser ActiveX control site.
            </returns>
            
        </member>
        <member name="T:JetBrains.UI.CommonControls.CheckBoxDisabledNoCheck">
            <summary>
            A checkbox that gets visually unchecked when disabled.
            Use the <see cref="P:JetBrains.UI.CommonControls.CheckBoxDisabledNoCheck.CheckedLogically"/> property if you'd like to use the non-visual state, <see cref="P:System.Windows.Forms.CheckBox.Checked"/> to use the visual state.
            Setting <see cref="P:System.Windows.Forms.CheckBox.Checked"/> will not affect the <see cref="P:JetBrains.UI.CommonControls.CheckBoxDisabledNoCheck.CheckedLogically"/> value.
            The <see cref="P:JetBrains.UI.CommonControls.CheckBoxDisabledNoCheck.CheckedVisually"/> property reflects the visual state of the checkbox.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.CheckBoxDisabledNoCheck.myFakeChange">
            <summary>
            <c>True</c> when the <see cref="P:System.Windows.Forms.CheckBox.Checked"/> property is being manipulated by this control on enable/disable.
            The <see cref="P:JetBrains.UI.CommonControls.CheckBoxDisabledNoCheck.CheckedLogically"/> should not change in such a case.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.CheckBoxDisabledNoCheck.UpdateCheckedProperty">
            <summary>
            Recacls the checked state of the control in response to various events.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.CheckBoxDisabledNoCheck.OnCheckedChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.CheckBox.CheckedChanged"></see> event.
            </summary>
            
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        </member>
        <member name="M:JetBrains.UI.CommonControls.CheckBoxDisabledNoCheck.OnEnabledChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.EnabledChanged"></see> event.
            </summary>
            
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        </member>
        <member name="P:JetBrains.UI.CommonControls.CheckBoxDisabledNoCheck.CheckedLogically">
            <summary>
            Gets or sets whether the checkbox is logically checked, not only visibly.
            </summary>
        </member>
        <member name="P:JetBrains.UI.CommonControls.CheckBoxDisabledNoCheck.CheckedVisually">
            <summary>
            Gets whether the checkbox is currently visually checked, or not.
            <c>False</c> when not <see cref="!:CheckBox.Enabled"/>.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.Controls.ColorPickerDialog.ContentSlider">
            <summary>
            Interaction logic for ColorAxisSlider.xaml
            </summary>
            <summary>
            ContentSlider
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.ColorPickerDialog.ContentSlider.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.ColorPickerDialog.ColorFormatSelector">
            <summary>
            Interaction logic for ColorFormats.xaml
            </summary>
            <summary>
            ColorFormatSelector
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.ColorPickerDialog.ColorFormatSelector.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.Controls.ColorPickerDialog.ColorSpaceState">
            <summary>
            Interaction logic for ColorPickerDialog.xaml
            </summary>
            
        </member>
        <member name="T:JetBrains.UI.Avalon.Controls.ColorPickerDialog.ColorPickerControl">
            <summary>
            ColorPickerControl
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.ColorPickerDialog.ColorPickerControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.Src.Controls.ColorPickerDialog.ColorPickerDialog">
            <summary>
            Interaction logic for ColorPickerDialog.xaml
            </summary>
            <summary>
            ColorPickerDialog
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Src.Controls.ColorPickerDialog.ColorPickerDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.CustomListBoxControl`1">
            <summary>
            A list box with a custom painter.
            </summary>
            <typeparam name="T">Type of the listbox items.</typeparam>
        </member>
        <member name="F:JetBrains.UI.Controls.CustomListBoxControl`1.myItemPainter">
            <summary>
            The item painter to use.
            </summary>
        </member>
        <member name="E:JetBrains.UI.Controls.CustomListBoxControl`1.Scrolled">
            <summary>
            Fires when the list box is scrolled.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonDialogs.PromptWinForm.ShowDialog">
            <summary>
            Shows the prompt form with the <see cref="T:JetBrains.UI.Application.IMainWindow"/> as the parent.
            Returns whether the user accepted the change.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonDialogs.PromptWinForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonDialogs.PromptWinForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.UI.CommonDialogs.PromptWinForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Demo.TaskDialogDemo.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.UI.TaskDialog.Demo.TaskDialogDemo.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.UI.TaskDialog.Demo.TaskDialogDemo.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:JetBrains.UI.TaskDialog.Emulation.AdjustControls.GetBestSize(System.Drawing.Graphics,System.String,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Measure a multiline string
            </summary>
            <param name="gr">Graphics</param>
            <param name="text">string to measure</param>
            <param name="rect">Original rect. The width will be taken as fixed.</param>
            <param name="textboxControl">True if you want to measure the string for a textbox control</param>
            <returns>A Size object with the measure of the string according with the params</returns>
        </member>
        <member name="M:JetBrains.UI.TaskDialog.Emulation.AdjustControls.GetBestSize(System.Windows.Forms.Control,System.String,System.Drawing.Rectangle)">
            <summary>
            Measure a multiline string for a Control
            
            http://www.mobilepractices.com/2008/01/making-multiline-measurestring-work.html
            </summary>
            <param name="control">control</param>
            <param name="text">string to measure</param>
            <param name="rect">Original rect. The width will be taken as fixed.</param>
            <returns>A Size object with the measure of the string according with the params</returns>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Emulation.CommandLinkButton.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.UI.TaskDialog.Emulation.CommandLinkButton.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.UI.TaskDialog.Emulation.CommandLinkButton.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Emulation.EmulateExpInfoButton.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.UI.TaskDialog.Emulation.EmulateExpInfoButton.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.UI.TaskDialog.Emulation.EmulateExpInfoButton.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:JetBrains.UI.TaskDialog.Emulation.EmulateTaskDialog">
            <summary>
            Tries to emulate the Task Dialog. Form will be called when the call to
            Task Dialog is not supported.
            </summary>
        </member>
        <member name="M:JetBrains.UI.TaskDialog.IActiveTaskDialog.ClickButton(System.Int32)">
            <summary>
            Simulate the action of a button click in the TaskDialog. This can be a DialogResult value 
            or the ButtonID set on a TasDialogButton set on TaskDialog.Buttons.
            </summary>
            <param name="buttonId">Indicates the button ID to be selected.</param>
        </member>
        <member name="M:JetBrains.UI.TaskDialog.IActiveTaskDialog.SetProgressBarMarquee(System.Boolean,System.UInt32)">
            <summary>
            Sets the animation state of the Marquee Progress Bar.
            </summary>
            <param name="startMarquee">true starts the marquee animation and false stops it.</param>
            <param name="speed">The time in milliseconds between refreshes.</param>
        </member>
        <member name="M:JetBrains.UI.TaskDialog.IActiveTaskDialog.ClickRadioButton(System.Int32)">
            <summary>
            Simulate the action of a radio button click in the TaskDialog. 
            The passed buttonID is the ButtonID set on a TaskDialogButton set on TaskDialog.RadioButtons.
            </summary>
            <param name="buttonId">Indicates the button ID to be selected.</param>
        </member>
        <member name="M:JetBrains.UI.TaskDialog.Emulation.EmulateTaskDialog.BuildControlButton(System.Int32,System.String)">
            <summary>
            Creates a standard button with a common event handler to close the
            the form and return the button's Id.
            </summary>
            <param name="tag">The button's Id.</param>
            <param name="text">The button's name.</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.TaskDialog.Emulation.EmulateTaskDialog.BuildControlLinkLabel(System.Windows.Forms.Padding,System.String)">
            <summary>
            Creates a standard link label and will convert any anchor links to
            a proper link.
            </summary>
            <param name="margin">The margin of the link label.</param>
            <param name="text">The text of the link label.</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.TaskDialog.Emulation.EmulateTaskDialog.BuildForm">
            <summary>
            Main entry method to build the form.
            </summary>
        </member>
        <member name="M:JetBrains.UI.TaskDialog.Emulation.EmulateTaskDialog.CloseForm">
            <summary>
            Closes the form and populate the necessary return results.
            </summary>
        </member>
        <member name="M:JetBrains.UI.TaskDialog.Emulation.EmulateTaskDialog.SetLinkLabelText(System.Windows.Forms.LinkLabel,System.String)">
            <summary>
            Parses a LinkLabel text and extract out all the anchor (a) tags.
            Then it will parse all the anchor tags and create the relevant
            links in the text.
            </summary>
        </member>
        <member name="M:JetBrains.UI.TaskDialog.Emulation.EmulateTaskDialog.ToString">
            <summary>
            This will return the formatted contents of the form. Useful when
            the user press "ctrl + c" on the form.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.TaskDialog.Emulation.EmulateTaskDialog.EmulateTaskDialog_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Detect user pressing "ctrl + c".
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Emulation.EmulateTaskDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.UI.TaskDialog.Emulation.EmulateTaskDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.UI.TaskDialog.Emulation.EmulateTaskDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:JetBrains.UI.TaskDialog.TaskDialog.Show(JetBrains.UI.TaskDialog.TaskDialogParams,System.Windows.Forms.IWin32Window)">
            <summary>
            Creates, displays, and operates a task dialog. The task dialog contains application-defined messages, title,
            verification check box, command links and push buttons, plus any combination of predefined icons and push buttons
            as specified on the other members of the class before calling Show.
            </summary>
            <param name="parameters">Task dialog parameters</param>
            <param name="owner">Owner window the task Dialog will modal to.</param>
            <returns>The result of the dialog, either a DialogResult value for common push buttons set in the CommonButtons
            member or the ButtonID from a TaskDialogButton structure set on the Buttons member.</returns>
        </member>
        <member name="M:JetBrains.UI.TaskDialog.TaskDialog.Show(JetBrains.UI.TaskDialog.TaskDialogParams,System.IntPtr)">
            <summary>
            Creates, displays, and operates a task dialog. The task dialog contains application-defined messages, title,
            verification check box, command links and push buttons, plus any combination of predefined icons and push buttons
            as specified on the other members of the class before calling Show.
            </summary>
            <param name="parameters">Task dialog parameters</param>
            <param name="hwndOwner">Owner window the task Dialog will modal to.</param>
            <returns>The result of the dialog, either a DialogResult value for common push buttons set in the CommonButtons
            member or the ButtonID from a TaskDialogButton structure set on the Buttons member.</returns>
        </member>
        <member name="M:JetBrains.UI.TaskDialog.TaskDialog.Show(JetBrains.UI.TaskDialog.TaskDialogParams,System.Windows.Forms.IWin32Window,System.Boolean@)">
            <summary>
            Creates, displays, and operates a task dialog. The task dialog contains application-defined messages, title,
            verification check box, command links and push buttons, plus any combination of predefined icons and push buttons
            as specified on the other members of the class before calling Show.
            </summary>
            <param name="parameters">Task dialog parameters</param>
            <param name="owner">Owner window the task Dialog will modal to.</param>
            <param name="verificationFlagChecked">Returns true if the verification checkbox was checked when the dialog
            was dismissed.</param>
            <returns>The result of the dialog, either a DialogResult value for common push buttons set in the CommonButtons
            member or the ButtonID from a TaskDialogButton structure set on the Buttons member.</returns>
        </member>
        <member name="M:JetBrains.UI.TaskDialog.TaskDialog.Show(JetBrains.UI.TaskDialog.TaskDialogParams,System.IntPtr,System.Boolean@)">
            <summary>
            Creates, displays, and operates a task dialog. The task dialog contains application-defined messages, title,
            verification check box, command links and push buttons, plus any combination of predefined icons and push buttons
            as specified on the other members of the class before calling Show.
            </summary>
            <param name="parameters">Task dialog parameters</param>
            <param name="hwndOwner">Owner window the task Dialog will modal to.</param>
            <param name="verificationFlagChecked">Returns true if the verification checkbox was checked when the dialog
            was dismissed.</param>
            <returns>The result of the dialog, either a DialogResult value for common push buttons set in the CommonButtons
            member or the ButtonID from a TaskDialogButton structure set on the Buttons member.</returns>
        </member>
        <member name="M:JetBrains.UI.TaskDialog.TaskDialog.Show(JetBrains.UI.TaskDialog.TaskDialogParams,System.Windows.Forms.IWin32Window,System.Boolean@,System.Int32@)">
            <summary>
            Creates, displays, and operates a task dialog. The task dialog contains application-defined messages, title,
            verification check box, command links and push buttons, plus any combination of predefined icons and push buttons
            as specified on the other members of the class before calling Show.
            </summary>
            <param name="parameters">Task dialog parameters</param>
            <param name="owner">Owner window the task Dialog will modal to.</param>
            <param name="verificationFlagChecked">Returns true if the verification checkbox was checked when the dialog
            was dismissed.</param>
            <param name="radioButtonResult">The radio botton selected by the user.</param>
            <returns>The result of the dialog, either a DialogResult value for common push buttons set in the CommonButtons
            member or the ButtonID from a TaskDialogButton structure set on the Buttons member.</returns>
        </member>
        <member name="M:JetBrains.UI.TaskDialog.TaskDialog.Show(JetBrains.UI.TaskDialog.TaskDialogParams,System.IntPtr,System.Boolean@,System.Int32@)">
            <summary>
            Creates, displays, and operates a task dialog. The task dialog contains application-defined messages, title,
            verification check box, command links and push buttons, plus any combination of predefined icons and push buttons
            as specified on the other members of the class before calling Show.
            </summary>
            <param name="parameters">Task dialog parameters</param>
            <param name="hwndOwner">Owner window the task Dialog will modal to.</param>
            <param name="verificationFlagChecked">Returns true if the verification checkbox was checked when the dialog
            was dismissed.</param>
            <param name="radioButtonResult">The radio botton selected by the user.</param>
            <returns>The result of the dialog, either a DialogResult value for common push buttons set in the CommonButtons
            member or the ButtonID from a TaskDialogButton structure set on the Buttons member.</returns>
        </member>
        <member name="M:JetBrains.UI.TaskDialog.TaskDialog.TodoUseHere">
            <summary>
            Marker method for places where TaskDialog should be used in place of any msgboxes or custom dialogs :) TODO!
            </summary>
        </member>
        <member name="T:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods">
            <summary>
            Class to hold native code interop declarations.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.WM_USER">
            <summary>
            WM_USER taken from WinUser.h
            </summary>
        </member>
        <member name="M:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TaskDialogIndirect(JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOGCONFIG@,System.Int32@,System.Int32@,System.Boolean@)">
            <summary>
            TaskDialogIndirect taken from commctl.h
            </summary>
            <param name="pTaskConfig">All the parameters about the Task Dialog to Show.</param>
            <param name="pnButton">The push button pressed.</param>
            <param name="pnRadioButton">The radio button that was selected.</param>
            <param name="pfVerificationFlagChecked">The state of the verification checkbox on dismiss of the Task Dialog.</param>
        </member>
        <member name="M:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.SendMessage(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Win32 SendMessage.
            </summary>
            <param name="hWnd">Window handle to send to.</param>
            <param name="Msg">The windows message to send.</param>
            <param name="wParam">Specifies additional message-specific information.</param>
            <param name="lParam">Specifies additional message-specific information.</param>
            <returns>The return value specifies the result of the message processing; it depends on the message sent.</returns>
        </member>
        <member name="M:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.SendMessageWithString(System.IntPtr,System.UInt32,System.IntPtr,System.String)">
            <summary>
            Win32 SendMessage.
            </summary>
            <param name="hWnd">Window handle to send to.</param>
            <param name="Msg">The windows message to send.</param>
            <param name="wParam">Specifies additional message-specific information.</param>
            <param name="lParam">Specifies additional message-specific information as a string.</param>
            <returns>The return value specifies the result of the message processing; it depends on the message sent.</returns>
        </member>
        <member name="T:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOGCONFIG">
            <summary>
            TASKDIALOGCONFIG taken from commctl.h.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOGCONFIG.cbSize">
            <summary>
            Size of the structure in bytes.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOGCONFIG.hwndParent">
            <summary>
            Parent window handle.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOGCONFIG.hInstance">
            <summary>
            Module instance handle for resources.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOGCONFIG.dwFlags">
            <summary>
            Flags.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOGCONFIG.dwCommonButtons">
            <summary>
            Bit flags for commonly used buttons.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOGCONFIG.pszWindowTitle">
            <summary>
            Window title.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOGCONFIG.MainIcon">
            <summary>
            The Main icon. Overloaded member. Can be string, a handle, a special value or a resource ID.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOGCONFIG.pszMainInstruction">
            <summary>
            Main Instruction.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOGCONFIG.pszContent">
            <summary>
            Content.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOGCONFIG.cButtons">
            <summary>
            Count of custom Buttons.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOGCONFIG.pButtons">
            <summary>
            Array of custom buttons.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOGCONFIG.nDefaultButton">
            <summary>
            ID of default button.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOGCONFIG.cRadioButtons">
            <summary>
            Count of radio Buttons.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOGCONFIG.pRadioButtons">
            <summary>
            Array of radio buttons.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOGCONFIG.nDefaultRadioButton">
            <summary>
            ID of default radio button.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOGCONFIG.pszVerificationText">
            <summary>
            Text for verification check box. often "Don't ask be again".
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOGCONFIG.pszExpandedInformation">
            <summary>
            Expanded Information.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOGCONFIG.pszExpandedControlText">
            <summary>
            Text for expanded control.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOGCONFIG.pszCollapsedControlText">
            <summary>
            Text for expanded control.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOGCONFIG.FooterIcon">
            <summary>
            Icon for the footer. An overloaded member link MainIcon.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOGCONFIG.pszFooter">
            <summary>
            Footer Text.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOGCONFIG.pfCallback">
            <summary>
            Function pointer for callback.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOGCONFIG.lpCallbackData">
            <summary>
            Data that will be passed to the call back.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOGCONFIG.cxWidth">
            <summary>
            Width of the Task Dialog's area in DLU's.
            </summary>
        </member>
        <member name="T:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOG_ELEMENTS">
            <summary>
            TASKDIALOG_ELEMENTS taken from CommCtrl.h
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOG_ELEMENTS.TDE_CONTENT">
            <summary>
            The content element.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOG_ELEMENTS.TDE_EXPANDED_INFORMATION">
            <summary>
            Expanded Information.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOG_ELEMENTS.TDE_FOOTER">
            <summary>
            Footer.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOG_ELEMENTS.TDE_MAIN_INSTRUCTION">
            <summary>
            Main Instructions
            </summary>
        </member>
        <member name="T:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOG_FLAGS">
            <summary>
            TASKDIALOG_FLAGS taken from CommCtrl.h.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOG_FLAGS.TDF_ENABLE_HYPERLINKS">
            <summary>
            Enable hyperlinks.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOG_FLAGS.TDF_USE_HICON_MAIN">
            <summary>
            Use icon handle for main icon.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOG_FLAGS.TDF_USE_HICON_FOOTER">
            <summary>
            Use icon handle for footer icon.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOG_FLAGS.TDF_ALLOW_DIALOG_CANCELLATION">
            <summary>
            Allow dialog to be cancelled, even if there is no cancel button.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOG_FLAGS.TDF_USE_COMMAND_LINKS">
            <summary>
            Use command links rather than buttons.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOG_FLAGS.TDF_USE_COMMAND_LINKS_NO_ICON">
            <summary>
            Use command links with no icons rather than buttons.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOG_FLAGS.TDF_EXPAND_FOOTER_AREA">
            <summary>
            Show expanded info in the footer area.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOG_FLAGS.TDF_EXPANDED_BY_DEFAULT">
            <summary>
            Expand by default.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOG_FLAGS.TDF_VERIFICATION_FLAG_CHECKED">
            <summary>
            Start with verification flag already checked.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOG_FLAGS.TDF_SHOW_PROGRESS_BAR">
            <summary>
            Show a progress bar.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOG_FLAGS.TDF_SHOW_MARQUEE_PROGRESS_BAR">
            <summary>
            Show a marquee progress bar.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOG_FLAGS.TDF_CALLBACK_TIMER">
            <summary>
            Callback every 200 milliseconds.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOG_FLAGS.TDF_POSITION_RELATIVE_TO_WINDOW">
            <summary>
            Center the dialog on the owner window rather than the monitor.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOG_FLAGS.TDF_RTL_LAYOUT">
            <summary>
            Right to Left Layout.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOG_FLAGS.TDF_NO_DEFAULT_RADIO_BUTTON">
            <summary>
            No default radio button.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOG_FLAGS.TDF_CAN_BE_MINIMIZED">
            <summary>
            Task Dialog can be minimized.
            </summary>
        </member>
        <member name="T:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOG_ICON_ELEMENTS">
            <summary>
            TASKDIALOG_ICON_ELEMENTS taken from CommCtrl.h
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOG_ICON_ELEMENTS.TDIE_ICON_MAIN">
            <summary>
            Main instruction icon.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOG_ICON_ELEMENTS.TDIE_ICON_FOOTER">
            <summary>
            Footer icon.
            </summary>
        </member>
        <member name="T:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOG_MESSAGES">
            <summary>
            TASKDIALOG_MESSAGES taken from CommCtrl.h.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOG_MESSAGES.TDM_CLICK_BUTTON">
            <summary>
            Click button.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOG_MESSAGES.TDM_SET_MARQUEE_PROGRESS_BAR">
            <summary>
            Set Progress bar to be marquee mode.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOG_MESSAGES.TDM_SET_PROGRESS_BAR_STATE">
            <summary>
            Set Progress bar state.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOG_MESSAGES.TDM_SET_PROGRESS_BAR_RANGE">
            <summary>
            Set progress bar range.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOG_MESSAGES.TDM_SET_PROGRESS_BAR_POS">
            <summary>
            Set progress bar position.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOG_MESSAGES.TDM_SET_PROGRESS_BAR_MARQUEE">
            <summary>
            Set progress bar marquee (animation).
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOG_MESSAGES.TDM_SET_ELEMENT_TEXT">
            <summary>
            Set a text element of the Task Dialog.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOG_MESSAGES.TDM_CLICK_RADIO_BUTTON">
            <summary>
            Click a radio button.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOG_MESSAGES.TDM_ENABLE_BUTTON">
            <summary>
            Enable or disable a button.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOG_MESSAGES.TDM_ENABLE_RADIO_BUTTON">
            <summary>
            Enable or disable a radio button.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOG_MESSAGES.TDM_CLICK_VERIFICATION">
            <summary>
            Check or uncheck the verfication checkbox.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOG_MESSAGES.TDM_UPDATE_ELEMENT_TEXT">
            <summary>
            Update the text of an element (no effect if origially set as null).
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOG_MESSAGES.TDM_SET_BUTTON_ELEVATION_REQUIRED_STATE">
            <summary>
            Designate whether a given Task Dialog button or command link should have a User Account Control (UAC) shield icon.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TASKDIALOG_MESSAGES.TDM_UPDATE_ICON">
            <summary>
            Refreshes the icon of the task dialog.
            </summary>
        </member>
        <member name="T:JetBrains.UI.TaskDialog.Native.TaskDialogUnsafeNativeMethods.TaskDialogCallback">
            <summary>
            The signature of the callback that receives messages from the Task Dialog when various events occur.
            </summary>
            <param name="hwnd">The window handle of the </param>
            <param name="msg">The message being passed.</param>
            <param name="wParam">wParam which is interpreted differently depending on the message.</param>
            <param name="lParam">wParam which is interpreted differently depending on the message.</param>
            <param name="refData">The refrence data that was set to TaskDialog.CallbackData.</param>
            <returns>A HRESULT value. The return value is specific to the message being processed. </returns>
        </member>
        <member name="T:JetBrains.UI.TaskDialog.SwitchingTaskDialog">
            <summary>
            Uses Native TaskDialog if available and Emulation if not
            </summary>
        </member>
        <member name="T:JetBrains.UI.TaskDialog.TaskDialogCallback">
            <summary>
            The signature of the callback that recieves notificaitons from the Task Dialog.
            </summary>
            <param name="taskDialog">The active task dialog which has methods that can be performed on an active Task Dialog.</param>
            <param name="args">The notification arguments including the type of notification and information for the notification.</param>
            <returns>Return value meaning varies depending on the Notification member of args.</returns>
        </member>
        <member name="T:JetBrains.UI.TaskDialog.TaskDialogCommonButtons">
            <summary>
            The TaskDialog common button flags used to specify the builtin bottons to show in the TaskDialog.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.TaskDialogCommonButtons.None">
            <summary>
            No common buttons.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.TaskDialogCommonButtons.Ok">
            <summary>
            OK common button. If selected Task Dialog will return DialogResult.OK.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.TaskDialogCommonButtons.Yes">
            <summary>
            Yes common button. If selected Task Dialog will return DialogResult.Yes.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.TaskDialogCommonButtons.No">
            <summary>
            No common button. If selected Task Dialog will return DialogResult.No.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.TaskDialogCommonButtons.Cancel">
            <summary>
            Cancel common button. If selected Task Dialog will return DialogResult.Cancel.
            If this button is specified, the dialog box will respond to typical cancel actions (Alt-F4 and Escape).
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.TaskDialogCommonButtons.Retry">
            <summary>
            Retry common button. If selected Task Dialog will return DialogResult.Retry.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.TaskDialogCommonButtons.Close">
            <summary>
            Close common button. If selected Task Dialog will return this value.
            </summary>
        </member>
        <member name="M:JetBrains.UI.TaskDialog.TaskDialogCustomButton.#ctor(System.Int32,System.String)">
            <summary>
            Initialize the custom button.
            </summary>
            <param name="id">The ID of the button. This value is returned by TaskDialog.Show when
            the button is clicked. Typically this will be a value in the DialogResult enum.</param>
            <param name="text">The string that appears on the button.</param>
        </member>
        <member name="P:JetBrains.UI.TaskDialog.TaskDialogCustomButton.ButtonId">
            <summary>
            The ID of the button. This value is returned by TaskDialog.Show when the button is clicked.
            </summary>
        </member>
        <member name="P:JetBrains.UI.TaskDialog.TaskDialogCustomButton.ButtonText">
            <summary>
            The string that appears on the button.
            </summary>
        </member>
        <member name="T:JetBrains.UI.TaskDialog.TaskDialogIcon">
            <summary>
            The System icons the TaskDialog supports.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.TaskDialogIcon.None">
            <summary>
            No Icon.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.TaskDialogIcon.Warning">
            <summary>
            System warning icon.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.TaskDialogIcon.Error">
            <summary>
            System Error icon.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.TaskDialogIcon.Information">
            <summary>
            System Information icon.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.TaskDialogIcon.Shield">
            <summary>
            Shield icon.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.TaskDialogIcon.Question">
            <summary>
            Question icon
            </summary>
        </member>
        <member name="T:JetBrains.UI.TaskDialog.TaskDialogNotificationArgs">
            <summary>
            Arguments passed to the TaskDialog callback.
            </summary>
        </member>
        <member name="P:JetBrains.UI.TaskDialog.TaskDialogNotificationArgs.NotificationKind">
            <summary>
            What the TaskDialog callback is a notification of.
            </summary>
        </member>
        <member name="P:JetBrains.UI.TaskDialog.TaskDialogNotificationArgs.ButtonId">
            <summary>
            The button ID if the notification is about a button. This a DialogResult
            value or the ButtonID member of a TaskDialogButton set in the
            TaskDialog.Buttons member.
            </summary>
        </member>
        <member name="P:JetBrains.UI.TaskDialog.TaskDialogNotificationArgs.Hyperlink">
            <summary>
            The HREF string of the hyperlink the notification is about.
            </summary>
        </member>
        <member name="P:JetBrains.UI.TaskDialog.TaskDialogNotificationArgs.TimerTickCount">
            <summary>
            The number of milliseconds since the dialog was opened or the last time the
            callback for a timer notification reset the value by returning true.
            </summary>
        </member>
        <member name="P:JetBrains.UI.TaskDialog.TaskDialogNotificationArgs.VerificationFlagChecked">
            <summary>
            The state of the verification flag when the notification is about the verification flag.
            </summary>
        </member>
        <member name="P:JetBrains.UI.TaskDialog.TaskDialogNotificationArgs.Expanded">
            <summary>
            The state of the dialog expando when the notification is about the expando.
            </summary>
        </member>
        <member name="T:JetBrains.UI.TaskDialog.TaskDialogNotificationKind">
            <summary>
            Task Dialog callback notifications. 
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.TaskDialogNotificationKind.Created">
            <summary>
            Sent by the Task Dialog once the dialog has been created and before it is displayed.
            The value returned by the callback is ignored.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.TaskDialogNotificationKind.ButtonClicked">
            <summary>
            Sent by the Task Dialog when the user selects a button or command link in the task dialog.
            The button ID corresponding to the button selected will be available in the
            TaskDialogNotificationArgs. To prevent the Task Dialog from closing, the application must
            return true, otherwise the Task Dialog will be closed and the button ID returned to via
            the original application call.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.TaskDialogNotificationKind.HyperlinkClicked">
            <summary>
            Sent by the Task Dialog when the user clicks on a hyperlink in the Task Dialog’s content.
            The string containing the HREF of the hyperlink will be available in the
            TaskDialogNotificationArgs. To prevent the TaskDialog from shell executing the hyperlink,
            the application must return TRUE, otherwise ShellExecute will be called.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.TaskDialogNotificationKind.Timer">
            <summary>
            Sent by the Task Dialog approximately every 200 milliseconds when TaskDialog.CallbackTimer
            has been set to true. The number of milliseconds since the dialog was created or the
            notification returned true is available on the TaskDialogNotificationArgs. To reset
            the tickcount, the application must return true, otherwise the tickcount will continue to
            increment.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.TaskDialogNotificationKind.Destroyed">
            <summary>
            Sent by the Task Dialog when it is destroyed and its window handle no longer valid.
            The value returned by the callback is ignored.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.TaskDialogNotificationKind.RadioButtonClicked">
            <summary>
            Sent by the Task Dialog when the user selects a radio button in the task dialog.
            The button ID corresponding to the button selected will be available in the
            TaskDialogNotificationArgs.
            The value returned by the callback is ignored.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.TaskDialogNotificationKind.DialogConstructed">
            <summary>
            Sent by the Task Dialog once the dialog has been constructed and before it is displayed.
            The value returned by the callback is ignored.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.TaskDialogNotificationKind.VerificationClicked">
            <summary>
            Sent by the Task Dialog when the user checks or unchecks the verification checkbox.
            The verificationFlagChecked value is available on the TaskDialogNotificationArgs.
            The value returned by the callback is ignored.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.TaskDialogNotificationKind.Help">
            <summary>
            Sent by the Task Dialog when the user presses F1 on the keyboard while the dialog has focus.
            The value returned by the callback is ignored.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.TaskDialogNotificationKind.ExpandoButtonClicked">
            <summary>
            Sent by the task dialog when the user clicks on the dialog's expando button.
            The expanded value is available on the TaskDialogNotificationArgs.
            The value returned by the callback is ignored.
            </summary>
        </member>
        <member name="P:JetBrains.UI.TaskDialog.TaskDialogParams.WindowTitle">
            <summary>
            The string to be used for the dialog box title.
            If this parameter is NULL, the filename of the executable program is used.
            Default: Shell.Instance.Descriptor.ProductFullName
            </summary>
        </member>
        <member name="P:JetBrains.UI.TaskDialog.TaskDialogParams.MainInstruction">
            <summary>
            The string to be used for the main instruction.
            </summary>
        </member>
        <member name="P:JetBrains.UI.TaskDialog.TaskDialogParams.Content">
            <summary>
            The string to be used for the dialog’s primary content. If the EnableHyperlinks member is true,
            then this string may contain hyperlinks in the form: <A HREF="executablestring">Hyperlink Text</A>. 
            WARNING: Enabling hyperlinks when using content from an unsafe source may cause security vulnerabilities.
            </summary>
        </member>
        <member name="P:JetBrains.UI.TaskDialog.TaskDialogParams.CommonButtons">
            <summary>
            Specifies the push buttons displayed in the dialog box. This parameter may be a combination of flags.
            If no common buttons are specified and no custom buttons are specified using the Buttons member, the
            dialog box will contain the OK button by default.
            </summary>
        </member>
        <member name="P:JetBrains.UI.TaskDialog.TaskDialogParams.MainIcon">
            <summary>
            Specifies a built in icon for the main icon in the dialog. If this is set to none
            and the CustomMainIcon is null then no main icon will be displayed.
            </summary>
        </member>
        <member name="P:JetBrains.UI.TaskDialog.TaskDialogParams.CustomMainIcon">
            <summary>
            Specifies a custom in icon for the main icon in the dialog. If this is set to none
            and the CustomMainIcon member is null then no main icon will be displayed.
            </summary>
        </member>
        <member name="P:JetBrains.UI.TaskDialog.TaskDialogParams.FooterIcon">
            <summary>
            Specifies a built in icon for the icon to be displayed in the footer area of the
            dialog box. If this is set to none and the CustomFooterIcon member is null then no
            footer icon will be displayed.
            </summary>
        </member>
        <member name="P:JetBrains.UI.TaskDialog.TaskDialogParams.CustomFooterIcon">
            <summary>
            Specifies a custom icon for the icon to be displayed in the footer area of the
            dialog box. If this is set to none and the CustomFooterIcon member is null then no
            footer icon will be displayed.
            </summary>
        </member>
        <member name="P:JetBrains.UI.TaskDialog.TaskDialogParams.Buttons">
            <summary>
            Specifies the custom push buttons to display in the dialog. Use CommonButtons member for
            common buttons; OK, Yes, No, Retry and Cancel, and Buttons when you want different text
            on the push buttons.
            </summary>
        </member>
        <member name="P:JetBrains.UI.TaskDialog.TaskDialogParams.RadioButtons">
            <summary>
            Specifies the radio buttons to display in the dialog.
            </summary>
        </member>
        <member name="P:JetBrains.UI.TaskDialog.TaskDialogParams.EnableHyperlinks">
            <summary>
            Enables hyperlink processing for the strings specified in the Content, ExpandedInformation
            and FooterText members. When enabled, these members may be strings that contain hyperlinks
            in the form: <A HREF="executablestring">Hyperlink Text</A>. 
            WARNING: Enabling hyperlinks when using content from an unsafe source may cause security vulnerabilities.
            Note: Task Dialog will not actually execute any hyperlinks. Hyperlink execution must be handled
            in the callback function specified by Callback member.
            </summary>
        </member>
        <member name="P:JetBrains.UI.TaskDialog.TaskDialogParams.AllowDialogCancellation">
            <summary>
            Indicates that the dialog should be able to be closed using Alt-F4, Escape and the title bar’s
            close button even if no cancel button is specified in either the CommonButtons or Buttons members.
            </summary>
        </member>
        <member name="P:JetBrains.UI.TaskDialog.TaskDialogParams.UseCommandLinks">
            <summary>
            Indicates that the buttons specified in the Buttons member should be displayed as command links
            (using a standard task dialog glyph) instead of push buttons.  When using command links, all
            characters up to the first new line character in the ButtonText member (of the TaskDialogButton
            structure) will be treated as the command link’s main text, and the remainder will be treated
            as the command link’s note. This flag is ignored if the Buttons member has no entires.
            </summary>
        </member>
        <member name="P:JetBrains.UI.TaskDialog.TaskDialogParams.UseCommandLinksNoIcon">
            <summary>
            Indicates that the buttons specified in the Buttons member should be displayed as command links
            (without a glyph) instead of push buttons. When using command links, all characters up to the
            first new line character in the ButtonText member (of the TaskDialogButton structure) will be
            treated as the command link’s main text, and the remainder will be treated as the command link’s
            note. This flag is ignored if the Buttons member has no entires.
            </summary>
        </member>
        <member name="P:JetBrains.UI.TaskDialog.TaskDialogParams.ExpandFooterArea">
            <summary>
            Indicates that the string specified by the ExpandedInformation member should be displayed at the
            bottom of the dialog’s footer area instead of immediately after the dialog’s content. This flag
            is ignored if the ExpandedInformation member is null.
            </summary>
        </member>
        <member name="P:JetBrains.UI.TaskDialog.TaskDialogParams.ExpandedByDefault">
            <summary>
            Indicates that the string specified by the ExpandedInformation member should be displayed
            when the dialog is initially displayed. This flag is ignored if the ExpandedInformation member
            is null.
            </summary>
        </member>
        <member name="P:JetBrains.UI.TaskDialog.TaskDialogParams.VerificationFlagChecked">
            <summary>
            Indicates that the verification checkbox in the dialog should be checked when the dialog is
            initially displayed. This flag is ignored if the VerificationText parameter is null.
            </summary>
        </member>
        <member name="P:JetBrains.UI.TaskDialog.TaskDialogParams.ShowProgressBar">
            <summary>
            Indicates that a Progress Bar should be displayed.
            </summary>
        </member>
        <member name="P:JetBrains.UI.TaskDialog.TaskDialogParams.ShowMarqueeProgressBar">
            <summary>
            Indicates that an Marquee Progress Bar should be displayed.
            </summary>
        </member>
        <member name="P:JetBrains.UI.TaskDialog.TaskDialogParams.CallbackTimer">
            <summary>
            Indicates that the TaskDialog’s callback should be called approximately every 200 milliseconds.
            </summary>
        </member>
        <member name="P:JetBrains.UI.TaskDialog.TaskDialogParams.PositionRelativeToWindow">
            <summary>
            Indicates that the TaskDialog should be positioned (centered) relative to the owner window
            passed when calling Show. If not set (or no owner window is passed), the TaskDialog is
            positioned (centered) relative to the monitor. Default: true
            </summary>
        </member>
        <member name="P:JetBrains.UI.TaskDialog.TaskDialogParams.RightToLeftLayout">
            <summary>
            Indicates that the TaskDialog should have right to left layout.
            </summary>
        </member>
        <member name="P:JetBrains.UI.TaskDialog.TaskDialogParams.NoDefaultRadioButton">
            <summary>
            Indicates that the TaskDialog should have no default radio button.
            </summary>
        </member>
        <member name="P:JetBrains.UI.TaskDialog.TaskDialogParams.CanBeMinimized">
            <summary>
            Indicates that the TaskDialog can be minimised. Works only if there if parent window is null. Will enable cancellation also.
            </summary>
        </member>
        <member name="P:JetBrains.UI.TaskDialog.TaskDialogParams.DefaultButton">
            <summary>
            Indicates the default button for the dialog. This may be any of the values specified
            in ButtonId members of one of the TaskDialogButton structures in the Buttons array,
            or one a DialogResult value that corresponds to a buttons specified in the CommonButtons Member.
            If this member is zero or its value does not correspond to any button ID in the dialog,
            then the first button in the dialog will be the default. 
            </summary>
        </member>
        <member name="P:JetBrains.UI.TaskDialog.TaskDialogParams.DefaultRadioButton">
            <summary>
            Indicates the default radio button for the dialog. This may be any of the values specified
            in ButtonId members of one of the TaskDialogButton structures in the RadioButtons array.
            If this member is zero or its value does not correspond to any radio button ID in the dialog,
            then the first button in RadioButtons will be the default.
            The property NoDefaultRadioButton can be set to have no default.
            </summary>
        </member>
        <member name="P:JetBrains.UI.TaskDialog.TaskDialogParams.VerificationText">
            <summary>
            The string to be used to label the verification checkbox. If this member is null, the
            verification checkbox is not displayed in the dialog box.
            </summary>
        </member>
        <member name="P:JetBrains.UI.TaskDialog.TaskDialogParams.ExpandedInformation">
            <summary>
            The string to be used for displaying additional information. The additional information is
            displayed either immediately below the content or below the footer text depending on whether
            the ExpandFooterArea member is true. If the EnameHyperlinks member is true, then this string
            may contain hyperlinks in the form: <A HREF="executablestring">Hyperlink Text</A>.
            WARNING: Enabling hyperlinks when using content from an unsafe source may cause security vulnerabilities.
            </summary>
        </member>
        <member name="P:JetBrains.UI.TaskDialog.TaskDialogParams.ExpandedControlText">
            <summary>
            The string to be used to label the button for collapsing the expanded information. This
            member is ignored when the ExpandedInformation member is null. If this member is null
            and the CollapsedControlText is specified, then the CollapsedControlText value will be
            used for this member as well.
            </summary>
        </member>
        <member name="P:JetBrains.UI.TaskDialog.TaskDialogParams.CollapsedControlText">
            <summary>
            The string to be used to label the button for expanding the expanded information. This
            member is ignored when the ExpandedInformation member is null.  If this member is null
            and the ExpandedControlText is specified, then the ExpandedControlText value will be
            used for this member as well.
            </summary>
        </member>
        <member name="P:JetBrains.UI.TaskDialog.TaskDialogParams.Footer">
            <summary>
            The string to be used in the footer area of the dialog box. If the EnableHyperlinks member
            is true, then this string may contain hyperlinks in the form: <A HREF="executablestring">
            Hyperlink Text</A>.
            WARNING: Enabling hyperlinks when using content from an unsafe source may cause security vulnerabilities.
            </summary>
        </member>
        <member name="P:JetBrains.UI.TaskDialog.TaskDialogParams.Width">
            <summary>
            Width of the Task Dialog's client area in DLU's. If 0, Task Dialog will calculate the ideal width.
            </summary>
        </member>
        <member name="P:JetBrains.UI.TaskDialog.TaskDialogParams.Callback">
            <summary>
            The callback that receives messages from the Task Dialog when various events occur.
            </summary>
        </member>
        <member name="T:JetBrains.UI.TaskDialog.TaskDialogProgressBarState">
            <summary>
            Progress bar state.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.TaskDialogProgressBarState.Normal">
            <summary>
            Normal.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.TaskDialogProgressBarState.Error">
            <summary>
            Error state.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TaskDialog.TaskDialogProgressBarState.Paused">
            <summary>
            Paused state.
            </summary>
        </member>
        <member name="T:JetBrains.UI.CommonControls.EditboxGlyph">
            <summary>
            Places a static glyph into an editbox control.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Tooltips.ITooltipProvider">
            <summary>
            Any HWND-based WinForms <see cref="T:System.Windows.Forms.Control"/> (or <see cref="T:System.Windows.Forms.NativeWindow"/>) that implements this interface will be queried for the tooltip info and, should the retval be non-<c>Null</c>, the tooltip will be displayed for this window.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Tooltips.ITooltipProvider.GetTooltip(JetBrains.DataFlow.Lifetime,System.Drawing.Point)">
            <summary>
            Called by tooltip manager, if the tooltip is to be displayed
            </summary>
            <param name="lifetime">Lifetime for the tooltip record you return. Bind all of the resources, like anchors and layouters, to this lifetime.</param>
            <param name="point">Point in control's coordinates</param>
            <returns><see cref="T:JetBrains.UI.Tooltips.ITooltipInfo"/>, or <c>Null</c> if no tooltip should be displayed.</returns>
        </member>
        <member name="M:JetBrains.UI.CommonControls.EditboxGlyph.#ctor(System.Windows.Forms.TextBox,System.Drawing.Image)">
            <summary>
            Places the glyph into an owning editbox.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.EditboxGlyph.GetTooltip(JetBrains.DataFlow.Lifetime,System.Drawing.Point)">
            <summary>
            Called by tooltip manager, if the tooltip is to be displayed
            </summary>
            <param name="lifetime"></param>
            <param name="point">Point in control's coordinates</param>
            <returns><see cref="T:JetBrains.UI.Tooltips.ITooltipInfo"/>, or <c>Null</c> if no tooltip should be displayed.</returns>
        </member>
        <member name="P:JetBrains.UI.CommonControls.EditboxGlyph.Glyph">
            <summary>
            Gets the image for the glyph.
            </summary>
        </member>
        <member name="P:JetBrains.UI.CommonControls.EditboxGlyph.TooltipProvider">
            <summary>
            Gets or sets the provider that defines the tooltip for the control.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.FormBase">
            <summary>
            The base class for dialogs that are owned by the DevEnv main window.
            </summary>
        </member>
        <member name="T:JetBrains.UI.CommonControls.Controls.FormOwnedByMainWindow">
            <summary>
            This class represents a form that should be owned by a main IDE window. It should be used as a base
            class for various dialogs etc
            </summary>
        </member>
        <member name="T:JetBrains.UI.GotoByName.GotoByNameController">
            <summary>
            Controls a <see cref="T:JetBrains.UI.GotoByName.GotoByNameModel"/>, implements the basic services to support async calculation.
            </summary>
        </member>
        <member name="F:JetBrains.UI.GotoByName.GotoByNameController.IsComplete">
            <summary>
            Gets or sets whether the data for the controller to produce the items from is complete.
            Affects the <see cref="F:JetBrains.UI.GotoByName.GotoByNameModel.IsReady"/> property that is <c>True</c> only when <see cref="F:JetBrains.UI.GotoByName.GotoByNameController.IsComplete"/> and no async action is running.
            You cannot set the <see cref="F:JetBrains.UI.GotoByName.GotoByNameModel.IsReady"/> directly, alter this property value instead.
            </summary>
        </member>
        <member name="F:JetBrains.UI.GotoByName.GotoByNameController.IsNotRunningAsyncAction">
            <summary>
            Reflects the internal async state.
            </summary>
        </member>
        <member name="M:JetBrains.UI.GotoByName.GotoByNameController.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.UI.GotoByName.GotoByNameModel,JetBrains.Application.IShellLocks)">
            <summary>
            Creates the controller and attaches to the model.
            The controller lifetime is also synchronized to the model lifetime. That is, when the model is disposed of, the controller is also disposed of (but not the other way).
            </summary>
        </member>
        <member name="F:JetBrains.UI.GotoByName.GotoByNameController.EtcItemKey">
            <summary>
            Key for the “More” item in the menu.
            </summary>
        </member>
        <member name="F:JetBrains.UI.GotoByName.GotoByNameController.FuncEtcItemExecute">
            <summary>
            If the action is available, then the <see cref="F:JetBrains.UI.GotoByName.GotoByNameController.EtcItemKey"/> that's added to the end of the list if there're too many items to show is enabled and can be executed. Also, a toolbar button is present to execute this same action.
            Executes on the primary thread.
            </summary>
        </member>
        <member name="F:JetBrains.UI.GotoByName.GotoByNameController.ItemsGottenDirty">
            <summary>
            Fires when the <see cref="F:JetBrains.UI.GotoByName.GotoByNameModel.Items"/> collection is considered dirty and should be recalculated by the implementing model.
            Listens for changes in all the affecting properties, groups them, and then fires this aggregate signal.
            </summary>
        </member>
        <member name="M:JetBrains.UI.GotoByName.GotoByNameController.CreateEtcItem">
            <summary>
            The “more…” item at the end of the truncated list.
            </summary>
        </member>
        <member name="M:JetBrains.UI.GotoByName.GotoByNameController.BeforeUpdateItems">
            <summary>
            When the items get dirty (<see cref="F:JetBrains.UI.GotoByName.GotoByNameController.ItemsGottenDirty"/>), this function is called on the UI thread right before the <see cref="M:JetBrains.UI.GotoByName.GotoByNameController.UpdateItems(System.String,System.Func{System.Collections.Generic.IEnumerable{JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem},JetBrains.UI.GotoByName.GotoByNameController.AddItemsBehavior,System.Boolean})"/> thing.
            The base implementation clears the collection.
            </summary>
        </member>
        <member name="M:JetBrains.UI.GotoByName.GotoByNameController.ExecuteItem(JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem)">
            <summary>
            Called when an item is to be executed.
            </summary>
        </member>
        <member name="M:JetBrains.UI.GotoByName.GotoByNameController.UpdateItems(System.String,System.Func{System.Collections.Generic.IEnumerable{JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem},JetBrains.UI.GotoByName.GotoByNameController.AddItemsBehavior,System.Boolean})">
            <summary>
            When the items get dirty (<see cref="F:JetBrains.UI.GotoByName.GotoByNameController.ItemsGottenDirty"/>), this function is called on the secondary thread.
            You can use the static methods of <see cref="T:JetBrains.Application.InterruptableActivityCookie"/> to check if the calculation results are not needed anymore and it should be canceled.
            </summary>
            <param name="filterString">The filtering string against which the items list should be produced.</param>
            <param name="itemsConsumer">A function you can use to add items to the output collection in a thread-safe manner. The function checks for the items limit and returns whether more items can be added.</param>
        </member>
        <member name="M:JetBrains.UI.GotoByName.GotoByNameController.Init_AsyncAction(JetBrains.DataFlow.Lifetime,JetBrains.Threading.IThreading)">
            <summary>
            Starts watching for the model's getting dirty.
            Contains the code for spawning the async recalculation of the items.
            </summary>
            <param name="lifetime"></param>
            <param name="invocator"></param>
        </member>
        <member name="M:JetBrains.UI.GotoByName.GotoByNameController.InternalExecuteItem(JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem,JetBrains.Application.IShellLocks)">
            <summary>
            Relays the <see cref="F:JetBrains.UI.GotoByName.GotoByNameModel.IncomingExecuteItem"/> to the <see cref="M:JetBrains.UI.GotoByName.GotoByNameController.ExecuteItem(JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem)"/> method, filtering out the <see cref="F:JetBrains.UI.GotoByName.GotoByNameController.EtcItemKey"/> execution.
            </summary>
        </member>
        <member name="P:JetBrains.UI.GotoByName.GotoByNameController.Model">
            <summary>
            The data part of the thing.
            </summary>
        </member>
        <member name="T:JetBrains.UI.GotoByName.GotoByNameController.AddItemsBehavior">
            <summary>
            Defines what the <c>FAddItems</c> parameter of the <see cref="M:JetBrains.UI.GotoByName.GotoByNameController.UpdateItems(System.String,System.Func{System.Collections.Generic.IEnumerable{JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem},JetBrains.UI.GotoByName.GotoByNameController.AddItemsBehavior,System.Boolean})"/> function should do.
            </summary>
        </member>
        <member name="F:JetBrains.UI.GotoByName.GotoByNameController.AddItemsBehavior.Append">
            <summary>
            Appends a new item or items to the existing items list.
            </summary>
        </member>
        <member name="F:JetBrains.UI.GotoByName.GotoByNameController.AddItemsBehavior.Replace">
            <summary>
            Replaces all the items in the list with the new ones.
            </summary>
        </member>
        <member name="F:JetBrains.UI.GotoByName.GotoByNameController.AsyncState.Idle">
            <summary>
            There are no async operations running. If needed, one could be started right away, and switch to <see cref="F:JetBrains.UI.GotoByName.GotoByNameController.AsyncState.Running"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.GotoByName.GotoByNameController.AsyncState.Running">
            <summary>
            An async operation is currently running. When it completes, we'd go <see cref="F:JetBrains.UI.GotoByName.GotoByNameController.AsyncState.Idle"/>.
            If the model gets dirty before the operation completes, we set the <see cref="F:JetBrains.UI.GotoByName.GotoByNameController.AsyncState.Cancelling"/> state (so that FIsCancelled starts returning <c>True</c> for the async operation), and wait for the state to become <see cref="F:JetBrains.UI.GotoByName.GotoByNameController.AsyncState.Idle"/> before running a new operation.
            </summary>
        </member>
        <member name="F:JetBrains.UI.GotoByName.GotoByNameController.AsyncState.Cancelling">
            <summary>
            The async operation were running when the model state was invalidated. This state holds until the async operation terminates, after which a new one is spawned automatically.
            </summary>
        </member>
        <member name="F:JetBrains.UI.GotoByName.GotoByNameController.AsyncState.Disposed">
            <summary>
            When the user dismisses the GotoByName UI, the pending async operation should be cancelled. This is the terminal state.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:JetBrains.UI.Controls.GotoByName.GotoByNameDataConstants.SearchTextData.Selection" -->
        <member name="T:JetBrains.UI.GotoByName.GotoByNameMenu">
            <summary>
            Implements the presentation of the Goto By Name functionality that works thru a <see cref="T:JetBrains.UI.PopupMenu.JetPopupMenu"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.GotoByName.GotoByNameMenu.MenuView">
            <summary>
            Gets the menu view, when the menu is running onscreen.
            Otherwise <c>Null</c>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.GotoByName.GotoByNameMenu.PopupWindow">
            <summary>
            Gets the menu popup window, when the menu is running onscreen.
            Otherwise <c>Null</c>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.GotoByName.GotoByNameMenu.#ctor(JetBrains.DataFlow.LifetimeDefinition,JetBrains.UI.GotoByName.GotoByNameModel,JetBrains.Threading.IThreading,JetBrains.Application.src.Settings.SettingsStore,JetBrains.UI.CommonControls.Fonts.FontsManager,JetBrains.UI.Tooltips.ITooltipManager,System.Windows.Forms.IWin32Window,JetBrains.UI.PopupWindowManager.PopupWindowManager,JetBrains.UI.Application.WindowsMessageHookManager,JetBrains.UI.PopupWindowManager.MainWindowPopupWindowContext,JetBrains.UI.Controls.GotoByName.GotoByNameDataConstants.SearchTextData,JetBrains.ActionManagement.IActionManager,JetBrains.ActionManagement.IShortcutManager)">
            <summary>
            Spawns the Goto By Name <see cref="T:JetBrains.UI.PopupMenu.JetPopupMenu"/>-based UI upon the given model.
            Disposes of the model when done.
            </summary>
            <param name="lifetimeDefinition"></param>
            <param name="model">Goto-by-name model that provides data for the UI.</param>
            <param name="invocator"></param>
            <param name="settings"></param>
            <param name="fontsman"></param>
            <param name="tooltipman"></param>
            <param name="ownerwin"></param>
            <param name="popupWindowManager"></param>
            <param name="windowsMessageHookManager"></param>
            <param name="mainWindowPopupWindowContext"></param>
            <param name="initialSearchTextData"></param>
        </member>
        <member name="M:JetBrains.UI.GotoByName.GotoByNameMenu.Init_EditboxColor(JetBrains.DataFlow.Lifetime,JetBrains.DataFlow.IProperty{System.Boolean},JetBrains.DataFlow.IProperty{System.Boolean},JetBrains.DataFlow.IProperty{System.Boolean},JetBrains.UI.PopupMenu.Impl.JetPopupMenuView)">
            <summary>
            Pending / Ready / Invalid color for the editbox text.
            </summary>
        </member>
        <member name="M:JetBrains.UI.GotoByName.GotoByNameMenu.Init_EditboxEnter(JetBrains.DataFlow.Lifetime,JetBrains.UI.GotoByName.GotoByNameModel,JetBrains.UI.PopupMenu.Impl.JetPopupMenuView)">
            <summary>
            Listen for the Enter key in the editbox.
            In case it's pressed when there's no selection (eg when typed a symbol and still calculating in background), wait async for the items to appear in the list, and then execute the first one.
            </summary>
        </member>
        <member name="M:JetBrains.UI.GotoByName.GotoByNameMenu.Init_ExtensionControl(JetBrains.DataFlow.Lifetime,JetBrains.UI.GotoByName.GotoByNameModel,JetBrains.UI.PopupMenu.Impl.JetPopupMenuView,JetBrains.Threading.IThreading)">
            <summary>
            Places the extension control on the menu, which is a checkbox with an optional checkmark and dynamic text.
            </summary>
        </member>
        <member name="M:JetBrains.UI.GotoByName.GotoByNameMenu.Init_Glyph(JetBrains.DataFlow.Lifetime,JetBrains.UI.GotoByName.GotoByNameModel,JetBrains.UI.PopupMenu.Impl.JetPopupMenuView)">
            <summary>
            Sets up the “busy” glyph.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView">
            <summary>
            Masters the Jet Popup Menu main body presentation.
            Is a topmost popup window that looks like an MSO-11 v-menu, performs low-level custom layered-window painting to achieve the alpha-channel transparency (non-rectangular form, shadows).
            Visually reflects the state backended by <see cref="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc"/>.
            Implements the control that is displayed by the <see cref="!:JetPopupMenu.Show()"/> method.
            Do not create directly, use <see cref="T:JetBrains.UI.PopupMenu.JetPopupMenu"/> frontend instead.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.myOptionEnableMovingArrows">
            <summary>
            Whether the scroll-arrows reflect the scrolling position and range, or not.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.myOptionHollowDisabledScrollArrows">
            <summary>
            Whether the disabled scroll arrows have an outline and no fill.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.OptionTransparencyAlwaysOff">
            <summary>
            Forces the Alpha rendering mode to be never used.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.OptionTransparencyAlwaysOn">
            <summary>
            Forces the Alpha rendering mode to be used always.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.myTransparentBackRenderParams">
            <summary>
            Use <see cref="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.TransparentBackRenderParams"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.Caption">
            <summary>
            The caption for the menu view.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.CaptureMouseInitially">
            <summary>
            Gets or sets whether the menu should capture mouse input on startup and trigger the action on mouseup, thus assuming the "mouse-down" part of the input already done.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.myAutoActivate">
            <summary>
            <see cref="T:JetBrains.CommonControls.IConstrainableControl"/> helper.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.myColors">
            <summary>
            The precalculated set of colors.
            Must not be <c>Null</c>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.myDocument">
            <summary>
            Codebehind that implements the menu logic.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.myDropShadowEnabled">
            <summary>
            Caches the drop-shadow-enabled state, as it must be maintained constant between calc-sizes, but should update from time to time.
            Synced to OS settings on each <see cref="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.OnLayout(System.Windows.Forms.LayoutEventArgs)"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.myMainpart">
            <summary>
            The mainpart subcontrol.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.myRects">
            <summary>
            The current precalculated layout.
            Created on the first top-down layouting pass.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.myShadows">
            <summary>
            Hands a shadow next to the window.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.myShape">
            <summary>
            The list of rectangles describing the current shape of the window — that is, the region most recently specified at the top-down layouting stage.
            Useful for checking whether we should update the shape or not.
            Cannot be <c>Null</c>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.myTitle">
            <summary>
            The title subcontrol.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.myTitleDisposition">
            <summary>
            Defines where the title should be placed, depending on the side of the anchoring rectangle at which the menu is displayed.
            Vertically, may only be <see cref="F:JetBrains.UI.Anchoring.NearWithin"/> or <see cref="F:JetBrains.UI.Anchoring.FarWithin"/>, which means that the header is either above or below the body.
            Horizontally, may only be one of the inside anchorings, <see cref="F:JetBrains.UI.Anchoring.NearWithin"/>, <see cref="F:JetBrains.UI.Anchoring.MiddleWithin"/>, or <see cref="F:JetBrains.UI.Anchoring.NearWithout"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.myTransparency">
            <summary>
            Defines whether the transparency special effects, like real shadow, are enabled, or not.
            Setting the initial value to <c>False</c> forcibly disables the effect.
            The field fallbacks to <c>False</c> automatically if there are too few display colors.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.myWantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.InitControls">
            <summary>
            Inits the UI controls, including the form itself
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.LayoutBottomUp(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Calculates the preferred size of the control so that all the context fit.
            Does not apply the size, just returns it.
            </summary>
            <param name="gc">The device context to measure the text against.</param>
            <param name="sizeLimit">The limit for the size, as it helps to reduce the number of calculations.</param>
            <returns>The preferred constrained size.</returns>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.LayoutTopDown(JetBrains.UI.IGraphicsContainer)">
            <summary>
            Performs the top-down layouting stage.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.Paint(System.Drawing.Graphics,JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ColorSet,System.Drawing.Region)">
            <summary>
            Does just the very painting into the given <see cref="T:System.Drawing.Graphics"/>.
            </summary>
            <param name="g">Device context.</param>
            <param name="colors">The color table currently in use by the menu.</param>
            <param name="rgnDirty">The dirty region within which the items should be painted. May be <c>Null</c>.</param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.UpdateShape">
            <summary>
            Updates the window non-rectangular shape, as defined by the <see cref="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.LayoutRects.Opaque"/> set.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.KeyPress"></see> event.
            </summary>
            
            <param name="args">A <see cref="T:System.Windows.Forms.KeyPressEventArgs"></see> that contains the event data. </param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.OnLocationChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.LocationChanged" /> event.
            </summary>
            
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            The non-Transparency mode painting function.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.OnVisibleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.VisibleChanged" /> event.
            </summary>
            
            <param name="e">The <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.TransparentBackRenderParams">
            <summary>
            Gets the rendering aspect for rendering the text over a transparent background in the menu. Not for menu items.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.Disposition">
            <summary>
            Gets the menu disposition, which determines whether the title is above or below, and so on.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.Document">
            <summary>
            Gets the object that implements the menu logic.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.Mainpart">
            <summary>
            Gets the Mainpart subcontrol.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.Title">
            <summary>
            Gets the Title subcontrol.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ShadowSize">
            <summary>
            Gets the shadow size (width/height of vertical/horizontal shadow, respectively).
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.Colors">
            <summary>
            Gets the set of colors involved in painting the control.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ShowWithoutActivation">
            <summary>
            Gets a value indicating whether the window will be activated when it is shown.
            </summary>
            
            <returns>
            True if the window will not be activated when it is shown; otherwise, false. The default is false.
            </returns>
            
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ColorSet">
            <summary>
            A set of precalculated colors that are based on the system ones and are used for painting different parts of the control.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ColorSet.Blend(System.Drawing.Color,System.Drawing.Color,System.Double,System.Drawing.Graphics)">
             <summary>
             Alpha-blends two colors.
             </summary>
             <param name="factor">A real number between <c>0</c> and <c>1</c>, specifying the first color alpha.</param>
             <returns></returns>
            <param name="a">The first color.</param>
            <param name="b">The second color.</param>
            <param name="g">A device context to adjust for the nearest solid color.</param>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.Dim">
            <summary>
            A static class with dimension constants.
            See the layout image for meanings.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.Dim.MainpartFarBorder">
            <summary>
            Height-only.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.Dim.MainpartNearBorder">
            <summary>
            Height-only.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ISubpart">
            <summary>
            An interface to be implemented by all the menu subparts.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ISubpart.OnKeyDownHighPriority(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Should process only high-priority keys.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ISubpart.OnKeyDownLowPriority(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Should process all the keys.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ISubpart.OnKeyPressLowPriority(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Should process all the keys.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.LayoutRects">
            <summary>
            Groups a set of rectangles that completely define the layout and drawing parts of the control.
            An instance is filled on the layouting stage, and used for painting and hittesting.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.LayoutRects.Opaque">
            <summary>
            A set of rectangles that produce the opaque part of the window, in client coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.LayoutRects.ClearRects(System.Object)">
            <summary>
            Clears all the <see cref="T:System.Drawing.Rectangle"/> fields in the specified container.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.LayoutRects.BorderLayoutRects.GetBackgroundColorArea">
            <summary>
            Gets the list of borders to be filled with <see cref="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ColorSet.Background"/> when painting.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.LayoutRects.BorderLayoutRects.GetBorderColorArea">
            <summary>
            Gets the list of borders to be filled with <see cref="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ColorSet.Border"/> when painting.
            </summary>
        </member>
        <member name="T:JetBrains.UI.GotoByName.GotoByNameModel">
            <summary>
            The core part of GotoByName.
            </summary>
        </member>
        <member name="F:JetBrains.UI.GotoByName.GotoByNameModel.CaptionText">
            <summary>
            Menu title text.
            </summary>
        </member>
        <member name="F:JetBrains.UI.GotoByName.GotoByNameModel.CheckBoxText">
            <summary>
            Gets the text on the checkbox (or just the right-hand label, if the <see cref="F:JetBrains.UI.GotoByName.GotoByNameModel.IsCheckBoxCheckerVisible"/> is false).
            </summary>
        </member>
        <member name="F:JetBrains.UI.GotoByName.GotoByNameModel.FilterText">
            <summary>
            The current filter, against which the model produces the list of filtered menu items, <see cref="F:JetBrains.UI.GotoByName.GotoByNameModel.Items"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.GotoByName.GotoByNameModel.IncomingExecuteItem">
            <summary>
            This signal is fired on the model by the consumer when a specific menu item should be executed by the model's controller.
            </summary>
        </member>
        <member name="F:JetBrains.UI.GotoByName.GotoByNameModel.IsCheckBoxChecked">
            <summary>
            Gets or sets whether the checkbox is currently checked.
            </summary>
        </member>
        <member name="F:JetBrains.UI.GotoByName.GotoByNameModel.IsCheckBoxCheckerVisible">
            <summary>
            Gets whether the checker on the checkbox should be visible, or not.
            If <c>False</c>, only checkbox text should be visible.
            </summary>
        </member>
        <member name="F:JetBrains.UI.GotoByName.GotoByNameModel.IsCheckBoxVisible">
            <summary>
            Gets whether the check-box (or just its text, if not <see cref="F:JetBrains.UI.GotoByName.GotoByNameModel.IsCheckBoxCheckerVisible"/>) is visible in the Goto-By-Name UI.
            </summary>
        </member>
        <member name="F:JetBrains.UI.GotoByName.GotoByNameModel.IsReady">
            <summary>
            Whether the model is ready, ie the <see cref="F:JetBrains.UI.GotoByName.GotoByNameModel.Items"/> list is complete against the <see cref="F:JetBrains.UI.GotoByName.GotoByNameModel.FilterText"/>.
            If <c>False</c>, then the <see cref="F:JetBrains.UI.GotoByName.GotoByNameModel.Items"/> list is still being calculated in the background.
            </summary>
        </member>
        <member name="F:JetBrains.UI.GotoByName.GotoByNameModel.Items">
            <summary>
            The current set of menu items that pass the <see cref="F:JetBrains.UI.GotoByName.GotoByNameModel.FilterText"/>.
            Must be modified on the UI thread only.
            </summary>
        </member>
        <member name="F:JetBrains.UI.GotoByName.GotoByNameModel.ToolbarButtons">
            <summary>
            Toolbar buttons for the menu's title.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Components.CustomListBox.IItemPainter`1">
            <summary>
            Interface for creating custom painters
            </summary>
        </member>
        <member name="M:JetBrains.UI.Components.CustomListBox.IItemPainter`1.IsHandled(`0)">
            <summary>
            Checks if a given Item can be handled by the painter
            </summary>
            <param name="item">The Item to check</param>
            <returns><c>true</c> if the Item can be handled, <c>false</c> it cannot.</returns>
        </member>
        <member name="M:JetBrains.UI.Components.CustomListBox.IItemPainter`1.GetSize(`0,JetBrains.UI.IGraphicsContainer)">
            <summary>
            Returns size of an item
            </summary>
        </member>
        <member name="M:JetBrains.UI.Components.CustomListBox.IItemPainter`1.Draw(`0,System.Drawing.Graphics,System.Drawing.Rectangle,JetBrains.UI.Components.CustomListBox.DrawMode)">
            <summary>
            Draws a given Item in specified rectangle
            </summary>
            <remarks>
            If the Item cannot be handled, the method should do nothing
            </remarks>
            <param name="item">The Item to draw</param>
            <param name="g">Graphics to draw in</param>
            <param name="rect">Bounding rectangle to use</param>
        </member>
        <member name="T:JetBrains.UI.Components.ImageListButton.ImageListButton">
            <summary>
            A simple button which draws one of four images from the image list depending on its
            state.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.ApproveItemEventArgs">
            <summary>
            <see cref="T:JetBrains.UI.PopupMenu.JetPopupMenu"/> event arguments that reference an item and request for approval of some action on that item.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.ItemEventArgs">
            <summary>
            <see cref="T:JetBrains.UI.PopupMenu.JetPopupMenu"/> event arguments that reference an item.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.ItemEventArgs.#ctor(JetBrains.UI.PopupMenu.JetPopupMenu,System.Object)">
            <summary>
            Inits the instance.
            </summary>
            <param name="menu">The owning menu, must not be <c>Null</c>.</param>
            <param name="key">Key to the item that is described by the event, <c>Null</c> means “no item” (eg no selection).</param>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.ItemEventArgs.Key">
            <summary>
            Gets the key to the item referenced by this event.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.ItemEventArgs.Menu">
            <summary>
            Gets the popup menu that has fired the event.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.ApproveItemEventArgs.Approved">
            <summary>
            Gets or sets whether the handler approves the event and allows the action meant by it to occur.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.DescribeItemEventArgs">
            <summary>
            Arguments for the <see cref="!:JetPopupMenu.DescribeItemEvent"/> event.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.DescribeItemEventArgs.Descriptor">
            <summary>
            Gets the desciprtor to be filled by the event sink.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.IMenuItemDescriptor">
            <summary>
            Describes how the menu should present an item.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.IMenuItemDescriptor.Icon">
            <summary>
            Gets the image (icon) for the item.
            <c>Null</c> if the item has no image.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.IMenuItemDescriptor.Mnemonic">
            <summary>
            If the menu is working in the <see cref="F:JetBrains.UI.PopupMenu.KeyboardAccelerationFlags.Mnemonics"/> mode, specifies the mnemonic to assign to this menu item.
            The letter holding the mnemonic will be underlined automatically.
            To specify a mnemonic, either:
            (1) set the <see cref="P:JetBrains.UI.PopupMenu.IMenuItemDescriptor.Mnemonic"/> to contain a plaintext copy of the item <see cref="P:JetBrains.UI.PopupMenu.IMenuItemDescriptor.Text"/>, with the mnemonic char prepended by an ampersand “&amp;”; normal ampersands should be doubled in the text,
            or,
            (2) set the <see cref="P:JetBrains.UI.PopupMenu.IMenuItemDescriptor.Mnemonic"/> to contain the single case-insensitive character of the mnemonic, whose position in the <see cref="P:JetBrains.UI.PopupMenu.IMenuItemDescriptor.Text"/> will be determined automatically; it's also legal to specify a mnemonic not present in the text.
            May be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.IMenuItemDescriptor.ShortcutText">
            <summary>
            Shortcut text to be displayed to the right of the <see cref="P:JetBrains.UI.PopupMenu.IMenuItemDescriptor.Text">main item text</see>.
            May be <c>Null</c> or an empty string for no shortcut.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.IMenuItemDescriptor.Style">
            <summary>
            Gets or sets the style of the item.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.IMenuItemDescriptor.Tag">
            <summary>
            A freehand object tag on the menu item descriptor.
            May be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.IMenuItemDescriptor.TailGlyph">
            <summary>
            Gets or sets an optional glyph that is displayed at the end of the menu item, after its shortcut text.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.IMenuItemDescriptor.Text">
            <summary>
            Gets the text that should present the item in the list.
            Must not be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.IMenuItemDescriptor.Tooltip">
            <summary>
            Get the tooltip that should be shown when the mouse pointer hovers above this item in the list.
            May be <c>Null</c> or an empty string for no tooltip.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.IMenuItemsFilter.IncomingDelete">
            <summary>
            This is an incoming signal, which means that it's fired by the filter owner rather than by the filter itself.
            Fired when an item should be deleted.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.IMenuItemsFilter.IncomingExecute">
            <summary>
            This is an incoming signal, which means that it's fired by the filter owner rather than by the filter itself.
            Fired when an item should be executed.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.IMenuItemsFilter.IncomingExpand">
            <summary>
            This is an incoming signal, which means that it's fired by the filter owner rather than by the filter itself.
            Fired when an item should be expanded.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.IMenuItemsFilter.InputItems">
            <summary>
            Input items for the filter, as coming from the previous filter in the stack.
            The filter must perform the filtering operation on them and apply the changes to the <see cref="P:JetBrains.UI.PopupMenu.Impl.IMenuItemsFilter.OutputItems"/> collection.
            The filter must not modify its <see cref="P:JetBrains.UI.PopupMenu.Impl.IMenuItemsFilter.InputItems"/>, it's changed externally.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.IMenuItemsFilter.IsBusy">
            <summary>
            Gets whether the filter is currently busy populating the <see cref="P:JetBrains.UI.PopupMenu.Impl.IMenuItemsFilter.OutputItems"/> collection.
            The "not ready" state for the async population of the items collection.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.IMenuItemsFilter.OutputItems">
            <summary>
            Output items of the filter. This collection is changed by the filter only, based on the changes to the <see cref="P:JetBrains.UI.PopupMenu.Impl.IMenuItemsFilter.InputItems"/> collection and filter's own operation.
            The <see cref="P:JetBrains.UI.PopupMenu.Impl.IMenuItemsFilter.OutputItems"/> result goes either to the input of the next filter, or to the final reault of the stack.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.MenuItemsFilter">
            <summary>
            The default implementation of a menu items filter.
            Although it can be inherited, most operations can be fulfilled by advising its events externally.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.MenuItemsFilter.#ctor(JetBrains.DataFlow.Lifetime,System.String)">
            <summary>
            Creates a filter and assigns it an ID.
            This ID will be used to produce the IDs of containing data points (lists and signals).
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.MenuItemsFilter.Id">
            <summary>
            Gets the identifier of the filter.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.MenuItemsFilter.IncomingDelete">
            <summary>
            This is an incoming signal, which means that it's fired by the filter owner rather than by the filter itself.
            Fired when an item should be deleted.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.MenuItemsFilter.IncomingExecute">
            <summary>
            This is an incoming signal, which means that it's fired by the filter owner rather than by the filter itself.
            Fired when an item should be executed.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.MenuItemsFilter.IncomingExpand">
            <summary>
            This is an incoming signal, which means that it's fired by the filter owner rather than by the filter itself.
            Fired when an item should be expanded.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.MenuItemsFilter.InputItems">
            <summary>
            Input items for the filter, as coming from the previous filter in the stack.
            The filter must perform the filtering operation on them and apply the changes to the <see cref="P:JetBrains.UI.PopupMenu.Impl.IMenuItemsFilter.OutputItems"/> collection.
            The filter must not modify its <see cref="P:JetBrains.UI.PopupMenu.Impl.IMenuItemsFilter.InputItems"/>, it's changed externally.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.MenuItemsFilter.IsBusy">
            <summary>
            Gets whether the filter is currently busy populating the <see cref="P:JetBrains.UI.PopupMenu.Impl.IMenuItemsFilter.OutputItems"/> collection.
            The "not ready" state for the async population of the items collection.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.MenuItemsFilter.OutputItems">
            <summary>
            Output items of the filter. This collection is changed by the filter only, based on the changes to the <see cref="P:JetBrains.UI.PopupMenu.Impl.IMenuItemsFilter.InputItems"/> collection and filter's own operation.
            The <see cref="P:JetBrains.UI.PopupMenu.Impl.IMenuItemsFilter.OutputItems"/> result goes either to the input of the next filter, or to the final reault of the stack.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.MenuItemsContainer">
            <summary>
            A composite container for the <see cref="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc"/> items.
            Aggregates several filters, organizes them into a stack, allows for incremental population or filtering of the items.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.MenuItemsContainer.myPushFilterLinks">
            <summary>
            Links between the filters' output-input collections, as well as the outer collections of the container itself.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView">
            <summary>
            Layouter and renderer interface that handles the presentation for the <see cref="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem"/>.
            Directed and invoked by <see cref="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView.GetSize(JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewPresentationFlags)">
            <summary>
            Gets the actual size of the item at the current moment, as obtained after the last <see cref="M:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView.LayoutTopDown(System.Drawing.Size[],JetBrains.UI.IGraphicsContainer)"/>, according to which the item is about to <see cref="M:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView.Paint(System.Drawing.Graphics,JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ColorSet,JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewPresentationFlags)"/>.
            Flags affect the upper margin size.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView.HitTest(System.Drawing.Point)">
            <summary>
            Performs a hit-test of the menu item.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView.LayoutBottomUp(JetBrains.UI.IGraphicsContainer)">
            <summary>
            First (bottom-up) part of the layout: the preferred sizes are being collected.
            Calculates the per-column preferred size of the menu item.
            Should be called before <see cref="M:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView.LayoutTopDown(System.Drawing.Size[],JetBrains.UI.IGraphicsContainer)"/> on any change.
            </summary>
            <param name="gc">A device context to measure the text against.</param>
            <returns>Returns an array of preferred sizes for each of the cells defined.</returns>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView.LayoutTopDown(System.Drawing.Size[],JetBrains.UI.IGraphicsContainer)">
            <summary>
            Performs the top-down part of the layout, when the item receives some size it should layout itself into.
            Should be called after <see cref="M:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView.LayoutBottomUp(JetBrains.UI.IGraphicsContainer)"/>.
            </summary>
            <param name="cells">The available size for layouting each of the cells into.</param>
            <param name="gc">A device context to measure the text against.</param>
            <returns>The size the item succeeded to layout into. Typically, should be equal in width to the sum of all the cell widths, and in height to the maximum height encountered.</returns>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView.Paint(System.Drawing.Graphics,JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ColorSet,JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewPresentationFlags)">
            <summary>
            Paints the item according to the current layout.
            <see cref="M:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView.LayoutTopDown(System.Drawing.Size[],JetBrains.UI.IGraphicsContainer)"/> must be called before painting to achieve a meaningful result.
            The painting is performed within the <see cref="T:System.Drawing.Size"/>, at the location <see cref="P:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView.Location"/>.
            Either includes or not the upper margin that constitutes the spacing between the items and makes the item asymmetric.
            The first item in non-scrollable menu and the standalone item presentation should not have the upper margin.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView.Item">
            <summary>
            Gets the item this presentation handler is attached to.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView.Location">
            <summary>
            Gets or sets the location.
            Must be set before calling the <see cref="M:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView.Paint(System.Drawing.Graphics,JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ColorSet,JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewPresentationFlags)"/> method.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuColumnId">
            <summary>
            Column IDs for the menu item columns.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuColumnId.Icon">
            <summary>
            A column that holds the item icon.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuColumnId.Label">
            <summary>
            A column that renders the item's text label and shortcut key.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuColumnId.MAX">
            <summary>
            The total number of columns defined.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc">
            <summary>
            Implements the <see cref="T:JetBrains.UI.PopupMenu.JetPopupMenu"/> overall runtime logic.
            Presentation is handled by <see cref="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.Application.src.Settings.SettingsStore)">
            <summary>
            Initializes the instance.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.ArrowKeysWrapAroundEnds">
            <summary>
            Whether selection should wrap around ends of the items list in the menu.
            <c>True</c> by default.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.AutoselectFirstItem">
            <summary>
            Whether to select the first menu item when items appear in the menu. <c>True</c> is the default behavior.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.BeforeExecuteAction">
            <summary>
            Fires before an action is executed on a menu item or a toolbar button.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.CurrentItems">
            <summary>
            The list of items currently displayed in the menu, as produced by the filters.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.ItemChanged">
            <summary>
            An item has changed.
            This event is fired for the changes in the item state (eg selection). Note: not valid if the whole collection changes.
            You can fire it externally if you change the item presentation (but not the size).
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.ItemsContainer">
            <summary>
            Stores, filters down and providers the menu items for display in this menu.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.KeyboardAcceleration">
            <summary>
            Gets or sets the way keyboard acceleration works for the list.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.LastSelectedItem">
            <summary>
            Gets the most recent non-<c>Null</c> <see cref="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.SelectedItem">selected item wrapper object</see>.
            <c>Null</c> is a legitimate value meaning there weren't ever any selection, or the MRU selected item has been removed from the items list.
            If not <c>Null</c>, must belong to the <see cref="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.CurrentItems"/> collection.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.Mnemonics">
            <summary>
            Handles the mnemonic assignment.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.QuickSearch">
            <summary>
            Manages the incremental QuickSearch process.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.SelectedIndex">
            <summary>
            Gets or sets the index of the currently selected item wihtin the <see cref="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.CurrentItems"/> list.
            The return value is guaranteed to be either a valid items array index, or the special <c>-1</c> value in case there is no selection.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.SelectedItem">
            <summary>
            Gets the selected item wrapper object.
            <c>Null</c> is a legitimate value meaning there's no selection.
            If not <c>Null</c>, must belong to the <see cref="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.CurrentItems"/> collection.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.ToolbarButtons">
            <summary>
            Toolbar buttons for the menu's title.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.ApplyCurrentPassFilter(System.Collections.Generic.ICollection{JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem})">
            <summary>
            Applies a current-items-pass filter to the list of menu items, so that only those items are left on output that belong to the <see cref="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.CurrentItems"/> list.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.DeleteSelectedItem">
            <summary>
            Removes the selected item from the list, if such an operation is supported by the provider.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.DumpItemsToString">
            <summary>
            Dumps all the menu items.
            Calls <see cref="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.DumpItemsToXaml(System.Xml.XmlWriter)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.DumpItemsToXaml(System.Xml.XmlWriter)">
            <summary>
            Dumps all the menu items.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.ExecuteMnemonic(System.Char,System.Boolean@)">
            <summary>
            Tries to execute a mnemonic.
            If there's exactly one item registered for this mnemonic, executes the item.
            If there're no items, does nothing.
            If there're multiple conflicting items, selects them in turn, but does not execute.
            </summary>
            <param name="ch">The character to be tested, either a v-key or a char representation.</param>  // TODO: switch to using the accelerator tables
            <returns>Whether an item was executed for this mnemonic.</returns>
            <param name="bMnemonicWasAccepted">If we've refused to execute (returned <c>False</c>), tells whether it's due to the mnemonic not found (<c>False</c>) or duplicate mnemonic (<c>True</c>).</param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.ExecuteSelectedItem">
            <summary>
            Performs the action over the selected item, which should have enabled state for the action to succeed.
            Returns whether the execution was performed.
            If there is no selection or the item is disabled, just returns <c>False</c>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.ExpandSelectedItem">
            <summary>
            If the selected item has a sub-menu associated with it, opens that sub-menu and returns the success flag. Otherwise, returns <c>False</c>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.GetNextIndex(System.Int32,JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.NextItemDir,JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.EndBehavior,JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.AllowedItems)">
            <summary>
            Gets the next/prev item based on the current index.
            Note: the new index is not guaranteed to differ from the original or to fall into the <see cref="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.CurrentItems"/> valid indices (eg -1)!
            </summary>
            <param name="nOriginalIndex">Current index, may be <c>-1</c>. Won't fail on totally invalid numbers.</param>
            <returns>The next index, may be <c>-1</c> if <paramref name="endbehavior"/> is <see cref="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.EndBehavior.ReturnNothing"/> or there are no [suitable] items.</returns>
            <param name="direction">Whether to go towards the end or beginning.</param>
            <param name="endbehavior">Whether to wrap over the end of the items list.</param>
            <param name="alloweditems">Whether iteration is allowed over all the items, or enabled ones only.</param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.SelectNextItem(JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.NextItemDir)">
            <summary>
            Selects the next item in either direction.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.InitLogging(JetBrains.DataFlow.Lifetime)">
            <summary>
            Sinks events for logging.
            </summary>
            <param name="lifetime"></param>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.AllowedItems">
            <summary>
            Defines which items could be processed.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.AllowedItems.All">
            <summary>
            All the items are OK.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.AllowedItems.ItemsWithActionsOnly">
            <summary>
            Disabled items should be ignored. Returns items which can be executed or expanded (or both).
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.EndBehavior">
            <summary>
            When requesting the next item, defines the behavior at the end of the list, whether to wrap around or return a "no-selection" item.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.EndBehavior.Stop">
            <summary>
            Can't go “next” beyond the last item.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.EndBehavior.WrapAround">
            <summary>
            Goes to the item at the opposite end after the last item.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.EndBehavior.ReturnNothing">
            <summary>
            Goes to “no selection” after the last item.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.ItemIndexEventArgs">
            <summary>
            Event arguments that specify a menu item and its index in the current items collection for fast access in the view.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.ItemIndexEventArgs.Index">
            <summary>
            Gets the index of the item that has changed.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.ItemIndexEventArgs.Item">
            <summary>
            Gets the item that has changed.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.NextItemDir">
            <summary>
            When requesting the next item, defines the direction of the search.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem">
            <summary>
            Stores the item information and implements the basic behavior of the jet-popup-menu item.
            Is a logical part of <see cref="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc"/>, whose visual presentation is handled by <see cref="T:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView"/>-implementors, as directed by <see cref="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.myDisplayName">
            <summary>
            Text to be rendered in the list.
            Cannot be <c>Null</c>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.myIcon">
            <summary>
            The icon. Can be <c>Null</c>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.myKey">
            <summary>
            An external key to the item.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.myMnemonic">
            <summary>
            An uppercase character that is the item's mnemonic, or <c>Null</c>, if the item has no mnemonics assigned.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.myShortcutText">
            <summary>
            Shortcut text, displayed to the right of the main item text.
            Cannot be <c>Null</c>.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.myStyle" -->
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.myTailGlyph">
            <summary>
            Holds the tail glyph of the item, which is the rightmost icon that goes after the shortcut text.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.myTooltipText">
            <summary>
            Tooltip text for this item, or an empty string if there is no tools item.
            Cannot be <c>Null</c>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.#ctor(System.Object,JetBrains.UI.PopupMenu.IMenuItemDescriptor)">
            <summary>
            Creates a new item.
            </summary>
            <param name="key">External key of the item this class would represent.</param>
            <param name="descriptor">Describes the item data to make the item presentation out of it.</param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.DumpToXaml(System.Xml.XmlWriter)">
            <summary>
            Dumps the object.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.Init(JetBrains.UI.PopupMenu.IMenuItemDescriptor)">
            <summary>
            Retrieves the item data via its provider, adjusts if needed, and stores a static copy.
            Calcs the sizes, but does not layout.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.StubText">
            <summary>
            Gets the default text that should be used when item text is not available.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.DisplayName">
            <summary>
            Gets the text to be rendered in the item.
            Cannot be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.Icon">
            <summary>
            Gets the icon. Can be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.IsEnabled">
            <summary>
            Gets whether this item is enabled.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.IsWithActions">
            <summary>
            Gets whether this item has available actions (to execute or expand).
            Effectively, <see cref="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.IsEnabled"/> or <see cref="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.IsExpandable"/> (which might be both true at the same time).
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.IsExpandable">
            <summary>
            Gets whether this item can be xpanded.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.IsGroupHeader">
            <summary>
            Gets whether this item is a group header item.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.IsSeparator">
            <summary>
            Gets whether this item is a separator item.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.Key">
            <summary>
            Gets the external item key of type <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.ManualMnemonic">
            <summary>
            Gets the manually-assigned mnemonic, if any, as was specified in the producing <see cref="T:JetBrains.UI.PopupMenu.IMenuItemDescriptor"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.Mnemonic">
            <summary>
            Gets or sets an uppercase character that is the item's mnemonic, or <c>Null</c>, if the item has no mnemonics assigned.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.ShortcutText">
            <summary>
            Gets the shortcut text to be displayed to the right of the <see cref="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.DisplayName"/>.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.Style" -->
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.TailGlyph">
            <summary>
            Holds the tail glyph of the item, which is the rightmost icon that goes after the shortcut text.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.TooltipText">
            <summary>
            Gets the tooltip text for this item, or an empty string if there is no tools item.
            Cannot be <c>Null</c>.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView">
            <summary>
            A base class for the popup menu item presentations in their default rendering ("as in menu").
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.myItem">
            <summary>
            Menu item we're rendering.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.mySharedRenderParams">
            <summary>
            Gets the rendering parameters to be used while rendering the items text.
            Non thread-safe.
            You CAN and MUST set up all of the color parameters over this instance each time before the call.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.myLocation">
            <summary>
            <see cref="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.Location"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.PaintWithUpperMargin(System.Drawing.Graphics,JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ColorSet,JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewPresentationFlags)">
            <summary>
            Painting implementation. Always includes the upper margin. Works in menu-item-local coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.GetSize(JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewPresentationFlags)">
            <summary>
            Gets the actual size of the item at the current moment, as obtained after the last <see cref="M:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView.LayoutTopDown(System.Drawing.Size[],JetBrains.UI.IGraphicsContainer)"/>, according to which the item is about to <see cref="M:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView.Paint(System.Drawing.Graphics,JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ColorSet,JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewPresentationFlags)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.HitTest(System.Drawing.Point)">
            <summary>
            Performs a vertical hit-test (checks the y-coordinate only).
            </summary>
            <returns>Zero if hit, less than zero if the point is located above the item, and more than zero if below.</returns>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.LayoutBottomUp(JetBrains.UI.IGraphicsContainer)">
            <summary>
            First (bottom-up) part of the layout: the preferred sizes are being collected.
            Calculates the per-column preferred size of the menu item.
            Should be called before <see cref="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.LayoutTopDown(System.Drawing.Size[],JetBrains.UI.IGraphicsContainer)"/> on any change.
            </summary>
            <param name="gc">A device context to measure the text against.</param>
            <returns>Returns an array of preferred sizes for each of the cells defined.</returns>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.LayoutTopDown(System.Drawing.Size[],JetBrains.UI.IGraphicsContainer)">
            <summary>
            Performs the top-down part of the layout, when the item receives some size it should layout itself into.
            Should be called after <see cref="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.LayoutBottomUp(JetBrains.UI.IGraphicsContainer)"/>.
            </summary>
            <param name="cells">The available size for layouting each of the cells into.</param>
            <param name="gc">A device context to measure the text against.</param>
            <returns>The size the item succeeded to layout into. Typically, should be equal in width to the sum of all the cell widths, and in height to the maximum height encountered.</returns>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.Paint(System.Drawing.Graphics,JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ColorSet,JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewPresentationFlags)">
            <summary>
            Paints the item according to the current layout.
            <see cref="M:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView.LayoutTopDown(System.Drawing.Size[],JetBrains.UI.IGraphicsContainer)"/> must be called before painting to achieve a meaningful result.
            The painting is performed within the <see cref="M:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView.GetSize(JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewPresentationFlags)"/>, at the location <see cref="P:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView.Location"/>.
            Either includes or not the upper margin that constitutes the spacing between the items and makes the item asymmetric.
            The first item in non-scrollable menu and the standalone item presentation should not have the upper margin.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.Item">
            <summary>
            Gets the item this presentation handler is attached to.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.Location">
            <summary>
            Gets or sets the location.
            Must be set before calling the <see cref="M:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView.Paint(System.Drawing.Graphics,JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ColorSet,JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewPresentationFlags)"/> method.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.Dim">
            <summary>
            A static class with dimension constants.
            See the layout image for meanings.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.Dim.GroupHeaderGap">
            <summary>
            Width of the gap between the icon column and its bulk fill.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.Dim.LabelMinDesiredSize">
            <summary>
            The minimum size under which it's not desirable to shrink the label.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.Dim.Margin" -->
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.Dim.Separator">
            <summary>
            Heigh of the separator.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.Dim.DisplayNameToShortcutTextGap">
            <summary>
            Minimal gap between the menu item text and its mnemonic on the right.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.Dim.TailGlyphSeparatorWidth">
            <summary>
            Width of the tail glyph separator (for an execute-or-expand item).
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.Dim.TailGlyphMargin">
            <summary>
            Margin around the tail glyph (separates it from selection rect on the right and separator on the left).
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewHitTestResult">
            <summary>
            Menu item view hit test result.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewHitTestResult.Above">
            <summary>
            The y-coordinate is above the item. The x-coordinate is not checked.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewHitTestResult.Below">
            <summary>
            The y-coordinate is below the item. The x-coordinate is not checked.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewHitTestResult.Bulk">
            <summary>
            The bulk of the menu item.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewHitTestResult.ActiveTailGlyph">
            <summary>
            The tail glyph that can be clicked (eg expandable items).
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewPresentationFlags">
            <summary>
            Affects the presentation of menu item views.
            Does not affect layout and measure.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewPresentationFlags.None">
            <summary>
            Default.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewPresentationFlags.IsSelected">
            <summary>
            The item is currently in the selected state.
            Does not affect item size or layout.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewPresentationFlags.ExcludeUpperMargin">
            <summary>
            The item does not have the upper margin (spacer between the items).
            Required for first items in non-scrollable views and standalone presentations.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewPresentationFlags.IsExpanded">
            <summary>
            The item has been exanded, and a popup menu has been opened under it. If the item is expand-or-execute, its tail glyph area should be displayed highlighted.
            Does not affect item size or layout.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView">
            <summary>
            Implements the Mainpart sub-control of the <see cref="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.ScrollTimerIntervalWithMouse">
            <summary>
            The scroll timer interval in case a mouse button (left or right) is down.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.ScrollTimerIntervalWithoutMouse">
            <summary>
            The scroll timer interval in case neither left nor right mouse button is down.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.LastVisibleItem">
            <summary>
            Index of the last visible item in the scrolling view.
            <c>-1</c> means it has not been initialized yet.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.myBmpArrowDownDisabled">
            <summary>
            The pre-rendered lower-scroller arrow, disabled state.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.myBmpArrowDownEnabled">
            <summary>
            The pre-rendered lower-scroller arrow, enabled state.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.myBmpArrowUpDisabled">
            <summary>
            The pre-rendered upper-scroller arrow, disabled state.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.myBmpArrowUpEnabled">
            <summary>
            The pre-rendered upper-scroller arrow, enabled state.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.myColumnWidths">
            <summary>
            After performing the first layouting, stores the menu-item-column-widths.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.myDirtyItems">
            <summary>
            Collects the indices of dirty items that have to be repainted on the next paint iteration.
            The usual <see cref="M:JetBrains.Interop.WinApi.Win32Declarations.GetUpdateRgn(System.IntPtr,System.IntPtr,System.Boolean)"/> mechanisms do not take scrolling into account correctly.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.myDropShadowEnabled">
            <summary>
            Caches the drop-shadow-enabled state, as it must be maintained constant between calc-sizes, but should update from time to time.
            Synced to OS settings on each <see cref="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.OnLayout(System.Windows.Forms.LayoutEventArgs)"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.myItemToView">
            <summary>
            After the mapping between items and views is established by <see cref="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.InitDataFlow_ItemViews(JetBrains.DataFlow.Lifetime,JetBrains.UI.CommonControls.Fonts.FontsManager)"/>, contains the up-to-date mapping from document items to item views.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.myLastKeyDownWasMnemonic">
            <summary>
            Set by the <see cref="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.OnKeyDownLowPriority(System.Windows.Forms.KeyEventArgs)"/> depending on whether it has successfully processed the key-down message as a mnemonic, or not.
            If <c>False</c>, the <see cref="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.OnKeyPressLowPriority(System.Windows.Forms.KeyPressEventArgs)"/> should try looking up a mnemonic by char also, in addition to the key-down's v-key.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.myMenuClientHeight">
            <summary>
            Caches the <see cref="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.LayoutRects.MenuClient"/> value so that the scroll ranges could be adjusted when the menu client height changes.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.myMenuView">
            <summary>
            Codebehind that implements the menu logic.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.myMouseLocation">
            <summary>
            Filters out zero movements.
            Also, helps with telling the initial menu display from normal mouse movements.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.myMouseWheelScrollDelta">
            <summary>
            Caches the system metric.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.myMouseWheelScrollLines">
            <summary>
            Caches the system metric.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.myReadonlyCookie">
            <summary>
            A token that supports implementing the readonly <see cref="T:JetBrains.DataFlow.Property`1"/> items.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.myRects">
            <summary>
            The current precalculated layout.
            Created on the first top-down layouting pass.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.myScrollNeeded">
            <summary>
            Whether the content does not fit into the control's constrained size, and scrolling is needed to present it all.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.myScrollPos">
            <summary>
            If <see cref="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.myScrollNeeded"/>, represents the scrolling position — an index of the item at the top of the view.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.myScrollTimer">
            <summary>
            A timer that triggers scrolling by one item.
            Lazily-created.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.myWantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.IsKeyboardNavigating">
            <summary>
            Readonly. Set to <c>True</c> when the keyboard navigation is being performed.
            If the document's selected item is being changed due to a keyboard action, this property is <c>True</c> when the change actually occurs.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.IsMouseNavigating">
            <summary>
            Readonly. Set to <c>True</c> when the mouse navigation is being performed.
            If the document's selected item is being changed due to a mouse action, this property is <c>True</c> when the change actually occurs.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.ExpandedItem">
            <summary>
            Once an item is expaned to show its popup menu, remembers that item. A non-<c>Null</c> value here indicates we're in expanded state, which modifies behavior a bit (eg moving mouse out does not reset selection).
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.RenderItem(JetBrains.DataFlow.Lifetime,JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem)">
            <summary>
            Renders the current presentation of an item.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.IsValidItemLocation(System.Drawing.Point)">
            <summary>
            Checks whether such a location represents a visible item.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.EnsureVisible(System.Int32,JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.VisibleAt)">
            <summary>
            Adjusts the view scrolling so that the item with the given index were visible at the position specified.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.GetAutoscrolling(JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.NextItemDir@)">
            <summary>
            Gets whether the autoscrolling mode is on, and, if yes, what it direction is.
            </summary>
            <param name="direction">Autoscrolling direction, if the retval is <c>True</c>. Otherwise, undefined.</param>
            <returns>Whether autoscrolling is currently on.</returns>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.GetHitMenuItemIndex(System.Drawing.Point)">
            <summary>
            Looks up a menu item hit by the given point. <c>-1</c> means outside any items.
            </summary>
            <param name="pt">Point, in client coordinates.</param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.InitControls">
            <summary>
            Inits the UI controls, including the form itself
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.InitDataFlow_Document(JetBrains.DataFlow.Lifetime)">
            <summary>
            Sinks the document events.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.InitDataFlow_EnableKeyboardTooltips(JetBrains.DataFlow.Lifetime,JetBrains.UI.Tooltips.ITooltipManager,JetBrains.Application.src.Settings.SettingsStore)">
            <summary>
            All of the keyboard tooltip handling for this menu.
            Keyboard-tooltips: appear when items are selected with keyboard.
            NOTE: when not given ITooltipManager, does not enable keyboard tooltips.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.InitDataFlow_ItemViews(JetBrains.DataFlow.Lifetime,JetBrains.UI.CommonControls.Fonts.FontsManager)">
            <summary>
            Monitors the document items, maintains the item views.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.InitDataFlow_ExpandOnHover(JetBrains.DataFlow.Lifetime,JetBrains.Application.src.Settings.SettingsStore)">
            <summary>
            When mouse is hovered over exandable items, they'd exand even without clicking.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.InvalidateDirtyItems">
            <summary>
            Marks the regions occupied by those items considered dirty as invalid.
            Helps taking scrolling into account correctly.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.InvalidateItem(System.Int32)">
            <summary>
            Causes the specified item to be repainted on the next painting cycle.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.LayoutBottomUp(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Layouts the main part that includes the part borders, menu items, scrollers, quick-search editbox, etc.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.LayoutBottomUp_MenuItems(System.Int32[]@,System.Int32[]@,System.Drawing.Size@,JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Invokes the menu items' bottom-up layouting and collects the information about max-column-widths and total-menu-width.
            </summary>
            <param name="nColumnWidths">Maximum encountered widths for each of the columns.</param>
            <param name="nItemHeights">Height of each of the items.</param>
            <param name="sizeTotal">Total size of all the items (item height is max cells' height, item width is the sum of cell widths).</param>
            <param name="gc">A device context to measure the text against.</param>
            <param name="sizeLimit">The limit for the size, as it helps to reduce the number of calculations.</param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.LayoutTopDown_MenuItems(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            During the top-down layout session, when the menu area is already placed, layouts the menu items and scrolling arrows.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.LayoutTopDown_PlaceMenuItems(System.Boolean)">
            <summary>
            Sets the menu items' coordinates according to the scrolling position.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.OnScrollTimerTick(System.Object,System.EventArgs)">
            <summary>
            The scroll timer has ticked, perform the scrolling.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.Paint(System.Drawing.Graphics)">
            <summary>
            Does just the very painting into the given <see cref="T:System.Drawing.Graphics"/>.
            </summary>
            <param name="g">Device context.</param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.PrerenderBitmapsStatic">
            <summary>
            Prerenders some of the commonly used UI elements into bitmaps.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.PrerenderBitmapsStatic_ScrollArrows">
            <summary>
            Prerenders the bitmaps for scrolling arrows.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.ResetScrollRanges">
            <summary>
            Resets the scroll ranges and recalculates the current scrolling position so that the selected item were visible and the scrolling pos was not beyound the last reasonable position (ie no empty space beyond the end).
            Should be called after loading a new set of items or after the menu client height (<see cref="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.LayoutRects.MenuClient"/>) changes.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.ScrollByOneItem(JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.NextItemDir)">
            <summary>
            Scrolls the view by one item, if possible.
            In either case, one item is expected to appear in view after the scrolling, and zero or more items to disappear at the opposite edge. This is to the case of non-equally-sized items.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.ScrollMenu(System.Int32)">
            <summary>
            Scrolls the menu vertically by the amount given by the <paramref name="dy"/> value, in pixels.
            <paramref name="dy"/> being positive, the content slides down. Otherwise, it slides up.
            This method causes no repaint.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.SelectItemAtPoint(System.Drawing.Point)">
            <summary>
            Selects a menu item that is currently under the point specified.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.SetAutoscrolling" -->
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseWheel"></see> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            The non-Transparency mode painting function.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.OnVisibleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.VisibleChanged"></see> event.
            </summary>
            
            <param name="e">The <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.OnKeyDownHighPriority(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Should process only high-priority keys.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.OnKeyDownLowPriority(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Should process all the keys.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.OnKeyPressLowPriority(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Should process all the keys.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.Document">
            <summary>
            Gets the object that implements the menu logic.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.FirstVisibleItem">
            <summary>
            Gets the first visible item in the scrolling view.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.MenuView">
            <summary>
            Gets the parent menu view.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.ScrollNeeded">
            <summary>
            Gets whether scrolling is turned on in the menu (if the items do not fit into the constrained size).
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.Colors">
            <summary>
            Gets the set of colors involved in painting the control.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.Dim">
            <summary>
            A static class with dimension constants.
            See the layout image for meanings.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.Dim.ScrollArrow">
            <summary>
            Size of the scroller arrow inside the <see cref="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.Dim.Scroller">scroller area</see>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.Dim.ScrollArrowMargin">
            <summary>
            A width-only size that defines the minimum distance between a scroll arrow and the edge of its parent scroll area.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.Dim.Scroller">
            <summary>
            Height-only size of the scroller area.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.LayoutRects">
            <summary>
            Groups a set of rectangles that completely define the layout and drawing parts of the control.
            An instance is filled on the layouting stage, and used for painting and hittesting.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.LayoutRects.MenuLowerScrollArrow">
            <summary>
            Layouted in <see cref="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.LayoutTopDown_PlaceMenuItems(System.Boolean)"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.LayoutRects.MenuLowerScrollArrow2">
            <summary>
            Layouted in <see cref="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.LayoutTopDown_PlaceMenuItems(System.Boolean)"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.LayoutRects.MenuUpperScrollArrow">
            <summary>
            Layouted in <see cref="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.LayoutTopDown_PlaceMenuItems(System.Boolean)"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.LayoutRects.MenuUpperScrollArrow2">
            <summary>
            Layouted in <see cref="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.LayoutTopDown_PlaceMenuItems(System.Boolean)"/>.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.VisibleAt">
            <summary>
            Location argument for the <see cref="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.EnsureVisible(System.Int32,JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.VisibleAt)"/> function.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.VisibleAt.DontCare">
            <summary>
            The menu should be scrolled so that the item at the given index were visible, be it at the top, bottom or middle of the list.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.VisibleAt.Top">
            <summary>
            The menu should be scrolled so that the item at the given index were at the top of the visible area.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.VisibleAt.Bottom">
            <summary>
            The menu should be scrolled so that the item at the given index were at the bottom of the visible area.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuNormalItemView">
            <summary>
            Layouter and renderer for ordinary menu items.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuNormalItemView.RTailGlyphSeparatorHot">
            <summary>
            On an execute-or-expand item, a separator between bulk and tail glyph (when item is in the selected state).
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuNormalItemView.RTailGlyphSeparatorCold">
            <summary>
            On an execute-or-expand item, a separator between bulk and tail glyph (when item is not in the selected state).
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuNormalItemView.RTailGlyphSeparatedSelectionBody">
            <summary>
            On an execute-or-expand item, the part of selection body in the tail glyph area, after the separator between bulk and tail glyph. If such an item is expanded, should be highlighted.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuNormalItemView.myIsIconFit">
            <summary>
            Whether the icon fits into the specified size or not.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuNormalItemView.myCache_LayoutBottomUp_ResultCells">
            <summary>
            Caches the <see cref="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuNormalItemView.LayoutBottomUp(JetBrains.UI.IGraphicsContainer)"/> calculations.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuNormalItemView.myCache_LayoutTopDown_InputCells">
            <summary>
            Caches the <see cref="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuNormalItemView.LayoutTopDown(System.Drawing.Size[],JetBrains.UI.IGraphicsContainer)"/> input cells. If they don't differ, the rects will not be recalculated.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuNormalItemView.GetIconConstrainedSize">
            <summary>
            Gets the icon size, constrained by the min-icon-size.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuNormalItemView.HitTest(System.Drawing.Point)">
            <summary>
            Performs a vertical hit-test (checks the y-coordinate only).
            </summary>
            <returns>Zero if hit, less than zero if the point is located above the item, and more than zero if below.</returns>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuNormalItemView.LayoutBottomUp(JetBrains.UI.IGraphicsContainer)">
            <summary>
            First (bottom-up) part of the layout: the preferred sizes are being collected.
            Calculates the per-column preferred size of the menu item.
            Should be called before <see cref="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuNormalItemView.LayoutTopDown(System.Drawing.Size[],JetBrains.UI.IGraphicsContainer)"/> on any change.
            </summary>
            <param name="gc">A device context to measure the text against.</param>
            <returns>Returns an array of preferred sizes for each of the cells defined.</returns>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuNormalItemView.LayoutTopDown(System.Drawing.Size[],JetBrains.UI.IGraphicsContainer)">
            <summary>
            Performs the top-down part of the layout, when the item receives some size it should layout itself into.
            Should be called after <see cref="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuNormalItemView.LayoutBottomUp(JetBrains.UI.IGraphicsContainer)"/>.
            </summary>
            <param name="cells">The available size for layouting each of the cells into.</param>
            <param name="gc">A device context to measure the text against.</param>
            <returns>The size the item succeeded to layout into. Typically, should be equal in width to the sum of all the cell widths, and in height to the maximum height encountered.</returns>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuNormalItemView.PaintWithUpperMargin(System.Drawing.Graphics,JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ColorSet,JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewPresentationFlags)">
            <summary>
            Painting implementation. Always includes the upper margin. Works in menu-item-local coordinates.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuNormalItemView.IconCellPadding">
            <summary>
            Padding for the icon and to the icon-cell boundaries.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuNormalItemView.LabelCellPadding">
            <summary>
            Padding for the label and to the label-cell boundaries.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuNormalItemView.LabelCellPadding_TextPart" -->
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuNormalItemView.LabelCellPadding_AroundPartsToFullSell">
            <summary>
            Around the already-padded <see cref="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuNormalItemView.LabelCellPadding_TextPart"/> and tail glyph, the padding that makes up the selection border and cell margins (menu item margins) up to the whole size of the cell.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuSeparatorItemView">
            <summary>
            Layouter and renderer for separator menu items.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuSeparatorItemView.RNonGradientAboveSep">
            <summary>
            Non-gradient part above the separator line (the upper margin).
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuSeparatorItemView.RNonGradientLefty">
            <summary>
            Non-gradient part to the left of the separator line, to the right of the gradient part.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuSeparatorItemView.RSeparatorBody">
            <summary>
            The separator itself.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuSeparatorItemView.LayoutBottomUp(JetBrains.UI.IGraphicsContainer)">
            <summary>
            First (bottom-up) part of the layout: the preferred sizes are being collected.
            Calculates the per-column preferred size of the menu item.
            Should be called before <see cref="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuSeparatorItemView.LayoutTopDown(System.Drawing.Size[],JetBrains.UI.IGraphicsContainer)"/> on any change.
            </summary>
            <param name="gc">A device context to measure the text against.</param>
            <returns>Returns an array of preferred sizes for each of the cells defined.</returns>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuSeparatorItemView.LayoutTopDown(System.Drawing.Size[],JetBrains.UI.IGraphicsContainer)">
            <summary>
            Performs the top-down part of the layout, when the item receives some size it should layout itself into.
            Should be called after <see cref="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuSeparatorItemView.LayoutBottomUp(JetBrains.UI.IGraphicsContainer)"/>.
            </summary>
            <param name="cells">The available size for layouting each of the cells into.</param>
            <param name="gc">A device context to measure the text against.</param>
            <returns>The size the item succeeded to layout into. Typically, should be equal in width to the sum of all the cell widths, and in height to the maximum height encountered.</returns>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuSeparatorItemView.PaintWithUpperMargin(System.Drawing.Graphics,JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ColorSet,JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewPresentationFlags)">
            <summary>
            Paints the item according to the current layout.
            <see cref="M:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView.LayoutTopDown(System.Drawing.Size[],JetBrains.UI.IGraphicsContainer)"/> must be called before painting to achieve a meaningful result.
            The painting is performed within the <see cref="!:IJetPopupMenuItemView.Size"/>, and the coordinate system origin of <paramref name="g"/> must be adjusted so that it were in the top-left corner of the item place.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView">
            <summary>
            Implements the Title sub-control of the <see cref="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.myControlExtension">
            <summary>
            The extension control that's added to the title area.
            <c>Null</c> by default, which means there is no control.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.myEditboxQuickSearch">
            <summary>
            The quick-search string input editbox.
            Must not be <c>Null</c>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.myIconQuickSearch">
            <summary>
            An icon for the quick search editbox line.
            Must not be <c>Null</c>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.myMenuView">
            <summary>
            The parent menu view.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.myMouseLocation">
            <summary>
            Filters out zero movements.
            Also, helps with telling the initial menu display from normal mouse movements.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.myRects">
            <summary>
            The current precalculated layout.
            Created on the first top-down layouting pass.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.myStateQuickSearch">
            <summary>
            Whether, how and where the quick-search editbox should be displayed.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.myToolbar">
            <summary>
            The toolbar in the header.
            <c>Null</c> if there are no toolbar items.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.myWantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.UI.PopupMenu.Impl.JetPopupMenuView,JetBrains.UI.CommonControls.Fonts.FontsManager)">
            <summary>
            Init the instance, attach to the parent menu view.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.IsEditboxChangingColor">
            <summary>
            Specifies whether the QuickSearch editbox color reflects the ready-state and validness of the quick search.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.InitControls(JetBrains.DataFlow.Lifetime,JetBrains.UI.CommonControls.Fonts.FontsManager)">
            <summary>
            Inits the UI controls, including the form itself
            </summary>
            <param name="lifetime"></param>
            <param name="fontsman"></param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.Paint(System.Drawing.Graphics)">
            <summary>
            Does just the very painting into the given <see cref="T:System.Drawing.Graphics"/>.
            </summary>
            <param name="g">Device context.</param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.UpdateEditboxColor">
            <summary>
            Updates the quick-search editbox coloring to reflect the current state: pending, invalid, etc.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.UpdateQuickSearchState">
            <summary>
            Syncs the quick-search-related UI controls state.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            The non-Transparency mode painting function.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.OnKeyDownHighPriority(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Should process only high-priority keys.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.OnKeyDownLowPriority(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Should process all the keys.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.OnKeyPressLowPriority(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Should process all the keys.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.Document">
            <summary>
            Gets the object that implements the menu logic.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.ExtensionControl">
            <summary>
            Gets or sets the custom extension control that is added to the title.
            May be <c>Null</c>, which means there is no extension control.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.MenuView">
            <summary>
            Gets the parent menu view.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.QuickSearchEditbox">
            <summary>
            Gets the editbox that accepts the quick search string.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.Toolbar">
            <summary>
            Gets the toolbar part of the title view.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.Colors">
            <summary>
            Gets the set of colors involved in painting the control.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.Dim">
            <summary>
            A static class with dimension constants.
            See the layout image for meanings.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.Dim.CaptionPadding">
            <summary>
            Padding around the caption element of the title.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.Dim.EditboxTextPadding">
            <summary>
            Approximate padding of the editbox text, that includes the border and some additional padding inside it.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.Dim.InterlineGap">
            <summary>
            Gap between the title lines.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.Dim.ItemsGap">
            <summary>
            Gap between different items in the title.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.Dim.Margin">
            <summary>
            Margin around the title client content inside the borders.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.Dim.QuickSearchEditBoxMin">
            <summary>
            The minimum size of the QuickSearch editbox.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.Dim.QuickSearchIconPadding">
            <summary>
            The desired visual passing around the Quick Search icon.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.Dim.QuickSearchIconPaddingLeftInSecondLine">
            <summary>
            The part of the Quick Search icon leftside visual padding that falls within the second line rect.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.Dim.QuickSearchIconPaddingRightInSecondLine">
            <summary>
            The part of the Quick Search icon rightside visual padding that falls within the second line rect.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.LayoutRects">
            <summary>
            Groups a set of rectangles that completely define the layout and drawing parts of the control.
            An instance is filled on the layouting stage, and used for painting and hittesting.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.QuickSearchEditboxStates">
            <summary>
            Whether, how and where the quick-search editbox should be displayed.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.QuickSearchEditboxStates.Hidden">
            <summary>
            The editbox is hidden, no space is layouted for it.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.QuickSearchEditboxStates.ShownInTitle">
            <summary>
            The editbox is displayed right in the title bar.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView">
            <summary>
            The <see cref="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView"/>'s toolbar.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.myToolbarRenderParams">
            <summary>
            Use <see cref="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.ToolbarRenderParams"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.myMapKeysToItems">
            <summary>
            Maps keyboard shortcuts to the assigned items.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.myBounds">
            <summary>
            The bounds, in parent coordinates.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.SelectedIndex">
            <summary>
            Gets or sets the index of the selected toolbar button, or <c>-1</c> if none is selected.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.SelectedItem">
            <summary>
            Gets the selected item of the toolbar, or <c>Null</c> if none is available.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.ExecuteSelectedItem">
            <summary>
            Executes an action associated with the selected item.
            Safe to call even if there's no selection.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Processes the keyboard shortcuts associated with the toolbar.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles mouse movements.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.GetHitItemIndex(System.Drawing.Point)">
            <summary>
            Looks up a menu item hit by the given point. <c>-1</c> means outside any items.
            The point must be in owner coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.GetTooltip(JetBrains.DataFlow.Lifetime,System.Drawing.Point)">
            <summary>
            Called by tooltip manager, if the tooltip is to be displayed
            </summary>
            <param name="lifetime"></param>
            <param name="point">Point in control's coordinates</param>
            <returns><see cref="T:JetBrains.UI.Tooltips.ITooltipInfo"/>, or <c>Null</c> if no tooltip should be displayed.</returns>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.GetDesiredSize(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Performs the bottom-up layouting stage, when the control calculates its desired size using the given constraints.
            Should give generally the same results as <see cref="T:JetBrains.CommonControls.IConstrainableControl"/>, but could employ the <paramref name="gc"/> device context for the sake of optimization.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="limit">The maximum available space (that could affect the shape of the control, or strip down unnecessary calculations over the invisible items).
            May be a <see cref="T:System.Drawing.Size"/> with width and height equal to <see cref="F:System.Int32.MaxValue"/>, which means that the size is not limited.</param>
            <returns>The desired size, must be no larger than <paramref name="limit"/>.</returns>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.Paint(System.Drawing.Graphics)">
            <summary>
            Renders the context of the windowless control. The rendering bounds are given by the 
            </summary>
            <param name="g">The device context.</param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.SetBounds(JetBrains.UI.IGraphicsContainer,System.Drawing.Rectangle)">
            <summary>
            Performs the top-down layouting stage, when the control lais out its parts within the given bounds.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="bounds">The new bounds. From now on, this value should be returned from the <see cref="P:JetBrains.CommonControls.IWindowlessControl.Bounds"/> property.</param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.SetLayout(JetBrains.UI.LayoutResult)">
            <summary>
            Tells the control the details about the new layout applied to it by the controlling entity in conjunction with some <see cref="T:JetBrains.UI.IPopupLayouter"/>.
            Typically, the control need not apply the given size and location because that should be done by the controlling entity.
            The control may change its presentation in response to the layouting details, for example, whether it's attached to the top or the bottom of the anchoring rect.
            </summary>
            <param name="layout">The layouting details.</param>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.ToolbarRenderParams">
            <summary>
            Gets the toolbar rendering aspects.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.ItemViews">
            <summary>
            Gets the views for the toolbar items.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.Items">
            <summary>
            Gets the toolbar items.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.MenuView">
            <summary>
            Gets the menu that owns this toolbar.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.Bounds">
            <summary>
            Gets the toolbar bounds (in parent window client rect coords).
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.GottenDirty">
            <summary>
            The control has gotten dirty and should be repainted.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView">
            <summary>
            A toolbar item on the <see cref="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView"/>'s toolbar (<see cref="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView"/>).
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.myShortcutText">
            <summary>
            The shortcut, as a text string.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.myBounds">
            <summary>
            The item bounds, in parent coordinates (unlike other Rects, that are WC-local).
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.IsSelected">
            <summary>
            Gets whether this item is currently in the selected state.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.Execute">
            <summary>
            Executes the action of this menu button.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.HitTestHorizontal(System.Int32)">
            <summary>
            Hit-tests the item by the x-coordinate, which must be in item-local coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.InitShortcuts">
            <summary>
            Inits the shortcuts text, appends to the tooltip.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.GetTooltip(JetBrains.DataFlow.Lifetime,System.Drawing.Point)">
            <summary>
            Called by tooltip manager, if the tooltip is to be displayed
            </summary>
            <param name="lifetime"></param>
            <param name="point">Point in control's coordinates</param>
            <returns><see cref="T:JetBrains.UI.Tooltips.ITooltipInfo"/>, or <c>Null</c> if no tooltip should be displayed.</returns>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.GetDesiredSize(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Performs the bottom-up layouting stage, when the control calculates its desired size using the given constraints.
            Should give generally the same results as <see cref="T:JetBrains.CommonControls.IConstrainableControl"/>, but could employ the <paramref name="gc"/> device context for the sake of optimization.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="limit">The maximum available space (that could affect the shape of the control, or strip down unnecessary calculations over the invisible items).
            May be a <see cref="T:System.Drawing.Size"/> with width and height equal to <see cref="F:System.Int32.MaxValue"/>, which means that the size is not limited.</param>
            <returns>The desired size, must be no larger than <paramref name="limit"/>.</returns>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.Paint(System.Drawing.Graphics)">
            <summary>
            Renders the context of the windowless control. The rendering bounds are given by the 
            </summary>
            <param name="g">The device context.</param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.SetBounds(JetBrains.UI.IGraphicsContainer,System.Drawing.Rectangle)">
            <summary>
            Performs the top-down layouting stage, when the control lais out its parts within the given bounds.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="bounds">The new bounds. From now on, this value should be returned from the <see cref="P:JetBrains.CommonControls.IWindowlessControl.Bounds"/> property.</param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.SetLayout(JetBrains.UI.LayoutResult)">
            <summary>
            Tells the control the details about the new layout applied to it by the controlling entity in conjunction with some <see cref="T:JetBrains.UI.IPopupLayouter"/>.
            Typically, the control need not apply the given size and location because that should be done by the controlling entity.
            The control may change its presentation in response to the layouting details, for example, whether it's attached to the top or the bottom of the anchoring rect.
            </summary>
            <param name="layout">The layouting details.</param>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.ExternalInfo">
            <summary>
            The document of this view.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.Shortcut">
            <summary>
            Gets the shortcut assigned to the toolbar button.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.ShortcutText">
            <summary>
            Gets the <see cref="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.Shortcut"/> formatted as user-friendly text, or an empty string if the shortcut is not defined.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.Toolbar">
            <summary>
            Gets the toolbar that owns this item.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.TooltipText">
            <summary>
            Gets the tooltip text, as provided by the user, without appending any shortcuts. Must not be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.TooltipTextWithShortcut">
            <summary>
            Gets the tooltip text with the shortcut tip, which is the <see cref="T:System.Windows.Forms.ToolTip"/> with a user-friendly rep of <see cref="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.Shortcut"/> appended. Must not be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.Bounds">
            <summary>
            Gets the item bounds, in the same coordinate space, as the parent toolbar (probably, the parent window's client rect coords).
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.GottenDirty">
            <summary>
            The control has gotten dirty and should be repainted.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.Dim">
            <summary>
            Dimension constants.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuViewHierarchy">
            <summary>
            Manages nested popup menus.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuViewHierarchy.#ctor(JetBrains.DataFlow.LifetimeDefinition,JetBrains.UI.PopupMenu.Impl.JetPopupMenuView)">
            <summary>
            Creates the hierarchy.
            </summary>
            <param name="lifetimeDefinition">Lifetime of the hierarchy, and of the root menu of the hierarchy (<paramref name="menuviewRoot"/>). Terminated automatically when the root menu exits the hierarchy.</param>
            <param name="menuviewRoot">The root menu in the hierarchy.</param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuViewHierarchy.CloseAll">
            <summary>
            Close all of the menus in the hierarchy, i.e. when a menu item gets executed.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.MnemonicStore">
            <summary>
            Handles the mnemonic assignment and access.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.MnemonicStore.myMapMnemonicToItem">
            <summary>
            Item by mnemonic.
            No duplicate mnemonics are allowed. If a manually-assigned mnemonic conflicts with smth, it's refused.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.MnemonicStore.PreprocessMnemonic(System.Char)">
            <summary>
            The routine that adapts the mnemonic for case-insensitivity, and all.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.MnemonicStore.RemoveMnemonicMark(System.String)">
            <summary>
            Removes the mnemonic marks (a single ampersand) from the given text.
            Unescapes normal ampersands (from a double ampersand).
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.MnemonicStore.RemoveMnemonicMark(System.String,System.String@,System.Int32@,System.Int32@)">
            <summary>
            Removes the mnemonic marks (a single ampersand) from the given text.
            Unescapes normal ampersands (from a double ampersand).
            </summary>
            <param name="escaped">The source escaped string.</param>
            <param name="stripped">The unescaped string (single ampersands stripped, double ampersands unescaped into single).</param>
            <param name="nEscapedMnemonicIndex">Index of the mnemonic character in the <paramref name="escaped"/>, or <c>-1</c> if no mnemonics were found in the string. Note: it's the char itself rather than its ampersand.</param>
            <param name="nStrippedMnemonicIndex">Index of the mnemonic character in the <paramref name="stripped"/>, or <c>-1</c> if no mnemonics were found in the string.</param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.MnemonicStore.GetItemsByMnemonic(System.Char)">
            <summary>
            Case-insensitively looks up a set of items by their mnemonic. Won't return <c>Null</c>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.MnemonicStore.IsMnemonicUsed(System.Char)">
            <summary>
            Case-insensitively checks whether the given nmenonic is already used by one or more items in the menu.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.MnemonicStore.RegisterMnemonic(System.Char,JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem)">
            <summary>
            Registers a mnemonic for an item.
            A duplicate mnemonic is an error.
            </summary>
            <returns>The preprocessed mnemonic value as it gets into the map, eg, uppercased.</returns>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.MnemonicStore.RegisterMnemonicAndHighlight(System.Char,JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem,System.Int32)">
            <summary>
            Registers a mnemonic for an item.
            A duplicate mnemonic is an error.
            If the <paramref name="index"/> is not <c>-1</c>, the mnemonic is underlined in the menu item presentation.
            </summary>
            <returns>The preprocessed mnemonic value as it gets into the map, eg, uppercased.</returns>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.MnemonicStore.TryGetItemByMnemonic(System.Char)">
            <summary>
            Case-insensitively looks up an item by its mnemonic.
            Returns <c>Null</c> if not found.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.MnemonicStore.TryGetMnemonicByItem(JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem)">
            <summary>
            Returns an uppercase mnemonic for the item, if available, or <c>Null</c>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.MnemonicStore.TryUnregister(JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem)">
            <summary>
            Unregisters the item's mnemonic, if there is such. Returns the success flag.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.MnemonicStore.Watch(JetBrains.DataFlow.Lifetime,JetBrains.DataFlow.IListEvents{JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem})">
            <summary>
            Starts watching the collection of menu items for mnemonic assignment.
            This includes manual and auto mnemonics.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.MnemonicStore.AssignMnemonic_Auto(JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem)">
            <summary>
            Chooses and assigns the mnemonics automatically.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.MnemonicStore.AssignMnemonic_Manual(JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem)">
            <summary>
            Checks and places the manually-assigned mnemonics.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.MnemonicStore.AssignMnemonic_Manual_Free(JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem,System.String)">
            <summary>
            Places the non-index-bound mnemonics.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.MnemonicStore.AssignMnemonic_Manual_Positioned(JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem,System.String@)">
            <summary>
            Handles positionally-specified manual mnemonics (specified by duplicating the display-name with an ampersand).
            On fallback, the <param name="sManualMnemonic"/> is modified to contain just one proposed mnemonic char.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.SearchHost">
            <summary>
            Implements the incremental search functionality for the <see cref="T:JetBrains.UI.PopupMenu.JetPopupMenu"/> family of controls.
            Can be either consumed directly by the menu customizers to obtain the current search string, or used to produce a menu items filter to be included into the item filters stack in <see cref="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.ItemsContainer"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.SearchHost.InputString">
            <summary>
            Gets or sets the string, as entered in the UI.
            The changes to this property are withheld for the grace period and after that they apply to the <see cref="F:JetBrains.UI.PopupMenu.Impl.SearchHost.SearchString"/> and <see cref="F:JetBrains.UI.PopupMenu.Impl.SearchHost.SearchPredicate"/> properties. During that grace period, the <see cref="F:JetBrains.UI.PopupMenu.Impl.SearchHost.IsPending"/> is <c>True</c>, and <see cref="M:JetBrains.UI.PopupMenu.Impl.SearchHost.CommitPendingChanges"/> will cause the changes to be applied immediately.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.SearchHost.IsActive">
            <summary>
            Gets or sets whether the search is currently active.
            The setter fails silently if being set to <c>False</c> while <see cref="F:JetBrains.UI.PopupMenu.Impl.SearchHost.IsAlwaysActive"/> is <c>True</c>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.SearchHost.IsAlwaysActive">
            <summary>
            Gets or sets whether the search host cannot be deactivated. 
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.SearchHost.IsPending">
            <summary>
            Gets whether there are pending changes to the <see cref="F:JetBrains.UI.PopupMenu.Impl.SearchHost.InputString"/>
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.SearchHost.IsValid">
            <summary>
            Gets or sets whether the current <see cref="F:JetBrains.UI.PopupMenu.Impl.SearchHost.SearchString"/> is considered to be valid by the search-host consumer.
            If the search-host is used as a filter (<see cref="M:JetBrains.UI.PopupMenu.Impl.SearchHost.CreateFilter"/>), then this value reflects the number of items in the filter, meaning the search-string is valid iff there are items in the list after applying the filter.
            Otherwise, just the user-assigned value is stored.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.SearchHost.SearchPredicate">
            <summary>
            Gets the current filtering regex, based on the current <see cref="F:JetBrains.UI.PopupMenu.Impl.SearchHost.SearchString"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.SearchHost.SearchString">
            <summary>
            Gets the current filtering string. Any changes to the <see cref="F:JetBrains.UI.PopupMenu.Impl.SearchHost.InputString"/> get into this property as the grace period expires.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.SearchHost.IsMatch(JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem,System.Func{System.String,System.Boolean})">
            <summary>
            Checks whether the given <paramref name="item"/> matches the given <paramref name="predicate"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.SearchHost.MakeSearchPredicate(System.String)">
            <summary>
            Produces the matcher predicate out of a plaintext search string.
            Throws on errors.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.SearchHost.CommitPendingChanges">
            <summary>
            If the <see cref="F:JetBrains.UI.PopupMenu.Impl.SearchHost.SearchString"/> setter is working asynchronously and defers writes of the new value, causes the deferred write operation to occur immediately.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.SearchHost.CreateFilter">
            <summary>
            Creates a menu items filter that applies the search string to filter the items.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.Shadoof">
            <summary>
            Floats a shadow near to some other window.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.Shadoof.myColorsShadowCorner">
            <summary>
            Colors in the shadow corner.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.Shadoof.myColorsShadowLine">
            <summary>
            Colors in the linear shadow.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.Shadoof.myBmpShadowCornerLeftBottom">
            <summary>
            Shadow corner.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.Shadoof.myBmpShadowCornerRightBottom">
            <summary>
            Shadow corner.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.Shadoof.myBmpShadowCornerRightTop">
            <summary>
            Shadow corner.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.Shadoof.myBmpShadowHorizontal">
            <summary>
            One-pixel-long shadow segment.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.Shadoof.myBmpShadowVertical">
            <summary>
            One-pixel-long shadow segment.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.Shadoof.myLocation">
            <summary>
            <see cref="P:JetBrains.UI.PopupMenu.Impl.Shadoof.Location"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.Shadoof.myRects">
            <summary>
            The list of rectangles, in client coordinates, that form the thing that should be casting the shadow.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.Shadoof.UpdateRequested">
            <summary>
            Fires when the object gets dirty.
            The object does not update immediately, but instead collects the requests.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.Shadoof.UpdateRequired">
            <summary>
            Fires when the <see cref="F:JetBrains.UI.PopupMenu.Impl.Shadoof.UpdateRequested"/> signals get collected and are finally executed (basically, when we get off the stack frame).
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.Shadoof.Adjust(System.Drawing.Point,System.Collections.Generic.List{System.Drawing.Rectangle})">
            <summary>
            Sets the new location and new list of rectangles in a single call, thus only one recalculation and redisplay.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.Shadoof.AttachShadowHorizontal(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Attaches a vertical shadow, including the upper corner.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.Shadoof.AttachShadowVertical(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Attaches a vertical shadow, including the upper corner.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.Shadoof.CreateBitmaps">
            <summary>
            Lazy-creates the static bitmaps.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.Shadoof.FillShadowHorizontal(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Tiles the <see cref="F:JetBrains.UI.PopupMenu.Impl.Shadoof.myBmpShadowHorizontal"/> to draw a horizontal shadow. A tricky thing in GDI+.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.Shadoof.FillShadowVertical(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Tiles the <see cref="F:JetBrains.UI.PopupMenu.Impl.Shadoof.myBmpShadowVertical"/> to draw a vertical shadow. A tricky thing in GDI+.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.Shadoof.OptimizeRectangles(System.Collections.Generic.List{System.Drawing.Rectangle})">
            <summary>
            Decreases the number of rects by merging, sorts them vertically, etc.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.Shadoof.CheckCreateWindow">
            <summary>
            Creates the window when it's finally needed.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.Shadoof.SetLocation(System.Drawing.Point)">
            <summary>
            Sets the <see cref="F:JetBrains.UI.PopupMenu.Impl.Shadoof.myLocation"/>, tells whether modified, does not cause an update.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.Shadoof.SetRectangles(System.Collections.Generic.List{System.Drawing.Rectangle})">
            <summary>
            Sets the <see cref="F:JetBrains.UI.PopupMenu.Impl.Shadoof.myRects"/>, tells whether modified, does not cause an update.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.Shadoof.Update">
            <summary>
            Updates the visual presentation on the screen to respect the new coordinates.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.Shadoof.ShadowThickness">
            <summary>
            Gets the linear shadow thickness (height for horizontal, width for vertical).
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.Shadoof.Location">
            <summary>
            Gets or sets the screen location to which the <see cref="P:JetBrains.UI.PopupMenu.Impl.Shadoof.Rectangles"/> coordinates are relative.
            To set both <see cref="P:JetBrains.UI.PopupMenu.Impl.Shadoof.Location"/> and <see cref="P:JetBrains.UI.PopupMenu.Impl.Shadoof.Rectangles"/>, use <see cref="M:JetBrains.UI.PopupMenu.Impl.Shadoof.Adjust(System.Drawing.Point,System.Collections.Generic.List{System.Drawing.Rectangle})"/> to do it in a batch.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.Shadoof.Rectangles">
            <summary>
            Gets or sets the list of rectangles for which the shadow is displayed.
            The coordinates must be relative to the <see cref="P:JetBrains.UI.PopupMenu.Impl.Shadoof.Location"/>.
            To set both <see cref="P:JetBrains.UI.PopupMenu.Impl.Shadoof.Location"/> and <see cref="P:JetBrains.UI.PopupMenu.Impl.Shadoof.Rectangles"/>, use <see cref="M:JetBrains.UI.PopupMenu.Impl.Shadoof.Adjust(System.Drawing.Point,System.Collections.Generic.List{System.Drawing.Rectangle})"/> to do it in a batch.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.ItemExpandedEventArgs">
            <summary>
            Arguments for the event that notifies about a menu item expanding its submenu.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.ItemExpandedEventArgs.SubmenuLifetime">
            <summary>
            The lifetime of the submenu display. Will be terminated when the submenu closes.
            As you will get this event each time the submenu opens on the same parent menu, bind all per-submenu objects to this lifetime instead of the parent menu's lifetime.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.ItemExpandedEventArgs.Submenu">
            <summary>
            Gets the submenu that will be opened as a result of expanding the submitem.
            Populate it with items and sink its events for item presentation and actions, just like you would do with the parent menu.
            The menu will open after this event exits.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.IToolBarItemInfo">
            <summary>
            A descriptor for the popup menu toolbar item.
            This interface must be wholy implemented, no <see cref="T:System.NotImplementedException"/>s allowed.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.IToolBarItemInfo.Clicked">
            <summary>
            Gets the Clicked signal for this toolbar button.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.IToolBarItemInfo.IsChecked">
            <summary>
            Gets or sets whether the button is initially checked.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.IToolBarItemInfo.Presentation">
            <summary>
            Gets or sets the toolbar button presentation, usually consisting of just one icon.
            <c>Null</c> to hide the button.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.IToolBarItemInfo.Shortcut">
            <summary>
            Shortcut key for the toolbar button.
            Must be <see cref="F:System.Windows.Forms.Keys.None"/> if no shortcut is assigned to the button.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.IToolBarItemInfo.TooltipText">
            <summary>
            Gets or sets the tooltip text for the button.
            May be <c>Null</c>.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.JetPopupMenu">
            <summary>
            <para>Interface class for the Jet Popup Menu component.</para>
            <para>Create an instance, set up the properties and call for the <c>Show*()</c> method.</para>
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.JetPopupMenu.OptionTrace">
            <summary>
            Whether the verbose trace is enabled.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.JetPopupMenu.myCloseOnExecute">
            <summary>
            <see cref="P:JetBrains.UI.PopupMenu.JetPopupMenu.CloseOnExecute"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.JetPopupMenu.myMenuDocument">
            <summary>
            Menu model document, when menu is running.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.JetPopupMenu.myMenuView">
            <summary>
            Menu view (screen form), when menu is running.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.JetPopupMenu.myNoItemsBanner">
            <summary>
            <see cref="P:JetBrains.UI.PopupMenu.JetPopupMenu.NoItemsBanner"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.JetPopupMenu.myPopupWindow">
            <summary>
            The popup window object managing the menu position, at the time span the menu is visible on the screen.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.JetPopupMenu.myToolbarButtons">
            <summary>
            <see cref="P:JetBrains.UI.PopupMenu.JetPopupMenu.ToolbarButtons"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.JetPopupMenu.myCaption">
            <summary>
            <see cref="P:JetBrains.UI.PopupMenu.JetPopupMenu.Caption"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.JetPopupMenu.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.UI.CommonControls.Fonts.FontsManager,JetBrains.UI.Application.IIsApplicationActiveState,JetBrains.Application.src.Settings.SettingsStore,JetBrains.UI.Tooltips.ITooltipManager,JetBrains.Threading.IThreading,System.Windows.Forms.IWin32Window,JetBrains.UI.Application.WindowsMessageHookManager,JetBrains.UI.PopupWindowManager.PopupWindowManager)">
            <summary>
            <para>Creates the menu object and supplies it with environmental data.</para>
            <para>There are two main usage scenarios:</para>
            <para>• Add items to <see cref="P:JetBrains.UI.PopupMenu.JetPopupMenu.ItemKeys"/>, sink events like <see cref="F:JetBrains.UI.PopupMenu.JetPopupMenu.DescribeItem"/> or <see cref="F:JetBrains.UI.PopupMenu.JetPopupMenu.ItemClicked"/>, and call <see cref="M:JetBrains.UI.PopupMenu.JetPopupMenu.Show(JetBrains.UI.PopupMenu.JetPopupMenu.ShowWhen,JetBrains.DataFlow.LifetimeDefinition)"/> or <see cref="M:JetBrains.UI.PopupMenu.JetPopupMenu.ShowModal(JetBrains.UI.PopupMenu.JetPopupMenu.ShowWhen,JetBrains.DataFlow.LifetimeDefinition)"/>, or their overloads and variations.</para>
            <para>• If the items are simple, call <see cref="M:JetBrains.UI.PopupMenu.JetPopupMenu.SetItems(JetBrains.UI.PopupMenu.SimpleMenuItem[])"/> and then <see cref="M:JetBrains.UI.PopupMenu.JetPopupMenu.Show(JetBrains.UI.PopupMenu.JetPopupMenu.ShowWhen,JetBrains.DataFlow.LifetimeDefinition)"/> or <see cref="M:JetBrains.UI.PopupMenu.JetPopupMenu.ShowModal(JetBrains.UI.PopupMenu.JetPopupMenu.ShowWhen,JetBrains.DataFlow.LifetimeDefinition)"/>, or their overloads and variations.</para>
            </summary>
            <param name="lifetime">Required. The limiting lifetime of the menu. As you're passing in some components, your access to these components is limited by some lifetime (usually, the lifetime of the entity into which they were injected). To ensure safe access to these components, this lifetime must be passed to the menu.</param>
            <param name="fontsman">Required. Fonts manager. In shell-less scenarios, could be created on the spot.</param>
            <param name="isApplicationActiveState">Required. Governs whether popups are allowed to show.</param>
            <param name="settingsStore">Optional. Some functionality might be impaired if omitted.</param>
            <param name="tooltipman">Optional. Some functionality might be impaired if omitted.</param>
            <param name="invocator">Optional. Some functionality might be impaired if omitted.</param>
            <param name="ownerwin">Optional. Will not have a parent window if omitted.</param>
            <param name="windowsMessageHookManager">Optional. Required for proper functioning of multilevel popup menus.</param>
            <param name="popupWindowManager">Optional. Required for proper interaction with other popup windows in the infrastructure.</param>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.JetPopupMenu.DescribeItem">
            <summary>
            Fires when the item needs to be described in order to be presented in the menu.
            The <see cref="P:JetBrains.DataFlow.InOutEventArgs`2.In"/> is the menu item key (not Null).
            The <see cref="P:JetBrains.DataFlow.InOutEventArgs`2.Out"/> is an empty menu item descriptor that should be filled by the event sink.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.JetPopupMenu.ItemClicked">
            <summary>
            Fires when an item is clicked in the menu.
            Gives out the item key.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.JetPopupMenu.ItemDeleted">
            <summary>
            Fires when the menu wants to remove an item.
            The sink must approve the event for the item to disappear from the menu.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.JetPopupMenu.KeyboardAcceleration">
            <summary>
            Gets or sets the way keyboard acceleration works for the list.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.JetPopupMenu.SelectedItemKey">
            <summary>
            Gets the key of the item currently selected in the menu.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.JetPopupMenu.myCaptureMouseInitially">
            <summary>
            Means the list should capture mouse input on startup and trigger the action on mouseup, thus assuming the "mouse-down" part of the input already done.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.JetPopupMenu.myLifetimeLimitOnly">
            <summary>
            The outer lifetime imposed on the menu.
            DO NOT schedulle anything on this lifetime, as the menu is short-lived. It's just limiting the lifetime of the Show method.
            The only allowed action is defining a nested lifetime just for showing the menu, when it's guaranteed to be terminated.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.JetPopupMenu.CaptureIfMouseDown">
            <summary>
            A helper for setting the <see cref="P:JetBrains.UI.PopupMenu.JetPopupMenu.CaptureMouseInitially"/> property automatically, based on whether the mouse button is currently down or not.
            Has no visible effect if the menu is already running.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.JetPopupMenu.SetItems(JetBrains.UI.PopupMenu.SimpleMenuItem[])">
            <summary>
            Produces a simple static popup menu with self-contained items, each of which has its own <see cref="F:JetBrains.UI.PopupMenu.SimpleMenuItem.Executed"/> event.
            Can be called only once.
            Cannot be used together with setting <see cref="P:JetBrains.UI.PopupMenu.JetPopupMenu.ItemKeys"/> explicitly.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.JetPopupMenu.Show(JetBrains.DataFlow.LifetimeDefinition)">
            <summary>
            <para>Displays the menu onscreen. Cannot be called twice.</para>
            <para>Calls <see cref="M:JetBrains.UI.PopupMenu.JetPopupMenu.Show(JetBrains.UI.PopupMenu.JetPopupMenu.ShowWhen,JetBrains.DataFlow.LifetimeDefinition)"/> with the <see cref="F:JetBrains.UI.PopupMenu.JetPopupMenu.ShowWhen.NoItemsBannerIfNoItems"/> flag.</para>
            </summary>
            <param name="lifetimeDefitionOptional">Optional. As this method shows menu asynchronously, gives you an opportunity to bind something to the menu lifetime if you pass a definition in here. It will be terminated when the menu closes.</param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.JetPopupMenu.Show(JetBrains.UI.PopupMenu.JetPopupMenu.ShowWhen,JetBrains.DataFlow.LifetimeDefinition)">
            <summary>
            Shows the menu onscreen. Cannot be called twice.
            </summary>
            <param name="when">Specifies the flags that could cancel showing the menu and replace it with something else.</param>
            <param name="lifetimeDefitionOptional">Optional. As this method shows menu asynchronously, gives you an opportunity to bind something to the menu lifetime if you pass a definition in here. It will be terminated when the menu closes.</param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.JetPopupMenu.ShowCore(JetBrains.UI.PopupMenu.JetPopupMenu.ShowWhen,JetBrains.DataFlow.LifetimeDefinition,JetBrains.UI.PopupMenu.Impl.JetPopupMenuViewHierarchy)">
            <summary>
            Shows the menu onscreen. Cannot be called twice.
            </summary>
            <param name="when">Specifies the flags that could cancel showing the menu and replace it with something else.</param>
            <param name="lifetimeDefitionOptional">Optional. As this method shows menu asynchronously, gives you an opportunity to bind something to the menu lifetime if you pass a definition in here. It will be terminated when the menu closes.</param>
            <param name="hierarchy">For a root menu, <c>Null</c>. For a non-root expanded popup submenu, the hierarchy its parent belongs to.</param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.JetPopupMenu.ShowIfMultiple(JetBrains.DataFlow.LifetimeDefinition)">
            <summary>
            <para>Displays the menu onscreen. Cannot be called twice.</para>
            <para>Calls <see cref="M:JetBrains.UI.PopupMenu.JetPopupMenu.Show(JetBrains.UI.PopupMenu.JetPopupMenu.ShowWhen,JetBrains.DataFlow.LifetimeDefinition)"/> with the <see cref="F:JetBrains.UI.PopupMenu.JetPopupMenu.ShowWhen.NoItemsBannerIfNoItems"/> and <see cref="F:JetBrains.UI.PopupMenu.JetPopupMenu.ShowWhen.AutoExecuteIfSingleItem"/> flags.</para>
            </summary>
            <param name="lifetimeDefitionOptional">Optional. As this method shows menu asynchronously, gives you an opportunity to bind something to the menu lifetime if you pass a definition in here. It will be terminated when the menu closes.</param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.JetPopupMenu.ShowModal(JetBrains.UI.PopupMenu.JetPopupMenu.ShowWhen,JetBrains.DataFlow.LifetimeDefinition)">
            <summary>
            Shows the menu onscreen. Does not return until a menu item is executed or menu is dismissed.
            </summary>
            <param name="when">Specifies the flags that could cancel showing the menu and replace it with something else.</param>
            <param name="lifetimeDefitionOptional">Optional. Gives you an opportunity to forcibly close the menu.</param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.JetPopupMenu.CheckThread">
            <summary>
            Throws if called on a wrong (non-UI) thread.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.JetPopupMenu.OnMenuItemDeleted(JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem)">
            <summary>
            Processes user's deletion of an item.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.JetPopupMenu.ShowCore_CutoffEarly(JetBrains.UI.PopupMenu.JetPopupMenu.ShowWhen,System.Collections.Generic.ICollection{System.Object})">
            <summary>
            Cut off menu show early, without describing items.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.JetPopupMenu.ShowCore_CutoffLate(JetBrains.UI.PopupMenu.JetPopupMenu.ShowWhen,System.Collections.Generic.ICollection{JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem})">
            <summary>
            Cut off menu show after we know item descriptions, like if it's enabled.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.JetPopupMenu.GetOrCreatePopupWindowContext(JetBrains.DataFlow.Lifetime)">
            <summary>
            Gets the layouter supplied by the user, or creates the default one if missing (for the center of the screen, or the main window).
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.JetPopupMenu.CaptionLocation">
            <summary>
            Gets the offset of the menu caption from the menu top left corder, which is needed in case you want to position the image right above some object.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.JetPopupMenu.Caption">
            <summary>
            Gets or sets the popup menu caption, displayed in the title section of the menu.
            <c>Null</c> for no caption.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.JetPopupMenu.CaptureMouseInitially">
            <summary>
            Gets or sets whether the list should capture mouse input on startup and trigger the action on mouseup, thus assuming the "mouse-down" part of the input already done.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.JetPopupMenu.CloseOnExecute">
            <summary>
            Whether to close the menu automatically whenever an item (menu item or toolbar button) is executed. The default is <c>True</c>.
            If <c>False</c>, the menu will not close when you execute an item, unless you spawn some control that steals focus from the menu.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.JetPopupMenu.ItemExpanded">
            <summary>
            Fires when an item should be expanded into a submenu.
            Either a submenu should be shown, or a tooltip explaining the failure to do so.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.JetPopupMenu.ItemKeys">
            <summary>
            Gets the collection to which the keys for the menu items should be added.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.JetPopupMenu.NoItemsBanner">
            <summary>
            Gets or sets the banner that is displayed instead of the menu if there are zero items in the menu.
            May be <c>Null</c>, which means that the menu should be displayed even in case there are no items.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.JetPopupMenu.PopupWindowContext">
            <summary>
            Gets or sets the popup window context that defines the owning context for the menu.
            You might set either <see cref="P:JetBrains.UI.PopupMenu.JetPopupMenu.PopupWindowContext"/> or <see cref="P:JetBrains.UI.PopupMenu.JetPopupMenu.PopupWindowContextSource"/>, depending on what you have at hand.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.JetPopupMenu.PopupWindowContextSource">
            <summary>
            Gets or sets the popup window context that defines the owning context for the menu, as a non-lifetimed Source object.
            You might set either <see cref="P:JetBrains.UI.PopupMenu.JetPopupMenu.PopupWindowContext"/> or <see cref="P:JetBrains.UI.PopupMenu.JetPopupMenu.PopupWindowContextSource"/>, depending on what you have at hand.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.JetPopupMenu.ToolbarButtons">
            <summary>
            Gets the list of toolbar buttons to display in the title section of the menu.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.JetPopupMenu.Visible">
            <summary>
            Gets or sets whether the menu is currently visible.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.JetPopupMenu.ShowWhen">
            <summary>
            When the menu should not be actually shown.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.JetPopupMenu.ShowWhen.NoItemsBannerIfNoItems">
            <summary>
            If there're no items in the <see cref="P:JetBrains.UI.PopupMenu.JetPopupMenu.ItemKeys"/> collection, the menu is not shown, just the <see cref="P:JetBrains.UI.PopupMenu.JetPopupMenu.NoItemsBanner"/> is displayed.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.JetPopupMenu.ShowWhen.NoItemsBannerIfNoEnabledItems">
            <summary>
            If there're no enabled items, the menu is not shown, just the <see cref="P:JetBrains.UI.PopupMenu.JetPopupMenu.NoItemsBanner"/> is displayed.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.JetPopupMenu.ShowWhen.AutoExecuteIfSingleItem">
            <summary>
            If there is exactly one item in the menu, the menu is not shown, and that item is executed automatically. // TODO: check if the item is enabled.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.JetPopupMenu.ShowWhen.AutoExecuteIfSingleEnabledItem">
            <summary>
            If there is exactly one enabled item in the menu, the menu is not shown, and that item is executed automatically.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.JetPopupMenus">
            <summary>
            Factory for popup menus to inject all of the required components into the popup menu.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.JetPopupMenus.myCreate">
            <summary>
            Creates a new popup menu.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.JetPopupMenus.Create">
            <summary>
            Creates a new popup menu.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.JetPopupMenus.Show(JetBrains.DataFlow.Lifetime,JetBrains.UI.PopupMenu.JetPopupMenu.ShowWhen,System.Action{JetBrains.DataFlow.Lifetime,JetBrains.UI.PopupMenu.JetPopupMenu})">
            <summary>
            Shows the menu non-modally, calls your callback to fill the menu, giving you the lifetime for all the layouters and popup window contexts to be used with menu.
            The lifetime you give is just a limiting lifetime and is not critical; the lifetime you're given in the callback should be used for menu-bound entities.
            </summary>
            <param name="lifetime">The limiting lifetime for the menu. Not critical to have, but you should generally have one (i.e. one of your component).</param>
            <param name="when">Skip menu display conditions.</param>
            <param name="FFillMenu">The callback for you to fill the menu with items. Gives you the lifetime of the menu's async show. Bind any per-menu entities to this lifetime.</param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.JetPopupMenus.ShowModal(JetBrains.UI.PopupMenu.JetPopupMenu.ShowWhen,System.Action{JetBrains.DataFlow.Lifetime,JetBrains.UI.PopupMenu.JetPopupMenu})">
            <summary>
            Shows the menu non-modally, calls your callback to fill the menu, giving you the lifetime for all the layouters and popup window contexts to be used with menu.
            The lifetime you give is just a limiting lifetime and is not critical; the lifetime you're given in the callback should be used for menu-bound entities.
            </summary>
            <param name="when">Skip menu display conditions.</param>
            <param name="FFillMenu">The callback for you to fill the menu with items. Gives you the lifetime of the menu's async show. Bind any per-menu entities to this lifetime.</param>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.KeyboardAccelerationFlags">
            <summary>
            Determines how mnemonics are assigned to menu items.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.KeyboardAccelerationFlags.QuickSearch">
            <summary>
            Enable the Narrow-Down QuickSearch.
            This is the default.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.KeyboardAccelerationFlags.Mnemonics">
            <summary>
            Use mnemonic for quick access to the menu items, as specified at the <see cref="P:JetBrains.UI.PopupMenu.IMenuItemDescriptor.Mnemonic"/> field and assigned automatically, if missing.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.MenuItemDescriptor">
            <summary>
            The default menu item descriptor.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.MenuItemDescriptor.#ctor(System.Object)">
            <summary>
            Creates the default descriptor from an object by specifying the object's text representation as the item's text.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.MenuItemDescriptor.DumpToXaml(System.Xml.XmlWriter)">
            <summary>
            Dumps the object.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.MenuItemDescriptor.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.MenuItemDescriptor.Icon">
            <summary>
            Gets the image (icon) for the item.
            <c>Null</c> if the item has no image.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.MenuItemDescriptor.Mnemonic">
            <summary>
            If the menu is working in the <see cref="F:JetBrains.UI.PopupMenu.KeyboardAccelerationFlags.Mnemonics"/> mode, specifies the mnemonic to assign to this menu item.
            The letter holding the mnemonic will be underlined automatically.
            To specify a mnemonic, either:
            (1) set the <see cref="P:JetBrains.UI.PopupMenu.MenuItemDescriptor.Mnemonic"/> to contain a plaintext copy of the item <see cref="P:JetBrains.UI.PopupMenu.MenuItemDescriptor.Text"/>, with the mnemonic char prepended by an ampersand “&amp;”; normal ampersands should be doubled in the text,
            or,
            (2) set the <see cref="P:JetBrains.UI.PopupMenu.MenuItemDescriptor.Mnemonic"/> to contain the single case-insensitive character of the mnemonic, whose position in the <see cref="P:JetBrains.UI.PopupMenu.MenuItemDescriptor.Text"/> will be determined automatically; it's also legal to specify a mnemonic not present in the text.
            May be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.MenuItemDescriptor.ShortcutText">
            <summary>
            Shortcut text to be displayed to the right of the <see cref="P:JetBrains.UI.PopupMenu.IMenuItemDescriptor.Text">main item text</see>.
            May be <c>Null</c> or an empty string for no shortcut.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.MenuItemDescriptor.Style">
            <summary>
            Gets or sets the style of the item.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.MenuItemDescriptor.Tag">
            <summary>
            A freehand object tag on the menu item descriptor.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.MenuItemDescriptor.TailGlyph">
            <summary>
            Gets or sets an optional glyph that is displayed at the end of the menu item, after its shortcut text.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.MenuItemDescriptor.Text">
            <summary>
            Gets the text that should present the item in the list.
            Should not be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.MenuItemDescriptor.Tooltip">
            <summary>
            Get the tooltip that should be shown when the mouse pointer hovers above this item in the list.
            May be <c>Null</c> or an empty string for no tooltip.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.MenuItemStyle">
            <summary><seealso cref="T:JetBrains.UI.PopupMenu.MenuItemStyleValidator"/>
            Defines the style and state for a list item described by a <see cref="T:JetBrains.UI.PopupMenu.IMenuItemDescriptor"/> object.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.MenuItemStyle.Enabled">
            <summary>
            This flag is present iff the item is enabled.
            Cannot be used together with <see cref="F:JetBrains.UI.PopupMenu.MenuItemStyle.Separator"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.MenuItemStyle.Separator">
            <summary>
            Whether the item is a separator item.
            Cannot be used together with <see cref="F:JetBrains.UI.PopupMenu.MenuItemStyle.Enabled"/> and <see cref="F:JetBrains.UI.PopupMenu.MenuItemStyle.GroupHeader"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.MenuItemStyle.GroupHeader">
            <summary>
            Whether the item is a static item.
            A static item is a special full-size item that cannot be selected or triggered and is painted in a greyed style.
            Cannot be used together with <see cref="F:JetBrains.UI.PopupMenu.MenuItemStyle.Separator"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.MenuItemStyle.CanExpand">
            <summary>
            Whether the item can be expanded into a submenu.
            An event is fired by the document when submenu should be shown.
            With just this flag, the item itself cannot be executed.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.MenuItemStyleValidator">
            <summary>
            Validates the <see cref="T:JetBrains.UI.PopupMenu.MenuItemStyle"/> values.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.MenuItemStyleValidator.AssertValid(JetBrains.UI.PopupMenu.MenuItemStyle)">
            <summary>
            Throws if invalid.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.SimpleMenuItem">
            <summary>
            A simple menu item for the <see cref="T:JetBrains.UI.PopupMenu.JetPopupMenu"/> that allows to easily create and use a small menu consisting of static items only, with all the handlers attached to the items themselves rather than global “describe” and “clicked” all-item callbacks.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.SimpleMenuItem.#ctor">
            <summary>
            Default ctor. Don't forget to init the item.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.SimpleMenuItem.#ctor(JetBrains.UI.RichText.RichText,System.Drawing.Image,System.Action)">
            <summary>
            Fully initializes the item.
            </summary>
            <param name="text">Main text of the item.</param>
            <param name="icon">Icon for the item.</param>
            <param name="FOnExecute">Called when the item is clicked.</param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.SimpleMenuItem.CreateSeparator">
            <summary>
            Creates a ready-for-use separator menu item.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.SimpleMenuItem.Executed">
            <summary>
            Fires when this particular item is clicked.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.SimpleMenuItem.Expanded">
            <summary>
            Fires when this particular item is expanded (expanding the item should be allowed in the style flags).
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.SimpleMenuItem.Describe(JetBrains.UI.PopupMenu.IMenuItemDescriptor)">
            <summary>
            Copies the item description into the given descriptor.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.ToolbarItemInfo">
            <summary>
            The default <see cref="T:JetBrains.UI.PopupMenu.IToolBarItemInfo"/> interface implementation.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.ToolbarItemInfo.#ctor(JetBrains.CommonControls.IPresentableItem,JetBrains.UI.RichText.RichText,System.Windows.Forms.Keys,System.Boolean,System.Action{JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc})">
            <summary>
            Initializes all of the fields.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.ToolbarItemInfo.#ctor(JetBrains.CommonControls.IPresentableItem,JetBrains.UI.RichText.RichText,System.Windows.Forms.Keys,System.Boolean,System.Action)">
            <summary>
            Initializes all of the fields.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.ToolbarItemInfo.#ctor(JetBrains.CommonControls.IPresentableItem,JetBrains.UI.RichText.RichText,System.Windows.Forms.Keys,System.Boolean)">
            <summary>
            Initializes all of the fields.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.ToolbarItemInfo.Clicked">
            <summary>
            Gets the Clicked signal for this toolbar button.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.ToolbarItemInfo.IsChecked">
            <summary>
            Gets or sets whether the button is initially checked.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.ToolbarItemInfo.Presentation">
            <summary>
            Gets or sets the toolbar button presentation, usually consisting of just one icon.
            <c>Null</c> to hide the button.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.ToolbarItemInfo.Shortcut">
            <summary>
            Shortcut key for the toolbar button.
            Must be <see cref="F:System.Windows.Forms.Keys.None"/> if no shortcut is assigned to the button.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.ToolbarItemInfo.TooltipText">
            <summary>
            Gets or sets the tooltip text for the button.
            May be <c>Null</c>.
            </summary>
        </member>
        <member name="T:JetBrains.UI.CommonControls.LinkLabel">
            <summary>
            A customized link label that natively supports URIs for opening in the Web browser and copying to clipboard.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.LinkLabel.#ctor(System.String,System.Uri,JetBrains.UI.Application.OpensUri,JetBrains.UI.PopupMenu.JetPopupMenus)">
            <summary>
            A Web URI link.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.LinkLabel.#ctor(System.String,System.Action,JetBrains.UI.PopupMenu.JetPopupMenus)">
            <summary>
            An action link.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.LinkLabel.OnClick(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Click" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:JetBrains.UI.CommonControls.LinkLabel.OnLinkClicked(System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.LinkLabel.LinkClicked" /> event.
            </summary>
            <param name="args">A <see cref="T:System.Windows.Forms.LinkLabelLinkClickedEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:JetBrains.UI.CommonControls.LinkLabel.WndProc(System.Windows.Forms.Message@)">
            <summary>
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.LinkLabel.GetTooltip(JetBrains.DataFlow.Lifetime,System.Drawing.Point)">
            <summary>
            Called by tooltip manager, if the tooltip is to be displayed
            </summary>
            <param name="lifetime"></param>
            <param name="point">Point in control's coordinates</param>
            <returns><see cref="T:JetBrains.UI.Tooltips.ITooltipInfo"/>, or <c>Null</c> if no tooltip should be displayed.</returns>
        </member>
        <member name="T:JetBrains.CommonControls.PresentableItemTipPainter">
            <summary>
            A tooltip control painter that renders a standard presentable item on it.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.PresentableItemTipPainter.myBounds">
            <summary>
            Bounds, as assigned by the parent.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.PresentableItemTipPainter.myPresentableItem">
            <summary>
            The rendered presentable item.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.PresentableItemTipPainter.myRenderParams">
            <summary>
            The rendering aspect.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.PresentableItemTipPainter.myWantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItemTipPainter.#ctor(JetBrains.CommonControls.IPresentableItem,JetBrains.UI.RenderParams)">
            <summary>
            Creates the tip painter.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItemTipPainter.#ctor(JetBrains.CommonControls.IPresentableItem)">
            <summary>
            Creates the tip painter.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItemTipPainter.#ctor(JetBrains.UI.RichText.RichText)">
            <summary>
            Creates the tip painter.
            Note: you should rather use <see cref="T:JetBrains.CommonControls.RichTextTipPainter"/> for formatted text, because it supports reflow.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItemTipPainter.#ctor(System.String)">
            <summary>
            Creates the tip painter.
            Note: you should rather use <see cref="T:JetBrains.CommonControls.RichTextTipPainter"/> for formatted text, because it supports reflow.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItemTipPainter.GetDesiredSize(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Performs the bottom-up layouting stage, when the control calculates its desired size using the given constraints.
            Should give generally the same results as <see cref="T:JetBrains.CommonControls.IConstrainableControl"/>, but could employ the <paramref name="gc"/> device context for the sake of optimization.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="limit">The maximum available space (that could affect the shape of the control, or strip down unnecessary calculations over the invisible items).
            May be a <see cref="T:System.Drawing.Size"/> with width and height equal to <see cref="F:System.Int32.MaxValue"/>, which means that the size is not limited.</param>
            <returns>The desired size, must be no larger than <paramref name="limit"/>.</returns>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItemTipPainter.Paint(System.Drawing.Graphics)">
            <summary>
            Renders the context of the windowless control. The rendering bounds are given by the 
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItemTipPainter.SetBounds(JetBrains.UI.IGraphicsContainer,System.Drawing.Rectangle)">
            <summary>
            Performs the top-down layouting stage, when the control lais out its parts within the given bounds.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="bounds">The available space.</param>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItemTipPainter.SetLayout(JetBrains.UI.LayoutResult)">
            <summary>
            Tells the control the details about the new layout applied to it by the controlling entity in conjunction with some <see cref="T:JetBrains.UI.IPopupLayouter"/>.
            Typically, the control need not apply the given size and location because that should be done by the controlling entity.
            The control may change its presentation in response to the layouting details, for example, whether it's attached to the top or the bottom of the anchoring rect.
            </summary>
            <param name="layout">The layouting details.</param>
        </member>
        <member name="P:JetBrains.CommonControls.PresentableItemTipPainter.PresentableItem">
            <summary>
            Gets or sets the presentable item rendered by the view.
            Can be <c>Null</c> for an empty view of zero size.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.PresentableItemTipPainter.RenderParams">
            <summary>
            Gets or sets the rendering aspect.
            Must not be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.PresentableItemTipPainter.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.PresentableItemTipPainter.Bounds">
            <summary>
            The windowless control bounds in the parent coordinates. The implementor should just store and return the value set by the owner.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.PresentableItemTipPainter.GottenDirty">
            <summary>
            The control has gotten dirty and should be repainted.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.PresentableItemTipPainter.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.Controls.ProgressCircle">
            <summary>
            Implements a progress indication control in a circle.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.ProgressCircle.ArrangeOverride(System.Windows.Size)">
            <summary>
            Called to arrange and size the content of a <see cref="T:System.Windows.Controls.Control"></see> object. 
            </summary>
            
            <returns>
            The size of the control.
            </returns>
            
            <param name="arrangeBounds">The computed size that is used to arrange the content.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.ProgressCircle.MeasureOverride(System.Windows.Size)">
            <summary>
            Called to remeasure a control. 
            </summary>
            
            <returns>
            The size of the control.
            </returns>
            
            <param name="constraint">Measurement constraints, a control cannot return a size larger than the constraint.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.ProgressCircle.OnMaximumChanged(System.Double,System.Double)">
            <summary>
            Called when the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum"></see> property changes. 
            </summary>
            
            <param name="newMaximum">New value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum"></see> property.</param>
            <param name="oldMaximum">Old value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Maximum"></see> property.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.ProgressCircle.OnMinimumChanged(System.Double,System.Double)">
            <summary>
             Called when the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum"></see> property changes. 
            </summary>
            
            <param name="oldMinimum">Old value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum"></see> property.</param>
            <param name="newMinimum">New value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Minimum"></see> property.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.ProgressCircle.OnValueChanged(System.Double,System.Double)">
            <summary>
             Called when the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value"></see> property changes. 
            </summary>
            
            <param name="oldValue">Old value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value"></see> property</param>
            <param name="newValue">New value of the <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value"></see> property</param>
        </member>
        <member name="T:JetBrains.UI.CommonControls.RadioGroup`1">
            <summary>
            Represents a group of radio buttons with a single value that is determined by the radiobutton that is checked.
            There is an option checkbox that disables or enables the whole group.
            </summary>
            <typeparam name="TValue">Type of the value chosen by this group.</typeparam>
        </member>
        <member name="F:JetBrains.UI.CommonControls.RadioGroup`1.myDefaultRadioMargin">
            <summary>
            The default radio button margin to which we're adding.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.RadioGroup`1.myButtonValues">
            <summary>
            Values on the radio buttons.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.RadioGroup`1.myPropertyButtonsEnabled">
            <summary>
            Indicates whether the property buttons should be enabled.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.RadioGroup`1.myValueBeforeDisabling">
            <summary>
            Provides for restoring the selection that used to be before disabling the radio buttons.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.RadioGroup`1.HasCheckbox">
            <summary>
            WHether the label or checkbox is visible.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.RadioGroup`1.LabelText">
            <summary>
            Text of the label (if there's no checkbox), or the checkbox (if it's ON).
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.RadioGroup`1.NothingSelectedValue">
            <summary>
            The <see cref="F:JetBrains.UI.CommonControls.RadioGroup`1.Value"/> when nothing is selected (eg checkbox is unchecked).
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.RadioGroup`1.RadioButtonsAdditionalMargin">
            <summary>
            The additional margin around the radio buttons, ie one that positions them indented under the title check/label.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.RadioGroup`1.Value">
            <summary>
            The composite value of this group.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.RadioGroup`1.AddComment(System.Windows.Forms.Control)">
            <summary>
            Adds a comment to the last radio button.
            The only difference with adding a control directly is that the enabled state of the comment will be synched to the previous radio button.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.RadioGroup`1.AddDependent(System.Windows.Forms.Control)">
            <summary>
            Adds a dependent control to the last radio button.
            The only difference with adding a control directly is that the enabled state of the dependent control will be synched to the previous radio button checked/enabled state.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.RadioGroup`1.AddRadioButton(System.String,`0)">
            <summary>
            Adds a new radio button to the group, along with its value.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.RadioGroup`1.AddRadioButton(System.String,System.Drawing.Image,`0)">
            <summary>
            Adds a new radio button to the group, along with its value.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.RadioGroup`1.AddRef(System.IDisposable)">
            <summary>
            Adds a reference so that it's held until the form is disposed of, after which it's disposed of.
            </summary>
            <param name="ref"></param>
        </member>
        <member name="M:JetBrains.UI.CommonControls.RadioGroup`1.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.Control"></see> and its child controls and optionally releases the managed resources.
            </summary>
            
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
        </member>
        <member name="T:JetBrains.UI.Controls.RichTextHeading">
            <summary>
            Renders a multiline wrappable heading with one bold paragraph and one normal-text paragraph. 
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.RichTextHeading.myLabelBody">
            <summary>
            Normal text part.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.RichTextHeading.myLabelTitle">
            <summary>
            Bold text part.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextHeading.Body">
            <summary>
            Gets or sets the body part of the heading.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextHeading.Title">
            <summary>
            Gets or sets the title part of the heading.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.RichTextLabel">
            <summary>
            A rich text label control capable of autosizing.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.RichTextLabel.myFormattedBlock">
            <summary>
            The <see cref="P:JetBrains.UI.Controls.RichTextLabel.RichTextBlock"/> formatted to fit the width.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.RichTextLabel.myMapWidthToSize">
            <summary>
            Caches the width-to-size mappings for quick access.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.RichTextLabel.myRichTextBlock">
            <summary>
            The rich text, as set by the user.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.RichTextLabel.#ctor">
            <summary>
            Constructs a default rich text label.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.RichTextLabel.#ctor(JetBrains.UI.RichText.RichTextBlock,System.Windows.Forms.Padding)">
            <summary>
            Creates a rich text label, setting the given text and changing the default margin.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.RichTextLabel.#ctor(JetBrains.UI.RichText.RichTextBlock)">
            <summary>
            Creates a rich text label, setting the given text.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.RichTextLabel.#ctor(JetBrains.UI.RichText.RichText)">
            <summary>
            Creates a rich text label, setting the given text.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.RichTextLabel.UpdateTextBlock">
            <summary>
            Reflows the formatted text block to the new width.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.RichTextLabel.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.RichTextLabel.ProcessMnemonic(System.Char)">
            <summary>
            Processes a mnemonic character.
            </summary>
            
            <returns>
            true if the character was processed as a mnemonic by the control; otherwise, false.
            </returns>
            
            <param name="charCode">The character to process. </param>
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextLabel.DefaultRichTextLabelRenderParams">
            <summary>
            Gets the render params the rich text labels use by default.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextLabel.Mnemonic">
            <summary>
            Gets or sets the accelerator keystroke of the control.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextLabel.RenderParams">
            <summary>
            Gets or sets the rendering aspect for the text.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextLabel.RichText">
            <summary>
            Gets or sets the rich text associated with the control.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextLabel.RichTextBlock">
            <summary>
            Gets or sets the formatted text displayed by this label.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextLabel.BackColor">
            <summary>
            Gets or sets the background color for the control.
            </summary>
            
            <returns>
            A <see cref="T:System.Drawing.Color"></see> that represents the background color of the control. The default is the value of the <see cref="P:System.Windows.Forms.Control.DefaultBackColor"></see> property.
            </returns>
            <filterpriority>1</filterpriority><PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextLabel.DisplayRectangle">
            <summary>
            Gets the rectangle that represents the display area of the control.
            </summary>
            
            <returns>
            A <see cref="T:System.Drawing.Rectangle"></see> that represents the display area of the control.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextLabel.Font">
            <summary>
            Gets or sets the <see cref="P:JetBrains.UI.RenderParams.Font"/> proeprty of the <see cref="P:JetBrains.UI.Controls.RichTextLabel.RenderParams"/>.
            </summary>
            
            <returns>
            The <see cref="T:System.Drawing.Font"></see> to apply to the text displayed by the control. The default is the value of the <see cref="P:System.Windows.Forms.Control.DefaultFont"></see> property.
            </returns>
            <filterpriority>1</filterpriority><PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence"/><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/></PermissionSet>
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextLabel.ForeColor">
            <summary>
            Gets or sets the foreground color of the control.
            </summary>
            
            <returns>
            The foreground <see cref="T:System.Drawing.Color"></see> of the control. The default is the value of the <see cref="P:System.Windows.Forms.Control.DefaultForeColor"></see> property.
            </returns>
            <filterpriority>1</filterpriority><PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextLabel.Text">
            <summary>
            Gets or sets the text associated with this control.
            </summary>
            
            <returns>
            The text associated with this control.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="T:JetBrains.CommonControls.RichTextTipPainter">
            <summary>
            Tip painter which paints tips with simple multiline formatted text.
            Reflows the text if the width does not fit.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.RichTextTipPainter.BorderSize">
            <summary>
            Size of the padding around the text.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.RichTextTipPainter.myBounds">
            <summary>
            Bounds, as assigned by the parent.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.RichTextTipPainter.myDesiredBlockSize">
            <summary>
            The desired size of the <see cref="F:JetBrains.CommonControls.RichTextTipPainter.myRichTextBlock"/>, in absence of any external constraints.
            Lazily-calculated, <c>Null</c> when invalid.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.RichTextTipPainter.myReflowedRichTextBlock">
            <summary>
            Reflowed content, lazily-created.
            Use the <see cref="M:JetBrains.CommonControls.RichTextTipPainter.GetReflowedRichTextBlock(System.Drawing.Graphics)"/> method.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.RichTextTipPainter.myReflowedRichTextBlockUpToDate">
            <summary>
            Whether the <see cref="F:JetBrains.CommonControls.RichTextTipPainter.myReflowedRichTextBlock"/> is valid. Use <see cref="M:JetBrains.CommonControls.RichTextTipPainter.GetReflowedRichTextBlock(System.Drawing.Graphics)"/>.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.RichTextTipPainter.myRenderParams">
            <summary>
            Rendering aspect.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.RichTextTipPainter.myRichTextBlock">
            <summary>
            Content.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.RichTextTipPainter.myWidthConstraint">
            <summary>
            The current width constraint.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.RichTextTipPainter.myWantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.RichTextTipPainter.#ctor(JetBrains.UI.RichText.RichText)">
            <summary>
            Creates the painter over a rich text.
            If the text contains line breaks, it's splitted into several <see cref="P:JetBrains.CommonControls.RichTextTipPainter.RichTextBlock"/> lines.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.RichTextTipPainter.#ctor(JetBrains.UI.RichText.RichTextBlock,JetBrains.UI.RenderParams)">
            <summary>
            Creates the painter over a rich text block.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.RichTextTipPainter.#ctor(JetBrains.UI.RichText.RichTextBlock)">
            <summary>
            Creates the painter over a rich text block.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.RichTextTipPainter.GetReflowedRichTextBlock(System.Drawing.Graphics)">
            <summary>
            Gets the reflowed rich text block.
            Lazily reflows the original block if needed.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.RichTextTipPainter.GetDesiredSize(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Performs the bottom-up layouting stage, when the control calculates its desired size using the given constraints.
            Should give generally the same results as <see cref="T:JetBrains.CommonControls.IConstrainableControl"/>, but could employ the <paramref name="gc"/> device context for the sake of optimization.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="limit">The maximum available space (that could affect the shape of the control, or strip down unnecessary calculations over the invisible items).
            May be a <see cref="T:System.Drawing.Size"/> with width and height equal to <see cref="F:System.Int32.MaxValue"/>, which means that the size is not limited.</param>
            <returns>The desired size, must be no larger than <paramref name="limit"/>.</returns>
        </member>
        <member name="M:JetBrains.CommonControls.RichTextTipPainter.Paint(System.Drawing.Graphics)">
            <summary>
            Renders the context of the windowless control. The rendering bounds are given by the 
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:JetBrains.CommonControls.RichTextTipPainter.SetBounds(JetBrains.UI.IGraphicsContainer,System.Drawing.Rectangle)">
            <summary>
            Performs the top-down layouting stage, when the control lais out its parts within the given bounds.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="bounds">The available space.</param>
        </member>
        <member name="M:JetBrains.CommonControls.RichTextTipPainter.SetLayout(JetBrains.UI.LayoutResult)">
            <summary>
            Tells the control the details about the new layout applied to it by the controlling entity in conjunction with some <see cref="T:JetBrains.UI.IPopupLayouter"/>.
            Typically, the control need not apply the given size and location because that should be done by the controlling entity.
            The control may change its presentation in response to the layouting details, for example, whether it's attached to the top or the bottom of the anchoring rect.
            </summary>
            <param name="layout">The layouting details.</param>
        </member>
        <member name="P:JetBrains.CommonControls.RichTextTipPainter.RenderParams">
            <summary>
            Gets or sets the rendering aspect.
            Must not be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.RichTextTipPainter.RichTextBlock">
            <summary>
            Gets or sets the content.
            Must not be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.RichTextTipPainter.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.RichTextTipPainter.Bounds">
            <summary>
            The windowless control bounds in the parent coordinates. The implementor should just store and return the value set by the owner.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.RichTextTipPainter.GottenDirty">
            <summary>
            The control has gotten dirty and should be repainted.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.RichTextTipPainter.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.Controls.RunBindable">
            <summary>
            A text element whose text value can be bound to a property.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.RunBindable.#ctor">
            <summary>
            Initializes a new, default instance of the <see cref="T:System.Windows.Documents.Run"/> class.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.RunBindable.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Documents.Run"/> class, taking a specified string as the initial contents of the text run.
            </summary>
            <param name="text">A string specifying the initial contents of the <see cref="T:System.Windows.Documents.Run"/> object.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.Controls.RunBindable.GetForegroundProp">
            <summary>
            Creates and binds the property.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Components.Separator.Separator.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Components.Separator.Separator.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Components.Separator.Separator.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.SizeConstraint">
            <summary>
            Represents a constraint on control size
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.SizeConstraint.ConstrainingSize">
            <summary>
            Gets the width and height representing the current constraint.
            </summary>
        </member>
        <member name="T:JetBrains.UI.CommonControls.Spacer">
            <summary>
            A spacer WinForms control to fill the unneeded space.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.Spacer.GetPreferredSize(System.Drawing.Size)">
            <summary>
            Retrieves the size of a rectangular area into which a control can be fitted.
            </summary>
            <returns>
            An ordered pair of type <see cref="T:System.Drawing.Size" /> representing the width and height of a rectangle.
            </returns>
            <param name="proposedSize">The custom-sized area for a control. </param><filterpriority>2</filterpriority>
        </member>
        <member name="F:JetBrains.UI.CommonControls.Controls.SplitedButton.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.Controls.SplitedButton.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.UI.CommonControls.Controls.SplitedButton.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:JetBrains.UI.CommonControls.Controls.SplitedButton.DoubleClickedEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:JetBrains.UI.CommonControls.Controls.SplitedButton.AlwaysDropDown">
            <summary>
            
            </summary>
        </member>
        <member name="P:JetBrains.UI.CommonControls.Controls.SplitedButton.AlwaysHoverChange">
            <summary>
            
            </summary>
        </member>
        <member name="P:JetBrains.UI.CommonControls.Controls.SplitedButton.CalculateSplitRect">
            <summary>
            
            </summary>
        </member>
        <member name="P:JetBrains.UI.CommonControls.Controls.SplitedButton.FillSplitHeight">
            <summary>
            Gets or sets a value indicating whether [fill split height].
            </summary>
            <value><c>true</c> if [fill split height]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:JetBrains.UI.CommonControls.Controls.SplitedButton.SplitHeight">
            <summary>
            
            </summary>
        </member>
        <member name="P:JetBrains.UI.CommonControls.Controls.SplitedButton.SplitWidth">
            <summary>
            
            </summary>
        </member>
        <member name="P:JetBrains.UI.CommonControls.Controls.SplitedButton.NormalImage">
            <summary>
            
            </summary>
        </member>
        <member name="P:JetBrains.UI.CommonControls.Controls.SplitedButton.HoverImage">
            <summary>
            
            </summary>
        </member>
        <member name="P:JetBrains.UI.CommonControls.Controls.SplitedButton.ClickedImage">
            <summary>
            
            </summary>
        </member>
        <member name="P:JetBrains.UI.CommonControls.Controls.SplitedButton.DisabledImage">
            <summary>
            
            </summary>
        </member>
        <member name="P:JetBrains.UI.CommonControls.Controls.SplitedButton.FocusedImage">
            <summary>
            
            </summary>
        </member>
        <member name="T:JetBrains.UI.CommonControls.StatusBarProgressIndicator">
            <summary>
            A status bar indicator for a progress.
            </summary>
        </member>
        <member name="T:JetBrains.UI.StatusBar.JetStatusBarIndicator">
            <summary>
            Represents the data for an indicator in the status bar.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StatusBar.JetStatusBarIndicator.myWindowlessControl">
            <summary>
            <see cref="P:JetBrains.UI.StatusBar.JetStatusBarIndicator.WindowlessControl"/>
            </summary>
        </member>
        <member name="P:JetBrains.UI.StatusBar.JetStatusBarIndicator.Click">
            <summary>
            Fires when the user clicks a mouse button on the control.
            </summary>
        </member>
        <member name="P:JetBrains.UI.StatusBar.JetStatusBarIndicator.ContextMenu">
            <summary>
            Fires when a context menu should be shown.
            Note: the <see cref="T:JetBrains.UI.PopupMenu.JetPopupMenu"/> object is disposable. You must either avoid creating it by not touching the <see cref="T:JetBrains.Util.Lazy.Lazy`1"/> container, or use the value you get from it (either <see cref="!:JetPopupMenu.Show()"/> the menu, which will then dispose of it correctly, or <see cref="M:System.IDisposable.Dispose"/> of it explicitly).
            </summary>
        </member>
        <member name="P:JetBrains.UI.StatusBar.JetStatusBarIndicator.Cursor">
            <summary>
            Gets or sets the mouse cursor for the indicator view.
            </summary>
        </member>
        <member name="P:JetBrains.UI.StatusBar.JetStatusBarIndicator.DoubleClick">
            <summary>
            Fires when the user double-clicks a mouse button on the control.
            </summary>
        </member>
        <member name="P:JetBrains.UI.StatusBar.JetStatusBarIndicator.IsHot">
            <summary>
            Gets whether the control is currently hot (has mouse over its view).
            </summary>
        </member>
        <member name="P:JetBrains.UI.StatusBar.JetStatusBarIndicator.Margin">
            <summary>
            The margin around the <see cref="P:JetBrains.UI.StatusBar.JetStatusBarIndicator.WindowlessControl"/> content inside the status bar indicator place.
            </summary>
        </member>
        <member name="P:JetBrains.UI.StatusBar.JetStatusBarIndicator.TooltipProvider">
            <summary>
            Gets or sets the tooltip providers that allows casting a tooltip when the mouse pointer hovers this indicator.
            </summary>
        </member>
        <member name="P:JetBrains.UI.StatusBar.JetStatusBarIndicator.WindowlessControl">
            <summary>
            Gets or sets the windowless control that manages the painting and layouting of the indicator.
            If the value is <c>Null</c>, the status bar indicator is hidden and collapsed.
            You may use this approach for concealing the indicator instead of removing it from the status bar.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarIndicator.ContextMenuEventArgs.ShowMenu(System.Action{JetBrains.DataFlow.Lifetime,JetBrains.UI.PopupMenu.JetPopupMenu})">
            <summary>
            Call this method if you would like to show the menu.
            Your code will be called to fill the menu with items and define their behavior after the menu is initialized and before it's shown.
            The lifetime will be terminated when the menu closes (limited by the indicator lifetime).
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.StatusBarProgressIndicator.GapAroundText">
            <summary>
            Gap on the right and left of the text, but within the progress fill.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.StatusBarProgressIndicator.GapIconProgress">
            <summary>
            Gap between the icon and the progress area.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.StatusBarProgressIndicator.TicksBeforeChangingImmediateSize">
            <summary>
            Number of <see cref="F:JetBrains.UI.CommonControls.StatusBarProgressIndicator.myTicksAfterDesiredSizeChanged"/> ticks before the immediate size starts adapting.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.StatusBarProgressIndicator.SizeAdaptationStep">
            <summary>
            Step for changing the size when adapting.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.StatusBarProgressIndicator.myDesiredSize">
            <summary>
            The indicator's desired size, as derived from the content.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.StatusBarProgressIndicator.myDesiredSizeImmediate">
            <summary>
            The indicator size currently reported to the host as the desired size. Gradually changes to fit <see cref="F:JetBrains.UI.CommonControls.StatusBarProgressIndicator.myDesiredSize"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.StatusBarProgressIndicator.myGottenDirty">
            <summary>
            The control has gotten dirty and should be repainted.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.StatusBarProgressIndicator.myTicksAfterDesiredSizeChanged">
            <summary>
            Calculates the number of timer ticks after the <see cref="F:JetBrains.UI.CommonControls.StatusBarProgressIndicator.myDesiredSize"/> change.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.StatusBarProgressIndicator.myTimerAdjustDesiredSize">
            <summary>
            Gradually adjusts <see cref="F:JetBrains.UI.CommonControls.StatusBarProgressIndicator.myDesiredSizeImmediate"/> to fit <see cref="F:JetBrains.UI.CommonControls.StatusBarProgressIndicator.myDesiredSize"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.StatusBarProgressIndicator.myWantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.StatusBarProgressIndicator.Icon">
            <summary>
            Icon for the progress.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.StatusBarProgressIndicator.Text">
            <summary>
            Text.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.StatusBarProgressIndicator.Value">
            <summary>
            Value of the progress, in the [0…1] range.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.StatusBarProgressIndicator.OnUpdateDesiredSize">
            <summary>
            Calculates the true desired size.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.StatusBarProgressIndicator.OnTimerAdjustDesiredSize">
            <summary>
            When the timer ticks, gradually changes the immediate desired size value towards the actual desired size.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.StatusBarProgressIndicator.GetTooltip(JetBrains.DataFlow.Lifetime,System.Drawing.Point)">
            <summary>
            Called by tooltip manager, if the tooltip is to be displayed
            </summary>
            <param name="lifetime"></param>
            <param name="point">Point in control's coordinates</param>
            <returns><see cref="T:JetBrains.UI.Tooltips.ITooltipInfo"/>, or <c>Null</c> if no tooltip should be displayed.</returns>
        </member>
        <member name="M:JetBrains.UI.CommonControls.StatusBarProgressIndicator.GetDesiredSize(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Performs the bottom-up layouting stage, when the control calculates its desired size using the given constraints.
            Should give generally the same results as <see cref="T:JetBrains.CommonControls.IConstrainableControl"/>, but could employ the <paramref name="gc"/> device context for the sake of optimization.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="limit">The maximum available space (that could affect the shape of the control, or strip down unnecessary calculations over the invisible items).
            May be a <see cref="T:System.Drawing.Size"/> with width and height equal to <see cref="F:System.Int32.MaxValue"/>, which means that the size is not limited.</param>
            <returns>The desired size, must be no larger than <paramref name="limit"/>.</returns>
        </member>
        <member name="M:JetBrains.UI.CommonControls.StatusBarProgressIndicator.Paint(System.Drawing.Graphics)">
            <summary>
            Renders the context of the windowless control. The rendering bounds are given by the 
            </summary>
            <param name="g">The device context.</param>
        </member>
        <member name="M:JetBrains.UI.CommonControls.StatusBarProgressIndicator.SetBounds(JetBrains.UI.IGraphicsContainer,System.Drawing.Rectangle)">
            <summary>
            Performs the top-down layouting stage, when the control lais out its parts within the given bounds.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="bounds">The new bounds. From now on, this value should be returned from the <see cref="P:JetBrains.CommonControls.IWindowlessControl.Bounds"/> property.</param>
        </member>
        <member name="M:JetBrains.UI.CommonControls.StatusBarProgressIndicator.SetLayout(JetBrains.UI.LayoutResult)">
            <summary>
            Tells the control the details about the new layout applied to it by the controlling entity in conjunction with some <see cref="T:JetBrains.UI.IPopupLayouter"/>.
            Typically, the control need not apply the given size and location because that should be done by the controlling entity.
            The control may change its presentation in response to the layouting details, for example, whether it's attached to the top or the bottom of the anchoring rect.
            </summary>
            <param name="layout">The layouting details.</param>
        </member>
        <member name="P:JetBrains.UI.CommonControls.StatusBarProgressIndicator.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.UI.CommonControls.StatusBarProgressIndicator.Bounds">
            <summary>
            The windowless control bounds in the parent coordinates. The implementor should just store and return the value set by the owner.
            </summary>
        </member>
        <member name="P:JetBrains.UI.CommonControls.StatusBarProgressIndicator.GottenDirty">
            <summary>
            The control has gotten dirty and should be repainted.
            </summary>
        </member>
        <member name="P:JetBrains.UI.CommonControls.StatusBarProgressIndicator.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.StringCollectionEdit.Caption">
            <summary>
            Caption above the strings list.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.StringCollectionEdit.ItemIcon">
            <summary>
            Icon for the items in the list.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.StringCollectionEdit.Items">
            <summary>
            Items in the editable list.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.Misc.FilterController`1">
            <summary>
            Helper class for displaying list of filters buttons , intendeed for use in conjunction with xaml binding. Manages a list of abstract items and allows to toggle their state on\off   
            </summary>
            <typeparam name="FilterItemType"></typeparam>
        </member>
        <member name="T:JetBrains.UI.Controls.Misc.ItemStyles">
            <summary>
            Exposes properties IsFirst \ IsLast on FrameworkElements for styling purposes
            EnableItemsStyle should be set on target panel or itemspresenter
            </summary>
        </member>
        <member name="T:JetBrains.UI.CommonControls.TableLayoutPanelColored">
            <summary>
            Changes the background without actually changing the backcolor, to avoid inheritance to children.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.TableLayoutPanelColored.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the background of the panel.
            </summary>
            
            <param name="args">A <see cref="T:System.Windows.Forms.PaintEventArgs"></see>  that contains information about the panel to paint.</param>
        </member>
        <member name="P:JetBrains.UI.CommonControls.TableLayoutPanelColored.FillColor">
            <summary>
            Gets or sets the fill color that won't propagate to the children.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.TabStrip.PresentableItemMargin">
            <summary>
            Tab page can be drawn not directly from the rect bounds but with
            some spaces or margins. Without an account for these shifts, the
            presentable item will be drawn directly on the tab border.
            This margin shift the drawing of the presentable item and is accounted
            in the calculation of tab width;
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.IPresentableItem">
            <summary>
            Provides mechanism for specifying most common data for presentation items.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.IPresentableItem.Clear">
            <summary>
            Clears item's images and text.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.IPresentableItem.RichText">
            <summary>
            Gets or sets <see cref="P:JetBrains.CommonControls.IPresentableItem.RichText"/> object to specify text presentation.
            Must not be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.IPresentableItem.Images">
            <summary>
            Gets collection of images that are painted before text.
            Must not be <c>Null</c>.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.IPresentableItemImageOwner">
            <summary>
            Provides mechanism for notification of changes in image collection of <see cref="T:JetBrains.CommonControls.IPresentableItem"/>.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.IPresentableItemImageOwner.NotifyImageCollectionChanged">
            <summary>
            Called when image collection has been changed.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItem.#ctor(System.Drawing.Image)">
            <summary>
            Creates an icon-only presentable item.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItem.#ctor(System.Drawing.Image,JetBrains.UI.RichText.RichText)">
            <summary>
            Creates a presentable item that is a labeled icon, with icon on the left.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItem.#ctor(JetBrains.CommonControls.IPresentableItem)">
            <summary>
            Creates a static snapshot of the given presentable item.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.ToolbarButton">
            <summary>
            Special nice button like in IDEA
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.TreeListView.Contracts.ResetType.ResetChildren">
            <summary>
            Only direct children of node have to be refreshed
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.TreeListView.Contracts.ResetType.ResetSubtree">
            <summary>
            All descendats of node have to be refreshed
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.TreeListView.Contracts.ITreeModelChangeTracker">
            <summary>
            Simple way to notify tree view about batch changes in model   
            For more granular updates <see>IIterativeTreeModelChangeTracker</see>
            </summary>
        </member>
        <member name="E:JetBrains.UI.Avalon.TreeListView.Contracts.ITreeModelChangeTracker.ModelChanging">
            <summary>
            Marks start of model updates
            </summary>
        </member>
        <member name="E:JetBrains.UI.Avalon.TreeListView.Contracts.ITreeModelChangeTracker.NotifyReset">
             <summary>
            Marks node children or descendats as invalidated
             </summary>
        </member>
        <member name="E:JetBrains.UI.Avalon.TreeListView.Contracts.ITreeModelChangeTracker.ModelChanged">
            <summary>
            Marks end of model updates 
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.TreeListView.Contracts.ITreeStateRestoreSupportSimple.GetIdentity(System.Object)">
            <summary>    
            Gets identity object associated with given node. 
            Identity object is used during saving\restoring tree state (expantion and selection )
            It allows to associate old and new tree nodes that have same underlaying data
            </summary>
            <param name="model">Tree model node</param>
            <returns>Identity object. Return <param name="model" />   if object is identity of self</returns>
            
            <remarks>
            In some cases (as is the case for Reshrper's TreeModelNode) the model itself is wrapper on top of lower level model.    
            Model nodes are rebuild on any change. The only way to associate old and new odes is to use underlaying wrapped data
            </remarks>
        </member>
        <member name="T:JetBrains.UI.Avalon.TreeListView.Contracts.ITreeStateRestoreSupportAdvanced">
            <summary>
            Exists solely for optimisiation and TreeModelNode infrastracture
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.TreeListView.Contracts.ITreeStateRestoreSupportAdvanced.FromIdentity(System.Object)">
            <summary>
            Get models associated with given identity object
            </summary>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.Avalon.TreeListView.Contracts.ITreeStateRestoreSupportAdvanced.GetParent(System.Object)">
            <summary>
            Generally there is no requirement for providing parent object in <see cref="T:JetBrains.UI.Avalon.TreeListView.Contracts.ITreeModelProvider"/> 
            But in case optimal restoration is reqiered this method need to be provided. 
            </summary>
            <param name="model"></param>
            <returns>  parent for given model object. </returns>
        </member>
        <member name="M:JetBrains.UI.Avalon.TreeListView.TreeListView.Select(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Selects nodes based on passed model objects    
            </summary>    
            <param name="items"></param>
            <remarks> The method is heavy weight and breaks lazy tree aceess since it invokes full model tree traversal in order to find path of objects </remarks>
        </member>
        <member name="E:JetBrains.UI.Avalon.TreeListView.TreeListView.ContextMenuRequested">
            <summary>
            Signals context menu request. Args provide coordinates for context menu location 
            </summary>
        </member>
        <member name="T:JetBrains.UI.TreeView.TreeModelView">
            <summary>
            Provides default viewer for tree models
            </summary>
        </member>
        <member name="M:JetBrains.UI.TreeView.TreeModelView.#ctor(JetBrains.UI.TreeView.ITreeViewController)">
            <summary>
            Initializes new instance of the TreeModelView
            </summary>
            <param name="controller">Controller which defines behavior for this view</param>
        </member>
        <member name="M:JetBrains.UI.TreeView.TreeModelView.#ctor(JetBrains.TreeModels.TreeModel,JetBrains.UI.TreeView.ITreeViewController)">
            <summary>
            Initializes new instance of the TreeModelView using specified model
            </summary>
            <param name="model">Model to display in this view</param>
            <param name="controller">Controller which defines behavior for this view</param>
        </member>
        <member name="M:JetBrains.UI.TreeView.TreeModelView.Initialize">
            <summary>
            Initializes custom properties of the view
            </summary>
        </member>
        <member name="M:JetBrains.UI.TreeView.TreeModelView.IsModelNodeVisible(JetBrains.TreeModels.TreeModelNode)">
            <summary>
            Returns value indicating if specified viewNode/modelNode pair is visible
            </summary>
            <param name="modelNode"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.TreeView.TreeModelView.EnsureChildren(JetBrains.UI.TreeView.TreeModelViewNode)">
            <summary>
            Ensures that direct children for the node are created
            </summary>
            <param name="viewNode"></param>
        </member>
        <member name="M:JetBrains.UI.TreeView.TreeModelView.EnsureDescendants(JetBrains.UI.TreeView.TreeModelViewNode)">
            <summary>
            Ensures that whole subtree for the node is created
            </summary>
            <param name="viewNode"></param>
        </member>
        <member name="M:JetBrains.UI.TreeView.TreeModelView.InitializeNode(JetBrains.UI.TreeView.TreeModelViewNode,JetBrains.TreeModels.TreeModelNode)">
            <summary>
            Initializes visual representation of the model node
            </summary>
            <param name="viewNode">View node to initialize</param>
            <param name="modelNode">Model node associated with view node</param>
        </member>
        <member name="M:JetBrains.UI.TreeView.TreeModelView.UpdateNodePresentation(JetBrains.TreeModels.TreeModelNode)">
            <summary>
            Updates presentation of the view node associated with specified model node
            </summary>
            <param name="modelNode">Model node to update presentation for</param>
        </member>
        <member name="M:JetBrains.UI.TreeView.TreeModelView.UpdateNodePresentation(System.Object)">
            <summary>
            Updates presentation of the view nodes associated with specified data value
            </summary>
            <param name="dataValue"></param>
        </member>
        <member name="M:JetBrains.UI.TreeView.TreeModelView.UpdateNodePresentation(JetBrains.UI.TreeView.TreeModelViewNode)">
            <summary>
            Updates presentation of the given view node
            </summary>
            <param name="viewNode"></param>
        </member>
        <member name="M:JetBrains.UI.TreeView.TreeModelView.UpdateAllNodesPresentation">
            <summary>
            Updates presentation for all view nodes
            </summary>
        </member>
        <member name="M:JetBrains.UI.TreeView.TreeModelView.UpdateNodesPresentation(System.Collections.Generic.IEnumerable{JetBrains.TreeModels.TreeModelNode})">
            <summary>
            Updates presentation for specified model nodes
            </summary>
        </member>
        <member name="P:JetBrains.UI.TreeView.TreeModelView.Model">
            <summary>
            Gets or sets model which is displayed in the view
            </summary>
        </member>
        <member name="P:JetBrains.UI.TreeView.TreeModelView.MinimumRowHeight">
            <summary>
            Gets or sets minimum row height
            </summary>
        </member>
        <member name="P:JetBrains.UI.TreeView.TreeModelView.RemoveOnCollapse">
            <summary>
            Gets or set value indicating whether nodes are removed on collapse or not
            </summary>
        </member>
        <member name="P:JetBrains.UI.TreeView.TreeModelView.NavigateOnClick">
            <summary>
            Gets or sets value indicating whether Navigate command is issued on single click 
            </summary>
        </member>
        <member name="P:JetBrains.UI.TreeView.TreeModelView.CustomPresenters">
            <summary>
            Gets map of custom presentation handlers
            </summary>
        </member>
        <member name="P:JetBrains.UI.TreeView.TreeModelView.FocusedNode">
            <summary>
            Gets or sets currently focused node
            </summary>
        </member>
        <member name="P:JetBrains.UI.TreeView.TreeModelView.ModelFocusedNode">
            <summary>
            Gets currently focused node in the model space
            </summary>
        </member>
        <member name="P:JetBrains.UI.TreeView.TreeModelView.DefaultExpandLevels">
            <summary>
            Gets or sets default levels to expand on ExpandAll command (ex. if "*" key pressed)
            </summary>
        </member>
        <member name="P:JetBrains.UI.TreeView.TreeModelView.ModelSelection">
            <summary>
            Gets currently selected nodes in the model space
            </summary>
        </member>
        <member name="E:JetBrains.UI.TreeView.TreeModelView.Navigate">
            <summary>
            Raised when node navigation is occuring
            </summary>
        </member>
        <member name="M:JetBrains.UI.TreeView.TreeModelPresentableView.Initialize">
            <summary>
            Initializes custom properties of the view
            </summary>
        </member>
        <member name="P:JetBrains.UI.TreeView.TreeModelPresentableView.Presenter">
            <summary>
            Gets or sets presenter for this view
            </summary>
        </member>
        <member name="P:JetBrains.UI.TreeView.TreeModelPresentableView.ModelColumn">
            <summary>
            Gets column which contents is provided my model
            </summary>
        </member>
        <member name="T:JetBrains.UI.TreeView.TreeModelViewAnchoringRect">
            <summary>
            Anchors to the focused node or a manually specified node in the given tree model view.
            </summary>
        </member>
        <member name="T:JetBrains.UI.AnchoringRect">
            <summary>
            The basic implementation of the <see cref="T:JetBrains.UI.IAnchoringRect"/> interface.
            </summary>
        </member>
        <member name="T:JetBrains.UI.IAnchoringRect">
            <summary>
            Represents a dynamic anchoring rectangle against this some controls could be laid out.
            </summary>
        </member>
        <member name="P:JetBrains.UI.IAnchoringRect.Rectangle">
            <summary>
            Gets the current value of the anchoring rectangle.
            Note that, depending on the context, it could be either in client, screen, or any other coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.UI.AnchoringRect.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.UI.AnchoringRect.Rectangle">
            <summary>
            Gets or sets the current value of the anchoring rectangle.
            Note that, depending on the context, it could be either in client, screen, or any other coordinates.
            The setter fires the “changed” event.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TreeView.TreeModelViewAnchoringRect.myViewNode">
            <summary>
            <c>Null</c> if tracking selection.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TreeView.TreeModelViewAnchoringRect.myTreeModelView">
            <summary>
            <c>Null</c> only when disposed.
            </summary>
        </member>
        <member name="M:JetBrains.UI.TreeView.TreeModelViewAnchoringRect.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.UI.TreeView.TreeModelView,JetBrains.UI.TreeView.TreeModelViewNode)">
            <summary>
            Creates the instance.
            </summary>
            <param name="lifetime"></param>
            <param name="treeModelView">The owning tree model view.</param>
            <param name="node">The node to anchor to.</param>
        </member>
        <member name="M:JetBrains.UI.TreeView.TreeModelViewAnchoringRect.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.UI.TreeView.TreeModelView,JetBrains.UI.TreeView.TreeModelViewNode,JetBrains.UI.TreeView.TreeModelViewColumn,System.Boolean)">
            <summary>
            An internal ctor that allows for <c>Null</c> nodes for tracking the selection.
            </summary>
            <param name="lifetime"></param>
            <param name="treeModelView">The owning tree model view.</param>
            <param name="viewNode">The node to anchor to, or <c>Null</c> to anchor to the selected node.</param>
            <param name="viewColumn">The column to determine cell to anchor to, or null to anchor to whole node</param>
            <param name="isNodeNullable">Whether to allow <c>Null</c> in <paramref name="viewNode"/>.</param>
        </member>
        <member name="M:JetBrains.UI.TreeView.TreeModelViewAnchoringRect.UpdateAnchor">
            <summary>
            Updates the anchoring rectangle as it gets dirty.
            </summary>
        </member>
        <member name="M:JetBrains.UI.TreeView.TreeModelViewAnchoringRect.CreateFromSelectionDynamic(JetBrains.DataFlow.Lifetime,JetBrains.UI.TreeView.TreeModelView)">
            <summary>
            Creates the instance that tracks the selected node.
            When selection changes, the anchor is updated to track the new selection.
            </summary>
            <param name="lifetime"></param>
            <param name="treeModelView">The owning tree model view.</param>
        </member>
        <member name="M:JetBrains.UI.TreeView.TreeModelViewAnchoringRect.ClientToScreen(JetBrains.DataFlow.Lifetime,JetBrains.UI.Application.WindowsMessageHookManager)">
            <summary>
            Converts the <see cref="T:JetBrains.UI.TreeView.TreeModelViewAnchoringRect"/>, which operates in client coordinates, into a screen-coordinates anchor suitable for layouting popups.
            Nests the current object within a window anchor attached to the tree control.
            </summary>
            <param name="lifetime"></param>
            <param name="hookman"></param>
        </member>
        <member name="P:JetBrains.UI.TreeView.TreeModelViewAnchoringRect.DefaultAnchoringDispositions">
            <summary>
            Gets the default dispositions to be used when creating a layouter out of this anchor.
            </summary>
        </member>
        <member name="T:JetBrains.UI.TreeView.StructuredPresenter`2.PresentationCallbackWrapper`1">
            <summary>
            Typed wrapper for delegate
            </summary>
            <typeparam name="TStructureElement">Type of structure element</typeparam>
            <typeparam name="TData">Type of item to present</typeparam>
        </member>
        <member name="T:JetBrains.UI.TreeView.StructuredPresenter`2.IStructuredPresenter">
            <summary>
            Untyped item to present, for polymorphic access
            </summary>
        </member>
        <member name="T:JetBrains.UI.TreeControl.TreeControlNodeAnchoringRect">
            <summary>
            Anchors to the focused node or a manually specified node in the given tree model view.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TreeControl.TreeControlNodeAnchoringRect.myNode">
            <summary>
            <c>Null</c> if tracking selection.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TreeControl.TreeControlNodeAnchoringRect.myTreeControl">
            <summary>
            <c>Null</c> only when disposed.
            </summary>
        </member>
        <member name="M:JetBrains.UI.TreeControl.TreeControlNodeAnchoringRect.#ctor(JetBrains.DataFlow.Lifetime,DevExpress.XtraTreeList.TreeList,DevExpress.XtraTreeList.Nodes.TreeListNode)">
            <summary>
            Creates the instance.
            </summary>
            <param name="lifetime"></param>
            <param name="treeControl">The owning tree model view.</param>
            <param name="node">The node to anchor to.</param>
        </member>
        <member name="M:JetBrains.UI.TreeControl.TreeControlNodeAnchoringRect.#ctor(JetBrains.DataFlow.Lifetime,DevExpress.XtraTreeList.TreeList,DevExpress.XtraTreeList.Nodes.TreeListNode,DevExpress.XtraTreeList.Columns.TreeListColumn,System.Boolean)">
            <summary>
            An internal ctor that allows for <c>Null</c> nodes for tracking the selection.
            </summary>
            <param name="lifetime"></param>
            <param name="treeControl">The owning tree model view.</param>
            <param name="node">The node to anchor to, or <c>Null</c> to anchor to the selected node.</param>
            <param name="column">The column to determine cell to anchor to, or null to anchor to whole node</param>
            <param name="isNodeNullable">Whether to allow <c>Null</c> in <paramref name="node"/>.</param>
        </member>
        <member name="M:JetBrains.UI.TreeControl.TreeControlNodeAnchoringRect.CreateFromSelectionDynamic(JetBrains.DataFlow.Lifetime,DevExpress.XtraTreeList.TreeList)">
            <summary>
            Creates the instance that tracks the selected node.
            When selection changes, the anchor is updated to track the new selection.
            </summary>
            <param name="lifetime"></param>
            <param name="treeControl">The owning tree model view.</param>
        </member>
        <member name="M:JetBrains.UI.TreeControl.TreeControlNodeAnchoringRect.ClientToScreen(JetBrains.DataFlow.Lifetime,JetBrains.UI.Application.WindowsMessageHookManager)">
            <summary>
            Converts the <see cref="T:JetBrains.UI.TreeControl.TreeControlNodeAnchoringRect"/>, which operates in client coordinates, into a screen-coordinates anchor suitable for layouting popups.
            Nests the current object within a window anchor attached to the tree control.
            </summary>
        </member>
        <member name="M:JetBrains.UI.TreeControl.TreeControlNodeAnchoringRect.UpdateAnchor">
            <summary>
            Updates the anchoring rectangle as it gets dirty.
            </summary>
        </member>
        <member name="P:JetBrains.UI.TreeControl.TreeControlNodeAnchoringRect.DefaultAnchoringDispositions">
            <summary>
            Gets the default dispositions to be used when creating a layouter out of this anchor.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.Controls.UIElementWindowlessControl">
            <summary>
            A jet windowless control to paint an UI Element.
            </summary>
        </member>
        <member name="T:JetBrains.UI.CommonControls.AutomationProvidersRegistry">
            <summary>
            <para>Manages the automation providers, as available for our custom controls.</para>
            <para>Automation provider implementations require referencing the Avalon assemblies, which we cannot do yet.</para>
            <para>When an Avalon-aware DLL is about to query for providers on our controls, it should load the providers DLL and cause them to sign up for this Registry. Subsequently, controls will start returning the providers in response to their <see cref="F:JetBrains.Interop.WinApi.WindowsMessages.WM_GETOBJECT"/>.</para>
            </summary>
            <remarks>
            The default implementation should call into <c>System.Windows.Automation.Provider.AutomationInteropProvider::ReturnRawElementProvider</c>.
            </remarks>
        </member>
        <member name="F:JetBrains.UI.CommonControls.AutomationProvidersRegistry.Items">
            <summary>
            Lists the provider entries. The <see cref="T:System.Type"/> key is the class whose instance is requesting the automation peer. The <see cref="T:System.Func`2"/> takes in an instance of the key <see cref="T:System.Type"/> plus some more things and returns an instance of the automation provider, converted to an LResult (.NET Object -&gt; COM Object -&gt; IDispatch -&gt; LResult), or <c>Null</c> if not available.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.AutomationProvidersRegistry.TryHandleWindowsMessage(System.Object,System.Windows.Forms.Message@)">
            <summary>
            Called from a <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)"/> of a control that would like be supported by an external automation peer, fills in the message result with that peer, if available.
            </summary>
            <param name="owner">The owning object who's handling the windows message. A key to the <see cref="F:JetBrains.UI.CommonControls.AutomationProvidersRegistry.Items"/> and a parameter to its value <see cref="T:System.Func`2"/>.</param>
            <param name="msg">Windows message, as received by <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)"/>.</param>
            <returns>Whether the message has been handled, and the base <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)"/> should not be called.</returns>
        </member>
        <member name="T:JetBrains.UI.CommonControls.AutomationProvidersRegistry.AutomationProviderRequest">
            <summary>
            Parameters to the value func of the <see cref="F:JetBrains.UI.CommonControls.AutomationProvidersRegistry.Items"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.AutomationProvidersRegistry.AutomationProviderRequest.Hwnd">
            <summary>
            Handle to the window represented by the <see cref="F:JetBrains.UI.CommonControls.AutomationProvidersRegistry.AutomationProviderRequest.Owner"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.AutomationProvidersRegistry.AutomationProviderRequest.Owner">
            <summary>
            The owner object, of the type given by the <see cref="T:System.Type"/> key in the <see cref="F:JetBrains.UI.CommonControls.AutomationProvidersRegistry.Items"/> dictionary.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.AutomationProvidersRegistry.AutomationProviderRequest.WParam">
            <summary>
            <c>wParam</c> of the Windows message we're handling. <c>lParam</c> is always <see cref="F:JetBrains.Interop.WinApi.Declarations.Constants.OBJID.OBJID_CLIENT"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.CommonControls.AutomationProvidersRegistry.AutomationProviderRequest.LParam">
            <summary>
            <c>lParam</c>, always <see cref="F:JetBrains.Interop.WinApi.Declarations.Constants.OBJID.OBJID_CLIENT"/>.
            </summary>
        </member>
        <member name="T:JetBrains.UI.CommonControls.Utils.ControlUtil">
            <summary>
            Utils for accessing controls
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.Utils.ControlUtil.GetControlContainingPoint(System.Drawing.Point)">
            <summary>
            Returns control at screenPoint or a control, that contains a window at screenPoint
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.Utils.ControlUtil.CenterInMainWindow(System.Drawing.Size,JetBrains.UI.Application.IMainWindow)">
            <summary>
            Centers the <paramref name="size"/>-sized rectangle over the main window, checks that it falls in screen.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.Utils.ControlUtil.CenterInWindow(System.IntPtr,System.Drawing.Size)">
            <summary>
            Centers the <paramref name="size"/>-sized rectangle over the <paramref name="hwndOwner"/> window, checks that it falls in screen.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.Utils.ControlUtil.FitToScreen(System.Drawing.Rectangle)">
            <summary>
            Ensures the given bounds fall within a screen.
            Prefers to rather move than downsize.
            Chooses the screen that contains most of the initial <paramref name="bounds"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.Utils.ControlUtil.GetControlContainingFocus">
            <summary>
            Returns the control that currently has focus, or <c>Null</c> if either none of our windows has focus, or the focused window is not a control.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.CommonControls.Utils.ControlUtil.GetControl(System.Void*)">
            <summary>
            Returns Control whose handle equals to hwnd passed or containing window with current hwnd
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.Utils.DefaultNodeEqualityRelationship">
            <summary>
            Defines basic equality relationship based on tag equality
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.Utils.IDevExpressTreeState">
            <summary>
            Describes state of a DevExpress TreeList control. Includes things like currently selected nodes,
            expanded nodes and scrolling position
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Utils.IDevExpressTreeState.Apply(DevExpress.XtraTreeList.TreeList)">
            <summary>
            Apply state to a tree list control
            </summary>
        </member>
        <member name="T:JetBrains.UI.CommonControls.GoTransparentOnControlKey">
            <summary>
            Supports the VS behavior for a window to go transparent when the Control modifier key is down.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.GoTransparentOnControlKey.IsCtrlKeyDownNow">
            <summary>
            Polls keyboard for the current state.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.ImagePlacement">
            <summary>
            Specify placement of the image.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.ImagePlacement.LEFT">
            <summary>
            Image is placed to the left of other text.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.ImagePlacement.RIGHT">
            <summary>
            Image is placed to the right of other text.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.LayoutSuspender">
            <summary>
            Suspends the layout of the given control and resumes it automatically when disposed of. [Omea]
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.LayoutSuspender._bLayoutOnResume">
            <summary>
            Whether to apply layout on resume.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.LayoutSuspender._suspended">
            <summary>
            The list of controls to be resumed.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.LayoutSuspender.#ctor(System.Windows.Forms.Control,System.Boolean,System.Boolean)">
            <summary>
            Suspends the layout of the following control and resumes it when disposed of.
            </summary>
            <param name="control">Control to be suspended/resumed. Must not be <c>Null</c>.</param>
            <param name="recursive">Whether to suspend all the child controls also.</param>
            <param name="bLayoutOnResume"><see cref="M:System.Windows.Forms.Control.ResumeLayout(System.Boolean)"/> will be called with <paramref name="bLayoutOnResume"/> as an argument.</param>
        </member>
        <member name="M:JetBrains.UI.Controls.LayoutSuspender.#ctor(System.Windows.Forms.Control)">
            <summary>
            Suspends the layout of the following control and resumes it when disposed of.
            </summary>
            <param name="control">Control to be suspended/resumed. Must not be <c>Null</c>.</param>
        </member>
        <member name="M:JetBrains.UI.Controls.LayoutSuspender.Resume">
            <summary>
            Suspends the <see cref="F:JetBrains.UI.Controls.LayoutSuspender._suspended"/> list.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.LayoutSuspender.Suspend">
            <summary>
            Suspends the <see cref="F:JetBrains.UI.Controls.LayoutSuspender._suspended"/> list.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.LayoutSuspender.Dispose">
            <summary>
            Resumes the control's layout.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItemBlock.#ctor(System.Drawing.Image)">
            <summary>
            Creates an icon-only presentable item.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItemBlock.#ctor(System.Drawing.Image,JetBrains.UI.RichText.RichTextBlock)">
            <summary>
            Creates a presentable item that is a labeled icon, with icon on the left.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItemBlock.#ctor(JetBrains.CommonControls.PresentableItemBlock)">
            <summary>
            Creates a static snapshot of the given presentable item.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.PresentableItemBlockRenderer">
            <summary>
            Utility class to reneder <see cref="T:JetBrains.CommonControls.PresentableItemBlock"/> 
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItemBlockRenderer.Render(System.Drawing.Graphics,JetBrains.CommonControls.PresentableItemBlock,System.Drawing.Rectangle,JetBrains.UI.RenderParams)">
            <summary>
            Renders <see cref="T:JetBrains.CommonControls.PresentableItemBlock"/> object on the specified graphics in the specified bounds.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object to render on.</param>
            <param name="item"><see cref="T:JetBrains.CommonControls.PresentableItemBlock"/> to render.</param>
            <param name="bounds">Bounds to render in.</param>
            <param name="renderparams">Additional information about rendering.</param>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItemBlockRenderer.GetTextBounds(System.Drawing.Graphics,System.Drawing.Rectangle,JetBrains.CommonControls.PresentableItemBlock,JetBrains.UI.RenderParams)">
            <summary>
            Calculates rectangle of the RichText for specified bounds and rendering parameters.
            </summary>
            <param name="g">Graphics to measure against.</param>
            <param name="bounds">Bounds to measure in.</param>
            <param name="item"><see cref="T:JetBrains.CommonControls.PresentableItemBlock"/> to measure.</param>
            <param name="renderparams">Additional information about rendering.</param>
            <returns>Rectangle for the RichText.</returns>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItemBlockRenderer.HitTest(System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Rectangle,JetBrains.CommonControls.PresentableItemBlock,JetBrains.UI.RenderParams,System.Drawing.Rectangle@)">
            <summary>
            Finds subobject of <see cref="T:JetBrains.CommonControls.PresentableItemBlock"/> object in the specified point.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object to test on.</param>
            <param name="bounds">Bounds to test in.</param>
            <param name="item"><see cref="T:JetBrains.CommonControls.PresentableItemBlock"/> to analyze.</param>
            <param name="renderparams">Additional information about rendering.</param>
            <param name="hitPoint">Point to test for.</param>
            <param name="hitRect">Rectangle of the element at the specified location, or <see cref="F:System.Drawing.Rectangle.Empty"/> if no element was found.</param>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItemBlockRenderer.Measure(System.Drawing.Graphics,JetBrains.CommonControls.PresentableItemBlock,JetBrains.UI.RenderParams)">
            <summary>
            Renders <see cref="T:JetBrains.CommonControls.PresentableItemBlock"/> object on the specified graphics in the specified bounds.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object to render on.</param>
            <param name="item"><see cref="T:JetBrains.CommonControls.PresentableItemBlock"/> to render.</param>
            <param name="renderParams">Additional information about rendering.</param>
        </member>
        <member name="T:JetBrains.CommonControls.PresentableItemRenderer">
            <summary>
            Utility class to reneder <see cref="T:JetBrains.CommonControls.IPresentableItem"/> 
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItemRenderer.Render(System.Drawing.Graphics,JetBrains.CommonControls.IPresentableItem,System.Drawing.Rectangle,JetBrains.UI.RenderParams)">
            <summary>
            Renders <see cref="T:JetBrains.CommonControls.IPresentableItem"/> object on the specified graphics in the specified bounds.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object to render on.</param>
            <param name="item"><see cref="T:JetBrains.CommonControls.IPresentableItem"/> to render.</param>
            <param name="bounds">Bounds to render in.</param>
            <param name="renderparams">Additional information about rendering.</param>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItemRenderer.GetTextBounds(System.Drawing.Graphics,System.Drawing.Rectangle,JetBrains.CommonControls.IPresentableItem,JetBrains.UI.RenderParams)">
            <summary>
            Calculates rectangle of the RichText for specified bounds and rendering parameters.
            </summary>
            <param name="g">Graphics to measure against.</param>
            <param name="bounds">Bounds to measure in.</param>
            <param name="item"><see cref="T:JetBrains.CommonControls.IPresentableItem"/> to measure.</param>
            <param name="renderparams">Additional information about rendering.</param>
            <returns>Rectangle for the RichText.</returns>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItemRenderer.HitTest(System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Rectangle,JetBrains.CommonControls.IPresentableItem,JetBrains.UI.RenderParams,System.Drawing.Rectangle@)">
            <summary>
            Finds subobject of <see cref="T:JetBrains.CommonControls.IPresentableItem"/> object at the specified point.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object to test on.</param>
            <param name="bounds">Bounds to test in.</param>
            <param name="item"><see cref="T:JetBrains.CommonControls.IPresentableItem"/> to analyze.</param>
            <param name="renderparams">Additional information about rendering.</param>
            <param name="hitPoint">Point to test for.</param>
            <param name="elementRect">Rectangle of the element at the specified location, or <see cref="F:System.Drawing.Rectangle.Empty"/> if no element was found.</param>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItemRenderer.Measure(System.Drawing.Graphics,JetBrains.CommonControls.IPresentableItem,JetBrains.UI.RenderParams)">
            <summary>
            Measures <see cref="T:JetBrains.CommonControls.IPresentableItem"/> object on the specified graphics 
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object to measure on.</param>
            <param name="item"><see cref="T:JetBrains.CommonControls.IPresentableItem"/> to measure.</param>
            <param name="renderParams">Additional information about measuring.</param>
            <returns>Size of the item</returns>
        </member>
        <member name="M:JetBrains.CommonControls.VsFlatColorTable.GetAlphaBlendedColor(System.Drawing.Graphics,System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
            Blends two colors.
            </summary>
            <param name="g">Device context to get the nearest color from. May be <c>Null</c>, in which case the exact color is returned.</param>
            <param name="src">The first color.</param>
            <param name="dest">The second color.</param>
            <param name="alpha">The alpha value in the [0…FF] range.</param>
            <returns>The blended color, constrained to the device context or not.</returns>
        </member>
        <member name="M:JetBrains.CommonControls.VsSpecialColorTable.GetAlphaBlendedColor(System.Drawing.Graphics,System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
            Blends two colors.
            </summary>
            <param name="g">Device context to get the nearest color from. May be <c>Null</c>, in which case the exact color is returned.</param>
            <param name="src">The first color.</param>
            <param name="dest">The second color.</param>
            <param name="alpha">The alpha value in the [0…FF] range.</param>
            <returns>The blended color, constrained to the device context or not.</returns>
        </member>
        <member name="T:JetBrains.CommonControls.WindowlessControl">
            <summary>
            Helper class for various <see cref="T:JetBrains.CommonControls.IWindowlessControl"/> implementations.
            Mostly, dispatches the creation of various windowless controls for optimal performance.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CrossFramework.AvalonBitmapInterop.RenderGdipIntoAvalonImage(System.Windows.Size,JetBrains.UI.CrossFramework.AvalonBitmapInterop.AlphaChannel,System.Action{System.Drawing.Graphics})">
            <summary>
            Creates a <see cref="T:System.Drawing.Graphics">GDI+ Graphics</see> to render into, and returns the rendering result in a form of an <see cref="T:System.Windows.Media.ImageSource">Avalon image</see>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CrossFramework.AvalonBitmapInterop.RenderGdipIntoAvalonImage_GdiBitmap_DIBitmap(System.Windows.Size,JetBrains.UI.CrossFramework.AvalonBitmapInterop.AlphaChannel,System.Action{System.Drawing.Graphics})">
            <summary>
            Creates a <see cref="T:System.Drawing.Graphics">GDI+ Graphics</see> to render into, and returns the rendering result in a form of an <see cref="T:System.Windows.Media.ImageSource">Avalon image</see>.
            </summary>
            <remarks>Thought it could re-use the bits of <see cref="T:System.Windows.Media.Imaging.WriteableBitmap"/>, but seems like it's not the way it works.</remarks>
        </member>
        <member name="M:JetBrains.UI.CrossFramework.AvalonBitmapInterop.RenderGdipIntoAvalonImage_GdipBitmap(System.Windows.Size,JetBrains.UI.CrossFramework.AvalonBitmapInterop.AlphaChannel,System.Action{System.Drawing.Graphics})">
            <summary>
            Creates a <see cref="T:System.Drawing.Graphics">GDI+ Graphics</see> to render into, and returns the rendering result in a form of an <see cref="T:System.Windows.Media.ImageSource">Avalon image</see>.
            </summary>
            <remarks>Creates a byte buffer, a GDI+ bitmap right on these bytes, and then an Avalon image off these bytes. Could be easily turned into a <see cref="T:System.Windows.Media.Imaging.WriteableBitmap"/> to reuse its bytes on subsequent renders of the same size, but in this method if a GDI DC is created off the GDIP DC, then any transparency functions would fail (cannot get the back color it seems), like ClearType or even rectangles with alpha. So we cannot use it as a main method, and thus no use optimizing into a <see cref="T:System.Windows.Media.Imaging.WriteableBitmap"/>.</remarks>
        </member>
        <member name="M:JetBrains.UI.CrossFramework.AvalonBitmapInterop.RenderGdipIntoAvalonImage_GdiBitmap_DIBSection(System.Windows.Size,JetBrains.UI.CrossFramework.AvalonBitmapInterop.AlphaChannel,System.Action{System.Drawing.Graphics})">
            <summary>
            Creates a <see cref="T:System.Drawing.Graphics">GDI+ Graphics</see> to render into, and returns the rendering result in a form of an <see cref="T:System.Windows.Media.ImageSource">Avalon image</see>.
            </summary>
            <remarks>Creates a GDI bitmap, HDC on it, Graphics on that, and uses the GDI bitmap bytes to create an Avalon image off those. Not quite compatible with <see cref="T:System.Windows.Media.Imaging.WriteableBitmap"/> because the bits are created by <see cref="M:JetBrains.Interop.WinApi.Gdi32Dll.CreateDIBSection(System.Void*,JetBrains.Interop.WinApi.Declarations.Structures.BITMAPINFO*,System.UInt32,System.Void**,System.Void*,System.Int32)"/> anew each time.</remarks>
        </member>
        <member name="T:JetBrains.UI.CrossFramework.GdipWritableAvalonBitmap">
            <summary>
            Allows to render with GDIP into an Avalon device context.
            Bitmap source object reused on renders, recreated when size changes (with optional optimizations).
            Created (and gets size) on first <see cref="M:JetBrains.UI.CrossFramework.GdipWritableAvalonBitmap.PaintGdip(System.Windows.Size,System.Action{System.Drawing.Graphics})"/>, any <see cref="M:JetBrains.UI.CrossFramework.GdipWritableAvalonBitmap.Render(System.Windows.Media.DrawingContext,System.Windows.Rect)"/> calls before that are silently ignored.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CrossFramework.GdipWritableAvalonBitmap.myBitmap">
            <summary>
            Avalon bitmap source: reused on renders, recreated when size changes.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CrossFramework.GdipWritableAvalonBitmap.myLogicalSize">
            <summary>
            The size, as set by the user, as painted, as visible on screen on render.
            The bitmap might be larger to optimize for resizes (see <see cref="F:JetBrains.UI.CrossFramework.GdipWritableAvalonBitmap.myResizePolicy"/>).
            </summary>
        </member>
        <member name="M:JetBrains.UI.CrossFramework.GdipWritableAvalonBitmap.PaintGdip(System.Windows.Size,System.Action{System.Drawing.Graphics})">
            <summary>
            Does GDI+ rendering into this bitmap.
            </summary>
            <param name="sizeNew">The new size of the bitmap (or the old one, in which case the bitmap will remain intact).</param>
            <param name="FRender">Painter.</param>
        </member>
        <member name="M:JetBrains.UI.CrossFramework.GdipWritableAvalonBitmap.Render(System.Windows.Media.DrawingContext,System.Windows.Rect)">
            <summary>
            Renders the bitmap onto the given DC.
            Only the logical-size-part is painted, any lazy-sized regions outside the logical size are clipped out.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CrossFramework.GdipWritableAvalonBitmap.ChooseBitmapSizeByPolicy_LazyDim(System.Double,System.Double)">
            <summary>
            Chooses each dim of the lazy preferred size.
            When less than screen, round up to the nearest power of 2. When larger, round up to the nearest screen.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CrossFramework.GdipWritableAvalonBitmap.ChooseBitmapSizeByPolicy(System.Windows.Size)">
            <summary>
            In lazy mode, we do not want to respawn the bitmap each time we're growing it gradually (eg resizing the window).
            Snap sizes to some common values in lazy mode.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CrossFramework.GdipWritableAvalonBitmap.RecreateBitmap(System.Windows.Size)">
            <summary>
            Create new writable bitmap of the given size.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CrossFramework.GdipWritableAvalonBitmap.ResizePolicy.Exact">
            <summary>
            Bitmap is always of the required size, exactly. Reallocated on each resize.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CrossFramework.GdipWritableAvalonBitmap.ResizePolicy.Lazy">
            <summary>
            Old bitmap is reused if the new size is smaller.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.Interop.RichTextEx">
            <summary>
            Extension methods for <see cref="N:JetBrains.UI.RichText"/>.
            </summary>
        </member>
        <member name="T:JetBrains.UI.CrossFramework.WindowsFormsIntegration">
            <summary>
            Carries out the internal members out of the <c>WindowsFormsIntegration</c> DLL, and some more.
            Bridges the Avalon and WinForms worlds.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CrossFramework.WindowsFormsIntegration.SetFontA``1(``0,System.Drawing.Font)">
            <summary>
            Tears apart a WinForms <see cref="T:System.Drawing.Font"/> and applies it to an Avalon element.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CrossFramework.WindowsFormsIntegration.SetFontB``1(``0,System.Drawing.Font,System.Boolean)">
            <summary>
            Tears apart a WinForms <see cref="T:System.Drawing.Font"/> and applies it to an Avalon element.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CrossFramework.WindowsFormsIntegration.SetFontC``1(``0,System.Drawing.Font,System.Boolean)">
            <summary>
            Tears apart a WinForms <see cref="T:System.Drawing.Font"/> and applies it to an Avalon element.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CrossFramework.WindowsFormsIntegration.AvalonLengthToWinFormsLength(System.Double)">
            <summary>
            Turns a double length into an int, coercing NaN and Inf values.
            </summary>
        </member>
        <member name="F:JetBrains.UI.DataConstants.CloseAllItems">
            <summary>
            The “Close All” family actions are available here.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.DataContext.FindAvalonDataRules.FindDataRulesInElement(System.Windows.IInputElement)">
            <summary>
            Queries elements for context by bubbling an event.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.DataContext.GetDataRulesEventArgs">
            <summary>
            Arguments to the <see cref="F:JetBrains.UI.Avalon.DataContext.GetDataRulesEventArgs.GetDataRulesEvent"/> routed event.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.DataContext.GetDataRulesEventArgs.GetDataRulesEvent">
            <summary>
            Fires when the a <see cref="T:JetBrains.Application.DataContext.IDataContext">Data Context</see> is about to be created and looks for <see cref="T:JetBrains.Application.DataContext.IDataRule"/>s on Avalon UI elements to query for data.
            This event will fire when you call <see cref="T:JetBrains.Application.DataContext.IFindDataRules"/> interface members on <see cref="P:JetBrains.ActionManagement.IActionManager.DataContexts"/>, or the <see cref="M:JetBrains.Application.DataContext.DataContexts.CreateOnActiveControl(JetBrains.DataFlow.Lifetime,System.Collections.Generic.IEnumerable{JetBrains.Application.DataContext.IDataRule})"/> method and its siblings.
            When you sink the event, add your data rules to the <see cref="F:JetBrains.UI.Avalon.DataContext.GetDataRulesEventArgs.DataRules"/> list. Do not set <see cref="P:System.Windows.RoutedEventArgs.Handled"/> to <c>True</c> so that the event could bubble up and collect all of the data providers in the UI tree. Add your data rules to the end, which will make sure the deepest controls take precedence with their most concrete data (unless data rule priority is specifically overridden).
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.DataContext.GetDataRulesEventArgs.DataRules">
            <summary>
            Add your data rules to the end of this collection. See <see cref="F:JetBrains.UI.Avalon.DataContext.GetDataRulesEventArgs.GetDataRulesEvent"/> documentation for details.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.DataContext.GetDataRulesEventArgs.GetDataRulesEventHandler">
            <summary>
            Delegate type for the <see cref="F:JetBrains.UI.Avalon.DataContext.GetDataRulesEventArgs.GetDataRulesEvent"/> routed event.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupWindowManager.PopupWindowContextSource">
            <summary>
            A popup window context that can be created on demand.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupWindowContextSource.Create(JetBrains.DataFlow.Lifetime)">
            <summary>
            Creates the popup window context.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.ExceptionReport.ExceptionNotifierPopupWindow.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            
            </summary>
            
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data. </param>
        </member>
        <member name="T:JetBrains.Application.ExceptionReport.MessageBoxExceptionReportService">
            <summary>
            When the Issue Tracker is not available in a UI application, shows exceptions in message boxes.
            This is also the case on early startup or when the <see cref="T:JetBrains.Application.IApplicationDescriptor"/> could not be obtained.
            </summary>
        </member>
        <member name="F:JetBrains.Application.ExceptionReport.MessageBoxExceptionReportService.mySingleMessageBox">
            <summary>
            Do not show more than one msgbox at a time.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ExceptionReport.MessageBoxExceptionReportService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="M:JetBrains.Application.ExceptionReport.MessageBoxExceptionReportService.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
            <param name="sProductName">Product name, if known at the call site. If <c>Null</c>, <see cref="F:JetBrains.Application.Defines.ProductName"/> will be used.</param>
        </member>
        <member name="M:JetBrains.Application.ExceptionReport.MessageBoxExceptionReportService.ShowException(System.Exception,System.String)">
            <summary>
            Shows an exception message box.
            Prevents two from being shown simultaneousely.
            </summary>
            <param name="exception">The exception whose details are to be shown.</param>
            <param name="sProductName">Product name, if known at the call site. If <c>Null</c>, <see cref="F:JetBrains.Application.Defines.ProductName"/> will be used.</param>
        </member>
        <member name="T:JetBrains.Application.ExceptionReport.StdErrExceptionReportService">
            <summary>
            In dependent console applications, emits their logged exceptions to StdOut/StdErr.
            It could then be captured and procezsed by the parent process (which has means for submitting them to the tracker, for instance).
            </summary>
        </member>
        <member name="M:JetBrains.Application.ExceptionReport.StdErrExceptionReportService.#ctor(JetBrains.Application.ExceptionReport.StdErrExceptionReportService.DetailsLevel,JetBrains.Application.ExceptionReport.StdErrExceptionReportService.DetailsLevel,System.String)">
            <param name="levelStdErr">What to write to StdErr, if at all.</param>
            <param name="levelStdOut">What to write to StdOut, if at all.</param>
            <param name="sPrefixOnMessage">Optional. When writing at the <see cref="F:JetBrains.Application.ExceptionReport.StdErrExceptionReportService.DetailsLevel.Message"/> level, prepends this prefix first.</param>
        </member>
        <member name="T:JetBrains.Application.ExceptionReport.StdErrExceptionReportService.DetailsLevel">
            <summary>
            What to emit into each stream on an exception.
            </summary>
        </member>
        <member name="F:JetBrains.Application.ExceptionReport.StdErrExceptionReportService.DetailsLevel.None">
            <summary>
            Do not write to the stream.
            </summary>
        </member>
        <member name="F:JetBrains.Application.ExceptionReport.StdErrExceptionReportService.DetailsLevel.Message">
            <summary>
            Write <see cref="F:JetBrains.Util.ExceptionText.Message"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Application.ExceptionReport.StdErrExceptionReportService.DetailsLevel.FullText">
            <summary>
            Write <see cref="F:JetBrains.Util.ExceptionText.FullText"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.ExceptionReport.SubmitterProgressWindow.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.ExceptionReport.SubmitterProgressWindow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.UI.Application.ExceptionReport.SubmitterProgressWindow.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.ExceptionReport.TrackerLoginForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.ExceptionReport.TrackerLoginForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.UI.Application.ExceptionReport.TrackerLoginForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:JetBrains.Application.ExceptionReport.SubmitToTrackerExceptionReportService.LoginInformation">
            <summary>
            When Shell is running, its component binds this to the Setting Store.
            Otherwise work isolated, ask every time.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Application.ExceptionReport.SubmitToTrackerExceptionReportServiceComponent">
            <summary>
            When <see cref="T:JetBrains.Application.PlatformObsoleteStatics"/> is running, takes over Exception Reporting to provide smart behavior: show popup exception notifier, store exceptions, submit the whole list.
            </summary>  
        </member>
        <member name="T:JetBrains.UI.Avalon.AvalonEx">
            <summary>
            Extension methods for Avalon.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.AddChild``1(``0,System.Windows.UIElement)">
            <summary>
            Adds a new child to the panel control.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.AddColumnChild(System.Windows.Controls.Grid,System.String,System.Windows.UIElement)">
            <summary>
            Adds a new column to the grid, placing a child in the newly-added column.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.AddRowChild(System.Windows.Controls.Grid,System.String,System.Windows.UIElement)">
            <summary>
            Adds a new row to the grid, placing a child in the newly-added row.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.Append(System.Windows.Controls.TextBlock,System.String)">
            <summary>
            Adds one more <see cref="T:System.Windows.Documents.Run"/> to the <see cref="T:System.Windows.Controls.TextBlock"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.Append(System.Windows.Documents.Span,System.String)">
            <summary>
            Adds one more <see cref="T:System.Windows.Documents.Run"/> to the <see cref="T:System.Windows.Documents.Span"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.Append(System.Windows.Documents.Span,System.Windows.Documents.Inline)">
            <summary>
            Adds one more <see cref="T:System.Windows.Documents.Inline"/> to the <see cref="T:System.Windows.Documents.Span"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.Append(System.Windows.Controls.TextBlock,System.String,System.Windows.FontStyle)">
            <summary>
            Adds one more <see cref="T:System.Windows.Documents.Run"/> to the <see cref="T:System.Windows.Controls.TextBlock"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.Append(System.Windows.Controls.TextBlock,System.String,System.Windows.FontWeight)">
            <summary>
            Adds one more <see cref="T:System.Windows.Documents.Run"/> to the <see cref="T:System.Windows.Controls.TextBlock"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.Append(System.Windows.Controls.TextBlock,System.Windows.Documents.Run)">
            <summary>
            Adds one more <see cref="T:System.Windows.Documents.Run"/> to the <see cref="T:System.Windows.Controls.TextBlock"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.Append(System.Windows.Controls.TextBlock,System.Windows.Documents.Inline)">
            <summary>
            Adds one more <see cref="T:System.Windows.Documents.Inline"/> to the <see cref="T:System.Windows.Controls.TextBlock"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.Append(System.Windows.Controls.TextBlock,System.String,System.Windows.FontStyle,System.Windows.FontWeight)">
            <summary>
            Adds one more <see cref="T:System.Windows.Documents.Run"/> to the <see cref="T:System.Windows.Controls.TextBlock"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.Append(System.Windows.Documents.Span,System.String,System.Windows.FontStyle,System.Windows.FontWeight)">
            <summary>
            Adds one more <see cref="T:System.Windows.Documents.Run"/> to the <see cref="T:System.Windows.Documents.Span"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.Append(System.Windows.Documents.Paragraph,System.String)">
            <summary>
            Adds one more <see cref="T:System.Windows.Documents.Run"/> to the <see cref="T:System.Windows.Documents.Paragraph"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.Append(System.Windows.Documents.Paragraph,System.String,System.Windows.FontStyle,System.Windows.FontWeight)">
            <summary>
            Adds one more <see cref="T:System.Windows.Documents.Run"/> to the <see cref="T:System.Windows.Documents.Paragraph"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.AppendLine(System.Windows.Documents.Span)">
            <summary>
            Adds a line break to the <see cref="T:System.Windows.Documents.Span"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.Bind``1(``0,System.Windows.DependencyProperty,System.String)">
            <summary>
            Establishes a two-way property binding on the element.
            The “Update Source” is triggered according to the default scenario (ie on focus loss for an edit box).
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.Bind``1(``0,System.Windows.DependencyProperty,System.Windows.Data.BindingBase)">
            <summary>
            Establishes a two-way property binding on the element.
            The “Update Source” is triggered according to the default scenario (ie on focus loss for an edit box).
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.BindOnChange``1(``0,System.Windows.DependencyProperty,System.String)">
            <summary>
            Establishes a two-way property binding on the element.
            The “Update Source” is triggered immediately when the property changes (ie on typing for an edit box).
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.Cols(System.Windows.Controls.Grid,System.String[])">
            <summary>
            Adds columns to the grid. Each sizes element is a Star grid-length value.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.ConvertBoolToVisibility(System.Boolean)">
            <summary>
            A converter.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.Dock``1(``0,System.Windows.Controls.Dock)">
            <summary>
            Sets the <see cref="F:System.Windows.Controls.DockPanel.DockProperty"/> extension property on the specified UI element.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.InGrid``1(``0,System.Int32,System.Int32)">
            <summary>
            Sets the <see cref="F:System.Windows.Controls.Grid.ColumnProperty"/> and <see cref="F:System.Windows.Controls.Grid.RowProperty"/> extension properties on the specified UI element.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.InGrid``1(``0,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the <see cref="F:System.Windows.Controls.Grid.ColumnProperty"/> and <see cref="F:System.Windows.Controls.Grid.RowProperty"/> extension properties on the specified UI element.
            In addition, specifies the <see cref="F:System.Windows.Controls.Grid.ColumnSpanProperty"/> and <see cref="F:System.Windows.Controls.Grid.RowSpanProperty"/> extension properties.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.MakeGeometryBrush(System.Windows.Media.Geometry,System.Windows.Media.SolidColorBrush,System.Windows.Media.Pen)">
            <summary>
            For a geometry, creates a brush that could be used to paint a rectangle with a geometry.
            The geometry spans the whole brush area.
            The coordinate space of the geometry is assumed to be (0,0)-(1000,1000).
            It would have been better to have (0,0)-(1,1), but some of the Avalon geometry clippers revert to rough edges on sizes less than one.
            </summary>
            <param name="geometry">The Geometry.</param>
            <param name="brush">Brush. Optional.</param>
            <param name="pen">Pen (brush + thinkness). Optional.</param>
            <returns>The brush that paints the geometry.</returns>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.MixWith(System.Windows.Media.Color,System.Windows.Media.Color,System.Single)">
            <summary>
            Mixes two colors together.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.RGB(System.Windows.Media.Color)">
            <summary>
            Converts color to rgb32 format
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.ToWinForms(System.Windows.Media.Color)">
            <summary>
            WPF to WinForms
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.ToWPF(System.Drawing.Color)">
            <summary>
            WinForms to WPF
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.Name``1(``0,System.Windows.FrameworkElement,System.String)">
            <summary>
            Registers a name for the object in the host's name scope.
            The name scope must first be registered for the host or one of its parents.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.OnEvent``1(``0,System.Windows.RoutedEvent,System.Windows.RoutedEventHandler)">
            <summary>
            Sinks the specified <paramref name="event"/> on the <paramref name="element"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.OnEvent``1(``0,System.Windows.RoutedEvent,System.Action)">
            <summary>
            Sinks the specified <paramref name="event"/> on the <paramref name="element"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.OnEventC``1(``0,System.Windows.RoutedEvent,System.Windows.RoutedEventHandler)">
            <summary>
            Sinks the specified <paramref name="event"/> on the <paramref name="element"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.RectFromScreen(System.Windows.Media.Visual,System.Windows.Rect)">
            <summary>
            Like <see cref="M:System.Windows.Media.Visual.PointFromScreen(System.Windows.Point)"/>, but for a <see cref="T:System.Windows.Rect"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.RectToScreen(System.Windows.Media.Visual,System.Windows.Rect)">
            <summary>
            Like <see cref="M:System.Windows.Media.Visual.PointToScreen(System.Windows.Point)"/>, but for a <see cref="T:System.Windows.Rect"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.Rows(System.Windows.Controls.Grid,System.String[])">
            <summary>
            Adds rows to the grid. Each sizes element is a Star grid-length value.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.Scale``1(``0,System.Double)">
            <summary>
            Applies a scale layout transformation to the element.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.Set``1(``0,System.Windows.DependencyProperty,System.Object)">
            <summary>
            Sets a dependency property on a dependency object, allows to pipe such settings.
            Especially useful for setting extension properties.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.SetDialogFont``1(``0)">
            <summary>
            Applies dialog font to a control.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.SetEditorFont``1(``0)">
            <summary>
            Applies editor font to a control.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.SetEditorFontC``1(``0)">
            <summary>
            Applies editor font to a control.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.SetEditorFont(System.Windows.Documents.FlowDocument)">
            <summary>
            Applies editor font to a control.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.SetDialogFont(System.Windows.Documents.FlowDocument)">
            <summary>
            Applies dialog font to a control.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.SetSystemFont(System.Windows.Documents.FlowDocument)">
            <summary>
            By default, a document has some large serif font applied.
            Makes the document follow the system font family and sizes.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.WhenLoaded(System.Windows.FrameworkElement,System.Action{JetBrains.DataFlow.Lifetime})">
            <summary>
            <para>Creates a lifetime each time the control gets loaded into the tree of loaded elements.</para>
            <para>This emulates a deterministic lifetime for WPF elements.</para>
            <para>This overload does not take an outer lifetime and is suitable for use in purely-view controls that do not know any external lifetime.</para>
            <para>Note that it's not technically guaranteed that the lifetime is ever terminated.</para>
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.WhenLoaded(System.Windows.FrameworkElement,JetBrains.DataFlow.Lifetime,System.Action{JetBrains.DataFlow.Lifetime})">
            <summary>
            <para>Creates a lifetime each time the control gets loaded into the tree of loaded elements.</para>
            <para>This emulates a deterministic lifetime for WPF elements.</para>
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonEx.FlowIntoVisibility(JetBrains.DataFlow.IProperty{System.Boolean},JetBrains.DataFlow.Lifetime,System.Windows.UIElement)">
            <summary>
            When the boolean property is <c>True</c>, the target element is made visible; otherwise, it's hidden and collapsed.
            Usage: <c>isVisibleBoolProp.FlowIntoVisibility(control);</c>.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.AvalonTemplates">
            <summary>
            Whenever an Avalon template is required, allows to supply a delegate to produce the object graph in runtime instead.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonTemplates.CreateControlTemplate(System.Func{System.Windows.UIElement})">
            <summary>
            Whenever an Avalon template is required, allows to supply a delegate to produce the object graph in runtime instead.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonTemplates.CreateDataTemplate(System.Func{System.Windows.UIElement})">
            <summary>
            Whenever an Avalon template is required, allows to supply a delegate to produce the object graph in runtime instead.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonTemplates.SetTemplate``1(``0,System.Func{System.Windows.UIElement})">
            <summary>
            A fluent method for setting up a template to be populated with a delegate.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.AvalonTreeHelpers">
            <summary>
            Helps with navigating Avalon trees.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.AvalonTreeHelpers.AddAvalonTreeData">
            <summary>
            Traverses logical and visual trees to the root and reports object types to the exception data, root to given element.
            </summary>
            <remarks>A delegate to enable <see cref="M:JetBrains.Util.FEx.BetaY``2(System.Action{``0,``1},``1)"/>.</remarks>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonTreeHelpers.GetLogicalDescendantsBreadthFirst(System.Windows.DependencyObject)">
            <summary>
            Does BFS on logical children.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.AvalonTreeHelpers.GetVisualDescendantsBreadthFirst(System.Windows.DependencyObject)">
            <summary>
            Does BFS on visual children.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Extensions.CreateOrReuseWindow">
            <summary>
            Allows to show popup UI when the user clicks a button. Shows the old window if not closed yet, or creates a new one if not shown yet or already closed.
            </summary>
            <remarks>
            Usually, in Avalon, the window would be created initially, and show-hidden on user actions without actually destroying and recreating it. In our case there're usually complex bindings running in the window, so we would not like them to be running in the hidden mode.
            </remarks>
        </member>
        <member name="M:JetBrains.UI.Extensions.CreateOrReuseWindow.#ctor(JetBrains.DataFlow.Lifetime,System.Windows.Forms.IWin32Window,System.Action{JetBrains.DataFlow.Lifetime,System.Windows.Window})">
            <summary>
            Allows to show popup UI when the user clicks a button. Shows the old window if not closed yet, or creates a new one if not shown yet or already closed.
            </summary>
            <param name="lifetime">Limiting lifetime of the window.</param>
            <param name="owner">Owner window.</param>
            <param name="FCreateNew">This function will be called to fill in the given window whenever a new one needs to be created.</param>
        </member>
        <member name="M:JetBrains.UI.Extensions.CreateOrReuseWindow.Show">
            <summary>
            Focuses the running window, or creates and shows the new one if already created and still not closed.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.DataTemplateDelegate">
            <summary>
            Supports a data template that executes some code to create the object graph.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.DataTemplateDelegate.#ctor(System.Func{System.Windows.UIElement})">
            <summary>
            Creates a Data Template that produces the object graph at runtime.
            </summary>
            <param name="funcObjectGraphCreator">The function to create the object graph.</param>
        </member>
        <member name="T:JetBrains.UI.Avalon.DataTemplateSwitchSelector">
            <summary>
            Chooses a data template based on the type of the item.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.DataTemplateSwitchSelector.Add``1(System.Windows.DataTemplate)">
            <summary>
            Registers a <paramref name="template">data template</paramref> to be returned for the objects of the given <typeparamref name="TType"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.DataTemplateSwitchSelector.Add(System.Type,System.Windows.DataTemplate)">
            <summary>
            Registers a <paramref name="template">data template</paramref> to be returned for the objects of the given <paramref name="type"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.DispatcherEx.AssertAccess(System.Windows.Threading.Dispatcher)">
            <summary>
            Throws if the current thread is not the thread associated with this dispatcher.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.DispatcherEx.BeginOrInvoke(System.Windows.Threading.Dispatcher,System.Action)">
            <summary>
            If the current thread is the dispatcher's home thread, executes the action synchronously.
            Otherwise, marshals asynchronous execution to the dispatcher thread.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.DispatcherEx.BeginInvoke(System.Windows.Threading.Dispatcher,System.Action)">
            <summary>
            Wraps the standard <see cref="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])"/> with a simple action executor.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.Helpers">
            <summary>
            Avalon-related helper routines.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Helpers.Glassify(System.Windows.Window,System.Boolean,JetBrains.UI.Avalon.Helpers.NoWindowHandleAction)">
            <summary>
            Applies the aeroglass effect to the whole window, if possible.
            Returns whether the effect is supported in the current environment and was applied successfully.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Helpers.Glassify(System.IntPtr,System.Boolean)">
            <summary>
            Applies the aeroglass effect to the whole window, if possible.
            Returns whether the effect is supported in the current environment and was applied successfully.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.Helpers.NoWindowHandleAction">
            <summary>
            What to do if the window has no handle.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.HwndSourceEx">
            <summary>
            Things related to treating Avalon UI elements as Windows desktop citizens, in which case they end up being hosted in an <see cref="T:System.Windows.Interop.HwndSource"/> of some kind, we can track their screen pixel position, etc.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.HwndSourceEx.GetElementBoundsInScreenPixels(System.Windows.UIElement)">
            <summary>
            For an UI Element hosted in an HWND render target, gets its pixel bounds on screen.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.HwndSourceEx.GetElementBoundsInWindowPixels(System.Windows.UIElement)">
            <summary>
            For an UI Element hosted in an HWND render target, gets its pixel bounds within the HWND.
            The pixels are window-relative, but nonclient (ie are based on the window bounds not on the client area).
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.HwndSourceEx.GetHwndSourceLive(JetBrains.DataFlow.Lifetime,System.Windows.UIElement)">
            <summary>
            Tracks the HWND presentation source the element is placed onto.
            This defines which HWND the element ends up hosted in.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.MultiValueConverter">
            <summary>
            A factory for <see cref="T:JetBrains.UI.Avalon.MultiValueConverter"/>, the universal Avalon Value Converter.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.MultiValueConverter.System#Windows#Data#IMultiValueConverter#Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts source values to a value for the binding target. The data binding engine calls this method when it propagates the values from source bindings to the binding target.
            </summary>
            <returns>
            A converted value.If the method returns null, the valid null value is used.A return value of <see cref="T:System.Windows.DependencyProperty" />.<see cref="F:System.Windows.DependencyProperty.UnsetValue" /> indicates that the converter did not produce a value, and that the binding will use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue" /> if it is available, or else will use the default value.A return value of <see cref="T:System.Windows.Data.Binding" />.<see cref="F:System.Windows.Data.Binding.DoNothing" /> indicates that the binding does not transfer the value or use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue" /> or the default value.
            </returns>
            <param name="values">The array of values that the source bindings in the <see cref="T:System.Windows.Data.MultiBinding" /> produces. The value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> indicates that the source binding has no value to provide for conversion.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.MultiValueConverter.System#Windows#Data#IMultiValueConverter#ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a binding target value to the source binding values.
            </summary>
            <returns>
            An array of values that have been converted from the target value back to the source values.
            </returns>
            <param name="value">The value that the binding target produces.</param>
            <param name="targetTypes">The array of types to convert to. The array length indicates the number and types of values that are suggested for the method to return.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.RectEx.GetCenter(System.Windows.Rect)">
            <summary>
            Gets a point that is the center of the rectangle.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.SizeEx">
            <summary>
            Ext for <see cref="T:System.Windows.Size"/>.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.TemplateBorder">
            <summary>
            A border-derived control that supports runtime delegate-based data templates.
            On creation, exeutes the supplied code to build the nested objects.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.TemplateBorder.ApplyObjectGraphCreatorProperty(System.Func{System.Windows.UIElement})">
            <summary>
            Creates the new object graph whenever <see cref="F:JetBrains.UI.Avalon.TemplateBorder.ObjectGraphCreatorProperty"/> changes its value.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.ThicknessEx.ToTotalSize(System.Windows.Thickness)">
            <summary>
            Sums up total thickness along each axis.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.ValueConverter`2">
            <summary>
            The universal Avalon Value Converter.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.ValueConverter`2.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. The data binding engine calls this method when it propagates a value from the binding source to the binding target.
            </summary>
            
            <returns>
            A converted value.If the method returns null, the valid null value is used.A return value of <see cref="T:System.Windows.DependencyProperty"></see>.<see cref="F:System.Windows.DependencyProperty.UnsetValue"></see> indicates that the converter produced no value and that the binding uses the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"></see>, if available, or the default value instead.A return value of <see cref="T:System.Windows.Data.Binding"></see>.<see cref="F:System.Windows.Data.Binding.DoNothing"></see> indicates that the binding does not transfer the value or use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"></see> or default value.
            </returns>
            
            <param name="culture">The culture to use in the converter.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="value">The value produced by the binding source.</param>
        </member>
        <member name="M:JetBrains.UI.Avalon.ValueConverter`2.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. The data binding engine calls this method when it propagates a value from the binding target to the binding source.
            </summary>
            
            <returns>
            A converted value.If the method returns null, the valid null value is used.A return value of <see cref="T:System.Windows.DependencyProperty"></see>.<see cref="F:System.Windows.DependencyProperty.UnsetValue"></see> indicates that the converter produced no value and that to the binding uses the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"></see>, if available, or the default value instead.A return value of <see cref="T:System.Windows.Data.Binding"></see>.<see cref="F:System.Windows.Data.Binding.DoNothing"></see> indicates that the binding does not transfer the value or use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue"></see> or default value.
            </returns>
            
            <param name="culture">The culture to use in the converter.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="value">The value that is produced by the binding target.</param>
        </member>
        <member name="T:JetBrains.UI.Avalon.ValueConverter">
            <summary>
            A factory for <see cref="T:JetBrains.UI.Avalon.ValueConverter`2"/>, the universal Avalon Value Converter.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.WindowUtil.LoadChildDialogPosition(System.Drawing.Rectangle,System.Windows.Forms.Form,JetBrains.UI.Application.IMainWindow)">
            <summary>
            Loads the child dialog position from the persisted settings, and applies it to the form.
            The position is stored in a relative form, against the center of the main window.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.WindowUtil.PushDisableWindowsButOne(JetBrains.DataFlow.Lifetime,System.IntPtr)">
            <summary>
            To enter a modal state for the given window, disables all of the other top-level windows on the same thread, plus the window owner.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.WindowUtil.PushFocusedWindowState(JetBrains.DataFlow.Lifetime,System.Windows.Forms.IWin32Window)">
            <summary>
            Stores the focused window, restores in a reliable manner later.
            </summary>
            <param name="lifetime"></param>
            <param name="mainwin"></param>
        </member>
        <member name="M:JetBrains.UI.Application.WindowUtil.PushModalWindowEnabledState(JetBrains.DataFlow.Lifetime,System.IntPtr,System.Windows.Forms.IWin32Window)">
            <summary>
            To enter a modal state for the given window, disables all of the other top-level windows on the same thread, plus the window owner.
            If you haven't shown the modal window yet, you may pass <c>Null</c>.
            </summary>
            <param name="lifetime"></param>
            <param name="hwndModalWindow">Optional. The window to become modal that will not be disabled. <c>Null</c> if n/a.</param>
            <param name="mainWindow"></param>
        </member>
        <member name="M:JetBrains.UI.Application.WindowUtil.SaveChildDialogPosition(System.Windows.Forms.Form,JetBrains.UI.Application.IMainWindow)">
            <summary>
            Prepares the child dialog position for persisting in the settings.
            The position is stored in a relative form, against the center of the main window.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.WindowUtil.SetOwnerReliable(System.Windows.Forms.Form,System.Windows.Forms.IWin32Window)">
            <summary>
            Sets an owner for the form in a reliable manner.
            The problem with reliability is that if the owner is not another <see cref="T:System.Windows.Forms.Form"/> (ie <see cref="P:System.Windows.Forms.Form.Owner"/> cannot be used), and form-to-be-owned is not <see cref="P:System.Windows.Forms.Form.ShowInTaskbar"/>, then the netfx implementation will drop the owner assigned with WinAPI calls and replace it with its own parking window (kinda to prevent it from showing up in the taskbar).
            This is done after the handle is created and after all of the notifications, so we should wait some more and then reapply the desired parent.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.WindowUtil.ShowFocusCatcher(System.Void*)">
            <summary>
            Shows a window that catches focus and then returns it back immediately, so that the <paramref name="hwndTopmost"/> window could process the activation message consistently and place focus on the proper child window. Without that it could happen that focus sits directly on the main window and no child is active.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.WindowUtil.PrependCaptionWithProductName(System.String)">
            <summary>
            Prepends a caption string with the product name, separated with an en-dash.
            If the <see cref="T:JetBrains.Application.PlatformObsoleteStatics"/> is available, its <see cref="!:IApplicationDescriptor.ProductName"/> is used. Otherwise, the static company name is substituted.
            </summary>
            <param name="caption">The original caption to prepend with the product name.</param>
        </member>
        <member name="M:JetBrains.UI.Application.WindowUtil.PrependCaptionWithProductName(System.String,JetBrains.Application.IApplicationDescriptor)">
            <summary>
            Prepends a caption string with the product name, separated with an en-dash.
            If the <see cref="T:JetBrains.Application.PlatformObsoleteStatics"/> is available, its <see cref="!:IApplicationDescriptor.ProductName"/> is used. Otherwise, the static company name is substituted.
            </summary>
            <param name="caption">The original caption to prepend with the product name.</param>
            <param name="product">The product whose name to use on the msgbox, if known.</param>
        </member>
        <member name="T:JetBrains.UI.GlobalSettings">
            <summary>
            The global UI-related settings.
            </summary>
            <remarks>For common settings not owned by a component, provides a single place to define the string name of the setting and the default value, which guarantees they agree in all usages across the solution.</remarks>
        </member>
        <member name="P:JetBrains.UI.GlobalSettings.KeyboardScheme">
            <summary>
            The active <see cref="T:JetBrains.ActionManagement.ShortcutScheme"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.HelpSystem.GetOfflineHelpFilePath">
            <summary>
            Gets the default path to the offline help file.
            Does not check whether the file exists.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.HelpSystem.ShowOfflineHelp">
            <summary>
            Opens the locally-installed "backup" .chm help file.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.HelpSystem.IsOfflineHelpFilePresent">
            <summary>
            Gets whether the offline help file exists in this installation. Does not cache the result, so do not call too often.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.HelpSystem.ShowHelp(System.String,JetBrains.UI.Application.HelpSystem.HelpKind)">
            <summary>
            Opens the help topic for the given keyword.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Application.HelpSystem.HelpKind">
            <summary>
            What kind of help to show for the keyword.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.HelpSystem.HelpKind.Product">
            <summary>
            Help on the current platform-based product.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.HelpSystem.HelpKind.Msdn">
            <summary>
            MSDN help.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Application.IShowHelp">
            <summary>
            Allows to hook into showing product help.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.IShowHelp.ShowHelp(System.String,JetBrains.UI.Application.HelpSystem.HelpKind)">
            <summary>
            Request to show help. Return whether it were fulfilled by your handler, otherwise, next handlers will be executed.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Application.IShowHelp.Priority">
            <summary>
            The lower the priority, the sooner called. Use <c>1</c> by default.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Application.IShowHelp.SupportedKinds">
            <summary>
            Help kinds supported by this handler, empty list to call for all.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Application.OfflineHelp">
            <summary>
            Part of the <see cref="T:JetBrains.UI.Application.HelpSystem"/> to work with the local <c>.chm</c> file.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.OfflineHelp.GetOfflineHelpFilePath">
            <summary>
            Gets the default path to the offline help file.
            Does not check whether the file exists.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.OfflineHelp.ShowOfflineHelp">
            <summary>
            Opens the locally-installed "backup" .chm help file.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.OfflineHelp.IsOfflineHelpFilePresent">
            <summary>
            Gets whether the offline help file exists in this installation. Does not cache the result, so do not call too often.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Application.ShowLocalHelpHandler">
            <summary>
            Handles showing product help as local help when there was no other handler located.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Application.WindowsMessageHookManager">
            <summary>
            Manages the lifetime of the system-wide <see cref="P:JetBrains.UI.Application.WindowsMessageHookManager.WindowsMessageHook"/> instance.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.WindowsMessageHookManager.myWindowsMessageHook">
            <summary>
            Instance.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Application.WindowsMessageHookManager.WindowsMessageHook">
            <summary>
            Gets the class that provides for hooking into the Windows messages received by a window.
            </summary>
        </member>
        <member name="T:JetBrains.UI.ImageLoader">
            <summary>
            Loads images from assemblies.
            Looks up the image by name in several assemblies in this order:
            (0) The calling assembly.
            (1) Manual override (specified explicitly in <see cref="M:JetBrains.UI.ImageLoader.GetImage(System.String,System.Reflection.Assembly[])"/> call and alike).
            (2) Product configuration assembly, as given by the <see cref="P:JetBrains.Application.IApplicationDescriptor.AllAssembliesResourceAssembly"/>.
            (3) Platform UI assembly (the own assembly of the <see cref="T:JetBrains.UI.ImageLoader"/>).
            A fallback to the next step occurs if either the assembly is not available (eg manual override is <c>Null</c>), or the image could not be found in the assembly.
            </summary>
        </member>
        <member name="F:JetBrains.UI.ImageLoader.ImageRequested">
            <summary>
            Fires when an image is being resolved. Allows to override
            </summary>
        </member>
        <member name="M:JetBrains.UI.ImageLoader.ClearCache">
            <summary>
            Drops the cache of already-resolved bitmaps, causing them to be re-resolved when next requested.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ImageLoader.GetImage(System.String,System.Reflection.Assembly[])">
            <summary>
            Loads an image preferring the <param name="assemblies"/> assembly, see class description for the search algorithm.
            Throws if the image could not be found.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ImageLoader.HasImage(System.String,System.Reflection.Assembly[])">
            <summary>
            Checks whether an image exists, preferring the <param name="assemblies"/> assembly, see class description for the search algorithm.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ImageLoader.TryGetImage(System.String,System.Reflection.Assembly[])">
            <summary>
            Loads an image preferring the <param name="assemblies"/> assembly, see class description for the search algorithm.
            Returns <c>Null</c> if the image could not be found.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ImageLoader.DetachBitmapFromStream(System.IO.Stream)">
            <summary>
            The stream cannot be closed while the bitmap created on it still exists.
            Creates a new bitmap that is detached from the stream.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ImageLoader.GetImageRaw(JetBrains.UI.ImageLoader.ImageId,System.Boolean)">
            <summary>
            Implements [Try]GetImage.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ImageLoader.InternalTryGetImageStream(JetBrains.UI.ImageLoader.ImageId)">
            <summary>
            The central implementation method. Actually looks up the imagery.
            </summary>
        </member>
        <member name="P:JetBrains.UI.ImageLoader.Placeholder">
            <summary>
            Gets the default placeholder image to be used in place of images yet to be drawn.
            </summary>
        </member>
        <member name="T:JetBrains.UI.ImageLoader.ImageId">
            <summary>
            Image assembly + relative path in that assembly.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ImageLoader.ImageId.#ctor(System.String,System.Reflection.Assembly[],System.Reflection.Assembly)">
            <summary>
            Describes an image.
            </summary>
            <param name="path">The image name, relative path to it.</param>
            <param name="assemblies">Overriding assemblies to look at.</param>
            <param name="caller">The caller assembly that has the highest priority ever.</param>
        </member>
        <member name="F:JetBrains.UI.ImageLoader.ImageId.AssembliesEligibleDefault">
            <summary>
            The list of default image-bearing assemblies.
            They're the product configuration assembly and Platform UI assembly, in order of ascending priority (the first overrides).
            </summary>
        </member>
        <member name="P:JetBrains.UI.ImageLoader.ImageId.Assemblies">
            <summary>
            Manual override assembly (look here first, then in the default ones).
            May be <c>Null</c> to look in defaults only.
            </summary>
        </member>
        <member name="P:JetBrains.UI.ImageLoader.ImageId.AssembliesEligible">
            <summary>
            Gets the list of assemblies eligible of looking for the icon. Any of them may be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.ImageLoader.ImageId.Path">
            <summary>
            Path to the icon under the assembly's “icons” namespace.
            </summary>
        </member>
        <member name="T:JetBrains.UI.ImageLoader.ImageRequestEventArgs">
            <summary>
            Args for requesting the image to be resolved.
            </summary>
        </member>
        <member name="P:JetBrains.UI.ImageLoader.ImageRequestEventArgs.Assembly">
            <summary>
            Gets the assembly in which to look up the image requested.
            If the image could not be determined in any of the assemblies, the last call comes with a <c>Null</c> as the last resort.
            </summary>
        </member>
        <member name="P:JetBrains.UI.ImageLoader.ImageRequestEventArgs.ImageStream">
            <summary>
            Gets or sets the image stream that is the result of the resolver operation.
            </summary>
        </member>
        <member name="P:JetBrains.UI.ImageLoader.ImageRequestEventArgs.Name">
            <summary>
            Gets the name of the image requested, as was specified by the caller to <see cref="T:JetBrains.UI.ImageLoader"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.ImageLoader.ImageRequestEventArgs.PerAssemblyPath">
            <summary>
            Gets the path to the image that is produced from the <see cref="P:JetBrains.UI.ImageLoader.ImageRequestEventArgs.Name"/> by prepending the <see cref="P:JetBrains.UI.ImageLoader.ImageRequestEventArgs.Assembly"/>-specific resource namespace prefix.
            </summary>
        </member>
        <member name="T:JetBrains.UI.ImagesBaseAttribute">
            <summary>
            When set on an assembly, hints on the base Resource Path for the images from that assembly.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.License.EvaluationExpirationControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.License.EvaluationExpirationControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.UI.Application.License.EvaluationExpirationControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.License.EvaluationFeedbackControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.License.EvaluationFeedbackControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.UI.Application.License.EvaluationFeedbackControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.License.JetWebBrowser.GetMeasuringDivStyle(System.Drawing.Size)">
            <summary>
            Generates a style for the div we use for measuring the text, assigning it the specified width and height, which must be given in pixels.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.License.JetWebBrowser.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.License.JetWebBrowser.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.UI.Application.License.JetWebBrowser.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.License.LicenseAgreementForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.License.LicenseAgreementForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.UI.Application.License.LicenseAgreementForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.License.ILicenseInformation.GetEvaluationLicenseInfo">
            <summary>
            Returns string, that describes evalaution status.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Application.License.ILicenseInformation.UserLicense">
            <summary>
            Returns license, entered by user.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Application.License.ILicenseInformation.UseCustomLicenseServerUrl">
            <summary>
            License server information
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.License.LicenseInformationControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:JetBrains.UI.src.Shell.License.ObtainPermanentLicenseControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.UI.src.Shell.License.ObtainPermanentLicenseControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.UI.src.Shell.License.ObtainPermanentLicenseControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.License.ProductBaseForm.#ctor">
            <summary>
            For designer only!
            Use <see cref="M:JetBrains.UI.Application.License.ProductBaseForm.#ctor(JetBrains.Application.IApplicationDescriptor)"/>
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.License.ProductBaseForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.License.ProductBaseForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.UI.Application.License.ProductBaseForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.License.PasteTextBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.License.PasteTextBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.License.PasteTextBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:JetBrains.UI.License.UITimeBombComponent">
            <summary>
            Adds UI to the base timebomb component.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.Helpers.AEmptyOptionsPage">
            <summary>
            Represents an empty options page that just holds a grouping node in the tree.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.IOptionsPage">
            <summary>
            Represents a page in the options dialog.
            Class implementing this interface should be marked with <see cref="T:JetBrains.UI.Options.OptionsPageAttribute"/> attribute.
            It is recommended to name the leaf classes against the <c>{Title}Page</c> pattern, where <c>Title</c> is the display name of the page in the Options dialog tree and title bar. This way, it will be readily locatable in the code.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.IOptionsPage.OnOk">
            <summary>
            Invoked when OK button in the options dialog is pressed.
            If the page returns <c>false</c>, the the options dialog won't be closed, and focus will be put into this page.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.IOptionsPage.ValidatePage">
            <summary>
            Check if the settings on the page are consistent, and page could be closed.
            </summary>
            <returns><c>true</c> if page data is consistent.</returns>
        </member>
        <member name="P:JetBrains.UI.Options.IOptionsPage.Control">
            <summary>
            <para>Control to be shown as page.</para>
            <para>May be <c>Null</c> if the page does not have any UI.</para>
            <para>Will NOT be disposed of automatically. Import a lifetime in page ctor and attach the control to that lifetime. If you're returning self (<see cref="T:JetBrains.UI.Options.IOptionsPage"/>-based class) as the control, then it's implementing <see cref="T:System.IDisposable"/> already and its <see cref="M:System.IDisposable.Dispose"/> will be called automatically.</para>
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.IOptionsPage.Id">
            <summary>
            Gets the ID of this option page.
            <see cref="T:JetBrains.UI.Options.IOptionsDialog"/> or <see cref="T:JetBrains.UI.Options.OptionsPageDescriptor"/> could be used to retrieve the <see cref="T:JetBrains.UI.Options.OptionsManager"/> out of it.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.AEmptyOptionsPage.OnOk">
            <summary>
            Invoked when OK button in the options dialog is pressed.
            If the page returns <c>false</c>, the the options dialog won't be closed, and focus will be put into this page.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.AEmptyOptionsPage.ValidatePage">
            <summary>
            Check if the settings on the page are consistent, and page could be closed.
            </summary>
            <returns><c>true</c> if page data is consistent.</returns>
        </member>
        <member name="P:JetBrains.UI.Options.Helpers.AEmptyOptionsPage.Control">
            <summary>
            Control to be shown as page.
            May be <c>Null</c> if the page does not have any UI.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.Helpers.AEmptyOptionsPage.Id">
            <summary>
            Gets the ID of this option page.
            <see cref="T:JetBrains.UI.Options.IOptionsDialog"/> or <see cref="T:JetBrains.UI.Options.OptionsPageDescriptor"/> could be used to retrieve the <see cref="T:JetBrains.UI.Options.OptionsManager"/> out of it.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.AOptionsPage.Bind``1(JetBrains.DataFlow.IProperty{``0},JetBrains.DataFlow.IProperty{``0})">
            <summary>
            Adds a one-way binding that is executed backwards on OK.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.AOptionsPage.Bind``1(JetBrains.DataFlow.IProperty{``0},System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Adds a one-way binding that is executed backwards on OK.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.AOptionsPage.Bind(JetBrains.DataFlow.IPropertyBinding)">
            <summary>
            Adds a one-way binding that is executed backwards on OK.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.Helpers.AStackPanelOptionsPage">
            <summary>
            A base options page that features a vertical stack panel and maintains the bindings list.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.AStackPanelOptionsPage.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.UI.CommonControls.Fonts.FontsManager,System.String)">
            <summary>
            Inits the base, sets the PID that will be given out thru <see cref="P:JetBrains.UI.Options.IOptionsPage.Id"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.AStackPanelOptionsPage.Bind``1(JetBrains.DataFlow.IProperty{``0},JetBrains.DataFlow.IProperty{``0})">
            <summary>
            Adds a one-way binding that is executed backwards on OK.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.AStackPanelOptionsPage.Bind(JetBrains.DataFlow.IPropertyBinding)">
            <summary>
            Adds a one-way binding that is executed backwards on OK.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.AStackPanelOptionsPage.AddRef(System.IDisposable)">
            <summary>
            Adds a reference so that it's held until the form is disposed of, after which it's disposed of.
            </summary>
            <param name="ref"></param>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.AStackPanelOptionsPage.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.Control"></see> and its child controls and optionally releases the managed resources.
            </summary>
            
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.AStackPanelOptionsPage.OnOk">
            <summary>
            Invoked when OK button in the options dialog is pressed.
            If the page returns <c>false</c>, the the options dialog won't be closed, and focus will be put into this page.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.AStackPanelOptionsPage.ValidatePage">
            <summary>
            Check if the settings on the page are consistent, and page could be closed.
            </summary>
            <returns><c>true</c> if page data is consistent.</returns>
        </member>
        <member name="P:JetBrains.UI.Options.Helpers.AStackPanelOptionsPage.Control">
            <summary>
            Control to be shown as page.
            May be <c>Null</c> if the page does not have any UI.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.Helpers.AStackPanelOptionsPage.Id">
            <summary>
            Gets the ID of this option page.
            <see cref="T:JetBrains.UI.Options.IOptionsDialog"/> or <see cref="T:JetBrains.UI.Options.OptionsPageDescriptor"/> could be used to retrieve the <see cref="T:JetBrains.UI.Options.OptionsManager"/> out of it.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.Helpers.AStackPanelOptionsPage2">
            <summary>
            A base options page that features a vertical stack panel and maintains the bindings list.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.AStackPanelOptionsPage2.#ctor(JetBrains.DataFlow.Lifetime,System.String,JetBrains.UI.CommonControls.Fonts.FontsManager,JetBrains.Application.src.Settings.SettingsStore)">
            <summary>
            Inits the base, sets the PID that will be given out thru <see cref="P:JetBrains.UI.Options.IOptionsPage.Id"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.Helpers.AStackPanelOptionsPage2.Stack">
            <summary>
            Gets the stack panel that is the body of this page.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.Helpers.AStackPanelOptionsPage2.Controls">
            <summary>
            Gets the <see cref="P:System.Windows.Forms.Control.Controls"/> collection of the <see cref="P:JetBrains.UI.Options.Helpers.AStackPanelOptionsPage2.Stack"/> panel that is the body of this page.
            Basically, you should be adding presentaiton controls to this collection.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.Helpers.Controls">
            <summary>
            Pre-styled controls for the option pages.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.Helpers.Controls.IndentF">
            <summary>
            Padding for the inner level of controls (to be laid out under the logically parenting controls)
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.Helpers.Controls.IndentA">
            <summary>
            Padding for the inner level of controls (to be laid out under the logically parenting controls)
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.Controls.AddColumnChild(System.Windows.Forms.TableLayoutPanel,System.Int32,System.Windows.Forms.Control)">
            <summary>
            Adds a child control to the next column of the grid.
            </summary>
            <param name="grid">Grid.</param>
            <param name="child">The control to be added.</param>
            <param name="percent">Percent size, if <c>1</c> to <c>100</c>. AutoSize, if <c>0</c>.</param>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.Controls.AddRowChild(System.Windows.Forms.TableLayoutPanel,System.Int32,System.Windows.Forms.Control)">
            <summary>
            Adds a child control to the next row of the grid.
            </summary>
            <param name="grid">Grid.</param>
            <param name="child">The control to be added.</param>
            <param name="percent">Percent size, if <c>1</c> to <c>100</c>. AutoSize, if <c>0</c>.</param>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.Controls.CreateGrid">
            <summary>
            Creates a grid, pre-set with auto-sizing modes.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.Controls.CreateNoSolutionCueBanner">
            <summary>
            In case we have to disable all the controls on the page without a solution, this function creates a control that should be placed on the page instead of them all.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.Controls.CreateTreeSection(System.String,System.Func{System.Windows.Forms.Control},System.EventHandler,System.EventHandler,System.Boolean)">
            <summary>
            Creates a section with a tree-list, add/remove buttons, and a heading.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.Controls.PushOrigin(System.Drawing.Graphics,System.Drawing.Point)">
            <summary>
            Pushes the graphics context origin shift so that painting at (0,0) rendered at the location specified.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.Controls.PushState(System.Drawing.Graphics)">
            <summary>
            Pushes the graphics state until the return value is disposed of, using the <see cref="M:System.Drawing.Graphics.Save"/> and <see cref="M:System.Drawing.Graphics.Restore(System.Drawing.Drawing2D.GraphicsState)"/> functions.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.Controls.PushSuspendLayout(System.Windows.Forms.Control)">
            <summary>
            Pushes the <see cref="M:System.Windows.Forms.Control.SuspendLayout"/> operation, to be popped on disposal.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.Controls.SetupGrid(System.Windows.Forms.TableLayoutPanel)">
            <summary>
            Sets up a grid, with docking and auto-sizing modes.
            Returns the same instance.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.Helpers.Controls.Button">
            <summary>
            A pre-setup auto-sizing button.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.Helpers.Controls.EditBox">
            <summary>
            An edit box.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.Helpers.Controls.HorzStackPanel">
            <summary>
            A pre-setup horizontal stack panel for use on the dialogs.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.Helpers.Controls.Label">
            <summary>
            A pre-setup label for use on the dialogs.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.Controls.Label.#ctor(System.String,System.Windows.Forms.Padding)">
            <param name="marginPlus">Added to the default margin.</param>
        </member>
        <member name="T:JetBrains.UI.Options.Helpers.Controls.SectionHeading">
            <summary>
            A heading for the options section.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.Helpers.Controls.Separator">
            <summary>
            Adds vertical space to the vertical stack.
            Makes the stack occupy the whole width.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.Controls.Separator.GetPreferredSize(System.Drawing.Size)">
            <summary>
            Retrieves the size of a rectangular area into which a control can be fitted.
            </summary>
            
            <returns>
            An ordered pair of type <see cref="T:System.Drawing.Size"></see> representing the width and height of a rectangle.
            </returns>
            
            <param name="proposedSize">The custom-sized area for a control. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.Controls.Separator.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint"></see> event.
            </summary>
            
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"></see> that contains the event data. </param>
        </member>
        <member name="P:JetBrains.UI.Options.Helpers.Controls.Separator.DefaultHeight">
            <summary>
            Gets the default empty separator of the default height.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.Helpers.Controls.Spin">
            <summary>
            A spin control with an integer property mirroring the <see cref="P:System.Windows.Forms.NumericUpDown.Value"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.Helpers.Controls.Spin.IntegerValue">
            <summary>
            The integer value of the control.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.Helpers.Controls.Timer.IsFiredOnEnable">
            <summary>
            Gets or sets whether the timer will fire the signal immediately when it gets enabled.
            On <c>False</c>: first fires <see cref="P:System.Windows.Forms.Timer.Interval"/> ms after enabling.
            On <c>True</c>: first fires right when it is enabled.
            Default is <c>False</c>.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.Helpers.Controls.VertStackPanel">
            <summary>
            A pre-setup horizontal stack panel for use on the dialogs.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.IOptionsDialog">
            <summary>
            The options dialog interface.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.IOptionsDialog.GetOptionsPageWindowFrame(JetBrains.UI.Options.IOptionsPage)">
            <summary>
            Gets a window frame that represents the given Options Page.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.IOptionsDialog.GetPage(System.String)">
            <summary>
            Fetches <see cref="T:JetBrains.UI.Options.IOptionsPage"/> instance by id.
            This method can be used for fetching values from another page (for dependent pages).
            As this method might cause creating the other page, must be called in a guarded context only.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.IOptionsDialog.CurrentPage">
            <summary>
            Gets or sets the current page in the options dialog.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionPagesList.OptionPages">
            <summary>
            <para>Lists the known option pages.</para>
            <para>When the option pages tree needs to be built, these are organized into a one-time tree of <see cref="T:JetBrains.UI.Options.OptionsPageDescriptor"/>s.</para>
            <para>Generally, they're collected from the classes implementing <see cref="T:JetBrains.UI.Options.IOptionsPage"/> and marked with <see cref="T:JetBrains.UI.Options.OptionsPageAttribute"/>. You can promote your own page entities here as needed.</para>
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionPagesList.IsPageInConfiguration(JetBrains.UI.Options.OptionsPageAttribute,JetBrains.Application.Env.RunsProducts.ProductConfigurations,JetBrains.Application.IApplicationDescriptor)">
            <summary>
            Checks whether the page should be visible in the current configuration
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.OptionPagesList.OptionsPageEntity">
            <summary>
            Describes a known page in the <see cref="F:JetBrains.UI.Options.OptionPagesList.OptionPages">list</see>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.OptionPagesList.OptionsPageEntity.Attribute">
            <summary>
            Attribute instance containing all necessary information about the page and position to insert it.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.OptionPagesList.OptionsPageEntity.PageType">
            <summary>
            Class of the page (should implement <see cref="T:JetBrains.UI.Options.IOptionsPage"/>).
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.OptionPagesTree">
            <summary>
            When option pages tree needs to be presented, builds the tree structure.
            A new one is built each time so that to account for possible option pages additions/removals by plugins and user code. 
            Page parent references are validated for existence and cycles when building the tree.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionPagesTree.GetElementByID(System.String)">
            <summary>
            Looks up a page descriptor by its ID.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionPagesTree.IsValidID(System.String)">
            <summary>
            Tells whether there's a page with such an ID.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.OptionPagesTree.RootElement">
            <summary>
            Gets the root page descriptor.
            It is the synthetic universal root that always exists.
            You can get all of the other pages by traversing its children recursively.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionPages.WebProxySettingsPage.ReadSystemProxySettings">
            <summary>
            Reads system proxy settings from the Registry.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.UI.Options.OptionPages.EnvironmentPage">
            <summary>
            Root options page for the global environment options.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionPages.EnvironmentPage.OnOk">
            <summary>
            Invoked when OK button in the options dialog is pressed.
            If the page returns <c>false</c>, the the options dialog won't be closed, and focus will be put into this page.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionPages.EnvironmentPage.ValidatePage">
            <summary>
            Check if the settings on the page are consistent, and page could be closed.
            </summary>
            <returns><c>true</c> if page data is consistent.</returns>
        </member>
        <member name="P:JetBrains.UI.Options.OptionPages.EnvironmentPage.Control">
            <summary>
            Control to be shown as page.
            May be <c>Null</c> if the page does not have any UI.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.OptionPages.EnvironmentPage.Id">
            <summary>
            Gets the ID of this option page.
            <see cref="T:JetBrains.UI.Options.IOptionsDialog"/> or <see cref="T:JetBrains.UI.Options.OptionsPageDescriptor"/> could be used to retrieve the <see cref="T:JetBrains.UI.Options.OptionsManager"/> out of it.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.OptionPages.RootOptionsPage">
            <summary>
            Implements the root options page descriptor.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionPages.RootOptionsPage.OnOk">
            <summary>
            Invoked when OK button in the options dialog is pressed.
            If the page returns <c>false</c>, the the options dialog won't be closed, and focus will be put into this page.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionPages.RootOptionsPage.ValidatePage">
            <summary>
            Check if the settings on the page are consistent, and page could be closed.
            </summary>
            <returns><c>true</c> if page data is consistent.</returns>
        </member>
        <member name="P:JetBrains.UI.Options.OptionPages.RootOptionsPage.Control">
            <summary>
            Control to be shown as page.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.OptionPages.RootOptionsPage.Id">
            <summary>
            Gets the ID of this option page.
            <see cref="T:JetBrains.UI.Options.OptionsManager"/> or <see cref="T:JetBrains.UI.Options.IOptionsDialog"/> could be used to retrieve the <see cref="T:JetBrains.UI.Options.OptionsPageDescriptor"/> out of it.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.OptionPageViewStore">
            <summary>
            Creates and caches the views of the pages.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionPageViewStore.GetPageView(JetBrains.UI.Options.OptionsPageDescriptor)">
            <summary>
            Gets cached or creates new page view.
            The factory function must operate in the guarded context.
            </summary>
            <param name="descriptor"></param>
            <returns></returns>
        </member>
        <member name="P:JetBrains.UI.Options.OptionPageViewStore.Views">
            <summary>
            Gets the collection of the views currently in the cache.
            Those are all the pages to take part in the current Options dialog run.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.OptionsDialog">
            <summary>
            Implements the Options Dialog UI.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialog.DefaultHelpKeyword">
            <summary>
            Keyword for the help topic to be opened when the current page does not specify its own keyword.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialog.SplitterDistanceThreshold">
            <summary>
            Threshold under which the splitter is considered to be collapsed.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialog.OptionNavigation">
            <summary>
            Whether to enable and user-expose the navigation-related features.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialog.myDisposablesTreeViewVisible">
            <summary>
            Stores the actions performed while the tree view is visible.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialog.myHistory">
            <summary>
            Maintains the options page navigation history.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialog.myLabelNoContent">
            <summary>
            A label that's displayed when the options page has no content nor children.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialog.myLabelOptionsPageTitle">
            <summary>
            A label that displays the current page title above the page content and child items.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialog.myMapPageWindowFrames">
            <summary>
            Caches created window frames.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialog.myMenuChildPages">
            <summary>
            A stack with the child pages of the current options page.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialog.myOptionPageViewStore">
            <summary>
            Creates and caches the views of the pages.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialog.myPanelContent">
            <summary>
            A panel that holds either the page content control, or the “no items” label.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialog.mySplitTree">
            <summary>
            The splitter with the tree on the left and the current page on the right.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialog.myToolStripContainer">
            <summary>
            Contains the tool strips and the main content.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialog.myToolbarGlobal">
            <summary>
            The dialog-global toolbar.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialog.myToolbarNavigation">
            <summary>
            The dialog-global navigation toolbar.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialog.CurrentPageProperty">
            <summary>
            Identifies the current page property.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.InitControls(JetBrains.UI.Application.IMainWindow,JetBrains.UI.Options.OptionPagesTree,JetBrains.Application.Env.ProductConfigurationsEx.InternalMode,JetBrains.CommonControls.Validation.FormValidators)">
            <summary>
            Creates and sets up the UI controls.
            </summary>
            <param name="mainwin"></param>
            <param name="pagestree"></param>
            <param name="isInternalMode"></param>
            <param name="formValidators"></param>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.InitControls_BodySplitter(JetBrains.UI.Options.OptionPagesTree,JetBrains.Application.Env.ProductConfigurationsEx.InternalMode)">
            <summary>
            The splitter that occupies the main body and holds the Options Tree and Preview Area.
            </summary>
            <param name="pagestree"></param>
            <param name="isInternalMode"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.InitControls_ButtonsPanel">
            <summary>
            The bordered panel with dialog buttons, on the bottom.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.InitControls_OptionsTree(JetBrains.UI.Options.OptionPagesTree,JetBrains.Application.Env.ProductConfigurationsEx.InternalMode)">
            <summary>
            Prepares the options tree.
            </summary>
            <param name="pagestree"></param>
            <param name="isInternalMode"></param>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.InitControls_PreviewArea">
            <summary>
            Inits the controls that may appear at the preview area.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.OnCurrentPage_Navigation(JetBrains.DataFlow.PropertyChangedEventArgs{JetBrains.UI.Options.IOptionsPage},JetBrains.UI.Options.OptionPagesTree)">
            <summary>
            Updates the navigation indicators as the current page changes.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.OnCurrentPage_Navigation_DialogTitleText(JetBrains.UI.Options.OptionsPageDescriptor)">
            <summary>
            Dialog title.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:JetBrains.UI.Options.OptionsDialog.OnCurrentPage_Navigation_NextPrev(JetBrains.UI.Options.OptionsPageDescriptor)" -->
        <member name="M:JetBrains.UI.Options.OptionsDialog.OnCurrentPage_Navigation_Toolbar(JetBrains.UI.Options.OptionsPageDescriptor)">
            <summary>
            Navigation bar items.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.OnCurrentPage_TreeSelection(JetBrains.DataFlow.PropertyChangedEventArgs{JetBrains.UI.Options.IOptionsPage},JetBrains.UI.Options.OptionPagesTree)">
            <summary>
            Updates selection in the tree as the current page changes.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.OnCurrentPage_View(JetBrains.DataFlow.PropertyChangedEventArgs{JetBrains.UI.Options.IOptionsPage},JetBrains.UI.Options.OptionPagesTree)">
            <summary>
            Displays a new page on the dialog as the current page changes.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.OnCurrentPage_View_InThisSection(JetBrains.UI.Options.OptionsPageDescriptor)">
            <summary>
            The list of the child pages, the “In This Section” control.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.OnCurrentPage_View_NoItemsCueBanner">
            <summary>
            “No Content” label (if there's no content nor child item buttons)
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.OnCurrentPage_View_PageControl(JetBrains.DataFlow.PropertyChangedEventArgs{JetBrains.UI.Options.IOptionsPage})">
            <summary>
            The control that presents the page content.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.OnCurrentPage_View_PageTitle(JetBrains.UI.Options.OptionsPageDescriptor)">
            <summary>
            Title of the page.
            Also features the special “Internal Mode Only” glyphs.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.OnNavigationButtonClicked(System.Object,System.EventArgs)">
            <summary>
            When a button on the navibar is clicked, navigates to the corresponding page.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.OnNavigationButtonDropDownOpening(System.Object,System.EventArgs)">
            <summary>
            A drop-down has been clicked on the navigation bar.
            Populate the drop-down list with items.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.OnTreeViewSelectionChanged(System.Object,System.EventArgs)">
            <summary>
            When selection changes in the tree, opens another page.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.OnTreeViewSelectionChanged_GetPageToSelect">
            <summary>
            Attempts to choose a page to open.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.OnTreeViewVisibleChanged(System.Object,System.EventArgs)">
            <summary>
            We track the tree visibility, it only starts working when becomes visible.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.Dispose(System.Boolean)">
            <summary>
            Disposes of the resources (other than memory) used by the <see cref="T:System.Windows.Forms.Form"></see>.
            </summary>
            
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Form.Closing"></see> event.
            </summary>
            
            <param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs"></see> that contains the event data. </param>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.OnHelpButtonClicked(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Form.HelpButtonClicked"></see> event.
            </summary>
            
            <param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs"></see> that contains the event data. </param>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.KeyDown"></see> event.
            </summary>
            
            <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs"></see> that contains the event data. </param>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.GetOptionsPageWindowFrame(JetBrains.UI.Options.IOptionsPage)">
            <summary>
            Gets a window frame that represents the given Options Page.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.GetPage(System.String)">
            <summary>
            Fetches <see cref="T:JetBrains.UI.Options.IOptionsPage"/> instance by id.
            This method can be used for fetching values from another page (for dependent pages).
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.OptionsDialog.CurrentPage">
            <summary>
            Gets or sets the current page in the options dialog.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.OptionsDialog.History">
            <summary>
            Maintains the options page navigation history.
            Operates on string IDs.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialog.History.myPageHistoryList">
            <summary>
            Stores the history of the visited pages, back and forth the current one.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialog.History.MaximumHistoryDepth">
            <summary>
            The maximum length of the <see cref="F:JetBrains.UI.Options.OptionsDialog.History.myPageHistoryList"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialog.History.CurrentPageId">
            <summary>
            The ID of the current page, an empty string for no current page (the initial value).
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialog.History.Index">
            <summary>
            Index of the active item in the history list.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.History.GoTo(System.String)">
            <summary>
            Goes forward to the given ID.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.OptionsDialogOwner">
            <summary>
            Gives lifetime and components to the option dialog instances it creates.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialogOwner.FShow">
            <summary>
            We require that the guard is not held when this method is called.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.OptionsDialogSettings">
            <summary>
            Settings for <see cref="T:JetBrains.UI.Options.OptionsDialog"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialogSettings.OptionsTreeWidthExpandedDefault">
            <summary>
            When expanding the options tree, set the splitter distance to this value.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialogSettings.OptionsDialogBounds">
            <summary>
            Gets the persisted bounds for the Options Dialog, relative to the main window location.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialogSettings.OptionsTreeWidth">
            <summary>
            Gets or sets the width of the Options tree in the Options dialog.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.OptionsDialogSettings.SelectedPageId">
            <summary>
            Gets or sets the MRU selected page.
            On load, validates that the MRU page still exists and returns the root page instead of an invalid ID.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.OptionsDialogTreePresenter">
            <summary>
            Presents the options tree structure in the options dialog.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.OptionsManager">
            <summary>
            Manages the Options Dialog subsystem.
            Must not have its own nontrivial logic, is just a façade for the subsystem's components. Within the subsystem, use individual components; outside the subsystem, import this component to avoid going into the implementation details.
            </summary>
            <remarks>
            An option page has three levels of existence:
            • ID, a unique string identifier.
            • Descriptor, an instance of the <see cref="T:JetBrains.UI.Options.OptionsPageDescriptor"/> class. Created when adding pages to the manager. Lives until removed.
            • View, a WinForms control created from the Decriptor, lives only for the run of the Options dialog.
            </remarks>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsManager.CreateOptionPagesTree">
            <summary>
            When option pages tree needs to be presented, builds the tree structure.
            A new one is built each time so that to account for possible option pages dynamic additions/removals by plugins and user code. 
            Page parent references are validated for existence and cycles when building the tree.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsManager.ShowOptionsModal(System.String)">
            <summary>
            Shows options dialog modally.
            We require that the guard is not held when this method is called.
            </summary>
            <param name="pageId">Page id. <c>Null</c> means opening the most recently used page.</param>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsManager.BeginShowOptions(System.String)">
            <summary>
            Shows options dialog.
            </summary>
            <param name="pageId">Page id. <c>Null</c> means opening the most recently used page.</param>
        </member>
        <member name="P:JetBrains.UI.Options.OptionsManager.OptionPages">
            <summary>
            <para>Lists the known option pages.</para>
            <para>When the option pages tree needs to be built, these are organized into a one-time tree of <see cref="T:JetBrains.UI.Options.OptionsPageDescriptor"/>s.</para>
            <para>Generally, they're collected from the classes implementing <see cref="T:JetBrains.UI.Options.IOptionsPage"/> and marked with <see cref="T:JetBrains.UI.Options.OptionsPageAttribute"/>. You can promote your own page entities here as needed.</para>
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.OptionsPageAttribute">
            <summary>
            This attribute should mark classes implementing <see cref="T:JetBrains.UI.Options.IOptionsPage"/> interface.
            <seealso cref="T:JetBrains.UI.Options.IOptionsPage"/>
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsPageAttribute.#ctor(System.String,System.String,System.String)">
            <param name="id">Id of this page. The recommended value is the class name without the <c>Page</c> suffix, which should look like the page display name in the Options tree, save for the spaces.</param>
            <param name="name">Presentable name of this page (to be shown in the tree of pages)</param>
            <param name="image">Resource name of image file for this page. If null, default image is used.</param>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsPageAttribute.#ctor(System.String)">
            <summary>
            Uses the supplied ID for the display name and the image also.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsPageAttribute.#ctor(System.String,System.String)">
            <summary>
            Uses the supplied ID for the image also.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsPageAttribute.CompareTo(JetBrains.UI.Options.OptionsPageAttribute)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the other parameter.Zero This object is equal to other. Greater than zero This object is greater than other. 
            </returns>
            
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="P:JetBrains.UI.Options.OptionsPageAttribute.HelpKeyword">
            <summary>
            Gets or sets the Help keyword that will be used to open the Help topic for the current options page.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.OptionsPageAttribute.Id">
            <summary>
            Id of this page
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.OptionsPageAttribute.Image">
            <summary>
            Resource name of image file for this page. If null, default image is used.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.OptionsPageAttribute.Name">
            <summary>
            Presentable name of this page (to be shown in the tree of pages)
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.OptionsPageAttribute.ParentId">
            <summary>
            Id of parent page. If not specified, the page is inserted at the top level.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.OptionsPageAttribute.Sequence">
            <summary>
            Gets or sets the sequence number for this page, which defines its relative positions against the siblings.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.OptionsPageAttribute.SupportedEditions">
            <summary>
            Gets or sets the list of editions in which this page should be shown.
            <c>Null</c> means that it should be shown in all editions.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.OptionsPageDescriptor">
            <summary>
            Runtime descriptor of an options page. UIless, but can create the UI.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsPageDescriptor.GetFullPath">
            <summary>
            Gets the full path to the options page.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsPageDescriptor.GetIcon">
            <summary>
            Retrieves an icon for the given options page.
            Won't throw or return <c>Null</c> unless very broken.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsPageDescriptor.TryGetNext">
            <summary>
            Goes to the next page in the tree. Returns <c>Null</c> if the next page is not available.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsPageDescriptor.TryGetPrevious">
            <summary>
            Goes to the previous page in the tree. Returns <c>Null</c> if the previous page is not available.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsPageDescriptor.Sort">
            <summary>
            Applies <see cref="P:JetBrains.UI.Options.OptionsPageAttribute.Sequence"/> to the children.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsPageDescriptor.AppendChild(JetBrains.UI.Options.OptionsPageDescriptor)">
            <summary>
            Inserts a new child. For internal use only.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.OptionsPageDescriptor.Id">
            <summary>
            Gets the ID of this page, as extracted from the <see cref="P:JetBrains.UI.Options.OptionsPageDescriptor.Attribute"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.OptionsPageDescriptor.Parent">
            <summary>
            If this is not a root page, points to the parent page in the hierarchy.
            There may be only one root page, <see cref="T:JetBrains.UI.Options.OptionPages.RootOptionsPage"/> (<see cref="P:JetBrains.UI.Options.OptionPagesTree.RootElement"/>).
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.OptionsPageViewFactoryManager">
            <summary>
            Provides the factory for creating option page instances. Allows to import components to the ctor.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsPageViewFactoryManager.Factories">
            <summary>
            Register factories here. Factories differ by their owning container: when solution is available, it should be the solution container, and so on.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.OptionsPageViewFactoryShell">
            <summary>
            Enables <see cref="T:JetBrains.UI.Options.OptionsPageViewFactoryManager"/> to import Shell components to the ctor (fallback for cases when solution container is not available).
            </summary>
        </member>
        <member name="T:JetBrains.UI.PersistableDocument.PersistableDocument">
            <summary>
            Represents a document that can be saved. Mainly used for Visual Studio editors.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PersistableDocument.PersistableDocument.Icon">
            <summary>
            Gets or sets the document icon.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PersistableDocument.PersistableDocument.IsDirty">
            <summary>
            Gets or sets the dirty state for the document (whether there're unsaved changes to the document).
            </summary>
        </member>
        <member name="F:JetBrains.UI.PersistableDocument.PersistableDocument.Moniker">
            <summary>
            Gets the document moniker. For file-based documents, this is the file path.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PersistableDocument.PersistableDocument.SaveRequested">
            <summary>
            Fires when the document save is requested. The document owner should execute the activities to make <see cref="F:JetBrains.UI.PersistableDocument.PersistableDocument.IsDirty"/> <c>False</c>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.PluginSupport.PluginsTableForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupWindowManager.AvalonAnchoringRect">
            <summary>
            Anchors to a screen location of an Avalon object.
            </summary>
            <remarks>
            Technically, anchors to the HWND-based rendertarget of the visual tree and the relative coordinates of the visual within it.
            </remarks>
        </member>
        <member name="T:JetBrains.UI.NestedAnchoringRect">
            <summary>
            Takes two anchoring rects and nests one itno another, treating the coordinates of the first one as relative to the second's.
            Useful for nesting a client-coordinates rect into the window rect for getting the screen coordinates that track both client item and window movements.
            </summary>
        </member>
        <member name="M:JetBrains.UI.NestedAnchoringRect.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.UI.IAnchoringRect,JetBrains.UI.IAnchoringRect)">
            <summary>
            Nests the <paramref name="nested"/> anchoring rect within the <paramref name="outer"/> one, treating the coordinates of the first as client ones within the second.
            </summary>
        </member>
        <member name="F:JetBrains.UI.NestedAnchoringRect.Nested">
            <summary>
            Gets that of the two anchors that is nested within the other.
            </summary>
        </member>
        <member name="F:JetBrains.UI.NestedAnchoringRect.Outer">
            <summary>
            Gets that of the two anchors that is the outer one.
            </summary>
        </member>
        <member name="M:JetBrains.UI.NestedAnchoringRect.UpdateAnchor">
            <summary>
            Updates the anchor based on the two underlying anchors.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.AvalonAnchoringRect.Element">
            <summary>
            The UI element we're anchoring to.
            </summary>
        </member>
        <member name="T:JetBrains.UI.DockingLayouter">
            <summary>
            Base implementation of the <see cref="T:JetBrains.UI.IPopupLayouter"/> interface.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupLayouter">
            <summary>
            A layouter that does not do any useful layout.
            </summary>
        </member>
        <member name="T:JetBrains.UI.IPopupLayouter">
            <summary>
            Lays out the popup windows.
            </summary>
        </member>
        <member name="P:JetBrains.UI.IPopupLayouter.Layout">
            <summary>
            Gets the result of laying out the entity.
            Submit a <see cref="P:JetBrains.UI.IPopupLayouter.Size"/> to have the new layout calculated.
            </summary>
        </member>
        <member name="P:JetBrains.UI.IPopupLayouter.Size">
            <summary>
            Gets or sets the size of the entity to be laid out.
            Whenever you set a new site, the <see cref="P:JetBrains.UI.IPopupLayouter.Layout"/> is updated, as needed, to provide with a new layout that fits the requested size. Note that the <see cref="P:JetBrains.UI.IPopupLayouter.Layout"/>'s size may be below the requested value if there's not enough room onscreen to fit it.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupLayouter.Layout">
            <summary>
            Gets the result of laying out the entity.
            Submit a <see cref="P:JetBrains.UI.IPopupLayouter.Size"/> to have the new layout calculated.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupLayouter.Size">
            <summary>
            Gets or sets the size of the entity to be laid out.
            Whenever you set a new site, the <see cref="P:JetBrains.UI.IPopupLayouter.Layout"/> is updated, as needed, to provide with a new layout that fits the requested size. Note that the <see cref="P:JetBrains.UI.IPopupLayouter.Layout"/>'s size may be below the requested value if there's not enough room onscreen to fit it.
            </summary>
        </member>
        <member name="F:JetBrains.UI.DockingLayouter.mySuppressLayout">
            <summary>
            If <c>True</c>, the layouting (and event-firing) is temporarily suppressed.
            </summary>
        </member>
        <member name="F:JetBrains.UI.DockingLayouter.myUseStickyDispositions">
            <summary>
            Whether dispositions are sticky, and the list is updated to promote the MRU disposition.
            </summary>
        </member>
        <member name="M:JetBrains.UI.DockingLayouter.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.UI.IAnchoringRect)">
            <summary>
            Creates a new layouter that attaches to the specific anchoring rectangle.
            </summary>
        </member>
        <member name="M:JetBrains.UI.DockingLayouter.#ctor(JetBrains.DataFlow.Lifetime,JetBrains.UI.IAnchoringRect,System.Collections.Generic.ICollection{JetBrains.UI.Anchoring2D},System.Int32,System.Boolean)">
            <summary>
            Creates a new layouter that attaches to the specific anchoring rectangle at the sides specified by the <paramref name="dispositions"/> collection.
            You may turn the sticky dispositions mode (see <see cref="P:JetBrains.UI.DockingLayouter.UseStickyDispositions"/>) on or off.
            </summary>
        </member>
        <member name="F:JetBrains.UI.DockingLayouter.Anchor">
            <summary>
            Gets or sets the anchoring rectangle against which the entity is docked.
            </summary>
        </member>
        <member name="M:JetBrains.UI.DockingLayouter.GetScreenBounds(System.Drawing.Rectangle)">
            <summary>
            Gets the screen bounds into which the rectangle being laid out should be fit.
            The default implementation returns the display screen on which the most of <paramref name="rectAnchor"/> is located.
            </summary>
            <param name="rectAnchor">The anchoring rectangle around which the position provider will dock its controlled rect. Could be used to determine which screen to use as bounds.</param>
            <returns>The “screen” bounds for fitting the resulting rectangle into.</returns>
        </member>
        <member name="M:JetBrains.UI.DockingLayouter.UpdateLayout">
            <summary>
            Re-layouts the entity using the current configuration.
            Submits the result to the <see cref="P:JetBrains.UI.PopupLayouter.Layout"/> property, which triggers the change event, if the value is different.
            </summary>
        </member>
        <member name="P:JetBrains.UI.DockingLayouter.Dispositions">
            <summary>
            Gets or sets the list of dispositions available for laying out the controlled rectangle against the anchoring rectangle.
            </summary>
        </member>
        <member name="P:JetBrains.UI.DockingLayouter.Padding">
            <summary>
            Gets or sets the padding between the anchoring rectangle and the laid out entity.
            </summary>
        </member>
        <member name="P:JetBrains.UI.DockingLayouter.UseStickyDispositions">
            <summary>
            Gets or sets whether the Sticky Dispositions mode is on.
            In this mode, the disposition used when layouting is promoted in the dispositions list so that it was preferred over the others the next time the layout is performed.
            The collection returned from <see cref="P:JetBrains.UI.DockingLayouter.Dispositions"/> is modified accordingly.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupWindowManager.EmptyPopupWindowContext">
            <summary>
            An empty popup window context.
            Does not listen to ESC actions.
            Lais out popups at the mouse cursor position at the moment of request.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupWindowManager.HideFlags">
            <summary>
            Specifies when a popup window should be hidden.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.HideFlags.None">
            <summary>
            Manual deactivation only.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.HideFlags.Scrolling">
            <summary>
            The context owner has been scrolled.
            Not very useful, as <see cref="T:JetBrains.UI.PopupWindowManager.IPopupWindow"/> can track its position after the scrolling.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.HideFlags.Escape">
            <summary>
            The <see cref="F:System.Windows.Forms.Keys.Escape"/> has been pressed in the context owner.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.HideFlags.AnyOtherAction">
            <summary>
            Something has happened to the context owner, which does not fall into any of the other flags.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.HideFlags.SelectionChanged">
            <summary>
            Selection has changed in the context owner.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.HideFlags.FocusLoss">
            <summary>
            The popup window has lost focus.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.HideFlags.Deactivated">
            <summary>
            The context owner has lost focus.
            Ignored if the popup window grabs focus initially.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.HideFlags.All">
            <summary>
            All of the above.
            </summary>
        </member>
        <member name="M:JetBrains.UI.IAnchoringRectEx.Transform(JetBrains.UI.IAnchoringRect,JetBrains.DataFlow.Lifetime,System.Windows.Vector)">
            <summary>
            Applies a transformation to this anchoring rectangle and returns the result as a new anchoring rectangle.
            The current one should not be disposed of or used anywhere else.
            </summary>
            <param name="anchor"></param>
            <param name="lifetime"></param>
            <param name="offset">The translation portion of the transformation.</param>
        </member>
        <member name="M:JetBrains.UI.IAnchoringRectEx.Transform(JetBrains.UI.IAnchoringRect,JetBrains.DataFlow.Lifetime,System.Windows.Vector,JetBrains.UI.Anchoring2D)">
            <summary>
            Applies a transformation to this anchoring rectangle and returns the result as a new anchoring rectangle.
            The current one should not be disposed of or used anywhere else.
            </summary>
            <param name="anchor"></param>
            <param name="lifetime"></param>
            <param name="offset">The translation portion of the transformation.</param>
            <param name="collapseto">
            Gets or sets whether the rectangle should be collapsed into a point, and, if yes, to which exactly point of the original rectangle.
            The inside modes are located on the inner sides of the rectangle, and outside ones are one point outside.
            </param>
        </member>
        <member name="T:JetBrains.UI.PopupWindowManager.IPopupWindow">
            <summary>
            Represents a popup window.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.IPopupWindow.HideWindow">
            <summary>
            Closes the window. After that the window cannot resurrect. Invoking this will cause the <see cref="E:JetBrains.UI.PopupWindowManager.IPopupWindow.Closed"/> event to fire.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.IPopupWindow.ShowWindow">
            <summary>
            Initially shows the popup window. The window remains shown until it is closed by the <see cref="M:JetBrains.UI.PopupWindowManager.IPopupWindow.HideWindow"/> method or by an action from the <see cref="T:JetBrains.UI.PopupWindowManager.IPopupWindowContext"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.IPopupWindow.Context">
            <summary>
            Gets context the window is shown in.
            May be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.IPopupWindow.HideMethod">
            <summary>
            Gets or sets what exactly the popup window should do to hide the controlled form.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.IPopupWindow.IsDisposed">
            <summary>
            Gets whether the window has already been disposed.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.IPopupWindow.LayoutMode">
            <summary>
            Gets or sets whether the popup window location and size is currently controlled by the layouter.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.IPopupWindow.Mutex">
            <summary>
            Gets the mutex that defines the popup window's identity class.
            For example, it may prohibit displaying more than one window of the same class at a time.
            This value should be immutable.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.IPopupWindow.Visible">
            <summary>
            Gets value indicating whether the window is currently shown.
            </summary>
        </member>
        <member name="E:JetBrains.UI.PopupWindowManager.IPopupWindow.Closed">
            <summary>
            Event which is raised when the window is closed either manually (by invoking the <see cref="M:JetBrains.UI.PopupWindowManager.IPopupWindow.HideWindow"/> method) or 
            when position provider returns empty position.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupWindowManager.PopupWindowLayoutMode">
            <summary>
            Defines the way the popup window controls its content location and size.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.PopupWindowLayoutMode.None">
            <summary>
            The layouter is not applied to the window, its size and position are manually controlled.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.PopupWindowLayoutMode.Full">
            <summary>
            The layouter fully controls the window size and position.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupWindowManager.FormHideMethod">
            <summary>
            What exactly the popup window should do to hide the controlled form.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.FormHideMethod.Visibility">
            <summary>
            Manipulate visibility (<c>ShowWindow(…)</c>).
            This won't <see cref="M:System.IDisposable.Dispose"/> the form, which is good for reusable windows.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.FormHideMethod.Closing">
            <summary>
            Close the window (<c>WM_CLOSE</c>).
            The window gets disposed and cannot be reused.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.IPopupWindowContextEx.OverrideLayouter(JetBrains.UI.PopupWindowManager.IPopupWindowContext,JetBrains.DataFlow.Lifetime,System.Func{JetBrains.DataFlow.Lifetime,JetBrains.UI.IPopupLayouter})">
            <summary>
            Customizes a popup window context if a special layouter should be used for the popup window to be created.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.IPopupWindowContextEx.OverrideLayouter(JetBrains.UI.PopupWindowManager.PopupWindowContextSource,System.Func{JetBrains.DataFlow.Lifetime,JetBrains.UI.IPopupLayouter})">
            <summary>
            Customizes a popup window context if a special layouter should be used for the popup window to be created.
            </summary>
        </member>
        <member name="T:JetBrains.UI.LayoutResult">
            <summary>
            Represents the result of layouting by the means of an <see cref="T:JetBrains.UI.IPopupLayouter"/>.
            Besides the entity bounds, specifies how they're located against the anchoring area, should there be any.
            </summary>
        </member>
        <member name="F:JetBrains.UI.LayoutResult.Empty">
            <summary>
            The empty layouting result.
            </summary>
        </member>
        <member name="F:JetBrains.UI.LayoutResult.AnchoringRect">
            <summary>
            The anchoring rectangle against which the entity has been laid out.
            Valid only if <see cref="F:JetBrains.UI.LayoutResult.Disposition"/> is not <see cref="F:JetBrains.UI.Anchoring2D.Empty"/>; otherwise, considered to be not available.
            </summary>
        </member>
        <member name="F:JetBrains.UI.LayoutResult.Bounds">
            <summary>
            The bounds of the laid out entity.
            </summary>
        </member>
        <member name="F:JetBrains.UI.LayoutResult.Disposition">
            <summary>
            The disposition of the laid out entity against the anchoring rectangle, <see cref="F:JetBrains.UI.LayoutResult.AnchoringRect"/>.
            Should be <see cref="F:JetBrains.UI.Anchoring2D.Empty"/> if this data is not available.
            </summary>
        </member>
        <member name="F:JetBrains.UI.LayoutResult.Room">
            <summary>
            The room available for layouting at the specified <see cref="F:JetBrains.UI.LayoutResult.Disposition"/>.
            The <see cref="F:JetBrains.UI.LayoutResult.Bounds"/> fall within the <see cref="F:JetBrains.UI.LayoutResult.Room"/>, docked inside as specified by <see cref="F:JetBrains.UI.LayoutResult.Disposition"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.LayoutResult.#ctor(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Rectangle,JetBrains.UI.Anchoring2D)">
            <summary>
            Initializes the instance with the laid out entity bounds, anchoring rectangle and dispositon of the entity against it.
            </summary>
        </member>
        <member name="M:JetBrains.UI.LayoutResult.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.UI.LayoutResult.Location">
            <summary>
            Gets the location of the laid out entity.
            </summary>
        </member>
        <member name="P:JetBrains.UI.LayoutResult.Size">
            <summary>
            Gets the size of the laid out entity.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.MainWindowPopupWindowContext.Create(JetBrains.DataFlow.Lifetime)">
            <summary>
            Gives the popup window context for the main application window.
            The popup layouter will be anchoring to the middle of the window, and ESC pressings will be handled correctly.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.MainWindowPopupWindowContext.Source">
            <summary>
            A popup window context source that does the same as this instance.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.MainWindowPopupWindowContext.SingleInstance.CreateLayouter(JetBrains.DataFlow.Lifetime)">
            <summary>
            Creates the default layouter that positiones its entities in the center of the DEVENV window.
            </summary>
            <param name="lifetime"></param>
        </member>
        <member name="T:JetBrains.UI.PopupWindowManager.PopupFormController">
            <summary>
            The layout controller for the popup forms.
            Shows a popup window, controls its location and position against the layouter, and destroys the form upon one of the predefined actions.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.PopupFormController.myConstrainableControl">
            <summary>
            <see cref="F:JetBrains.UI.PopupWindowManager.PopupFormController.myContentForm"/>, cast to the <see cref="T:JetBrains.CommonControls.IConstrainableControl"/> interface.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.PopupFormController.myContentForm">
            <summary>
            The form being controlled.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.PopupFormController.myContext">
            <summary>
            <see cref="P:JetBrains.UI.PopupWindowManager.PopupFormController.Context"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.PopupFormController.myEventsAttached">
            <summary>
            Specifies whether <see cref="M:JetBrains.UI.PopupWindowManager.PopupFormController.AttachEvents(JetBrains.UI.Interop.WindowsMessageHook,JetBrains.UI.PopupWindowManager.PopupWindowManager)"/> has been performed for the instance.
            Needed for <see cref="F:JetBrains.UI.PopupWindowManager.FormHideMethod.Visibility"/>-type windows that may call <see cref="M:JetBrains.UI.PopupWindowManager.PopupFormController.ShowWindow"/> more than once, to prevent multiple <see cref="M:JetBrains.UI.PopupWindowManager.PopupFormController.AttachEvents(JetBrains.UI.Interop.WindowsMessageHook,JetBrains.UI.PopupWindowManager.PopupWindowManager)"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.PopupFormController.myHideFlags">
            <summary>
            Defines the actions on which to hide. Can't be changed in runtime.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.PopupFormController.myHideMethod">
            <summary>
            <see cref="P:JetBrains.UI.PopupWindowManager.PopupFormController.HideMethod"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.PopupFormController.myIsChangingSize">
            <summary>
            Prevents from reacting to the child form resizes that are caused by ours applying the layout.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.PopupFormController.myIsDisposed">
            <summary>
            <see cref="P:JetBrains.UI.PopupWindowManager.PopupFormController.IsDisposed"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.PopupFormController.myLayoutMode">
            <summary>
            <see cref="P:JetBrains.UI.PopupWindowManager.PopupFormController.LayoutMode"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.PopupFormController.myLayouter">
            <summary>
            Layouts the popup onscreen.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.PopupFormController.myMutex">
            <summary>
            By default, each window is independent.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.PopupFormController.myReshowOnActivation">
            <summary>
            Whether a window should be shown automatically when the application is activated. Set to <c>True</c> only for those windows that have <see cref="F:JetBrains.UI.PopupWindowManager.FormHideMethod.Visibility"/> and if they were hidden due to app deactivation.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.PopupFormController.myWantsFocus">
            <summary>
            Whether to grab focus on show.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupFormController.#ctor(JetBrains.DataFlow.LifetimeDefinition,System.Windows.Forms.Form,JetBrains.UI.PopupWindowManager.IPopupWindowContext,JetBrains.UI.PopupWindowManager.HideFlags,System.Boolean,JetBrains.UI.PopupWindowManager.PopupWindowMutex,JetBrains.UI.Application.IIsApplicationActiveState,JetBrains.UI.Interop.WindowsMessageHook,JetBrains.UI.PopupWindowManager.PopupWindowManager)">
            <summary>
            Constructs a popup form controller.
            </summary>
            <param name="lifetimeDefinition">Defines the lifetime of the popup window. Could be terminated by this class in case the window is closed due to one of the conditions. Bind all of the layouters, window context, and per-popup-window additional resources to this lifetime.</param>
            <param name="form">A form to be shown as a popup window.</param>
            <param name="context">The owning context for the popup window, which defines when the window should be hidden, and also its layout and size through the layouter.</param>
            <param name="hideflags">Flags that identify when to destroy the form.</param>
            <param name="wantsfocus">If <c>True</c>, sets the focus to the popup window.</param>
            <param name="mutex">Specifies the popup window's identity group.</param>
            <param name="isApplicationActiveState"></param>
            <param name="windowsMessageHook">Hooks to enable listening to focus loss in owned windows. If omitted, keeping the form alive while focus is in an owned window is not supported.</param>
            <param name="popupWindowManager"></param>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupFormController.AttachEvents(JetBrains.UI.Interop.WindowsMessageHook,JetBrains.UI.PopupWindowManager.PopupWindowManager)">
            <summary>
            Hooks on all the listeners.
            Must be called before showing the window onscreen.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupFormController.DetachEvents">
            <summary>
            Detaches from all the events.
            You'd better not call it manually, but rather call <see cref="M:JetBrains.UI.PopupWindowManager.PopupFormController.Dispose"/> instead.
            Resets many things to <c>Null</c>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupFormController.GetControlPreferredSize(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Asks the <see cref="F:JetBrains.UI.PopupWindowManager.PopupFormController.myConstrainableControl"/> for its <see cref="M:JetBrains.CommonControls.IConstrainableControl.GetDesiredSize(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)"/>.
            Validates the retval.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupFormController.HideWindowIfNotFocused">
            <summary>
            Checks whether the controlled form owns the focus at the moment, and hides it if not.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupFormController.HideWindowOnDeactivation">
            <summary>
            The app has been deactivated, hides the window.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupFormController.OnActiveChanged">
            <summary>
            Kills the popup when switching away from Devenv.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupFormController.UpdatePopupLayout">
            <summary>
            Applies the new layout to the form.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupFormController.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.PopupFormController.CanShowPopups">
            <summary>
            Gets whether the popup windows could be shown at the moment, ie whether the main window is currently active.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.PopupFormController.HideMethod">
            <summary>
            Gets or sets what exactly the popup window should do to hide the controlled form.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.PopupFormController.IsDisposed">
            <summary>
            Gets whether the window has already been disposed.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.PopupFormController.LayoutMode">
            <summary>
            Gets or sets whether the popup window location and size is currently controlled by the layouter.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.PopupFormController.Mutex">
            <summary>
            Gets the mutex that defines the popup window's identity class.
            For example, it may prohibit displaying more than one window of the same class at a time.
            This value should be immutable.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupWindowManager.Util.PopupWindowContextSpecificEscapeActionHandler">
            <summary>
            Represents a view-specific wrapper for handling escape actions in views
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupLayout.PopupWindowContextWithAnotherLayouter">
            <summary>
            Customizes a popup window context if a special layouter should be used for the popup window to be created.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupWindowManager.PopupWindowManager">
            <summary>
            Manages the display, positioning, and destroying popup windows.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.PopupWindowManager.myPopupWindows">
            <summary>
            This must be an instance member.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupWindowManager.CreatePopupWindow(JetBrains.DataFlow.LifetimeDefinition,System.Windows.Forms.Form,JetBrains.UI.PopupWindowManager.IPopupWindowContext,JetBrains.UI.PopupWindowManager.HideFlags,System.Boolean,JetBrains.UI.PopupWindowManager.PopupWindowMutex)">
            <summary>
            Shows a popup window, controls its location and position against the layouter, and destroys the form upon one of the predefined actions.
            </summary>
            <param name="lifetimeDefinition">Defines the lifetime of the popup window. Could be terminated by this class in case the window is closed due to one of the conditions. Bind all of the layouters, window context, and per-popup-window additional resources to this lifetime.</param>
            <param name="form">A form to be shown as a popup window.</param>
            <param name="context">The owning context for the popup window.</param>
            <param name="hideflags">Flags that identify when to destroy the form (or hide, if the <see cref="P:JetBrains.UI.PopupWindowManager.PopupFormController.HideMethod"/> has been overridden to <see cref="F:JetBrains.UI.PopupWindowManager.FormHideMethod.Visibility"/>).</param>
            <param name="wantsfocus">If <c>True</c>, sets the focus to the popup window when it's first shown. The default is <c>True</c>.</param>
            <param name="mutex">Specifies the popup window's identity group. Creates a new unique group if omitted.</param>
            <returns>Identifies the popup window controller.</returns>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.PopupWindowManager.PopupWindows">
            <summary>
            Gets the collection of popup windows currently active in the system.
            Some of them may be invisible.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupWindowManagerEx.ShowPopupWindow(JetBrains.UI.PopupWindowManager.PopupWindowManager,JetBrains.DataFlow.Lifetime,System.Windows.Forms.Form,System.Func{JetBrains.DataFlow.Lifetime,JetBrains.UI.PopupWindowManager.IPopupWindowContext},JetBrains.UI.PopupWindowManager.HideFlags,JetBrains.UI.PopupWindowManager.FormHideMethod)">
            <summary>
            Shows a popup window, controls its location and position against the layouter, and destroys the form upon one of the predefined actions.
            </summary>
            <param name="thіs"></param>
            <param name="lifetime">The limiting lifetime for the window session.</param>
            <param name="form">A form to be shown as a popup window.</param>
            <param name="FCreateContext">The owning context for the popup window.</param>
            <param name="hideflags">Flags that identify when to destroy the form.</param>
            <param name="hidemethod">What to do to the window if it should be hidden (e.g. when app is deactivated). By default, the popup window will be closed, and its resources freed.</param>
            <returns>Identifies the popup window controller.</returns>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupWindowManagerEx.ShowPopupWindow(JetBrains.UI.PopupWindowManager.PopupWindowManager,JetBrains.DataFlow.Lifetime,System.Windows.Forms.Form,JetBrains.UI.PopupWindowManager.PopupWindowContextSource,JetBrains.UI.PopupWindowManager.HideFlags,JetBrains.UI.PopupWindowManager.FormHideMethod)">
            <summary>
            Shows a popup window, controls its location and position against the layouter, and destroys the form upon one of the predefined actions.
            </summary>
            <param name="thіs"></param>
            <param name="lifetime">The limiting lifetime for the window session.</param>
            <param name="form">A form to be shown as a popup window.</param>
            <param name="contextsource">The owning context for the popup window.</param>
            <param name="hideflags">Flags that identify when to destroy the form.</param>
            <param name="hidemethod">What to do to the window if it should be hidden (e.g. when app is deactivated). By default, the popup window will be closed, and its resources freed.</param>
            <returns>Identifies the popup window controller.</returns>
        </member>
        <member name="T:JetBrains.UI.PopupWindowManager.PopupWindowMutex">
            <summary>
            Defines the identity of the popup window group within which the popup windows are mutually exclusive.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupWindowMutex.WindowAdded(JetBrains.UI.PopupWindowManager.IPopupWindow,System.Collections.Generic.IEnumerable{JetBrains.UI.PopupWindowManager.IPopupWindow},JetBrains.DataFlow.ICollectionEvents{JetBrains.UI.PopupWindowManager.IPopupWindow})">
            <summary>
            Called when a new window is added to the identity group.
            The default implementation closes all the previous windows in the group.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupWindowMutex.WindowRemoved(JetBrains.UI.PopupWindowManager.IPopupWindow,System.Collections.Generic.IEnumerable{JetBrains.UI.PopupWindowManager.IPopupWindow},JetBrains.DataFlow.ICollectionEvents{JetBrains.UI.PopupWindowManager.IPopupWindow})">
            <summary>
            Called when a new window is removed from the identity group.
            The default implementation does nothing.
            </summary>
        </member>
        <member name="T:JetBrains.UI.RectangleDocker">
            <summary>
            Attaches one rect to another according to the rules.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RectangleDocker.myAllowedDispositions">
            <summary>
            <see cref="P:JetBrains.UI.RectangleDocker.AllowedDispositions"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RectangleDocker.myAnchoringRect">
            <summary>
            <see cref="P:JetBrains.UI.RectangleDocker.AnchoringRect"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RectangleDocker.myCandidateDisposition">
            <summary>
            <see cref="P:JetBrains.UI.RectangleDocker.CandidateDisposition"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RectangleDocker.myCandidateRatio">
            <summary>
            <see cref="P:JetBrains.UI.RectangleDocker.CandidateRatio"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RectangleDocker.myCandidateRect">
            <summary>
            <see cref="P:JetBrains.UI.RectangleDocker.CandidateRect"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RectangleDocker.myCandidateRoom">
            <summary>
            <see cref="P:JetBrains.UI.RectangleDocker.CandidateRoom"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RectangleDocker.myPadding">
            <summary>
            <see cref="P:JetBrains.UI.RectangleDocker.Padding"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RectangleDocker.myScreen">
            <summary>
            <see cref="P:JetBrains.UI.RectangleDocker.Screen"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RectangleDocker.mySize">
            <summary>
            <see cref="P:JetBrains.UI.RectangleDocker.Size"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RectangleDocker.#ctor(System.Drawing.Rectangle,System.Drawing.Size,System.Collections.Generic.ICollection{JetBrains.UI.Anchoring2D},System.Drawing.Rectangle)">
            <summary>
            Docks one rectangle to another. See the <see cref="P:JetBrains.UI.RectangleDocker.Result"/> property for the result.
            </summary>
            <param name="rectAnchor">The anchoring rectangle to which the resulting rectangle will be docked.</param>
            <param name="size">The desired size that describes the rectangle to be docked (the location is determined by the docking process). The size may decrease in case the <paramref name="screen"/>has not enough room for docking the rectangle in all its entirety.</param>
            <param name="dispositionsAllowed">Defines sides at which the rectangle may be docked to the anchor, in order of decreasing priority.</param>
            <param name="screen">The available space for the dockee.</param>
        </member>
        <member name="M:JetBrains.UI.RectangleDocker.#ctor(System.Drawing.Rectangle,System.Drawing.Size,System.Collections.Generic.ICollection{JetBrains.UI.Anchoring2D},System.Drawing.Rectangle,System.Int32)">
            <summary>
            Docks one rectangle to another. See the <see cref="P:JetBrains.UI.RectangleDocker.Result"/> property for the result.
            </summary>
            <param name="rectAnchor">The anchoring rectangle to which the resulting rectangle will be docked.</param>
            <param name="size">The desired size that describes the rectangle to be docked (the location is determined by the docking process). The size may decrease in case the <paramref name="screen"/>has not enough room for docking the rectangle in all its entirety.</param>
            <param name="dispositionsAllowed">Defines sides at which the rectangle may be docked to the anchor, in order of decreasing priority.</param>
            <param name="screen">The available space for the dockee.</param>
            <param name="padding">Padding to be inserted between the anchor and the dockee.</param>
        </member>
        <member name="M:JetBrains.UI.RectangleDocker.Attach">
            <summary>
            The main routine.
            Tries each of the available dispositions in turn.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RectangleDocker.AttachRect(System.Drawing.Rectangle,JetBrains.UI.Anchoring2D)">
            <summary>
            Attaches a rectangle using the one and only specified <paramref name="disposition"/>.
            </summary>
            <param name="rectAnchor">The anchoring area to attach to.</param>
            <param name="disposition">A side or a corner to attach at.</param>
            <returns>Whether the result was 100% fitting the desired size, and no further trying is needed.</returns>
        </member>
        <member name="M:JetBrains.UI.RectangleDocker.AttachRectInside(System.Drawing.Rectangle,JetBrains.UI.Anchoring2D)">
            <summary>
            Attaches inside the anchoring rect: flips the anchor so that to solve the “attach-outside” problem afterwards.
            </summary>
            <returns>Whether the result was 100% fitting the desired size, and no further trying is needed.</returns>
        </member>
        <member name="M:JetBrains.UI.RectangleDocker.AttachRectMiddle(JetBrains.UI.Anchoring2D,System.Drawing.Rectangle)">
            <summary>
            Handles the Middle-Middle disposition case, in a simplified manner.
            </summary>
            <returns>Whether the result was 100% fitting the desired size, and no further trying is needed.</returns>
        </member>
        <member name="M:JetBrains.UI.RectangleDocker.AttachRectOutside(System.Drawing.Rectangle,JetBrains.UI.Anchoring2D,JetBrains.UI.Anchoring2D)">
            <summary>
            Attaches a rectangle outside the given anchoring rect.
            Inside-attachment calls this routine with anchor mirrored against the attachment side, so that it were an outside attachment, after all.
            </summary>
            <param name="rectAnchor">The anchor.</param>
            <param name="dispositionAttachment">The disposition to use when attaching.</param>
            <param name="dispositionOriginal">The disposition to be recorded in the <see cref="P:JetBrains.UI.RectangleDocker.Result"/>, as <paramref name="dispositionAttachment"/> may be modified from the original value.</param>
            <returns>Whether the result was 100% fitting the desired size, and no further trying is needed.</returns>
        </member>
        <member name="M:JetBrains.UI.RectangleDocker.CenterHorizontally(System.Drawing.Point,System.Drawing.Rectangle@)">
            <summary>
            Centers the desired size against the anchoring rect, in the horizontal dimension. Constrains by the screen.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RectangleDocker.CenterVertically(System.Drawing.Point,System.Drawing.Rectangle@)">
            <summary>
            Centers the desired size against the anchoring rect, in the vertical dimension. Constrains by the screen.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RectangleDocker.CheckCandidate(System.Drawing.Rectangle@,System.Drawing.Rectangle,JetBrains.UI.Anchoring2D)">
            <summary>
            Evaluates the candidate rectangle, either promotes it to the instance-global candidate, if its ratio is better, or discards otherwise.
            If the rect satisfies the desired size entirely, returns <c>True</c> so that to stop trying other candidates.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RectangleDocker.AllowedDispositions">
            <summary>
            Gets the collection of the dispositions allowed.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RectangleDocker.AnchoringRect">
            <summary>
            Gets the anchor.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RectangleDocker.CandidateDisposition">
            <summary>
            Gets the disposition of the <see cref="P:JetBrains.UI.RectangleDocker.CandidateRect"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RectangleDocker.CandidateRatio">
            <summary>
            Gets the ratio of the <see cref="P:JetBrains.UI.RectangleDocker.CandidateRect"/>, ie how much it fits the desired size, the smaller the better.
            The following candidates are accepted or rejected based on this ratio.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RectangleDocker.CandidateRect">
            <summary>
            Gets the current candidate for the layout result.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RectangleDocker.CandidateRoom">
            <summary>
            Gets the total room available for the current <see cref="P:JetBrains.UI.RectangleDocker.CandidateRect"/>, at its <see cref="P:JetBrains.UI.RectangleDocker.CandidateDisposition"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RectangleDocker.Padding">
            <summary>
            Gets the padding to be inserted between the anchor and the dockee.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RectangleDocker.Result">
            <summary>
            Gets the result of docking, the final candidate and all of its properties packed into a single structure.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RectangleDocker.Screen">
            <summary>
            Gets the screen, which is the total room available for layouting.
            Either given explicitly by the user, or chosen as the same desktop the anchor lies in.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RectangleDocker.Size">
            <summary>
            Gets the desired size we're trying to lay out by docking.
            </summary>
        </member>
        <member name="T:JetBrains.UI.StaticAnchoringRect">
            <summary>
            Creates an anchoring rectangle whose position is fixed.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StaticAnchoringRect.#ctor(JetBrains.DataFlow.Lifetime,System.Windows.Point)">
            <summary>
            Creates a position provider.
            </summary>
            <param name="lifetime"></param>
            <param name="location">The fixed location, in screen coordinates.</param>
        </member>
        <member name="M:JetBrains.UI.StaticAnchoringRect.#ctor(JetBrains.DataFlow.Lifetime,System.Windows.Rect)">
            <summary>
            Creates a position provider.
            </summary>
            <param name="lifetime"></param>
            <param name="anchor">The fixed anchoring rectangle, in screen coordinates.</param>
        </member>
        <member name="M:JetBrains.UI.StaticAnchoringRect.FromCurrentMousePosition(JetBrains.DataFlow.Lifetime)">
            <summary>
            Creates a static anchoring rectangle at the point where the mouse pointer was at the moment of the call.
            The size of the rectangle is chosen so that there was a double-click-size distance from the mouse location to either side.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StaticAnchoringRect.FromCurrentMousePosition(JetBrains.DataFlow.Lifetime,System.Drawing.Size)">
            <summary>
            Creates a static anchoring rectangle at the point where the mouse pointer was at the moment of the call.
            The size of the rectangle is chosen so that there was a double-click-size distance from the mouse location to either side.
            </summary>
        </member>
        <member name="T:JetBrains.UI.StickyDisposition">
            <summary>
            Keeps the allowed dispositions list — a list of <see cref="T:JetBrains.UI.Anchoring2D"/> values — and promotes the most recently used one to have the highest priority, ie it gets sticky and will be used next time, unless there's a better choice.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StickyDisposition.myDispositions">
            <summary>
            The list of dispositions, in priority order.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StickyDisposition.#ctor(System.Collections.Generic.ICollection{JetBrains.UI.Anchoring2D})">
            <summary>
            Creates a new instance and initializes it with the set of dispositions, sorted in an ascending order of priority.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StickyDisposition.#ctor">
            <summary>
            Creates a new instance and initializes it with the default <see cref="P:JetBrains.UI.Anchoring2D.AnchorBottomOrTop"/> set of dispositions, sorted in an ascending order of priority.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StickyDisposition.Promote(JetBrains.UI.Anchoring2D)">
            <summary>
            Promotes the disposition specified so that it had the highest priority next time you get <see cref="P:JetBrains.UI.StickyDisposition.Dispositions"/>, and thus ruled out the layouting (unless some other disposition makes a better fit).
            </summary>
            <param name="disposition">The disposition to promote.</param>
        </member>
        <member name="M:JetBrains.UI.StickyDisposition.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.UI.StickyDisposition.Dispositions">
            <summary>
            Gets or sets the current set of dispositions which consists of the same dispositions as were given on construction time, but in another priority.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupWindowManager.TrackedWindow">
            <summary>
            A window that hosts an <see cref="T:System.Windows.UIElement"/> and can be tracked by an <see cref="T:JetBrains.UI.IPopupLayouter"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.TrackedWindow.myShouldBeVisible">
            <summary>
            A property whose value is composited from the user volition and physical capability to show the window.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.TrackedWindow.myUpdatePopupLayoutReentrancyFlag">
            <summary>
            When in <see cref="M:JetBrains.UI.PopupWindowManager.TrackedWindow.UpdatePopupLayout"/>, prevents from reentering it.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.TrackedWindow.myWannaBeVisible">
            <summary>
            Whether the user explicitly wants the window to be shown.
            This is ANDed with the physical capability to show the window.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.TrackedWindow.AttachEvents(JetBrains.UI.PopupWindowManager.PopupWindowManager)">
            <summary>
            Starts sining the environment events.
            </summary>
            <param name="popupWindowManager"></param>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.TrackedWindow.GetClientRoomFromWindowRoom(System.Drawing.Size,System.Windows.Interop.HwndSource)">
            <summary>
            Based on the room for the window, calculates the available room for its content.
            In per-pixel-transparency mode, the nonclient area is not present.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.TrackedWindow.GetWindowRoomFromClientRoom(System.Windows.Size,System.Windows.Interop.HwndSource)">
            <summary>
            Based on the room required by the client area, calculates the required room for the window.
            In per-pixel-transparency mode, the nonclient area is not present.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.TrackedWindow.OnHideFlagsChange(JetBrains.DataFlow.PropertyChangedEventArgs{JetBrains.UI.PopupWindowManager.HideFlags})">
            <summary>
            Attaches and detaches the <see cref="P:JetBrains.UI.PopupWindowManager.TrackedWindow.HideFlags"/>-related events.
            Should be (un)sinked in (attach/detach)-event.
            Note: when the property value is changed in runtime, updates the set of sinked hide-signals.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.TrackedWindow.OnHideSignal(System.Object,System.EventArgs)">
            <summary>
            A hide signal has been received, eg from the popup window context owner.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.TrackedWindow.OnShouldBeVisibleChanged_Hide">
            <summary>
            The window should be hidden.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.TrackedWindow.OnShouldBeVisibleChanged_Show">
            <summary>
            The window should be shown.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.TrackedWindow.UpdatePopupLayout">
            <summary>
            Applies the popup layout suggested by the <see cref="P:JetBrains.UI.PopupWindowManager.TrackedWindow.Layouter"/> to the window.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.TrackedWindow.MeasureOverride(System.Windows.Size)">
            <summary>
            Override this method to measure the size of a window.
            </summary>
            
            <returns>
            A <see cref="T:System.Windows.Size"></see> that reflects the size that this window determines it needs during layout, based on its calculations of children's sizes.
            </returns>
            
            <param name="availableSize">A <see cref="T:System.Windows.Size"></see> that reflects the available size that this window can give to the child. Infinity can be given as a value to indicate that the window will size to whatever content is available.</param>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.TrackedWindow.OnClosed(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Window.Closed"></see> event.
            </summary>
            
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.TrackedWindow.OnDeactivated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Window.Deactivated"></see> event.
            </summary>
            
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.TrackedWindow.OnSourceInitialized(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Window.SourceInitialized"></see> event.
            </summary>
            
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.TrackedWindow.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.TrackedWindow.HideWindow">
            <summary>
            Closes the window. After that the window cannot resurrect. Invoking this will cause the <see cref="E:JetBrains.UI.PopupWindowManager.IPopupWindow.Closed"/> event to fire.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.TrackedWindow.ShowWindow">
            <summary>
            Initially shows the popup window. The window remains shown until it is closed by the <see cref="M:JetBrains.UI.PopupWindowManager.IPopupWindow.HideWindow"/> method or by an action from the <see cref="T:JetBrains.UI.PopupWindowManager.IPopupWindowContext"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.TrackedWindow.Glassify">
            <summary>
            Specifies whether the Aero Glass effect should be applied to the window, if available.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.TrackedWindow.HideFlags">
            <summary>
            Gets or sets the flags that control the set of signals from the popup window context owner on which the window can be hidden.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.TrackedWindow.IsGlassified">
            <summary>
            A readonly property that gets whether the glass effect is actually applied to the window at the moment.
            The <see cref="P:JetBrains.UI.PopupWindowManager.TrackedWindow.Glassify"/> property is just an intention that may be unsupported by the runtime.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.TrackedWindow.Handle">
            <summary>
            Gets the window handle to the current window, or <c>NULL</c> if not created yet.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.TrackedWindow.HwndSource">
            <summary>
            Returns the <see cref="T:System.Windows.Interop.HwndSource"/> for the current window.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.TrackedWindow.Context">
            <summary>
            Gets context the window is shown in.
            May be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.TrackedWindow.HideMethod">
            <summary>
            Gets or sets what exactly the popup window should do to hide the controlled form.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.TrackedWindow.IsDisposed">
            <summary>
            Gets whether the window has already been disposed.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.TrackedWindow.LayoutMode">
            <summary>
            Gets or sets whether the popup window location and size is currently controlled by the layouter.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.TrackedWindow.Mutex">
            <summary>
            Gets the mutex that defines the popup window's identity class.
            For example, it may prohibit displaying more than one window of the same class at a time.
            This value should be immutable.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.TrackedWindow.Visible">
            <summary>
            Gets value indicating whether the window is currently shown.
            </summary>
        </member>
        <member name="T:JetBrains.UI.TransformedAnchoringRect">
            <summary>
            An anchor that applies a transofrmation to some other anchor.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TransformedAnchoringRect.CollapseTo">
            <summary>
            Gets or sets whether the rectangle should be collapsed into a point, and, if yes, to which exactly point of the original rectangle.
            The inside modes are located on the inner sides of the rectangle, and outside ones are one point outside.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TransformedAnchoringRect.Offset">
            <summary>
            Gets the translation portion of the transformation.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TransformedAnchoringRect.UnderlyingAnchor">
            <summary>
            Gets the underlying anchoring object that is being transformed by this adapter.
            </summary>
        </member>
        <member name="M:JetBrains.UI.TransformedAnchoringRect.UpdateAnchor">
            <summary>
            Recalculates the anchoring rectangle.
            </summary>
        </member>
        <member name="T:JetBrains.UI.UndisposableAnchoringRect">
            <summary>
            Wraps another anchoring rect to prevent disposing of it.
            The consumer stops receiving events when it disposes of this object.
            The instance passed to the ctor is not disposed in this case.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Application.Progress.CustomProgressDialog">
            <summary>
            A custom-crafted progress dialog.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.CustomProgressDialog.DescriptionLine1">
            <summary>
            The first line of the progress dialog description. Shortens paths.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.CustomProgressDialog.DescriptionLine2">
            <summary>
            The second line of the progress dialog description. Shortens paths.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.CustomProgressDialog.IsCancelable">
            <summary>
            Whether the cancel button is available on the dialog.
            Cannot be changed when <see cref="F:JetBrains.UI.Application.Progress.CustomProgressDialog.IsRunning"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.CustomProgressDialog.IsRunning">
            <summary>
            Whether the dialog is currently visible. Set to <c>True</c> to show. To hide, either set to <c>False</c> or dispose of the dialog.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.CustomProgressDialog.IsRunningEffective">
            <summary>
            The dialog is shown with a delay, this is the delayed value.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.CustomProgressDialog.IsUserCanceled">
            <summary>
            Whether the user has canceled the progress dialog. Readonly.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.CustomProgressDialog.Title">
            <summary>
            Progress dialog title.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.CustomProgressDialog.Value">
            <summary>
            Value of the progress, in the [0…1] range.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.CustomProgressDialog.WindowHandle">
            <summary>
            A handle to the progress window. Readonly.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.CustomProgressDialog.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.CustomProgressDialogEx.BindToProgressIndicator(JetBrains.UI.Application.Progress.CustomProgressDialog,JetBrains.DataFlow.Lifetime,JetBrains.Application.Progress.IProgressIndicatorModel)">
            <summary>
            Binds a progress indicator to its visual presentation.
            The values are prevented from being updated too often.
            Returns a diconnection token.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Application.Progress.JetProgressWnd">
            <summary>
            Implementation details for the <see cref="T:JetBrains.UI.Application.Progress.CustomProgressDialog"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.JetProgressWnd.IsUserCanceled">
            <summary>
            Whether the user has canceled the progress dialog. Readonly.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.JetProgressWnd.WndProc_DontStealFocusFromDialogBoxes(System.Windows.Forms.Message)">
            <summary>
            The progress window is shown after a delay.
            If the task-under-progress shows a dialog box before the delay elapses, the progress would steal focus from that dialog box. Not nice.
            An example is the checkout dialog box.
            Make sure we return focus where it belongs.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.JetProgressWnd.JetBrains#CommonControls#IConstrainableControl#GetDesiredSize(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Performs the bottom-up layouting stage, when the control calculates its desired size using the given constraints.
            Should give generally the same results as <see cref="T:JetBrains.CommonControls.IConstrainableControl"/>, but could employ the <paramref name="gc"/> device context for the sake of optimization.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="limit">The maximum available space (that could affect the shape of the control, or strip down unnecessary calculations over the invisible items).
            May be a <see cref="T:System.Drawing.Size"/> with width and height equal to <see cref="F:System.Int32.MaxValue"/>, which means that the size is not limited.</param>
            <returns>The desired size, must be no larger than <paramref name="limit"/>.</returns>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.JetProgressWnd.JetBrains#CommonControls#IConstrainableControl#SetLayout(JetBrains.UI.LayoutResult)">
            <summary>
            Tells the control the details about the new layout applied to it by the controlling entity in conjunction with some <see cref="T:JetBrains.UI.IPopupLayouter"/>.
            Typically, the control need not apply the given size and location because that should be done by the controlling entity.
            The control may change its presentation in response to the layouting details, for example, whether it's attached to the top or the bottom of the anchoring rect.
            </summary>
            <param name="layout">The layouting details.</param>
        </member>
        <member name="P:JetBrains.UI.Application.Progress.JetProgressWnd.JetBrains#CommonControls#IConstrainableControl#AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Application.Progress.JetProgressWnd.JetBrains#CommonControls#IConstrainableControl#WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.ProgressWindow.IsTaskRunning">
            <summary>
            Set to <c>True</c> before the task starts running, reverted to <c>False</c> when the task completes.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.ProgressWindow.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.ProgressWindow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Application.Progress.ProgressWindow.TaskThread">
            <summary>
            When the task is running (<see cref="F:JetBrains.UI.Application.Progress.ProgressWindow.IsTaskRunning"/> is <c>True</c>), set to the thread on which the task is running.
            At other times, might be <c>Null</c>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.SyncProgressWindow.#ctor(JetBrains.UI.Application.IMainWindow)">
            <summary>
            Constucts progress window without show delay
            </summary>
            <param name="mainWindow"></param>
        </member>
        <member name="T:JetBrains.UI.Application.Progress.SystemProgressDialog">
            <summary>
            Exposes the system-standard Progress Dialog.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.SystemProgressDialog.Animation">
            <summary>
            An animation to be displayed on the dialog above the progress. A choice of the standard system animations.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.SystemProgressDialog.DescriptionLine1">
            <summary>
            The first line of the progress dialog description. Shortens paths.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.SystemProgressDialog.DescriptionLine2">
            <summary>
            The second line of the progress dialog description. Shortens paths.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.SystemProgressDialog.DescriptionLine3">
            <summary>
            Available only when not <see cref="F:JetBrains.UI.Application.Progress.SystemProgressDialog.IsEstimatingTime"/>. The third line of the progress dialog description. Shortens paths.
            When <see cref="F:JetBrains.UI.Application.Progress.SystemProgressDialog.IsEstimatingTime"/>, this line is used for displaying the time estimate.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.SystemProgressDialog.IsCancelable">
            <summary>
            Whether the cancel button is available on the dialog.
            Cannot be changed when <see cref="F:JetBrains.UI.Application.Progress.SystemProgressDialog.IsRunning"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.SystemProgressDialog.IsEstimatingTime">
            <summary>
            Whether the system should estimate the remaining time and give it out in the third description line of the dialog.
            Cannot be changed when <see cref="F:JetBrains.UI.Application.Progress.SystemProgressDialog.IsRunning"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.SystemProgressDialog.IsMarquee">
            <summary>
            Whether the progress is indeterminate.
            Cannot be changed when <see cref="F:JetBrains.UI.Application.Progress.SystemProgressDialog.IsRunning"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.SystemProgressDialog.IsRunning">
            <summary>
            Whether the dialog is currently visible. Set to <c>True</c> to show. To hide, either set to <c>False</c> or dispose of the dialog.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.SystemProgressDialog.IsUserCanceled">
            <summary>
            Whether the user has canceled the progress dialog. Readonly.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.SystemProgressDialog.Title">
            <summary>
            Progress dialog title.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.SystemProgressDialog.Value">
            <summary>
            Value of the progress, in the [0…1] range.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.SystemProgressDialog.WindowHandle">
            <summary>
            A handle to the progress window. Readonly.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.SystemProgressDialog.InitRunning_DontStealFocusFromDialogBoxes(JetBrains.DataFlow.Lifetime)">
            <summary>
            The progress window is shown after a delay.
            If the task-under-progress shows a dialog box before the delay elapses, the progress would steal focus from that dialog box. Not nice.
            An example is the checkout dialog box.
            Make sure we return focus where it belongs.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.SystemProgressDialog.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.SystemProgressDialogEx.BindToProgressIndicator(JetBrains.UI.Application.Progress.SystemProgressDialog,JetBrains.DataFlow.Lifetime,JetBrains.Application.Progress.IProgressIndicatorModel,JetBrains.Threading.IThreading)">
            <summary>
            Binds a progress indicator to its visual presentation.
            The values are prevented from being updated too often.
            Returns a diconnection token.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Application.Progress.TaskProgressControl">
            <summary>
            Summary description for TaskProgressControl.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.TaskProgressControl.FillColor">
            <summary>
            Background fill color. Not inherited by the child controls.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.TaskProgressControl.GetPreferredSize(System.Drawing.Size)">
            <summary>
            Retrieves the size of a rectangular area into which a control can be fitted.
            </summary>
            
            <returns>
            An ordered pair of type <see cref="T:System.Drawing.Size"></see> representing the width and height of a rectangle.
            </returns>
            
            <param name="proposedSize">The custom-sized area for a control. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.TaskProgressControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint"></see> event.
            </summary>
            
            <param name="args">A <see cref="T:System.Windows.Forms.PaintEventArgs"></see> that contains the event data. </param>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.TaskThreadAffinity.Primary">
            <summary>
            The task must be executed on the primary (UI) thread only.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.TaskThreadAffinity.Free">
            <summary>
            The task could be run on any thread.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Application.Progress.UITaskExecutor">
            <summary>
            A task executor that displays graphical user interface while the progress is running.
            This object is reusable and is not connected to any given task execution.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Application.Progress.UITaskExecutor.FreeThreaded">
            <summary>
            Gets a UI Task Executor that can run tasks on worker threads.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Application.Progress.UITaskExecutor.SingleThreaded">
            <summary>
            Gets a UI Task Executor that can run tasks on the primary (UI) thread only.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Application.Progress.UITaskExecutorRun">
            <summary>
            Controls a single <see cref="M:JetBrains.Application.Progress.ITaskExecutor.ExecuteTask(System.String,JetBrains.Application.Progress.TaskCancelable,System.Action{JetBrains.Application.Progress.IProgressIndicator})"/> run of the <see cref="T:JetBrains.UI.Application.Progress.UITaskExecutorRuns"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.UITaskExecutorRun.Run(JetBrains.UI.Application.Progress.TaskThreadAffinity,System.Action{JetBrains.Application.Progress.IProgressIndicator},System.Func{JetBrains.DataFlow.Lifetime,JetBrains.Application.Progress.IProgressIndicatorModel,System.IntPtr},JetBrains.Application.Progress.ProgressIndicator,System.Windows.Forms.IWin32Window,JetBrains.Threading.IThreading)">
            <summary>
            Creates an object that runs the task execution once.
            </summary>
            <param name="taskThreadAffinity">Whether the task MUST be run on the primary thred (<see cref="F:JetBrains.UI.Application.Progress.TaskThreadAffinity.Primary"/>), or it COULD be run on a worker thread to avoid freezing the UI (<see cref="F:JetBrains.UI.Application.Progress.TaskThreadAffinity.Free"/>).</param>
            <param name="task">The task to run. The <see cref="T:JetBrains.Application.Progress.IProgressIndicator"/> given to the task is always free-threaded for both reading and writing, even if <see cref="F:JetBrains.UI.Application.Progress.TaskThreadAffinity.Primary"/>.</param>
            <param name="FAttachUi">Allows the owner to attach its UI to the progress of the task. The <see cref="T:JetBrains.Application.Progress.IProgressIndicatorModel"/> object given as parameter is always primary-threaded, which means that it fires modifications on the primary thread only. To cancel out the UI or binding, submit to the <see cref="T:JetBrains.DataFlow.Lifetime"/> parameter. Optionally return the window handle, if known already, to keep from disabling when applying the modal state.</param>
            <param name="indicator">The owner-provided progress indicator.</param>
            <param name="parentWindow">The window focus will be restored to if it was impossible to restore focus to the previous window.</param>
            <param name="threading"></param>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.UITaskExecutorRun.myBackingA">
            <summary>
            Private.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.UITaskExecutorRun.RunCore(JetBrains.UI.Application.Progress.TaskThreadAffinity,System.Action{JetBrains.Application.Progress.IProgressIndicator},System.Func{JetBrains.DataFlow.Lifetime,JetBrains.Application.Progress.IProgressIndicatorModel,System.IntPtr},JetBrains.Application.Progress.ProgressIndicator,System.Windows.Forms.IWin32Window,JetBrains.Threading.IThreading)">
            <summary>
            Creates an object that runs the task execution once.
            </summary>
            <param name="taskThreadAffinity">Whether the task MUST be run on the primary thred (<see cref="F:JetBrains.UI.Application.Progress.TaskThreadAffinity.Primary"/>), or it COULD be run on a worker thread to avoid freezing the UI (<see cref="F:JetBrains.UI.Application.Progress.TaskThreadAffinity.Free"/>).</param>
            <param name="FTask">The task to run. The <see cref="T:JetBrains.Application.Progress.IProgressIndicator"/> given to the task is always free-threaded for both reading and writing, even if <see cref="F:JetBrains.UI.Application.Progress.TaskThreadAffinity.Primary"/>.</param>
            <param name="FAttachUi">Allows the owner to attach its UI to the progress of the task. The <see cref="T:JetBrains.Application.Progress.IProgressIndicatorModel"/> object given as parameter is always primary-threaded, which means that it fires modifications on the primary thread only. To cancel out the UI or binding, submit to the <see cref="T:JetBrains.DataFlow.Lifetime"/> parameter. Optionally return the window handle, if known already, to keep from disabling when applying the modal state.</param>
            <param name="progressIndicator">The owner-provided progress indicator.</param>
            <param name="parentWindow">The window focus will be restored to if it was impossible to restore focus to the previous window.</param>
            <param name="threading"></param>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.UITaskExecutorRun.PushProgressCanceledInterruptableCookie(JetBrains.Application.Progress.IProgressIndicator,JetBrains.UI.Application.Progress.TaskThreadAffinity)">
            <summary>
            Throws the <see cref="T:JetBrains.Application.Progress.ProcessCancelledException"/> on <see cref="P:JetBrains.Application.Progress.IProgressIndicatorModel.IsCanceled"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.UITaskExecutorRun.GetSettingsTimeSpan(System.String,System.TimeSpan)">
            <summary>
            A helper for reading a TimeSpan from the Settings. To be replaced with Settings access when they support arbitrary types.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.UITaskExecutorRun.GetTaskAffinedThread(JetBrains.UI.Application.Progress.TaskThreadAffinity,JetBrains.Threading.JetDispatcher)">
            <summary>
            Gets or creates the thread on which the task should be executed (either the current one, or the special worker thread, see <see cref="!:myTaskThreadAffinity"/>).
            </summary>
            <param name="taskThreadAffinity"></param>
            <param name="dispatcherPrimary"></param>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.UITaskExecutorRun.RunStartTask(System.Action{JetBrains.Application.Progress.IProgressIndicator},JetBrains.UI.Application.Progress.TaskThreadAffinity,JetBrains.Application.Progress.ProgressIndicator,JetBrains.DataFlow.IProperty{System.Boolean},JetBrains.Threading.JetDispatcher)">
            <summary>
            Starts the task, on whichever thread needed.
            </summary>
            <param name="FTask"></param>
            <param name="taskThreadAffinity"></param>
            <param name="progressIndicator"></param>
            <param name="isDone"></param>
            <param name="dispatcherPrimary"></param>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.UITaskExecutorRun.RunStartTaskCallTaskAction(JetBrains.DataFlow.IProperty{System.Boolean},JetBrains.Application.Progress.ProgressIndicator,JetBrains.UI.Application.Progress.TaskThreadAffinity,System.Action{JetBrains.Application.Progress.IProgressIndicator},JetBrains.Threading.JetDispatcher)">
            <summary>
            The <see cref="!:myTask"/> caller impl, runs on task target thread, at the end notifies the owner thru <see cref="!:IsDone"/> async.
            </summary>
            <param name="isDone"></param>
            <param name="progressIndicator"></param>
            <param name="taskThreadAffinity"></param>
            <param name="FTask"></param>
            <param name="dispatcherPrimary"></param>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.UITaskExecutorRun.Run_AttachUI(JetBrains.DataFlow.Lifetime,JetBrains.Application.Progress.IProgressIndicatorModel,JetBrains.Threading.IThreading,System.Func{JetBrains.DataFlow.Lifetime,JetBrains.Application.Progress.IProgressIndicatorModel,System.IntPtr})">
            <summary>
            Progress UI for the task run, as specified by the owner of this Run object.
            </summary>
            <param name="lifetime"></param>
            <param name="progressIndicator"></param>
            <param name="threading"></param>
            <param name="FAttachUi"></param>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.UITaskExecutorRun.Run_DisableWindowsButOne(JetBrains.DataFlow.Lifetime,System.IntPtr)">
            <summary>
            Pushes a main-window-disable, to emulate modality.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.UITaskExecutorRun.Run_PushFocusedWindowState(JetBrains.DataFlow.Lifetime,System.Windows.Forms.IWin32Window)">
            <summary>
            Stores the focused window, restores in a reliable manner later.
            </summary>
            <param name="lifetime"></param>
            <param name="parentWindow"></param>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.UITaskExecutorRun.Run_WaitUntilDone(JetBrains.DataFlow.Lifetime,JetBrains.DataFlow.IProperty{System.Boolean})">
            <summary>
            Pumps messages until the task is thru.
            </summary>
            <param name="lifetime"></param>
            <param name="isDone"></param>
        </member>
        <member name="T:JetBrains.UI.Application.Progress.UITaskExecutorRuns">
            <summary>
            A task executor that displays graphical user interface while the progress is running.
            This object is reusable and is not connected to any given task execution.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.UITaskExecutorRuns.#ctor(JetBrains.UI.Application.Progress.TaskThreadAffinity,JetBrains.Threading.IThreading,JetBrains.Application.IApplicationDescriptor,System.Windows.Forms.IWin32Window)">
            <summary>
            Creates a new task executor. Specifies whether a task might be executed on another thread.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.UITaskExecutorRuns.OnAttachProgressWindowUI(JetBrains.DataFlow.Lifetime,System.String,JetBrains.Application.Progress.IProgressIndicatorModel,JetBrains.Application.Progress.TaskCancelable,JetBrains.Threading.IThreading,JetBrains.Application.IApplicationDescriptor,System.Windows.Forms.IWin32Window)">
            <summary>
            Progress UI for the task run: chooses whichever implementation to use.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.UITaskExecutorRuns.OnAttachProgressWindowUI_CustomDialog(System.String,JetBrains.Application.Progress.IProgressIndicatorModel,JetBrains.Application.Progress.TaskCancelable,JetBrains.DataFlow.Lifetime,JetBrains.Application.IApplicationDescriptor,System.Windows.Forms.IWin32Window)">
            <summary>
            Progress UI for the task run: homebrew progress dlg.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.UITaskExecutorRuns.OnAttachProgressWindowUI_SystemDialog(JetBrains.DataFlow.Lifetime,System.String,JetBrains.Application.Progress.IProgressIndicatorModel,JetBrains.Application.Progress.TaskCancelable,JetBrains.Threading.IThreading,System.Windows.Forms.IWin32Window)">
            <summary>
            Progress UI for the task run: system progress dlg.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.UITaskExecutorRuns.ExecuteTask(System.String,JetBrains.Application.Progress.TaskCancelable,System.Action{JetBrains.Application.Progress.IProgressIndicator})">
            <summary>
            Executes the task without exiting the method until the task is completed.
            </summary>
            <param name="name">
            <para>Task title, short form.</para>
            <para>This is used for the progress window title by the UI progress indicators.</para>
            <para>The long form of the task caption should go to the <see cref="P:JetBrains.Application.Progress.IProgressIndicator.TaskName"/> of the <paramref name="task"/>'s <see cref="T:JetBrains.Application.Progress.IProgressIndicator"/>.</para>
            <para>Prepended with the product name automatically. Might be empty, in which case the product name will be used.</para>
            </param>
            <param name="task">The task to execute.</param>
            <param name="cancelable">Whether the task could be canceled by the user, if the task progress indication provided by <see cref="T:JetBrains.Application.Progress.ITaskExecutor"/> supports canceling.</param>
            <returns>Whether the task has completed execution (ie was not canceled). Note that a <see cref="T:JetBrains.Application.Progress.ProcessCancelledException"/> could cancel even a <see cref="F:JetBrains.Application.Progress.TaskCancelable.No"/> task.</returns>
            <remarks>Any return values of the task should be assigned inside the closure that implements the <paramref name="task"/>.</remarks>
        </member>
        <member name="T:JetBrains.UI.Application.Progress.UITaskExecutorSwitchingImplementation">
            <summary>
            Allows to override the default <see cref="T:JetBrains.UI.Application.Progress.UITaskExecutorRuns"/> implementation with test mocks or app-specifics.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.UITaskExecutorSwitchingImplementation.CreateExecutor(JetBrains.UI.Application.Progress.TaskThreadAffinity)">
            <summary>
            Switching implementation for <see cref="T:JetBrains.UI.Application.Progress.UITaskExecutorRuns"/>.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Application.Progress.WorkerThreadShop">
            <summary>
            Creates personal worker threads.
            Ensures they will be reclaimed when the <see cref="T:JetBrains.Application.PlatformObsoleteStatics"/> is torn down.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.WorkerThreadShop.Create(JetBrains.DataFlow.Lifetime,System.String)">
            <summary>
            Creates a new <see cref="T:JetBrains.Threading.JetDispatcher">dispatcher</see> thread that will be reclaimed when the <see cref="T:JetBrains.Application.PlatformObsoleteStatics"/> is shut down, or when the return value is disposed of.
            </summary>
            <param name="lifetime"></param>
            <param name="name">Name for the managed thread.</param>
            <returns>Thread-owning dispatcher.</returns>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.WorkerThreadShop.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.UI.Settings.LayoutSettings">
            <summary>
            Parent for layout-related environment settings.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Settings.DialogWindowsSettings">
            <summary>
            Parent for settings of dialog windows.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Settings.PointRelativeToMainWindow">
            <summary>
            A screen point relative to the application main window. Wraps the <see cref="T:System.Windows.Point"/> type, but with some additional semantic.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Settings.PointRelativeToMainWindow.ToScreen(JetBrains.UI.Application.IMainWindow)">
            <summary>
            Converts to absolute screen coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Settings.PointRelativeToMainWindow.FromScreen(System.Windows.Point,JetBrains.UI.Application.IMainWindow)">
            <summary>
            Creates from absolute screen coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.UI.About.AboutBox.PopulateEventArgs.AddClipboardData(System.String)">
            <summary>
            Adds data to the text content that will be copied to clipboard.
            Either a single-line string or a set of CRLF-terminated lines.
            </summary>
        </member>
        <member name="M:JetBrains.UI.About.AboutBox.PopulateEventArgs.AddControl(System.Windows.Forms.Control)">
            <summary>
            Adds a control to the About Box presentation. <see cref="F:System.Windows.Forms.DockStyle.Fill"/> docking recommended.
            </summary>
        </member>
        <member name="M:JetBrains.UI.About.AboutBoxActionHandler.JetBrains#ActionManagement#IActionHandler#Update(JetBrains.Application.DataContext.IDataContext,JetBrains.ActionManagement.ActionPresentation,JetBrains.ActionManagement.DelegateUpdate)">
            <summary>
            Updates action visual presentation. If presentation.Enabled is set to false, Execute
            will not be called.
            </summary>
            <param name="context">DataContext</param>
            <param name="presentation">presentation to update</param>
            <param name="nextUpdate">delegate to call</param>
        </member>
        <member name="M:JetBrains.UI.About.AboutBoxActionHandler.JetBrains#ActionManagement#IActionHandler#Execute(JetBrains.Application.DataContext.IDataContext,JetBrains.ActionManagement.DelegateExecute)">
            <summary>
            Executes action. Called after Update, that set ActionPresentation.Enabled to true.
            </summary>
            <param name="context">DataContext</param>
            <param name="nextExecute">delegate to call</param>
        </member>
        <member name="F:JetBrains.UI.About.AboutBoxView.MinPictureWidth">
            <summary>
            Min width of the image.
            Dialog is sized to fit the image, too small a width will give trouble to the text.
            </summary>
        </member>
        <member name="M:JetBrains.UI.About.AboutBoxView.InitView_Image(JetBrains.Application.IApplicationDescriptor)">
            <summary>
            Properly-sized image control. <c>Null</c> if not available for this product.
            </summary>
            <param name="descriptor"></param>
        </member>
        <member name="M:JetBrains.UI.About.AboutBoxView.SwitchIntoCopyClipboardMode(System.String,JetBrains.UI.CommonControls.Fonts.FontsManager)">
            <summary>
            Enables copying the textual About data to the clipboard.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Application.IMainWindow">
            <summary>
            Represents the main window of the application.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.OpensUri.OpenUri(System.Uri)">
            <summary>
            Opens the specific URI in the default Web browser.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Application.StaticMainWindow">
            <summary>
            A main window whose handle does not change with time.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.StaticMainWindow.#ctor(System.IntPtr)">
            <summary>
            Wraps a native window handle.
            Can be <c>Null</c>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.StaticMainWindow.#ctor(System.Void*)">
            <summary>
            Wraps a native window handle.
            Can be <c>Null</c>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.StaticMainWindow.#ctor(System.Windows.Forms.IWin32Window)">
            <summary>
            Wraps a window interface.
            Can be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Application.StaticMainWindow.Handle">
            <summary>
            Gets the handle to the window represented by the implementer.
            </summary>
            
            <returns>
            A handle to the window represented by the implementer.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="T:JetBrains.UI.StatusBar.Indicators.MemoryUsageIndicator">
            <summary>
            Displays memory usage in the status bar.
            Shows and hides based on the options.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StatusBar.Indicators.MemoryUsageIndicator.myMemoryUsageValue">
            <summary>
            The current memory usage.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.Indicators.MemoryUsageIndicator.OnHide">
            <summary>
            Hides the indicator, hints on bringing it back.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.Indicators.MemoryUsageIndicator.ShowPopupMessage(JetBrains.UI.RichText.RichText)">
            <summary>
            Shows a message in a popup tooltip somewhere near the indicator.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.Indicators.MemoryUsageIndicator.JetBrains#UI#Tooltips#ITooltipProvider#GetTooltip(JetBrains.DataFlow.Lifetime,System.Drawing.Point)">
            <summary>
            Called by tooltip manager, if the tooltip is to be displayed
            </summary>
            <param name="lifetime"></param>
            <param name="point">Point in control's coordinates</param>
            <returns><see cref="T:JetBrains.UI.Tooltips.ITooltipInfo"/>, or <c>Null</c> if no tooltip should be displayed.</returns>
        </member>
        <member name="P:JetBrains.UI.StatusBar.Indicators.MemoryUsageIndicator.Presentation">
            <summary>
            Gets the visual presentation of the control.
            </summary>
        </member>
        <member name="T:JetBrains.UI.StatusBar.Indicators.MemoryUsageIndicator.GcMonitor">
            <summary>
            When <see cref="M:System.GC.Collect"/> occurs, the finalizer is called on this class, and the owner is notified of the event.
            </summary>
        </member>
        <member name="T:JetBrains.UI.StatusBar.Indicators.TrefoilIndicator">
            <summary>
            A test status bar indicator that renders a trefoil.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StatusBar.Indicators.TrefoilIndicator.mySpinPeriod">
            <summary>
            Period of a full spin, in milliseconds.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StatusBar.Indicators.TrefoilIndicator.myAngularSpeed">
            <summary>
            Defines the direction and mul-factor.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StatusBar.Indicators.TrefoilIndicator.myGottenDirty">
            <summary>
            The control has gotten dirty and should be repainted.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StatusBar.Indicators.TrefoilIndicator.myWantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.Indicators.TrefoilIndicator.CreateIndicatorInStatusBar(JetBrains.UI.StatusBar.IStatusBar)">
            <summary>
            Creates a ready-for-use status-bar indicator.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.Indicators.TrefoilIndicator.GetTooltip(JetBrains.DataFlow.Lifetime,System.Drawing.Point)">
            <summary>
            Called by tooltip manager, if the tooltip is to be displayed
            </summary>
            <param name="lifetime"></param>
            <param name="point">Point in control's coordinates</param>
            <returns><see cref="T:JetBrains.UI.Tooltips.ITooltipInfo"/>, or <c>Null</c> if no tooltip should be displayed.</returns>
        </member>
        <member name="M:JetBrains.UI.StatusBar.Indicators.TrefoilIndicator.GetDesiredSize(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Performs the bottom-up layouting stage, when the control calculates its desired size using the given constraints.
            Should give generally the same results as <see cref="T:JetBrains.CommonControls.IConstrainableControl"/>, but could employ the <paramref name="gc"/> device context for the sake of optimization.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="limit">The maximum available space (that could affect the shape of the control, or strip down unnecessary calculations over the invisible items).
            May be a <see cref="T:System.Drawing.Size"/> with width and height equal to <see cref="F:System.Int32.MaxValue"/>, which means that the size is not limited.</param>
            <returns>The desired size, must be no larger than <paramref name="limit"/>.</returns>
        </member>
        <member name="M:JetBrains.UI.StatusBar.Indicators.TrefoilIndicator.Paint(System.Drawing.Graphics)">
            <summary>
            Renders the context of the windowless control. The rendering bounds are given by the 
            </summary>
            <param name="g">The device context.</param>
        </member>
        <member name="M:JetBrains.UI.StatusBar.Indicators.TrefoilIndicator.SetBounds(JetBrains.UI.IGraphicsContainer,System.Drawing.Rectangle)">
            <summary>
            Performs the top-down layouting stage, when the control lais out its parts within the given bounds.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="bounds">The new bounds. From now on, this value should be returned from the <see cref="P:JetBrains.CommonControls.IWindowlessControl.Bounds"/> property.</param>
        </member>
        <member name="M:JetBrains.UI.StatusBar.Indicators.TrefoilIndicator.SetLayout(JetBrains.UI.LayoutResult)">
            <summary>
            Tells the control the details about the new layout applied to it by the controlling entity in conjunction with some <see cref="T:JetBrains.UI.IPopupLayouter"/>.
            Typically, the control need not apply the given size and location because that should be done by the controlling entity.
            The control may change its presentation in response to the layouting details, for example, whether it's attached to the top or the bottom of the anchoring rect.
            </summary>
            <param name="layout">The layouting details.</param>
        </member>
        <member name="P:JetBrains.UI.StatusBar.Indicators.TrefoilIndicator.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.UI.StatusBar.Indicators.TrefoilIndicator.Bounds">
            <summary>
            The windowless control bounds in the parent coordinates. The implementor should just store and return the value set by the owner.
            </summary>
        </member>
        <member name="P:JetBrains.UI.StatusBar.Indicators.TrefoilIndicator.GottenDirty">
            <summary>
            The control has gotten dirty and should be repainted.
            </summary>
        </member>
        <member name="P:JetBrains.UI.StatusBar.Indicators.TrefoilIndicator.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="T:JetBrains.UI.StatusBar.IStatusBar">
            <summary>
            Provides access to the Status Bar of the UI application.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.IStatusBar.ClearText">
            <summary>
            Clears the status bar text.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.IStatusBar.SetText(System.String,System.Boolean)">
            <summary>
            Sets the status bar text.
            </summary>
            <param name="text">Text.</param>
            <param name="emphisized">Whether to apply special highlighting to the status bar text to emphasize that it's not a routine message.</param>
        </member>
        <member name="P:JetBrains.UI.StatusBar.IStatusBar.Indicators">
            <summary>
            Gets the collection of the status bar indicators.
            </summary>
        </member>
        <member name="P:JetBrains.UI.StatusBar.IStatusBar.IsVisible">
            <summary>
            Gets whether the application status bar is currently visible (not turned off).
            </summary>
        </member>
        <member name="P:JetBrains.UI.StatusBar.IStatusBar.Text">
            <summary>
            Gets the text currently displayed in the status bar.
            </summary>
        </member>
        <member name="T:JetBrains.UI.StatusBar.JetStatusBarIndicatorView">
            <summary>
            Represents the window that hosts the <see cref="T:JetBrains.UI.StatusBar.JetStatusBarIndicator"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.myData">
            <summary>
            <see cref="P:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.Data"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.myIsHovered">
            <summary>
            <c>True</c> whenif mouse is over the control.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.myPadding">
            <summary>
            Padding of the indicator, as reflected from the data.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.myWindowlessControl">
            <summary>
            The effective Windowless Control value, coming from the <see cref="P:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.Data"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.#ctor(JetBrains.UI.StatusBar.JetStatusBarIndicator,JetBrains.UI.PopupMenu.JetPopupMenus,JetBrains.UI.Application.WindowsMessageHookManager,JetBrains.UI.PopupWindowManager.MainWindowPopupWindowContext)">
            <summary>
            Creates a new view and attaches it to its data.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.GottenDirty">
            <summary>
            Fires when the indicator must repaint itself.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.CreateControl(System.Windows.Forms.IWin32Window,System.Drawing.Rectangle)">
            <summary>
            Creates the control.
            If the rectangle is non-empty, makes the control visible.
            </summary>
            <param name="parent">Handle to the parent window.</param>
            <param name="bounds">Bounds of the control, in parent client coords.</param>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.CreateControl(System.Windows.Forms.IWin32Window)">
            <summary>
            Creates the control, does not assign it any meaningful size, does not make it visible.
            </summary>
            <param name="parent">Handle to the parent window.</param>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.OnButtonDblClk(System.Windows.Forms.Message@,System.Windows.Forms.MouseButtons)">
            <summary>
            Generates the mouse double-clicks when the mouse button is doubleclicked.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.OnButtonUp(System.Windows.Forms.Message@,System.Windows.Forms.MouseButtons)">
            <summary>
            Generates the mouse clicks when the mouse button is released.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.OnContextMenu(System.Windows.Forms.Message@)">
            <summary>
            Causes the context-menu event to fire.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.OnPaint">
            <summary>
            WM_PAINT.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.PaintBackground(System.Drawing.Graphics)">
            <summary>
            Paints the appropriately styled background for the status bar control.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.OnHandleChange">
            <summary>
            Specifies a notification method that is called when the handle for a window is changed. 
            </summary>
            
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Invokes the default window procedure associated with this window. 
            </summary>
            
            <param name="m">A <see cref="T:System.Windows.Forms.Message"></see> that is associated with the current Windows message. </param>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.GetDesiredSize(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Performs the bottom-up layouting stage, when the control calculates its desired size using the given constraints.
            Should give generally the same results as <see cref="T:JetBrains.CommonControls.IConstrainableControl"/>, but could employ the <paramref name="gc"/> device context for the sake of optimization.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="limit">The maximum available space (that could affect the shape of the control, or strip down unnecessary calculations over the invisible items).
            May be a <see cref="T:System.Drawing.Size"/> with width and height equal to <see cref="F:System.Int32.MaxValue"/>, which means that the size is not limited.</param>
            <returns>The desired size, must be no larger than <paramref name="limit"/>.</returns>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.SetLayout(JetBrains.UI.LayoutResult)">
            <summary>
            Tells the control the details about the new layout applied to it by the controlling entity in conjunction with some <see cref="T:JetBrains.UI.IPopupLayouter"/>.
            Typically, the control need not apply the given size and location because that should be done by the controlling entity.
            The control may change its presentation in response to the layouting details, for example, whether it's attached to the top or the bottom of the anchoring rect.
            </summary>
            <param name="layout">The layouting details.</param>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.GetTooltip(JetBrains.DataFlow.Lifetime,System.Drawing.Point)">
            <summary>
            Called by tooltip manager, if the tooltip is to be displayed
            </summary>
            <param name="lifetime"></param>
            <param name="point">Point in control's coordinates</param>
            <returns><see cref="T:JetBrains.UI.Tooltips.ITooltipInfo"/>, or <c>Null</c> if no tooltip should be displayed.</returns>
        </member>
        <member name="P:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.Bounds">
            <summary>
            Gets or sets the window bounds, in parent's client coordinates.
            </summary>
        </member>
        <member name="P:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.Data">
            <summary>
            Gets or sets the document this view represents.
            </summary>
        </member>
        <member name="P:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.Visible">
            <summary>
            Gets or sets whether the window is visible.
            </summary>
        </member>
        <member name="P:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="T:JetBrains.UI.StatusBar.JetStatusBarShim">
            <summary>
            Subclasses the Visual Studio WinAPI status bar window.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StatusBar.JetStatusBarShim.myStatusbarMessagesAll">
            <summary>
            All of the statusbar-specific messages.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StatusBar.JetStatusBarShim.myStatusbarMessagesExpected">
            <summary>
            Those of the statusbar-specific messages that we expect to come from VS to our statusbar.
            It's not that we handle them all, but we're aware of what they could do.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StatusBar.JetStatusBarShim.myStatusbarMessagesUnexpected">
            <summary>
            Those of the statusbar-specific messages that are not expected to come from VS to our statusbar.
            If such are discovered, it may be needed to think of how to manage them.
            For example, seeing <see cref="F:JetBrains.Interop.WinApi.WindowsMessages.SB_GETPARTS"/> would be some kind of a small f***-up.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StatusBar.JetStatusBarShim.myIndicatorViews">
            <summary>
            The list of the indicator windows we place in the status bar parts.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StatusBar.JetStatusBarShim.myLastHandle">
            <summary>
            Persists the MRU attached handle, so that we could kick it into recalculating even after we fully detach
            </summary>
        </member>
        <member name="F:JetBrains.UI.StatusBar.JetStatusBarShim.myPaddingAroundEachPart">
            <summary>
            Padding around each of the indicator parts placed in the status bar.
            The value is updated when we intercept the Devenv's queries for the status bar extents. NOTE: updated no more
            </summary>
        </member>
        <member name="F:JetBrains.UI.StatusBar.JetStatusBarShim.myRemappedPartsBuffer">
            <summary>
            When we change the status bar parts layout, this is the buffer that is passed around to the unmanaged code.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StatusBar.JetStatusBarShim.myVisibilityUpdatesWaiting">
            <summary>
            Whether there are pending visibility updates, and no new should be added (see <see cref="M:JetBrains.UI.StatusBar.JetStatusBarShim.OnPingStatusBar"/>).
            </summary>
        </member>
        <member name="F:JetBrains.UI.StatusBar.JetStatusBarShim.MinFirstPartWidth">
            <summary>
            Specifies the minimum width of the first statusbar part.
            We won't insert our content if the resulting first part (one with the meaningful text) is smaller than that. 
            </summary>
        </member>
        <member name="F:JetBrains.UI.StatusBar.JetStatusBarShim.OptionTrace">
            <summary>
            Verbose traces.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarShim.Attach(System.IntPtr)">
            <summary>
            Looks up a status bar on the given window, and attaches to it.
            Note: the status bar window always exists, even if the status bar is not shown in DEVENV.
            Throws on failure.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarShim.GetUnexpectedStatusBarMessages">
            <summary>
            Produces an “all but expected” statusbar messages collection.
            Useful for logging, but we'd like to rather manually enter an array of the things we do expect.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarShim.InvalidateSizeOf(System.IntPtr)">
            <summary>
            Forces the window to invalidate its size.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarShim.InvalidateSize">
            <summary>
            Makes the statusbar owner reapply the layout, so that we could remap its parts and inject our indicators.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarShim.OnPingStatusBar">
            <summary>
            Executed periodically.
            Syncs to the status bar properties.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarShim.OnSbGetBorders(System.Windows.Forms.Message@)">
            <summary>
            When Devenv is requesting the statusbar borders, store this info for our use.
            Those are various paddings in the status bar window.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarShim.OnSbSetParts(System.Windows.Forms.Message@)">
            <summary>
            Devenv is trying to assign parts to the status bar.
            This is the place where we modify them to make room for our own, and add new parts.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarShim.OnSbSetParts_Apply(System.Collections.Generic.IList{System.Drawing.Rectangle})">
            <summary>
            After all the parts' sizes are measured, apply them.
            </summary>
            <param name="rectBounds">Indicator bounds, in statusbar client coords.</param>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarShim.OnSbSetParts_Measure(System.Windows.Forms.Message@,System.Collections.Generic.IList{System.Drawing.Rectangle},JetBrains.UI.IGraphicsContainer)">
            <summary>
            Measures the statusbar and determines the placing of all the registered indicators.
            </summary>
            <param name="m">The message being processed.</param>
            <param name="rectBounds">Indicator bounds, in statusbar client coords.</param>
            <param name="gc">Provides graphics for measuring against.</param>
            <returns>Whether the base <see cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)"/> has been called in the course of action.</returns>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarShim.OnHandleChange">
            <summary>
            Specifies a notification method that is called when the handle for a window is changed.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarShim.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Invokes the default window procedure associated with this window. 
            </summary>
            
            <param name="m">A <see cref="T:System.Windows.Forms.Message"></see> that is associated with the current Windows message. </param>
        </member>
        <member name="P:JetBrains.UI.StatusBar.JetStatusBarShim.IndicatorData">
            <summary>
            Gets the list of indicator datas belonging to the indicator views this status bar hosts.
            </summary>
        </member>
        <member name="P:JetBrains.UI.StatusBar.JetStatusBarShim.IsVisible">
            <summary>
            Gets whether the status bar window is currently visible.
            </summary>
        </member>
        <member name="P:JetBrains.UI.StatusBar.JetStatusBarShim.IndicatorViews">
            <summary>
            Gets the list of indicator views this status bar hosts.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Application.StatusBar">
            <summary>
            Provides access to the Status Bar of the UI application.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.StatusBar.myIsVisible">
            <summary>
            <see cref="P:JetBrains.UI.Application.StatusBar.IsVisible"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Application.StatusBar.Indicators">
            <summary>
            Gets the collection of the status bar indicators.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Application.StatusBar.IsVisible">
            <summary>
            Gets whether the application status bar is currently visible (not turned off).
            </summary>
        </member>
        <member name="T:JetBrains.UI.Application.SubclassStatusBar">
            <summary>
            A status bar implementation that works by subclassing the standard WinAPI Status Bar control in the main window.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.SubclassStatusBar.myShim">
            <summary>
            Subclasses the window of the WinAPI status bar (be it DEVENV's or standalone app's).
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.SubclassStatusBar.StatusBarWindowClassName">
            <summary>
            Name of the common controls Windows class of the statusbar control window.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.SubclassStatusBar.FindStatusBarInMainWindow(System.IntPtr)">
            <summary>
            In an application window, looks up all of the child windows to find the status bar window. Throws on a failure.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.SubclassStatusBar.GetHwndToSubclass(JetBrains.UI.Application.IMainWindow)">
            <summary>
            Override this funct if you know the exact HWND of the status bar window to be subclassed.
            The default implementation looks up the best status bar window in the application main window.
            </summary>
            <param name="mainwin"></param>
        </member>
        <member name="M:JetBrains.UI.Application.SubclassStatusBar.InitStatusBarSubclassing(JetBrains.UI.Application.IMainWindow)">
            <summary>
            Enables the statusbar indicators support (WinAPI HWND StatusBar case).
            </summary>
            <param name="mainwin"></param>
        </member>
        <member name="M:JetBrains.UI.Application.SubclassStatusBar.ClearText">
            <summary>
             Clears the status bar text.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.SubclassStatusBar.SetText(System.String,System.Boolean)">
            <summary>
             Sets the status bar text.
            </summary>
            <param name="text">Text.</param>
            <param name="emphisized">Whether to apply special highlighting to the status bar text to emphasize that it's not a routine message.</param>
        </member>
        <member name="P:JetBrains.UI.Application.SubclassStatusBar.Indicators">
            <summary>
            Gets the collection of the status bar indicators.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Application.SubclassStatusBar.Text">
            <summary>
             Gets the text currently displayed in the status bar.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Application.UiApplicationMessageBoxHandler">
            <summary>
            Message box: show real UI message boxes when in UI shell mode, use Descriptor for info, and such.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.UiApplicationMessageBoxHandler.UiApplicationMessageBox(System.IntPtr,System.String,System.String,JetBrains.Interop.WinApi.MessageBoxFlags)">
            <summary>
            Implements the MessageBox that is owned by the main window and supplies the product name correctly.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.Tooltips.AvalonTooltipElement">
            <summary>
            Defines tooltips over Avalon elements.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Tooltips.TooltipElement">
            <summary>
            Base impl.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Tooltips.ITooltipElement">
            <summary>
            A generic element over which tooltips could be shown.
            The classic version is an HWND window, but now we need to add Avalon support.
            This object binds to the specific point and the specific tooltip text to be shown over that point.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Tooltips.ITooltipElement.AddExceptionData(System.Exception)">
            <summary>
            Adds data to the exception to report this element.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Tooltips.ITooltipElement.IsValid">
            <summary>
            Checks whether the element is still alive. If not, the tooltip will be dismissed.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Tooltips.ITooltipElement.ScreenToClient(System.Drawing.Point)">
            <summary>
            Converts a point from screen (mouse native) coordinates to the local client coordinates of the element.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Tooltips.ITooltipElement.OriginalPointClient">
            <summary>
            The point for which the element were originally created.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Tooltips.ITooltipElement.OriginalPointScreen">
            <summary>
            The point for which the element were originally created.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Tooltips.ITooltipElement.TooltipInfo">
            <summary>
            The tooltip info at the point for which the element were requested.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.Tooltips.AvalonTooltipElement.UIElement">
            <summary>
            The UI element over which the tooltip is shown.
            Note that, unlike <see cref="P:System.Windows.FrameworkElement.ToolTip"/>, the tooltip described by our <see cref="P:JetBrains.UI.Tooltips.ITooltipElement.TooltipInfo"/> does not necessarily represent the whole element area, but only a subpart designated by <see cref="M:JetBrains.UI.Tooltips.ITooltipInfo.HitTestToolArea(System.Windows.Point)"/>.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.Tooltips.AvalonTooltipManagerComponent">
            <summary>
            Initializes the Avalon tooltip event handling.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.Tooltips.AvalonTooltipManagerComponent.GetJetTooltipEvent">
            <summary>
            Fires when the tooltip is requested for the element under the mouse. Bubbles up the elements tree to see if somebody has a tooltip.
            Handle the event and call its arguments' <see cref="M:JetBrains.UI.Avalon.Tooltips.GetJetTooltipEventArgs.SetTooltip(System.Windows.UIElement,JetBrains.UI.Tooltips.ITooltipInfo)"/> to provide a tooltip.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.Tooltips.FindAvalonTooltipElementsAtCursor">
            <summary>
            Avalon tooltip provider.
            Finds elements to handle the <see cref="F:JetBrains.UI.Avalon.Tooltips.AvalonTooltipManagerComponent.GetJetTooltipEvent"/> call-for-tooltip event.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Tooltips.IFindTooltipElementsAtCursor">
            <summary>
            An entity to look for any <see cref="T:JetBrains.UI.Tooltips.ITooltipElement"/>s under the current cursor position (given by a <see cref="T:JetBrains.Interop.WinApi.MOUSEHOOKSTRUCT"/> from a mouse hook).
            </summary>
            <seealso cref="T:JetBrains.UI.Tooltips.ExportFindTooltipElementsAtCursorAttruibute"/>.
        </member>
        <member name="M:JetBrains.UI.Tooltips.IFindTooltipElementsAtCursor.TryFindElementUnderCursor(JetBrains.DataFlow.Lifetime,JetBrains.Interop.WinApi.MOUSEHOOKSTRUCT*)">
            <summary>
            Looks for any elements with tooltips under cursor.
            </summary>
            <param name="lifetime">Lifetime for the tooltip data returned (eg layouters).</param>
            <param name="pMouseHook">Mouse cursor position data.</param>
            <returns>The element found, or <c>Null</c> otherwise.</returns>
        </member>
        <member name="T:JetBrains.UI.Avalon.Tooltips.GetJetTooltipEventArgs">
            <summary>
            Arguments to the <see cref="F:JetBrains.UI.Avalon.Tooltips.AvalonTooltipManagerComponent.GetJetTooltipEvent"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.Tooltips.GetJetTooltipEventArgs.Lifetime">
            <summary>
            Lifetime for all the entities you might create for this tooltip session, e.g. popup layouters and tooltip renderers.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.Tooltips.GetJetTooltipEventArgs.HitElement">
            <summary>
            The element immediately hit by the mouse. Normally, if you get this event, you're an ancestor of the hit element (or the hit element itself).
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.Tooltips.GetJetTooltipEventArgs.myPointInRoot">
            <summary>
            The hit test point, in <see cref="F:JetBrains.UI.Avalon.Tooltips.GetJetTooltipEventArgs.myRootElement"/> coord space.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.Tooltips.GetJetTooltipEventArgs.myPointOnScreen">
            <summary>
            Needed for <see cref="T:JetBrains.UI.Tooltips.ITooltipElement"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.Tooltips.GetJetTooltipEventArgs.myRootElement">
            <summary>
            Root element of the tree, an ancestor for any possible hit element handling this event. Basically, just the element in which the <see cref="F:JetBrains.UI.Avalon.Tooltips.GetJetTooltipEventArgs.myPointInRoot"/> is initially defined.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Avalon.Tooltips.GetJetTooltipEventArgs.myTooltipElement">
            <summary>
            The result of a <see cref="M:JetBrains.UI.Avalon.Tooltips.GetJetTooltipEventArgs.SetTooltip(System.Windows.UIElement,JetBrains.UI.Tooltips.ITooltipInfo)"/> call.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Tooltips.GetJetTooltipEventArgs.GetPointInVisual(System.Windows.Media.Visual)">
            <summary>
            Gets the hit test point in local coordinate space of your element.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Avalon.Tooltips.GetJetTooltipEventArgs.SetTooltip(System.Windows.UIElement,JetBrains.UI.Tooltips.ITooltipInfo)">
            <summary>
            If you handle the event and would like to show a tooltip, call this method. Sets the <see cref="P:JetBrains.UI.Avalon.Tooltips.GetJetTooltipEventArgs.TooltipElement"/> property.
            The event will be marked as <see cref="P:System.Windows.RoutedEventArgs.Handled"/> automatically.
            </summary>
            <param name="element">The element to “own” the tooltip. Used for limiting the tooltip lifetime and treating the local coordinates in <paramref name="tti"/>'s tool area and the newly-created <see cref="T:JetBrains.UI.Tooltips.ITooltipElement"/>.</param>
            <param name="tti">The tooltip.</param>
        </member>
        <member name="P:JetBrains.UI.Avalon.Tooltips.GetJetTooltipEventArgs.TooltipElement">
            <summary>
            The result of a <see cref="M:JetBrains.UI.Avalon.Tooltips.GetJetTooltipEventArgs.SetTooltip(System.Windows.UIElement,JetBrains.UI.Tooltips.ITooltipInfo)"/> call.
            The entity firing the event must make sure this value is disposed of, eventually.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Avalon.Tooltips.GetJetTooltipEventHandler">
            <summary>
            Delegate to the <see cref="F:JetBrains.UI.Avalon.Tooltips.AvalonTooltipManagerComponent.GetJetTooltipEvent"/>.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Tooltips.ExportFindTooltipElementsAtCursorAttruibute">
            <summary>
            Attribute for <see cref="T:JetBrains.UI.Tooltips.IFindTooltipElementsAtCursor"/> impls.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Tooltips.ExportFindTooltipElementsAtCursorAttruibute.Priority">
            <summary>
            The higher the priority, the sooner the finder is asked (and can promote its own result in precedence of the others).
            </summary>
        </member>
        <member name="T:JetBrains.UI.Tooltips.FindWinFormsTooltipElementsAtCursor">
            <summary>
            Classic tooltip provider.
            Finds tooltips over WinForms controls that implement <see cref="T:JetBrains.UI.Tooltips.ITooltipProvider"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Tooltips.FindWinFormsTooltipElementsAtCursor.TryGetWinFormsTooltipProvider(JetBrains.Interop.WinApi.MOUSEHOOKSTRUCT*)">
            <summary>
            WinForms controls register by implementing an <see cref="T:JetBrains.UI.Tooltips.ITooltipProvider"/>. Try getting one here.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Tooltips.ITooltipInfo">
            <summary>
            Describes a tooltip on screen and provides the means for positioning it onscreen and controlling its lifetime.
            Don't dispose of tooltip infos until you're done with using their members, eg painters and layouters.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Tooltips.ITooltipInfo.HitTestToolArea(System.Windows.Point)">
            <summary>
            Checks whether the given point falls within the tool area of this tooltip. The tooltip is displayed while mouse pointer is within the tool area. One window may have more than one tooltip for different tool areas.
            </summary>
            <param name="pt">Point, in the client coordinates, to be tested for falling within the area.</param>
            <returns><c>True</c> if point is within the area, <c>False</c> otherwise.</returns>
        </member>
        <member name="P:JetBrains.UI.Tooltips.ITooltipInfo.Layouter">
            <summary>
            Gets the layouter that positions the tooltip onscreen.
            <c>Null</c> means the default layouter will be used, one that positions the tooltip against the mouse pointer.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Tooltips.ITooltipInfo.Painter">
            <summary>
            Gets the painter for the tooltip.
            Must be implemented. Must not be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Tooltips.ITooltipInfo.PopupWindowContext">
            <summary>
            Gets the popup window context that fires the actions upon which the tooltip is dismissed.
            <c>Null</c> means the default popup window context will be used.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Tooltips.ITooltipManager">
            <summary>
            An interface for the tooltip manager component.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Tooltips.ITooltipManager.Show(JetBrains.DataFlow.LifetimeDefinition,JetBrains.CommonControls.IWindowlessControl,JetBrains.UI.PopupWindowManager.IPopupWindowContext,JetBrains.UI.PopupWindowManager.HideFlags,System.TimeSpan)">
            <summary>
            Displays a tooltip using the given content and position, until user discards it with the action specified, or the timeout expires.
            </summary>
            <param name="lifetimeDefinition">The lifetime definition of the tooltip session. Limits the tooltip life, also is terminated by the tooltip when it is hidden. Bind any tooltip-related resources to this lifetime definition.</param>
            <param name="painter">The tip content layouter and painter.</param>
            <param name="context">Parent context for the tooltip popup window, and its layouter.</param>
            <param name="hideflags">The list of actions that discard the tooltip (app deactivation is implied).</param>
            <param name="timeout">Time interval to display the tooltip for. If positive, specifies the number of milliseconds to show the tooltip for. If <c>0</c>, uses the default timeout from <see cref="P:JetBrains.UI.Tooltips.TipControlView.DefaultTimeout"/>.</param>
            <returns>The popup window that controls the tooltip, or <c>Null</c> if the tooltip has failed to show (eg tooltips are not allowed at the moment, see <see cref="M:JetBrains.UI.Tooltips.TipControlView.GetCanShowTooltips(JetBrains.UI.Application.IIsApplicationActiveState)"/>).</returns>
        </member>
        <member name="P:JetBrains.UI.Tooltips.ITooltipManager.ContentMargin">
            <summary>
            Gets the margin that separates the content rendered within the tooltip from the tooltip window edge.
            Also, this is the offset from the tip control location to the tip text location, which is useful for precise positioning of the text.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Tooltips.ITooltipManager.HoverDelay">
            <summary>
            Gets the standard hover delay, a period of time between the mouse-over and tooltip display, in milliseconds.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Tooltips.ITooltipManager.PopupWindowMutex">
            <summary>
            Gets the popup window mutex that defines the default identity for the tooltips, and thus prevents from showing more than one at a time.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Tooltips.ITooltipManager.RenderParams">
            <summary>
            Gets the default rendering parameters for a tooltip.
            Do not modify this instance.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Tooltips.ITooltipManagerEx.Show(JetBrains.UI.Tooltips.ITooltipManager,JetBrains.DataFlow.LifetimeDefinition,System.String,JetBrains.UI.PopupWindowManager.IPopupWindowContext)">
            <summary>
            Displays a tooltip using the given content and position, until user discards it with the action specified, or the timeout expires.
            </summary>
            <param name="thіs"></param>
            <param name="lifetimeDefinition">The lifetime definition of the tooltip session. Limits the tooltip life, also is terminated by the tooltip when it is hidden. Bind any tooltip-related resources to this lifetime definition.</param>
            <param name="text">Text to be displayed in the tooltip window.</param>
            <param name="context">Parent context and layouter for the tooltip popup window.</param>
        </member>
        <member name="M:JetBrains.UI.Tooltips.ITooltipManagerEx.Show(JetBrains.UI.Tooltips.ITooltipManager,JetBrains.DataFlow.LifetimeDefinition,JetBrains.UI.RichText.RichText,JetBrains.UI.PopupWindowManager.IPopupWindowContext)">
            <summary>
            Displays a tooltip using the given content and position, until user discards it with the action specified, or the timeout expires.
            </summary>
            <param name="thіs"></param>
            <param name="lifetimeDefinition">The lifetime definition of the tooltip session. Limits the tooltip life, also is terminated by the tooltip when it is hidden. Bind any tooltip-related resources to this lifetime definition.</param>
            <param name="text">Text to be displayed in the tooltip window.</param>
            <param name="context">Parent context and layouter for the tooltip popup window.</param>
        </member>
        <member name="M:JetBrains.UI.Tooltips.ITooltipManagerEx.Show(JetBrains.UI.Tooltips.ITooltipManager,JetBrains.DataFlow.LifetimeDefinition,JetBrains.UI.RichText.RichTextBlock,JetBrains.UI.PopupWindowManager.IPopupWindowContext,System.TimeSpan)">
            <summary>
            Displays a tooltip using the given content and position, until user discards it with the action specified, or the timeout expires.
            </summary>
            <param name="thіs"></param>
            <param name="lifetimeDefinition">The lifetime definition of the tooltip session. Limits the tooltip life, also is terminated by the tooltip when it is hidden. Bind any tooltip-related resources to this lifetime definition.</param>
            <param name="text">Text to be displayed in the tooltip window.</param>
            <param name="context">Parent context and layouter for the tooltip popup window.</param>
            <param name="timeout">Timeout before tooltip disappears</param>
        </member>
        <member name="M:JetBrains.UI.Tooltips.ITooltipManagerEx.Show(JetBrains.UI.Tooltips.ITooltipManager,JetBrains.DataFlow.LifetimeDefinition,JetBrains.CommonControls.IWindowlessControl,JetBrains.UI.PopupWindowManager.IPopupWindowContext)">
            <summary>
            Displays a tooltip using the given content and position, until user discards it with the action specified, or the timeout expires.
            </summary>
            <param name="thіs"></param>
            <param name="lifetimeDefinition">The lifetime definition of the tooltip session. Limits the tooltip life, also is terminated by the tooltip when it is hidden. Bind any tooltip-related resources to this lifetime definition.</param>
            <param name="painter">The tip content layouter and painter.</param>
            <param name="context">Parent context and layouter for the tooltip popup window.</param>
        </member>
        <member name="M:JetBrains.UI.Tooltips.ITooltipManagerEx.Show(JetBrains.UI.Tooltips.ITooltipManager,System.String,System.Func{JetBrains.DataFlow.Lifetime,JetBrains.UI.PopupWindowManager.IPopupWindowContext})">
            <summary>
            Displays a tooltip using the given content and position, until user discards it with the action specified, or the timeout expires.
            Uses the default layouter for the context provided.
            </summary>
            <param name="thіs"></param>
            <param name="text">Text to be displayed in the tooltip window.</param>
            <param name="FGetContext">Parent context and layouter for the tooltip popup window.</param>
        </member>
        <member name="M:JetBrains.UI.Tooltips.ITooltipManagerEx.Show(JetBrains.UI.Tooltips.ITooltipManager,JetBrains.UI.RichText.RichText,System.Func{JetBrains.DataFlow.Lifetime,JetBrains.UI.PopupWindowManager.IPopupWindowContext})">
            <summary>
            Displays a tooltip using the given content and position, until user discards it with the action specified, or the timeout expires.
            Uses the default layouter for the context provided.
            </summary>
            <param name="thіs"></param>
            <param name="text">Text to be displayed in the tooltip window.</param>
            <param name="FGetContext">Parent context and layouter for the tooltip popup window.</param>
        </member>
        <member name="M:JetBrains.UI.Tooltips.ITooltipManagerEx.Show(JetBrains.UI.Tooltips.ITooltipManager,JetBrains.UI.RichText.RichTextBlock,System.Func{JetBrains.DataFlow.Lifetime,JetBrains.UI.PopupWindowManager.IPopupWindowContext})">
            <summary>
            Displays a tooltip using the given content and position, until user discards it with the action specified, or the timeout expires.
            Uses the default layouter for the context provided.
            </summary>
            <param name="thіs"></param>
            <param name="text">Text to be displayed in the tooltip window.</param>
            <param name="FGetContext">Parent context and layouter for the tooltip popup window.</param>
        </member>
        <member name="M:JetBrains.UI.Tooltips.ITooltipManagerEx.Show(JetBrains.UI.Tooltips.ITooltipManager,JetBrains.CommonControls.IWindowlessControl,System.Func{JetBrains.DataFlow.Lifetime,JetBrains.UI.PopupWindowManager.IPopupWindowContext})">
            <summary>
            Displays a tooltip using the given content and position, until user discards it with the action specified, or the timeout expires.
            Uses the default layouter for the context provided.
            </summary>
            <param name="thіs"></param>
            <param name="painter">Content to be displayed in the tooltip window.</param>
            <param name="FGetContext">Parent context and layouter for the tooltip popup window.</param>
        </member>
        <member name="M:JetBrains.UI.Tooltips.ITooltipManagerEx.Show(JetBrains.UI.Tooltips.ITooltipManager,System.String,JetBrains.UI.PopupWindowManager.PopupWindowContextSource)">
            <summary>
            Displays a tooltip using the given content and position, until user discards it with the action specified, or the timeout expires.
            Uses the default layouter for the context provided.
            </summary>
            <param name="thіs"></param>
            <param name="text">Text to be displayed in the tooltip window.</param>
            <param name="contextsource">Parent context and layouter for the tooltip popup window.</param>
        </member>
        <member name="M:JetBrains.UI.Tooltips.ITooltipManagerEx.Show(JetBrains.UI.Tooltips.ITooltipManager,JetBrains.UI.RichText.RichText,JetBrains.UI.PopupWindowManager.PopupWindowContextSource)">
            <summary>
            Displays a tooltip using the given content and position, until user discards it with the action specified, or the timeout expires.
            Uses the default layouter for the context provided.
            </summary>
            <param name="thіs"></param>
            <param name="text">Text to be displayed in the tooltip window.</param>
            <param name="contextsource">Parent context and layouter for the tooltip popup window.</param>
        </member>
        <member name="M:JetBrains.UI.Tooltips.ITooltipManagerEx.Show(JetBrains.UI.Tooltips.ITooltipManager,JetBrains.UI.RichText.RichTextBlock,JetBrains.UI.PopupWindowManager.PopupWindowContextSource)">
            <summary>
            Displays a tooltip using the given content and position, until user discards it with the action specified, or the timeout expires.
            Uses the default layouter for the context provided.
            </summary>
            <param name="thіs"></param>
            <param name="text">Text to be displayed in the tooltip window.</param>
            <param name="contextsource">Parent context and layouter for the tooltip popup window.</param>
        </member>
        <member name="M:JetBrains.UI.Tooltips.ITooltipManagerEx.Show(JetBrains.UI.Tooltips.ITooltipManager,JetBrains.CommonControls.IWindowlessControl,JetBrains.UI.PopupWindowManager.PopupWindowContextSource)">
            <summary>
            Displays a tooltip using the given content and position, until user discards it with the action specified, or the timeout expires.
            Uses the default layouter for the context provided.
            </summary>
            <param name="thіs"></param>
            <param name="painter">Content to be displayed in the tooltip window.</param>
            <param name="contextsource">Parent context and layouter for the tooltip popup window.</param>
        </member>
        <member name="T:JetBrains.UI.Tooltips.TipControlView">
            <summary>
            A control that implements the tooltip window.
            Don't use this class directly if you need to show a tooltip. Instead, either use the TipControl static class for one-time tooltips, or implement the <see cref="T:JetBrains.UI.Tooltips.ITooltipProvider"/> interface on your window.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Tooltips.TipControlView.myDefaultTimeout">
            <summary>
            <see cref="P:JetBrains.UI.Tooltips.TipControlView.DefaultTimeout"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Tooltips.TipControlView.myRenderParams">
            <summary>
            <see cref="P:JetBrains.UI.Tooltips.TipControlView.RenderParams"/>, lazy-init.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Tooltips.TipControlView.myAutoActivate">
            <summary>
            <see cref="T:JetBrains.CommonControls.IConstrainableControl"/> worker field.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Tooltips.TipControlView.myPainter">
            <summary>
            Tip painter, as a windowless conrtol.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Tooltips.TipControlView.myTimeout">
            <summary>
            <see cref="P:JetBrains.UI.Tooltips.TipControlView.Timeout"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Tooltips.TipControlView.myTimerTimeout">
            <summary>
            Waits for the tooltip to hide.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Tooltips.TipControlView.myWantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Tooltips.TipControlView.#ctor(JetBrains.CommonControls.IWindowlessControl,System.Windows.Forms.IWin32Window)">
            <summary>
            Creates a tip control with the given painter inside.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Tooltips.TipControlView.GetCanShowTooltips(JetBrains.UI.Application.IIsApplicationActiveState)">
            <summary>
            Gets whether any tooltips are allowed to be shown at the moment.
            <see cref="T:JetBrains.UI.Tooltips.TipControlView"/> won't check this, it will show anyway, so it's the caller's duty.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Tooltips.TipControlView.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Tooltips.TipControlView.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Layout"></see> event.
            </summary>
            
            <param name="levent">A <see cref="T:System.Windows.Forms.LayoutEventArgs"></see> that contains the event data. </param>
        </member>
        <member name="M:JetBrains.UI.Tooltips.TipControlView.OnVisibleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.VisibleChanged"></see> event.
            </summary>
            
            <param name="e">The <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        </member>
        <member name="P:JetBrains.UI.Tooltips.TipControlView.DefaultTimeout">
            <summary>
            The default timeout, the maximum time span for which the tooltip is visible, in milliseconds.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Tooltips.TipControlView.RenderParams">
            <summary>
            Gets the default rendering parameters for a tooltip.
            Do not modify this instance.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Tooltips.TipControlView.Timeout">
            <summary>
            The default timeout, the maximum time span for which the tooltip is visible, in milliseconds.
            Initially set to <see cref="P:JetBrains.UI.Tooltips.TipControlView.DefaultTimeout"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Tooltips.TipControlView.ShowWithoutActivation">
            <summary>
            Gets a value indicating whether the window will be activated when it is shown.
            </summary>
            
            <returns>
            True if the window will not be activated when it is shown; otherwise, false. The default is false.
            </returns>
            
        </member>
        <member name="P:JetBrains.UI.Tooltips.TipControlView.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Tooltips.TipControlView.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Tooltips.TipControlView.Dim">
            <summary>
            Dimension constants for the tooltip control.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Tooltips.TipControlView.Dim.Border">
            <summary>
            Width and height of the horizontal and vertical border sides.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Tooltips.TipControlView.Dim.Padding">
            <summary>
            Padding between the border and tooltip's inner content.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Tooltips.TooltipInfo">
            <summary>
            The standard implementation of the <see cref="T:JetBrains.UI.Tooltips.ITooltipInfo"/> interface.
            Don't dispose of this instance until you're done with using its members, eg painters and layouters.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Tooltips.TooltipInfo.myLayouter">
            <summary>
            <see cref="P:JetBrains.UI.Tooltips.TooltipInfo.Layouter"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Tooltips.TooltipInfo.myPopupWindowContext">
            <summary>
            <see cref="P:JetBrains.UI.Tooltips.TooltipInfo.PopupWindowContext"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Tooltips.TooltipInfo.myTipPainter">
            <summary>
            <see cref="P:JetBrains.UI.Tooltips.TooltipInfo.Painter"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Tooltips.TooltipInfo.myToolArea">
            <summary>
            <see cref="P:JetBrains.UI.Tooltips.TooltipInfo.ToolArea"/>, used by <see cref="M:JetBrains.UI.Tooltips.TooltipInfo.HitTestToolArea(System.Windows.Point)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Tooltips.TooltipInfo.#ctor(JetBrains.CommonControls.IWindowlessControl,System.Windows.Rect)">
            <summary>
            Creates a tooltip info from the raw parameters.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Tooltips.TooltipInfo.#ctor(JetBrains.CommonControls.IWindowlessControl,System.Drawing.Rectangle)">
            <summary>
            Creates a tooltip info from the raw parameters.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Tooltips.TooltipInfo.#ctor(JetBrains.UI.RichText.RichText,System.Windows.Rect)">
            <summary>
            Creates a tooltip info upon the supplied text and with the specified tool area, in client coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Tooltips.TooltipInfo.#ctor(JetBrains.UI.RichText.RichText,System.Drawing.Rectangle)">
            <summary>
            Creates a tooltip info upon the supplied text and with the specified tool area, in client coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Tooltips.TooltipInfo.#ctor(JetBrains.UI.RichText.RichText,System.Windows.Forms.Control)">
            <summary>
            Creates a tooltip info upon the supplied text, acquiring the tool area from the given control's client rectangle.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Tooltips.TooltipInfo.#ctor(JetBrains.UI.RichText.RichTextBlock,System.Windows.Forms.Control)">
            <summary>
            Creates a tooltip info upon the supplied text, acquiring the tool area from the given control's client rectangle.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Tooltips.TooltipInfo.#ctor(JetBrains.UI.RichText.RichTextBlock,System.Windows.Rect)">
            <summary>
            Creates a tooltip info upon the supplied text and with the specified tool area, in client coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Tooltips.TooltipInfo.#ctor(JetBrains.UI.RichText.RichTextBlock,System.Drawing.Rectangle)">
            <summary>
            Creates a tooltip info upon the supplied text and with the specified tool area, in client coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Tooltips.TooltipInfo.HitTestToolArea(System.Windows.Point)">
            <summary>
            Checks whether the given point falls within the tool area of this tooltip. The tooltip is displayed while mouse pointer is within the tool area. One window may have more than one tooltip for different tool areas.
            </summary>
            <param name="pt">Point, in the client coordinates, to be tested for falling within the area.</param>
            <returns><c>True</c> if point is within the area, <c>False</c> otherwise.</returns>
        </member>
        <member name="P:JetBrains.UI.Tooltips.TooltipInfo.ToolArea">
            <summary>
            Gets the tool area of this tooltip, in client coordinates.
            An empty rectangle means “no constraints”.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Tooltips.TooltipInfo.Layouter">
            <summary>
            Gets or sets the layouter that positions the tooltip onscreen.
            <c>Null</c> means the default layouter will be used, one that positions the tooltip against the mouse pointer.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Tooltips.TooltipInfo.Painter">
            <summary>
            Gets the painter for the tooltip.
            Must be implemented. Must not be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Tooltips.TooltipInfo.PopupWindowContext">
            <summary>
            Gets or sets the popup window context that fires the actions upon which the tooltip is dismissed.
            <c>Null</c> means the default popup window context will be used.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Tooltips.TooltipManagerComponent">
            <summary>
            An implementation for the <see cref="T:JetBrains.UI.Tooltips.ITooltipManager"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Tooltips.TooltipManagerComponent.myContentMarging">
            <summary>
            Back-end for <see cref="P:JetBrains.UI.Tooltips.ITooltipManager.ContentMargin"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Tooltips.TooltipManagerComponent.myCurrentTooltip">
            <summary>
            The element (HWND in classic case) that owns the currently displayed tooltip, or the tooltip that is about to be shown after a delay.
            <c>Null</c> if not displaying or awaiting the tooltip.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Tooltips.TooltipManagerComponent.myScreenCursorPositionWhenDismissedWithEsc">
            <summary>
            When user hits ESC to dismiss the tooltip, gets the prev cursor position to avoid re-showing the tooltip immediately over the same element.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Tooltips.TooltipManagerComponent.CreateTooltipView">
            <summary>
            Creates and immediately displays the tooltip, as described by <see cref="F:JetBrains.UI.Tooltips.TooltipManagerComponent.myCurrentTooltip"/>.
            To schedule display on hover, fill the data fields and wind up this method on a timer.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Tooltips.TooltipManagerComponent.DestroyTooltip">
            <summary>
            Destroys the currently visible tooltip and cleans up its data fields.
            Does nothing if no tooltip is currently visible.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Tooltips.TooltipManagerComponent.OnKeyboardAction(System.Object,JetBrains.UI.Interop.HookEventArgs)">
            <summary>
            Keyboard hook. Non-UI-thread messages ignored.
            Closes the tooltip on ESC, avoids displaying it again for the same control for a while.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Tooltips.TooltipManagerComponent.OnMouseAction(System.Object,JetBrains.UI.Interop.HookEventArgs)">
            <summary>
            Mouse hook. Any thread but UI will be ignored.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Tooltips.TooltipManagerComponent.OnMouseMove_CheckCreate(JetBrains.DataFlow.LifetimeDefinition,JetBrains.UI.Tooltips.ITooltipElement)">
            <summary>
            Show the new tooltip for the hovered area (only if we're not displaying a tooltip).
            </summary>
        </member>
        <member name="M:JetBrains.UI.Tooltips.TooltipManagerComponent.OnMouseMove_CheckCreate_Condition(JetBrains.UI.Tooltips.ITooltipElement)">
            <summary>
            Condition of creating the new tooltip for <see cref="M:JetBrains.UI.Tooltips.TooltipManagerComponent.OnMouseMove_CheckCreate(JetBrains.DataFlow.LifetimeDefinition,JetBrains.UI.Tooltips.ITooltipElement)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Tooltips.TooltipManagerComponent.OnMouseMove_CheckDestroy(System.Drawing.Point)">
            <summary>
            Remove tooltip if we've exited its tool area.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Tooltips.TooltipManagerComponent.ShowCore(JetBrains.DataFlow.LifetimeDefinition,JetBrains.CommonControls.IWindowlessControl,JetBrains.UI.PopupWindowManager.IPopupWindowContext,JetBrains.UI.PopupWindowManager.HideFlags,System.TimeSpan)">
            <summary>
            Core impl for <see cref="M:JetBrains.UI.Tooltips.ITooltipManager.Show(JetBrains.DataFlow.LifetimeDefinition,JetBrains.CommonControls.IWindowlessControl,JetBrains.UI.PopupWindowManager.IPopupWindowContext,JetBrains.UI.PopupWindowManager.HideFlags,System.TimeSpan)"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Tooltips.TooltipManagerComponent.JetBrains#UI#Tooltips#ITooltipManager#ContentMargin">
            <summary>
            Gets the margin that separates the content rendered within the tooltip from the tooltip window edge.
            Also, this is the offset from the tip control location to the tip text location, which is useful for precise positioning of the text.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Tooltips.TooltipManagerComponent.JetBrains#UI#Tooltips#ITooltipManager#HoverDelay">
            <summary>
            Gets the standard hover delay, a period of time between the mouse-over and tooltip display, in milliseconds.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Tooltips.TooltipManagerComponent.JetBrains#UI#Tooltips#ITooltipManager#PopupWindowMutex">
            <summary>
            Gets the popup window mutex that defines the default identity for the tooltips, and thus prevents from showing more than one at a time.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Tooltips.TooltipManagerComponent.JetBrains#UI#Tooltips#ITooltipManager#RenderParams">
            <summary>
            Gets the default rendering parameters for a tooltip.
            Do not modify this instance.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Tooltips.TooltipManagerComponent.CurrentTooltipElementData.TooltipView">
            <summary>
            The control that renders the tooltip.
            <c>Null</c> if not displaying a tooltip.
            Check this field for <c>Null</c> to determine whether the tooltip is currently visible.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Tooltips.TooltipProvider">
            <summary>
            A simple tooltip provider implementation for the cases when the tooltip provider is external to the window it's requested on.
            If you're implementing the tooltip-providing window class, implement the <see cref="T:JetBrains.UI.Tooltips.ITooltipProvider"/> interface instead.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Tooltips.TooltipProvider.#ctor">
            <summary>
            Creates a tooltip provider without a tooltip yet, sink the <see cref="F:JetBrains.UI.Tooltips.TooltipProvider.TooltipRequested"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Tooltips.TooltipProvider.#ctor(System.Action{JetBrains.DataFlow.InOutEventArgs{System.Drawing.Point,JetBrains.UI.Tooltips.ITooltipInfo}})">
            <summary>
            Creates a tooltip provider with one handler.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Tooltips.TooltipProvider.TooltipRequested">
            <summary>
            Fires when the tooltip is requested by the caller.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Tooltips.TooltipProvider.GetTooltip(JetBrains.DataFlow.Lifetime,System.Drawing.Point)">
            <summary>
            Called by tooltip manager, if the tooltip is to be displayed
            </summary>
            <param name="lifetime"></param>
            <param name="point">Point in control's coordinates</param>
            <returns><see cref="T:JetBrains.UI.Tooltips.ITooltipInfo"/>, or <c>Null</c> if no tooltip should be displayed.</returns>
        </member>
        <member name="T:JetBrains.UI.Tooltips.WinFormsTooltipElement">
            <summary>
            Tooltips over WinForms controls that implement <see cref="T:JetBrains.UI.Tooltips.ITooltipProvider"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Tooltips.WinFormsTooltipElement.TooltipProvider">
            <summary>
            Optional. The tooltip provider on the element (if applicable to the origin of the tooltip element, as is in the case of WinForms elements; used for exception diag mostly).
            </summary>
        </member>
        <member name="M:JetBrains.UI.Tooltips.WinFormsTooltipElement.IsValid">
            <summary>
            Checks whether the HWND belongs to a still-living .NET control or a good window.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ToolWindowManagement.TabRenamePrompt.Prompt(System.String,System.String)">
            <summary>
            Asks user for a new tab name. Returns null on cancel
            </summary>
        </member>
        <member name="F:JetBrains.UI.src.Updates.Actions.TestUpdatesXsltDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.UI.src.Updates.Actions.TestUpdatesXsltDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.UI.src.Updates.Actions.TestUpdatesXsltDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Updates.UpdateFilterRunner">
            <summary>
            Runs the updates filter script downloaded from the server.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.UpdateFilterRunner.RunFilter(System.IO.Stream,System.Action{System.Xml.XmlWriter},JetBrains.UI.Updates.Utils.UpdateXsltTestResult)">
            <summary>
            Runs the remote-received Updates filter data against the local configuration.
            Returns the list of products that pass the filter.
            </summary>
            <param name="streamFilter">XSLT filter, as received from the server.</param>
            <param name="FWriteLocalEnvironmentData">The func to write the XML DOC to run the <paramref name="streamFilter"/> against.</param>
            <param name="updateXsltTestResult"></param>
            <returns>The list of updates available for our instance.</returns>
        </member>
        <member name="T:JetBrains.UI.Updates.UpdateInfo">
            <summary>
            Data about individual updates available for the current product.
            A collection of such structs is the output of the check-for-updates subsystem.
            Note: fields serialized as elements for the ease of XSLT processing, as we can add a new element to the parent scope at any time.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateInfo.RootElementName">
            <summary>
            Root element of the document containing a collection of <see cref="T:JetBrains.UI.Updates.UpdateInfo"/> structures.
            The children of those element should be of the <see cref="T:JetBrains.UI.Updates.UpdateInfo"/> type, in the XML Serializer sense.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateInfo.CompanyName">
            <summary>
            <para>Vendor name.</para>
            <para><see cref="F:JetBrains.Application.CompanyInfo.Name"/> for JetBrains products.</para>
            <para>MUST be present.</para>
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateInfo.Description">
            <summary>
            A freehand description of this update.
            <para>Optional.</para>
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateInfo.DownloadUri">
            <summary>
            <para>The URI from which the installation package could be download. This MUST be the direct download link, not the download HTML page (see <see cref="F:JetBrains.UI.Updates.UpdateInfo.InformationUri"/> for that), as the updater might use it for fetching the installation package.</para>
            <para>This URI need not be unique and could point to the same versionless verbatim for any most recent release builds.</para>
            <para>Optional.</para>
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateInfo.IconData">
            <summary>
            <para>A BASE64 stream with a serialized <see cref="T:System.Drawing.Bitmap"/> to be displayed as an icon for this update.</para>
            <para>Optional.</para>
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateInfo.InformationUri">
            <summary>
            <para>The identity of this update. A link to the online information page for this particular update. MUST be unique among ALL updates — not only those currently available, but also any past and future ones.</para>
            <para>MUST be present.</para>
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateInfo.IsFree">
            <summary>
            <para>Whether this will be a free update.</para>
            <para>If <c>True</c>, then the customer will not have to pay for the product.</para>
            <para>If <c>False</c>, then the upgrade MIGHT require a license.</para>
            <para>Optional.</para>
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateInfo.PriceTag">
            <summary>
            <para>If the pricing information is available for the product, specifies the price tag in freehand form.</para>
            <para><see cref="F:JetBrains.UI.Updates.UpdateInfo.IsFree"/> should be used for free upgrades instead.</para>
            <para>Optional.</para>
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateInfo.ProductFullName">
            <summary>
            <para>Full name of the product installed by this update, which includes the product name plus any marketing version. This should not include the company name.</para>
            <para><see cref="P:JetBrains.Application.IApplicationDescriptor.ProductFullName"/> for JetBrains products.</para>
            <para><see cref="F:JetBrains.UI.Updates.UpdateInfo.ProductName"/> will be used if not specified.</para>
            <para>Optional.</para>
            </summary>
            <example><c>ReSharper 2.5.1</c></example>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateInfo.ProductName">
            <summary>
            <para>Short name of the product installed by this update. This should include neither company name nor version number.</para>
            <para><see cref="!:IApplicationDescriptor.ProductName"/> for JetBrains products.</para>
            <para>MUST be present.</para>
            </summary>
            <example><c>ReSharper</c></example>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateInfo.ProductVersion">
            <summary>
            <para>The four-component technical version of the product installed by this update.</para>
            <para>MUST be present.</para>
            </summary>
            <example><c>4.5.1234.17</c></example>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateInfo.ReservedA">
            <summary>
            All custom attributes go in here.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateInfo.ReservedE">
            <summary>
            All custom elements go in here.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateInfo.Title">
            <summary>
            <para>Short title for the update.</para>
            <para>MUST be present.</para>
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateInfo.UpdateKind">
            <summary>
            <para>The kind of the update, see <see cref="T:JetBrains.UI.Updates.UpdateInfo.PredefinedUpdateKinds"/> for recognized values.</para>
            <para>The predefined values are replaced with display text when presented, and custom values are presented as is.</para>
            <para>Optional.</para>
            </summary>
        </member>
        <member name="P:JetBrains.UI.Updates.UpdateInfo.Identity">
            <summary>
            Gets the Identity of this instance, which is the <see cref="F:JetBrains.UI.Updates.UpdateInfo.InformationUri"/>.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Updates.UpdateInfo.PredefinedUpdateKinds">
            <summary>
            <see cref="F:JetBrains.UI.Updates.UpdateInfo.UpdateKind"/> recognized values.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateInfo.PredefinedUpdateKinds.Service">
            <summary>
            This is a service update and it's generally for fixing the bugs.
            </summary>
            <example><c>ReSharper 3.0.1</c> after <c>ReSharper 3.0</c></example>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateInfo.PredefinedUpdateKinds.Features">
            <summary>
            This is a new release that includes new features.
            </summary>
            <example><c>ReSharper 4.0</c> after <c>ReSharper 3.0</c></example>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateInfo.PredefinedUpdateKinds.Preview">
            <summary>
            This is a prerelease build, quality questionable.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Updates.UpdateInfoContainer">
            <summary>
            <para>While <see cref="T:JetBrains.UI.Updates.UpdateInfo"/> is the class that's downloaded from the server, this class wraps it and stores locally, along with additional info like whether it were shown to the user, or were ignored.</para>
            <para><see cref="P:JetBrains.UI.Updates.UpdateInfo.Identity"/> is the identity. The <see cref="T:JetBrains.UI.Updates.UpdateInfo"/> is replaced on each new download.</para>
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateInfoContainer.InitialSnoozeInterval">
            <summary>
            When the update is first downloaded, its <see cref="F:JetBrains.UI.Updates.UpdateInfoContainer.SnoozeInterval"/> is assumed to be <see cref="F:JetBrains.UI.Updates.UpdateInfoContainer.InitialSnoozeInterval"/>.
            On each next snooze, <see cref="M:JetBrains.UI.Updates.UpdateInfoContainer.Snooze"/> adjusts the <see cref="F:JetBrains.UI.Updates.UpdateInfoContainer.SnoozeInterval"/> to have a new value.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateInfoContainer.AdvertiseAfter">
            <summary>
            <para>The update popup should not be displayed before this date (UTC).</para>
            <para>Used for snoozing the update notifications on the local machine.</para>
            <para>Initially <c>Null</c>, then set by <see cref="M:JetBrains.UI.Updates.UpdateInfoContainer.Snooze"/>.</para>
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateInfoContainer.Category">
            <summary>
            The owning category.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateInfoContainer.DataProperty">
            <summary>
            The update info, as downloaded from the server.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateInfoContainer.SnoozeInterval">
            <summary>
            <para>Recommended interval for the next snooze.</para>
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.UpdateInfoContainer.CreateViewWinForms(JetBrains.UI.Application.OpensUri,JetBrains.UI.PopupMenu.JetPopupMenus)">
            <summary>
            Creates a WinForms view for this update.
            </summary>
            <param name="opensUri"></param>
            <param name="jetPopupMenus"></param>
        </member>
        <member name="M:JetBrains.UI.Updates.UpdateInfoContainer.Snooze">
            <summary>
            Snoozes the <see cref="F:JetBrains.UI.Updates.UpdateInfoContainer.AdvertiseAfter"/> value.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.UpdateInfoContainer.Snooze(System.TimeSpan)">
            <summary>
            Snoozes the <see cref="F:JetBrains.UI.Updates.UpdateInfoContainer.AdvertiseAfter"/> value.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.UpdateInfoContainer.ReadFromStream(JetBrains.UI.Updates.UpdatesCategory,System.Xml.XmlReader)">
            <summary>
            Creates a category when a new one is added (by user).
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.UpdateInfoContainer.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj" /> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.Updates.UpdateInfoContainer.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.Updates.UpdateInfoContainer.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.Updates.UpdateInfoContainer.Equals(JetBrains.UI.Updates.UpdateInfoContainer)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="P:JetBrains.UI.Updates.UpdateInfoContainer.Data">
            <summary>
            The update info, as downloaded from the server.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Updates.UpdateInfoContainer.Identity">
            <summary>
            Identity for this update, as taken from <see cref="P:JetBrains.UI.Updates.UpdateInfoContainer.Data"/>-&gt;<see cref="P:JetBrains.UI.Updates.UpdateInfo.Identity"/>.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo">
            <summary>
            Base class for the data about the local environment against which the updates consider their applicability.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo.DateTimeSubInfo">
            <summary>
            Extensive date components to have them available for queries in the XML form.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo.DateTimeSubInfo.Date">
            <summary>
            The date only in the standard ISO 8601 format.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo.DateTimeSubInfo.DateTime">
            <summary>
            The date-time in the standard ISO 8601 format.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo.DateTimeSubInfo.Days2000">
            <summary>
            For the ease of comparison, the date as a single integer: the number of days since Jan 1, 2000.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo.DateTimeSubInfo.Time">
            <summary>
            The time only in the standard ISO 8601 format.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo.VersionSubInfo">
            <summary>
            Extensive version components to have them available for queries in the XML form.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo.VersionSubInfo.Build">
            <summary>
            The single version component.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo.VersionSubInfo.Dot2">
            <summary>
            Four-component version string, <c>Major.Minor</c> format, eg <c>1.2</c>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo.VersionSubInfo.Dot3">
            <summary>
            Four-component version string, <c>Major.Minor.Build</c> format, eg <c>1.2.3</c>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo.VersionSubInfo.Dot4">
            <summary>
            Four-component version string, <c>Major.Minor.Build.Revision</c> format, eg <c>1.2.3.4</c>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo.VersionSubInfo.Major">
            <summary>
            The single version component.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo.VersionSubInfo.Minor">
            <summary>
            The single version component.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo.VersionSubInfo.Revision">
            <summary>
            The single version component.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Updates.UpdatesCategory">
            <summary>
            A single category of updates that manages the updates for a single product.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdatesCategory.CheckForUpdatesInterval">
            <summary>
            Interval between automatic check-for-update attempts.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdatesCategory.CustomizeLocalEnvironmentInfo">
            <summary>
            <para>When the updates manager is about to check for updates for this updates category, it collects the information about the local environment. The downloaded filter will be applied to this data. This event allows to replace or alter this information before it's used.</para>
            <para>Initially, it's of the <see cref="T:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo"/> type, as gotten from the <see cref="P:JetBrains.UI.Updates.UpdatesManager.LocalEnvironmentInfo"/>. You could change it to a serializable object of an arbitrary type.</para>
            <para>This event should be advised on each shell startup.</para>
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdatesCategory.CustomizeQueryStringParams">
            <summary>
            <para>When the updates manager checks for updates, it downloads the XSLT filter from <see cref="F:JetBrains.UI.Updates.UpdatesCategory.UpdatesFilterUri"/>, plus some optional query string parameters that identify the local environment, if needed. This event allows to replace or alter this information before it's used.</para>
            <para>Initially, it's gotten from the <see cref="P:JetBrains.UI.Updates.UpdatesManager.LocalEnvironmentInfo"/> <see cref="M:JetBrains.UI.Updates.UpdatesLocalInfoManager.CollectQueryStringParams(System.Object)"/>, called of the <see cref="F:JetBrains.UI.Updates.UpdatesCategory.CustomizeLocalEnvironmentInfo"/> result. You could change or replace the key-value pairs dictionary.</para>
            <para>This event should be advised on each shell startup.</para>
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdatesCategory.IsActive">
            <summary>
            Whether the category is active, can download and display updates. This property is not persisted and must be set to <c>True</c> on each new <see cref="T:JetBrains.Application.PlatformObsoleteStatics"/> session. Otherwise, the owning code is considered unloaded (eg plugin) and the updates are suppressed.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdatesCategory.LastActivationDate">
            <summary>
            The moment this category was activated (<see cref="F:JetBrains.UI.Updates.UpdatesCategory.IsActive"/> = <c>True</c>) last time.
            Will be cleaned up if unused for a long time.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdatesCategory.LastDownloadAttemptDate">
            <summary>
            Previous download attempt for this category.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdatesCategory.LastDownloadSummary">
            <summary>
            Summary on the last download attempt. Freehand text.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdatesCategory.LastSuccessfulDownloadDate">
            <summary>
            The moment this category could download from <see cref="F:JetBrains.UI.Updates.UpdatesCategory.UpdatesFilterUri"/> last time.
            Will be cleaned up if failed for a long time.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdatesCategory.Name">
            <summary>
            The identity of the category.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdatesCategory.UpdateInfos">
            <summary>
            The list of available updates. Custom serialization protocol.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdatesCategory.UpdatesFilterUri">
            <summary>
            The URI to download the updates filter from. The filter is an XSLT sciript that's run against the collected local environment information to determine which updates are applicable and emit the list of those.  // TODO: details
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.UpdatesCategory.CollectLocalEnvironmentInfo">
            <summary>
            <para>When the updates manager is about to check for updates for this updates category, it collects the information about the local environment. The downloaded filter will be applied to this data. Collects this data first from the <see cref="P:JetBrains.UI.Updates.UpdatesManager.LocalEnvironmentInfo"/>, then applying the <see cref="F:JetBrains.UI.Updates.UpdatesCategory.CustomizeLocalEnvironmentInfo"/> customizations to it.</para>
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.UpdatesCategory.IsEligibleForNotifications">
            <summary>
            Checks if update notifications could be displayed for this cat to the end user.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.UpdatesCategory.RegisterDownloadResult(System.Boolean,System.String,JetBrains.UI.Updates.UpdateInfo[])">
            <summary>
            After downloading new update info for this cat, registers the success or failure.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.UpdatesCategory.CreateByUser(JetBrains.UI.Updates.UpdatesManager,System.String,System.Uri)">
            <summary>
            Creates a category when a new one is added (by user).
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.UpdatesCategory.ReadFromStream(JetBrains.UI.Updates.UpdatesManager,System.Xml.XmlReader)">
            <summary>
            Creates a category when a new one is added (by user).
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.UpdatesCategory.WriteToStream(System.Xml.XmlWriter)">
            <summary>
            Serialzation.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.UpdatesCategory.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.UI.Updates.UpdatesCategory.LastSuccessfulDownloadVersion">
            <summary>
            The build number of the product that successfully downloaded this category.
            Update notifications should not be displayed for the category until there's a successful download by the current product version, to make sure the updates list is still relevant.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Updates.UpdatesCategory.LocalEnvironmentInfo">
            <summary>
            Collects info about the local environment against which the updates are checked.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdatesCategory.LocalEnvironmentInfo.FilterableData">
            <summary>
            Filterable data that describes the product on the local machine. The XSLT received from the updates server should be run against this data (<see cref="T:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo"/> or any customizations by the <see cref="T:JetBrains.UI.Updates.UpdatesCategory"/> owner thru the <see cref="F:JetBrains.UI.Updates.UpdatesCategory.CustomizeLocalEnvironmentInfo"/>) in its XML representation.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdatesCategory.LocalEnvironmentInfo.QueryString">
            <summary>
            The query string for the URI to download the updates from, as extracted from the main data (<see cref="F:JetBrains.UI.Updates.UpdatesCategory.LocalEnvironmentInfo.FilterableData"/>), could be customized with <see cref="F:JetBrains.UI.Updates.UpdatesCategory.CustomizeQueryStringParams"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.UpdatesCategory.LocalEnvironmentInfo.WriteFilterableData(System.Xml.XmlWriter)">
            <summary>
            Writes <see cref="F:JetBrains.UI.Updates.UpdatesCategory.LocalEnvironmentInfo.FilterableData"/> into XML.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Updates.UpdatesDownloaderSession">
            <summary>
            Manages retrieving the updates info data stream, and schedulling such updates.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.UpdatesDownloaderSession.BeginRun">
            <summary>
            Initiates the download, promises to self-dispose when done.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.UpdatesDownloaderSession.TestRun">
            <summary>
            Sync. Runs update session
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.UpdatesDownloaderSession.BeginRun_Worker(JetBrains.UI.Updates.UpdatesCategory.LocalEnvironmentInfo,JetBrains.UI.Updates.Utils.UpdateXsltTestResult)">
            <summary>
            Runs on another thread.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Updates.UpdatesLocalInfoManager">
            <summary>
            Child of <see cref="T:JetBrains.UI.Updates.UpdatesManager"/>.
            Manages the local environment info that takes part in the Update process.
            Collects <see cref="T:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo"/>, forms the Web request query string.
            Override this component to add more data to the collected local info.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.UpdatesLocalInfoManager.CollectLocalEnvironmentInfo">
            <summary>
            Collects the info about the local environment.
            Updates are conditional against its properties, such as the product version.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.UpdatesLocalInfoManager.CollectQueryStringParams">
            <summary>
            Out of the <see cref="T:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo"/> for the current environment, collects those parameters that should go into the query string on the server requests.
            </summary>
            <returns>Name-value pairs collection.</returns>
        </member>
        <member name="M:JetBrains.UI.Updates.UpdatesLocalInfoManager.CollectQueryStringParams(System.Object)">
            <summary>
            Out of the given <see cref="T:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo"/> variation for the current environment, collects those parameters that should go into the query string on the server requests.
            </summary>
            <returns>Name-value pairs collection.</returns>
        </member>
        <member name="M:JetBrains.UI.Updates.UpdatesLocalInfoManager.CollectQueryStringParams_Walk(System.Object,System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Walks the <see cref="T:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo"/> structs with reflection.
            Picks <see cref="T:JetBrains.UI.Updates.UpdatesLocalInfoManager.QueryStringParamAttribute"/>-ed fields as params, recurses into <see cref="T:JetBrains.UI.Updates.UpdatesLocalInfoManager.QueryStringContainerAttribute"/> fields only. Param names are container names plus field name.
            </summary>
            <param name="container">The current container to walk.</param>
            <param name="bag">Target bag.</param>
            <param name="sPrefixWithDot">Container-induced prefix for the field names, eg <c>Product.Version.</c> in <c>Product.Version.Major</c> param name.</param>
        </member>
        <member name="T:JetBrains.UI.Updates.UpdatesLocalInfoManager.QueryStringContainerAttribute">
            <summary>
            In the <see cref="T:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo"/> and alike, denotes the fields whose members we should check for <see cref="T:JetBrains.UI.Updates.UpdatesLocalInfoManager.QueryStringParamAttribute"/>.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Updates.UpdatesLocalInfoManager.QueryStringParamAttribute">
            <summary>
            Specifies that this field of <see cref="T:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo"/> should be included with the UpdateInfo Web request query string.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdatesManager.ShellProductCategoryOwner">
            <summary>
            Creates/activates the cat of the Shell product.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdatesManager.Categories">
            <summary>
            <para>Gets the list of update categories. Each one downloads its own list of available updates, and supports a single product.</para>
            <para>The default category, <see cref="F:JetBrains.UI.Updates.UpdatesManager.Categories"/>.<see cref="P:JetBrains.UI.Updates.UpdatesManagerCategories.ShellProductCategory"/>, is guaranteed to exist. Other categories could be added by plugins, as needed. They're persisted by the manager in the product settings, so normally you do not have to create it each time. However, it could be deleted if the settings are lost, if the updates URI is dead for some time, or if it is not activated for some time.</para>
            <para>On startup, you should activate your category with <see cref="F:JetBrains.UI.Updates.UpdatesCategory.IsActive"/> for it to check for new updates and report them, otherwise it will consider the owner to be inactive or unloaded, hibernate, and expire after some time.</para>
            <para>To create a new category</para>
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdatesManager.IsDownloadUpdateDataAllowed">
            <summary>
            Whether to download the data for new updates.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.UpdatesManager.RunUpdatesFilter(System.IO.Stream,System.Action{System.Xml.XmlWriter},JetBrains.UI.Updates.Utils.UpdateXsltTestResult)">
            <summary>
            Runs the remote-received Updates filter data against the local configuration.
            Returns the list of update products that pass the filter.
            </summary>
            <param name="streamFilter">XSLT filter, as received from the server.</param>
            <param name="FWriteLocalEnvironmentData">The func to write the XML DOC to run the <paramref name="streamFilter"/> against.</param>
            <param name="result"></param>
            <returns>The list of updates available for our instance.</returns>
        </member>
        <member name="M:JetBrains.UI.Updates.UpdatesManager.Init(JetBrains.Application.Configuration.ShellSettingsComponent,JetBrains.UI.Updates.UpdatesManager.Settings,JetBrains.Application.IApplicationDescriptor)">
            <summary>
            <para>Initializes the component. Called by the component container after the component is created.</para>
            <para><see cref="M:System.IDisposable.Dispose"/> is the pairing method that's guaranteed to be called by the component container to tear down your component.</para>
            <para>You must not access other components before your <see cref="M:JetBrains.Application.Components.IComponent.Init"/> method is called.</para>
            <para>All of the components that you access from <see cref="M:JetBrains.Application.Components.IComponent.Init"/> are guaranteed to exist when your <see cref="M:System.IDisposable.Dispose"/> is called. Any other component might be missing by that time, and trying to get it will throw an exception.</para>
            </summary>
            <param name="shellSettingsComponent"></param>
            <param name="settings"></param>
            <param name="applicationDescriptor"></param>
        </member>
        <member name="M:JetBrains.UI.Updates.UpdatesManager.Init_Download_Deferred">
            <summary>
            Called from <see cref="M:JetBrains.UI.Updates.UpdatesManager.Init_Download"/>, after some time passes. Let plugins reg/activate their categories, and let the startup activities ceise.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.UpdatesManager.JetBrains#Application#Configuration#IXmlExternalizable#ReadFromXml(System.Xml.XmlElement)">
            <summary>
            <para>This method is called on the component to populate it with default or loaded settings, unless the component implements <see cref="T:JetBrains.Application.Configuration.IXmlUpgradable"/> and returns <c>True</c> from its handler.</para>
            <para>The element is taken from the settings file, if available.</para>
            <para>If not, and there are settings files from the older versions, and the component does not implement <see cref="T:JetBrains.Application.Configuration.IXmlUpgradable"/>, this method is called with the old settings.</para>
            <para>Otherwise, this method is called with an empty element or a <c>Null</c> value.</para>
            <para>For the first time, this method is called right before component's init.</para>
            <para>The settings-reading protocol might be executed more than once thru the component lifetime.</para>
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:JetBrains.UI.Updates.UpdatesManager.JetBrains#Application#Configuration#IXmlExternalizable#WriteToXml(System.Xml.XmlElement)">
            <summary>
            Called when the component should serialize its settings into the XML presentation, for saving into the settings file.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Updates.UpdatesManager.LocalEnvironmentInfo">
            <summary>
            Child of <see cref="T:JetBrains.UI.Updates.UpdatesManager"/>.
            Manages the local environment info that takes part in the Update process.
            Collects <see cref="T:JetBrains.UI.Updates.UpdateLocalEnvironmentInfo"/>, forms the Web request query string.
            Override this component to add more data to the collected local info.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdatesManager.Settings.IsDownloadUpdateDataAllowed">
            <summary>
            Whether to download the data for new updates.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.UpdatesManager.Settings.JetBrains#Application#Configuration#IXmlExternalizable#ReadFromXml(System.Xml.XmlElement)">
            <summary>
            <para>This method is called on the component to populate it with default or loaded settings, unless the component implements <see cref="T:JetBrains.Application.Configuration.IXmlUpgradable"/> and returns <c>True</c> from its handler.</para>
            <para>The element is taken from the settings file, if available.</para>
            <para>If not, and there are settings files from the older versions, and the component does not implement <see cref="T:JetBrains.Application.Configuration.IXmlUpgradable"/>, this method is called with the old settings.</para>
            <para>Otherwise, this method is called with an empty element or a <c>Null</c> value.</para>
            <para>For the first time, this method is called right before component's init.</para>
            <para>The settings-reading protocol might be executed more than once thru the component lifetime.</para>
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:JetBrains.UI.Updates.UpdatesManager.Settings.JetBrains#Application#Configuration#IXmlExternalizable#WriteToXml(System.Xml.XmlElement)">
            <summary>
            Called when the component should serialize its settings into the XML presentation, for saving into the settings file.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Updates.UpdatesManagerCategories">
            <summary>
            Implements <see cref="F:JetBrains.UI.Updates.UpdatesManager.Categories"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.UpdatesManagerCategories.Add(System.String,System.Uri)">
            <summary>
            <para>Creates and adds a new category. Throws if the category already exists. A newly-created category is active by default.</para>
            <para>The use of other <c>Add</c> overloads is prohibited.</para>
            </summary>
            <param name="name">Name for the category. Must be unique.</param>
            <param name="uriUpdatesFilter">The URI to download the updates filter from. The filter is an XSLT sciript that's run against the collected local environment information to determine which updates are applicable and emit the list of those.  // TODO: details</param>
        </member>
        <member name="M:JetBrains.UI.Updates.UpdatesManagerCategories.AddOrActivate(System.String,System.Uri)">
            <summary>
            <para>Creates and adds a new category, if it does not exist yet. If the category with such a name already exists, updates the <see cref="F:JetBrains.UI.Updates.UpdatesCategory.UpdatesFilterUri"/> with the given value and activates the category by setting its <see cref="F:JetBrains.UI.Updates.UpdatesCategory.IsActive"/> to <c>True</c>. A newly-created category is active by default.</para>
            <para>The use of other <c>Add</c> overloads is prohibited.</para>
            </summary>
            <param name="name">Name for the category. Must be unique.</param>
            <param name="uriUpdatesFilter">The URI to download the updates filter from. The filter is an XSLT sciript that's run against the collected local environment information to determine which updates are applicable and emit the list of those.  // TODO: details</param>
        </member>
        <member name="P:JetBrains.UI.Updates.UpdatesManagerCategories.ShellProductCategory">
            <summary>
            <para>Gets the default <see cref="T:JetBrains.UI.Updates.UpdatesManager"/> <see cref="T:JetBrains.UI.Updates.UpdatesCategory"/> for the product currently running the <see cref="T:JetBrains.Application.PlatformObsoleteStatics"/>.</para>
            <para>May be missing if there are no updates for the product (<see cref="P:JetBrains.Application.IApplicationDescriptor.UpdatesFilterUri"/> == <c>Null</c>).</para>
            </summary>
        </member>
        <member name="T:JetBrains.UI.Updates.UpdatesPage">
            <summary>
            Options page for <see cref="T:JetBrains.UI.Updates.UpdatesManager"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.UpdatesPage.JetBrains#UI#Options#IOptionsPage#OnOk">
            <summary>
            Invoked when OK button in the options dialog is pressed.
            If the page returns <c>false</c>, the the options dialog won't be closed, and focus will be put into this page.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.UpdatesPage.JetBrains#UI#Options#IOptionsPage#ValidatePage">
            <summary>
            Check if the settings on the page are consistent, and page could be closed.
            </summary>
            <returns><c>true</c> if page data is consistent.</returns>
        </member>
        <member name="P:JetBrains.UI.Updates.UpdatesPage.JetBrains#UI#Options#IOptionsPage#Control">
            <summary>
            Control to be shown as page.
            May be <c>Null</c> if the page does not have any UI.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Updates.UpdatesPage.JetBrains#UI#Options#IOptionsPage#Id">
            <summary>
            Gets the ID of this option page.
            <see cref="T:JetBrains.UI.Options.IOptionsDialog"/> or <see cref="T:JetBrains.UI.Options.OptionsPageDescriptor"/> could be used to retrieve the <see cref="T:JetBrains.UI.Options.OptionsManager"/> out of it.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Updates.UpdatesPageComponent">
            <summary>
            Adds the “Updates” page to the Options dialog if there are any updates available.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdatesPageComponent.IsEnabled">
            <summary>
            Allows to disable the auto-adding of the options page. Make this class a SCInterface to access this prop, if you ever need this.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Updates.UpdatesShellProductCategoryOwner">
            <summary>
            Maintains the default <see cref="T:JetBrains.UI.Updates.UpdatesManager"/> <see cref="T:JetBrains.UI.Updates.UpdatesCategory"/> for the product currently running the <see cref="T:JetBrains.Application.PlatformObsoleteStatics"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Updates.UpdatesShellProductCategoryOwner.CategoryName">
            <summary>
            <para>Name of the default category in which the <see cref="T:JetBrains.Application.PlatformObsoleteStatics"/> product updates are listed.</para>
            <para>Plugins should use categories with different names.</para>
            </summary>
        </member>
        <member name="M:JetBrains.UI.Updates.UpdatesShellProductCategoryOwner.Init(JetBrains.Application.IApplicationDescriptor)">
            <summary>
            <para>Initializes the component. Called by the component container after the component is created.</para>
            <para><see cref="M:System.IDisposable.Dispose"/> is the pairing method that's guaranteed to be called by the component container to tear down your component.</para>
            <para>You must not access other components before your <see cref="M:JetBrains.Application.Components.IComponent.Init"/> method is called.</para>
            <para>All of the components that you access from <see cref="M:JetBrains.Application.Components.IComponent.Init"/> are guaranteed to exist when your <see cref="M:System.IDisposable.Dispose"/> is called. Any other component might be missing by that time, and trying to get it will throw an exception.</para>
            </summary>
            <param name="applicationDescriptor"></param>
        </member>
        <member name="P:JetBrains.UI.Updates.UpdatesShellProductCategoryOwner.Category">
            <summary>
            Gets the updates category this object maintains.
            May be missing if there are no updates for the product (<see cref="P:JetBrains.Application.IApplicationDescriptor.UpdatesFilterUri"/> == <c>Null</c>).
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.Validation.IControlListener">
            <summary>
            Listens for changes in the control.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.IControlListener.Control">
            <summary>
            Gets the listened control.
            </summary>
        </member>
        <member name="E:JetBrains.CommonControls.Validation.IControlListener.ControlStateChanged">
            <summary>
            Event that is fired when some important control state changes.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.Validation.CheckedValidator">
            <summary>
            Validates that:
            • This button is checked (if <see cref="P:JetBrains.CommonControls.Validation.CheckedValidator.GroupId"/> is not specified).
            —or—
            • At least one button among all with such a <see cref="P:JetBrains.CommonControls.Validation.CheckedValidator.GroupId"/> is checked.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.Validation.ControlValidator">
            <summary>
            Base implementation of the <see cref="T:JetBrains.CommonControls.Validation.IValidator"/> interface that expects you to override just the <see cref="M:JetBrains.CommonControls.Validation.ControlValidator.Update"/> method.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.Validation.IValidator">
            <summary>
            Represents a validation rule usage
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.IValidator.Update">
            <summary>
            Forces the recalculation of the validator and updates its <see cref="P:JetBrains.CommonControls.Validation.ControlValidator.Severity"/> and visibility.
            A validator should update those property values when requested via <see cref="M:JetBrains.CommonControls.Validation.ControlValidator.Update"/>, or at any moment it detects a validity state change.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.IValidator.Severity">
            <summary>
            Gets the severity of this validator in its current state.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.IValidator.Message">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.IValidator.Layouter">
            <summary>
            Gets the layouter that positions the validator.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.IValidator.WindowlessControl">
            <summary>
            Gets the presentation of the validator.
            <c>Null</c> means that the validator should not be displayed.
            </summary>
        </member>
        <member name="E:JetBrains.CommonControls.Validation.IValidator.SeverityChanged">
            <summary>
            Fires when the <see cref="P:JetBrains.CommonControls.Validation.IValidator.Severity"/> property changes its value.
            </summary>
        </member>
        <member name="E:JetBrains.CommonControls.Validation.IValidator.MessageChanged">
            <summary>
            Fires when the <see cref="P:JetBrains.CommonControls.Validation.IValidator.Message"/> property changes its value.
            </summary>
        </member>
        <member name="E:JetBrains.CommonControls.Validation.IValidator.LayouterChanged">
            <summary>
            Fires when the <see cref="P:JetBrains.CommonControls.Validation.IValidator.Layouter"/> property changes its value.
            </summary>
        </member>
        <member name="E:JetBrains.CommonControls.Validation.IValidator.WindowlessControlChanged">
            <summary>
            Fires when the <see cref="P:JetBrains.CommonControls.Validation.IValidator.WindowlessControl"/> property changes its value.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.Validation.ControlValidator.myBounds">
            <summary>
            Part of the <see cref="T:JetBrains.CommonControls.IWindowlessControl"/> implementation.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.Validation.ControlValidator.myControlListener">
            <summary>
            Listens for the changes in the control, triggers an update whenever one occurs.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.Validation.ControlValidator.myGottenDirty">
            <summary>
            The control has gotten dirty and should be repainted.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.Validation.ControlValidator.myWantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.ControlValidator.GetImageFromSeverity(JetBrains.CommonControls.Validation.ValidatorSeverity)">
            <summary>
            Converts a severity value into a corresponding image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.ControlValidator.FireLayouterChanged(JetBrains.UI.IPopupLayouter,JetBrains.UI.IPopupLayouter)">
            <summary>
            Fires the <see cref="E:JetBrains.CommonControls.Validation.ControlValidator.LayouterChanged"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.ControlValidator.FireMessageChanged(JetBrains.UI.RichText.RichText,JetBrains.UI.RichText.RichText)">
            <summary>
            Fires the <see cref="E:JetBrains.CommonControls.Validation.ControlValidator.MessageChanged"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.ControlValidator.FireSeverityChanged(JetBrains.CommonControls.Validation.ValidatorSeverity,JetBrains.CommonControls.Validation.ValidatorSeverity)">
            <summary>
            Fires the <see cref="E:JetBrains.CommonControls.Validation.ControlValidator.SeverityChanged"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.ControlValidator.FireWindowlessControlChanged(JetBrains.CommonControls.IWindowlessControl,JetBrains.CommonControls.IWindowlessControl)">
            <summary>
            Fires the <see cref="E:JetBrains.CommonControls.Validation.ControlValidator.WindowlessControlChanged"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.ControlValidator.OnSeverityChangedShowHide(System.Object,JetBrains.DataFlow.PropertyChangedEventArgs{System.String,JetBrains.CommonControls.Validation.ValidatorSeverity})">
            <summary>
            When severity changes, shows or hides the control, depending on the severity value, and requests the resize/repanit of the view.
            Attached in ctor by default. Detach this sink from the event if you'd like to change the behavior.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.ControlValidator.Update">
            <summary>
            Forces the recalculation of the validator and updates its <see cref="P:JetBrains.CommonControls.Validation.ControlValidator.Severity"/> and visibility.
            A validator should update those property values when requested via <see cref="M:JetBrains.CommonControls.Validation.ControlValidator.Update"/>, or at any moment it detects a validity state change.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.ControlValidator.GetDesiredSize(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Performs the bottom-up layouting stage, when the control calculates its desired size using the given constraints.
            Should give generally the same results as <see cref="T:JetBrains.CommonControls.IConstrainableControl"/>, but could employ the <paramref name="gc"/> device context for the sake of optimization.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="limit">The maximum available space (that could affect the shape of the control, or strip down unnecessary calculations over the invisible items).
            May be a <see cref="T:System.Drawing.Size"/> with width and height equal to <see cref="F:System.Int32.MaxValue"/>, which means that the size is not limited.</param>
            <returns>The desired size, must be no larger than <paramref name="limit"/>.</returns>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.ControlValidator.Paint(System.Drawing.Graphics)">
            <summary>
            Renders the context of the windowless control. The rendering bounds are given by the 
            </summary>
            <param name="g">The device context.</param>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.ControlValidator.SetBounds(JetBrains.UI.IGraphicsContainer,System.Drawing.Rectangle)">
            <summary>
            Performs the top-down layouting stage, when the control lais out its parts within the given bounds.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="bounds">The new bounds. From now on, this value should be returned from the <see cref="P:JetBrains.CommonControls.IWindowlessControl.Bounds"/> property.</param>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.ControlValidator.SetLayout(JetBrains.UI.LayoutResult)">
            <summary>
            Tells the control the details about the new layout applied to it by the controlling entity in conjunction with some <see cref="T:JetBrains.UI.IPopupLayouter"/>.
            Typically, the control need not apply the given size and location because that should be done by the controlling entity.
            The control may change its presentation in response to the layouting details, for example, whether it's attached to the top or the bottom of the anchoring rect.
            </summary>
            <param name="layout">The layouting details.</param>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.ControlValidator.Control">
            <summary>
            Gets the associated control.
            </summary>
        </member>
        <member name="E:JetBrains.CommonControls.Validation.ControlValidator.LayouterChanged">
            <summary>
            Fires when the <see cref="P:JetBrains.CommonControls.Validation.IValidator.Layouter"/> property changes its value.
            </summary>
        </member>
        <member name="E:JetBrains.CommonControls.Validation.ControlValidator.MessageChanged">
            <summary>
            Fires when the <see cref="P:JetBrains.CommonControls.Validation.IValidator.Message"/> property changes its value.
            </summary>
        </member>
        <member name="E:JetBrains.CommonControls.Validation.ControlValidator.SeverityChanged">
            <summary>
            Fires when the <see cref="P:JetBrains.CommonControls.Validation.IValidator.Severity"/> property changes its value.
            </summary>
        </member>
        <member name="E:JetBrains.CommonControls.Validation.ControlValidator.WindowlessControlChanged">
            <summary>
            Fires when the <see cref="P:JetBrains.CommonControls.Validation.IValidator.WindowlessControl"/> property changes its value.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.ControlValidator.Layouter">
            <summary>
            Gets the layouter that positions the validator.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.ControlValidator.Message">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.ControlValidator.Severity">
            <summary>
            Gets the severity of this validator in its current state.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.ControlValidator.WindowlessControl">
            <summary>
            Gets the presentation of the validator.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.ControlValidator.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.ControlValidator.Bounds">
            <summary>
            The windowless control bounds in the parent coordinates. The implementor should just store and return the value set by the owner.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.ControlValidator.GottenDirty">
            <summary>
            The control has gotten dirty and should be repainted.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.ControlValidator.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.CheckedValidator.IsChecked">
            <summary>
            Late-bound-checks the checkstate of this control.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.CheckedValidator.Update">
            <summary>
            Forces the recalculation of the validator and updates its <see cref="P:JetBrains.CommonControls.Validation.ControlValidator.Severity"/> and visibility.
            A validator should update those property values when requested via <see cref="M:JetBrains.CommonControls.Validation.ControlValidator.Update"/>, or at any moment it detects a validity state change.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.ControlListenerFactory.CreateControlListener(System.Windows.Forms.Control)">
            <summary>
            Gets a composite listener that wraps all the available listeners for the given control.
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.CommonControls.Validation.DynamicTextValidator">
            <summary>
            A kind of <see cref="T:JetBrains.CommonControls.Validation.TextValidator"/> that allows changing the severity level and string message dynamically.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.DynamicTextValidator.Update">
            <summary>
            Forces the recalculation of the validator and updates its <see cref="P:JetBrains.CommonControls.Validation.ControlValidator.Severity"/> and visibility.
            A validator should update those property values when requested via <see cref="M:JetBrains.CommonControls.Validation.ControlValidator.Update"/>, or at any moment it detects a validity state change.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.Validation.FormValidator">
            <summary>
            Manages a number of validators on the form controls that display error glyphs and prevent submission unless the validation passes.
            The validators may come from attributes on the form controls, from <see cref="T:JetBrains.CommonControls.Validation.IValidatorProvider"/> implemented by form or its controls, and from manual submissions to the <see cref="P:JetBrains.CommonControls.Validation.FormValidator.Validators"/> collection.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.Validation.IFormValidator">
            <summary>
            Manages a number of validators on the form controls that display error glyphs and prevent submission unless the validation passes.
            The validators may come from attributes on the form controls, from <see cref="T:JetBrains.CommonControls.Validation.IValidatorProvider"/> implemented by form or its controls, and from manual submissions to the <see cref="P:JetBrains.CommonControls.Validation.IFormValidator.Validators"/> collection.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.IFormValidator.Update">
            <summary>
            Forces revalidation on all the controls.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.IFormValidator.ShowMessage">
            <summary>
            Reports the current validity status in a message box (including the valid state).
            The valid and error states have just an ok button, while the warnings have the yes-no buttons.
            The return value is either the current <see cref="P:JetBrains.CommonControls.Validation.IFormValidator.Severity"/>, or a lower severity if the user has clicked “Yes” on the warning confirmation dialog and has thus discarded the warnings.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.IFormValidator.Form">
            <summary>
            Gets the owning form.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.IFormValidator.Validators">
            <summary>
            Gets the mutable validators collection.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.IFormValidator.ValidatorProviders">
            <summary>
            Gets the mutable validator providers collection.
            Those are also collected automatically from the form and all of its controls.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.IFormValidator.Severity">
            <summary>
            Gets the overall severity of the form validator, which is the maximum severity of all the validators.
            </summary>
        </member>
        <member name="E:JetBrains.CommonControls.Validation.IFormValidator.SeverityChanged">
            <summary>
            Fires when <see cref="P:JetBrains.CommonControls.Validation.IFormValidator.Severity"/> changes.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.FormValidator.FireSeverityChanged(JetBrains.CommonControls.Validation.ValidatorSeverity,JetBrains.CommonControls.Validation.ValidatorSeverity)">
            <summary>
            Fires the <see cref="E:JetBrains.CommonControls.Validation.FormValidator.SeverityChanged"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.FormValidator.OnValidatorSeverityChanged(System.Object,JetBrains.DataFlow.PropertyChangedEventArgs{System.String,JetBrains.CommonControls.Validation.ValidatorSeverity})">
            <summary>
            Whenever a validator severity changes, recalculates the total severity of this <see cref="T:JetBrains.CommonControls.Validation.IFormValidator"/>.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.FormValidator.ShowMessage_OneSeverity(JetBrains.CommonControls.Validation.ValidatorSeverity)">
            <summary>
            Reports one particular severity.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.FormValidator.ShowMessage">
            <summary>
            Reports the current validity status in a message box (including the valid state).
            The valid and error states have just an ok button, while the warnings have the yes-no buttons.
            The return value is either the current <see cref="P:JetBrains.CommonControls.Validation.IFormValidator.Severity"/>, or a lower severity if the user has clicked “Yes” on the warning confirmation dialog and has thus discarded the warnings.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.FormValidator.Update">
            <summary>
            Forces revalidation on all the controls.
            </summary>
        </member>
        <member name="E:JetBrains.CommonControls.Validation.FormValidator.SeverityChanged">
            <summary>
            Fires when <see cref="P:JetBrains.CommonControls.Validation.IFormValidator.Severity"/> changes.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.FormValidator.Severity">
            <summary>
            Gets the overall severity of the form validator, which is the maximum severity of all the validators.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.FormValidator.ValidatorProviders">
            <summary>
            Gets the mutable validator providers collection.
            Those are also collected automatically from the form and all of its controls.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.FormValidator.Validators">
            <summary>
            Gets the mutable validators collection.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.Validation.FormValidator.BridgeControlsToValidatorProviders">
            <summary>
            Listens for child controls being added to or removed from the root control.
            Adds/removes the corresponding validator providers. Stores the mapping from controls to providers, so that to remove exactly what has come.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.Validation.FormValidator.BridgeValidatorProvidersToValidators">
            <summary>
            Watches for validator providers, populates the validators collection with their contents.
            Stores the validators added by a provider, so that to remove just them when the validator is removed (the provider could return new instances, and they won't match).
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.Validation.FormValidator.BridgeValidatorProvidersToValidators.myMapProvidersToValidators">
            <summary>
            Stores the validators added by a provider, so that to remove just them when the validator is removed (the provider could return new instances, and they won't match).
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.Validation.FormValidators.ourFormValidators">
            <summary>
            Caches the form validator instances.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.FormValidators.GetOrCreate(System.Windows.Forms.Control)">
            <summary>
            Gets (or creates, if missing) a form validator for the given form or control.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.Validation.FormValidatorView">
            <summary>
            Manages the validator glyphs as validator views, based on the <see cref="T:JetBrains.CommonControls.Validation.FormValidator"/> data.
            When the owning window gets destroyed, all the validator glyphs also get destroyed.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.FormValidatorView.CreateValidatorView(JetBrains.CommonControls.Validation.IValidator)">
            <summary>
            Creates a new view from the validator.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.Validation.FormValidatorView.ValidatorTooltipProvider">
            <summary>
            Produces a tooltip out of the validator message.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.FormValidatorView.ValidatorTooltipProvider.GetTooltip(JetBrains.DataFlow.Lifetime,System.Drawing.Point)">
            <summary>
            Called by tooltip manager, if the tooltip is to be displayed
            </summary>
            <param name="lifetime"></param>
            <param name="point">Point in control's coordinates</param>
            <returns><see cref="T:JetBrains.UI.Tooltips.ITooltipInfo"/>, or <c>Null</c> if no tooltip should be displayed.</returns>
        </member>
        <member name="T:JetBrains.CommonControls.Validation.IValidatorProvider">
            <summary>
            When implemented by a form or a control, populates the <see cref="T:JetBrains.CommonControls.Validation.FormValidator"/> with custom validators.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.IValidatorProvider.Validators">
            <summary>
            Gets the list of validators to add.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Validation.PredicateValidator.Update">
            <summary>
            Forces the recalculation of the validator and updates its <see cref="P:JetBrains.CommonControls.Validation.ControlValidator.Severity"/> and visibility.
            A validator should update those property values when requested via <see cref="M:JetBrains.CommonControls.Validation.ControlValidator.Update"/>, or at any moment it detects a validity state change.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Validation.PredicateValidatorReentrantSafe.Update">
            <summary>
            Forces the recalculation of the validator and updates its <see cref="P:JetBrains.CommonControls.Validation.ControlValidator.Severity"/> and visibility.
            A validator should update those property values when requested via <see cref="M:JetBrains.CommonControls.Validation.ControlValidator.Update"/>, or at any moment it detects a validity state change.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.Validation.TextValidator">
            <summary>
            Validates the control text.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.TextValidator.Update">
            <summary>
            Forces the recalculation of the validator and updates its <see cref="P:JetBrains.CommonControls.Validation.ControlValidator.Severity"/> and visibility.
            A validator should update those property values when requested via <see cref="M:JetBrains.CommonControls.Validation.ControlValidator.Update"/>, or at any moment it detects a validity state change.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.Validation.ValidatorFactory">
            <summary>
            shortcut class for creating control validators.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.Validation.ValidatorHarvester">
            <summary>
            Harvests the <see cref="T:JetBrains.CommonControls.Validation.ValidationAttribute"/>s on the controls and provides validators based on them.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.ValidatorHarvester.Harvest(System.Windows.Forms.Control)">
            <summary>
            Harvests the <see cref="T:JetBrains.CommonControls.Validation.ValidationAttribute"/>s on the controls and provides validators based on them.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.Validation.ValidatorHarvester.StaticValidatorProvider">
            <summary>
            A simple validator provider.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.ValidatorHarvester.StaticValidatorProvider.Validators">
            <summary>
            Gets the list of validators to add.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.Validation.ValidatorSeverity">
            <summary>
            Defines the severity of a validator.
            The icon and OK-button enabled state depends on this value.
            The integer values are sorted in the order of increasing severity.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.Validation.ValidatorSeverity.None">
            <summary>
            No warning or error, the glyph is not visible by default.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.Validation.ValidatorSeverity.Warning">
            <summary>
            A warning, the glyph is visible by default.
            Does nothing on form submission.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.Validation.ValidatorSeverity.ImportantWarning">
            <summary>
            An important warning, the glyph is visible by default.
            Confirms on form submission.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.Validation.ValidatorSeverity.Error">
            <summary>
            A fatal error, the glyph is visible by default.
            Prevents the form submission.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.Validation.ValidatorSeverityHelper">
            <summary>
            Helper utilities that provide additional data related to the <see cref="T:JetBrains.CommonControls.Validation.ValidatorSeverity"/> constants.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.ValidatorSeverityHelper.CanIgnore(JetBrains.CommonControls.Validation.ValidatorSeverity)">
            <summary>
            Gets whether the user is allowed to reduce the validator severity by one level by pressing the Ignore button.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.ValidatorSeverityHelper.SeverityToMessagePrefix(JetBrains.CommonControls.Validation.ValidatorSeverity)">
            <summary>
            Messagebox text for this severity.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.ValidatorSeverityHelper.SeverityToMessageDisplay(JetBrains.CommonControls.Validation.ValidatorSeverity)">
            <summary>
            Whether to show individual validator messages, and how many, if yes.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.Validation.ValidatorSeverityHelper.ShowValidatorMessages">
            <summary>
            Whether to show any validator messages in the messagebox.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.Validation.ValidatorSeverityHelper.ShowValidatorMessages.None">
            <summary>
            No validator messages, just the title.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.Validation.ValidatorSeverityHelper.ShowValidatorMessages.One">
            <summary>
            The first message only.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.Validation.ValidatorSeverityHelper.ShowValidatorMessages.All">
            <summary>
            Include the list of all messages.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.Validation.WindowlessControlView">
            <summary>
            Takes an <see cref="T:JetBrains.CommonControls.IWindowlessControl"/> and floats it as a form.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.Validation.WindowlessControlView.GottenDirty">
            <summary>
            The control is about to repaint.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.Validation.WindowlessControlView.IsTransparent">
            <summary>
            Whether the window supports the alpha channel.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.Validation.WindowlessControlView.WindowlessControl">
            <summary>
            Gets or sets the windowless control that rules the presentation of the window.
            Set to <c>Null</c> to hide the window.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.Validation.WindowlessControlView.myInIsTopMost">
            <summary>
            See <see cref="P:JetBrains.CommonControls.Validation.WindowlessControlView.IsTopMost"/>.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.Validation.WindowlessControlView.myWantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.WindowlessControlView.OnPaint_Layared">
            <summary>
            Repaints the window using the layered technique.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.WindowlessControlView.Dispose(System.Boolean)">
            <summary>
            Disposes of the resources (other than memory) used by the <see cref="T:System.Windows.Forms.Form"></see>.
            </summary>
            
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.WindowlessControlView.GetDesiredSize(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Performs the bottom-up layouting stage, when the control calculates its desired size using the given constraints.
            Should give generally the same results as <see cref="T:JetBrains.CommonControls.IConstrainableControl"/>, but could employ the <paramref name="gc"/> device context for the sake of optimization.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="limit">The maximum available space (that could affect the shape of the control, or strip down unnecessary calculations over the invisible items).
            May be a <see cref="T:System.Drawing.Size"/> with width and height equal to <see cref="F:System.Int32.MaxValue"/>, which means that the size is not limited.</param>
            <returns>The desired size, must be no larger than <paramref name="limit"/>.</returns>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.WindowlessControlView.SetLayout(JetBrains.UI.LayoutResult)">
            <summary>
            Tells the control the details about the new layout applied to it by the controlling entity in conjunction with some <see cref="T:JetBrains.UI.IPopupLayouter"/>.
            Typically, the control need not apply the given size and location because that should be done by the controlling entity.
            The control may change its presentation in response to the layouting details, for example, whether it's attached to the top or the bottom of the anchoring rect.
            </summary>
            <param name="layout">The layouting details.</param>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.WindowlessControlView.GetTooltip(JetBrains.DataFlow.Lifetime,System.Drawing.Point)">
            <summary>
            Called by tooltip manager, if the tooltip is to be displayed
            </summary>
            <param name="lifetime"></param>
            <param name="point">Point in control's coordinates</param>
            <returns><see cref="T:JetBrains.UI.Tooltips.ITooltipInfo"/>, or <c>Null</c> if no tooltip should be displayed.</returns>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.WindowlessControlView.TooltipProvider">
            <summary>
            Gets or sets the tooltip provider for the control.
            <c>Null</c> is a valid value.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.WindowlessControlView.ShowWithoutActivation">
            <summary>
            Gets a value indicating whether the window will be activated when it is shown.
            </summary>
            
            <returns>
            True if the window will not be activated when it is shown; otherwise, false. The default is false.
            </returns>
            
        </member>
        <member name="P:JetBrains.CommonControls.Validation.WindowlessControlView.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.WindowlessControlView.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="T:JetBrains.WindowManagement.MainWindowLayouter">
            <summary>
            Layouts a window by placing it relatively to the main window.
            </summary>
        </member>
        <member name="M:JetBrains.WindowManagement.MainWindowLayouter.CreateCenteredCorner(JetBrains.DataFlow.Lifetime,JetBrains.UI.Application.IMainWindow,JetBrains.UI.Application.WindowsMessageHookManager)">
            <summary>
            Creates a layouter that layouts the content by its top-left corner at approximately the center of the main window.
            When the content size changes, its left-top corner won't move.
            Unlike <see cref="M:JetBrains.WindowManagement.MainWindowLayouter.CreateCenteredMiddle(JetBrains.DataFlow.Lifetime,JetBrains.UI.Application.IMainWindow,JetBrains.UI.Application.WindowsMessageHookManager)"/>, it's not truely centered, but the title of your content won't jump when it resizes.
            </summary>
        </member>
        <member name="M:JetBrains.WindowManagement.MainWindowLayouter.CreateCenteredMiddle(JetBrains.DataFlow.Lifetime,JetBrains.UI.Application.IMainWindow,JetBrains.UI.Application.WindowsMessageHookManager)">
            <summary>
            Creates a layouter that places the content in the center of the main window. When the content size changes, it remains centered.
            Unlike <see cref="M:JetBrains.WindowManagement.MainWindowLayouter.CreateCenteredCorner(JetBrains.DataFlow.Lifetime,JetBrains.UI.Application.IMainWindow,JetBrains.UI.Application.WindowsMessageHookManager)"/>, this layouter won't fix the content's title in place, but at each moment the content will be truely centered in the main window.
            </summary>
            <param name="lifetime"></param>
            <param name="mainWindow"></param>
            <param name="windowsMessageHookManager"></param>
        </member>
        <member name="T:JetBrains.UI.ToolWindowManagement.ToolWindowDescriptor">
            <summary>
            Base type for tool window descriptors
            </summary>
        </member>
        <member name="T:JetBrains.UI.WindowAnchoringRect">
            <summary>
            An anchoring rectangle that tracks the visual position of some window on the screen.
            For child windows, tracks the movement of their parents.
            After the window ceises to exist, reports the bounds it last had at life.
            </summary>
        </member>
        <member name="M:JetBrains.UI.WindowAnchoringRect.#ctor(JetBrains.DataFlow.Lifetime,System.Void*,JetBrains.UI.Application.WindowsMessageHookManager)">
            <summary>
            Initializes the instance.
            </summary>
            <param name="lifetime"></param>
            <param name="window">The window to attach to and track its window rectangle.</param>
            <param name="windowsMessageHookManager">Optional. Hooks engine, for tracking the window position live. If omitted, the rectangle will snap to the initial window position and won't follow window moves.</param>
        </member>
        <member name="M:JetBrains.UI.WindowAnchoringRect.#ctor(JetBrains.DataFlow.Lifetime,System.Windows.Forms.IWin32Window,JetBrains.UI.Application.WindowsMessageHookManager)">
            <summary>
            Initializes the instance.
            </summary>
            <param name="lifetime"></param>
            <param name="window">The window to attach to and track its window rectangle.</param>
            <param name="windowsMessageHookManager">Optional. Hooks engine, for tracking the window position live. If omitted, the rectangle will snap to the initial window position and won't follow window moves.</param>
        </member>
        <member name="M:JetBrains.UI.WindowAnchoringRect.AnchorToMainWindowSafe(JetBrains.DataFlow.Lifetime,JetBrains.UI.Application.IMainWindow,JetBrains.UI.Application.WindowsMessageHookManager)">
            <summary>
            Gets an anchoring rect that tracks the main window visual position.
            Handles the cases when the main window is not yet/already operable, or when it's not available in the current configuration.
            </summary>
            <param name="lifetime"></param>
            <param name="mainwin">The main window, if available. Otherwise, the current display will be used.</param>
            <param name="windowsMessageHookManager">Hooks engine, to enable tracking the main window position LIVE.</param>
        </member>
        <member name="M:JetBrains.UI.WindowAnchoringRect.Update">
            <summary>
            Forces synchronization to the current visual position of the window.
            Could be used when hooks engine is not available and the window is not tracked automatically.
            </summary>
        </member>
        <member name="M:JetBrains.UI.WindowAnchoringRect.OnAnyWindowMoved(System.Object,JetBrains.UI.Interop.WindowsMessageEventArgs)">
            <summary>
            Some application window has moved onscreen.
            Check if we have to update our position (= it's our ancestor).
            </summary>
        </member>
        <member name="M:JetBrains.UI.WindowAnchoringRect.UpdateAnchor">
            <summary>
            Update the position if the window is still valid.
            </summary>
        </member>
        <member name="P:JetBrains.UI.WindowAnchoringRect.WindowHandle">
            <summary>
            Gets the Win32 handle of the window being watched.
            Invalid after the object is disposed.
            </summary>
        </member>
        <member name="T:JetBrains.UI.WindowManagement.WindowFrame">
            <summary>
            <para>Represents the frame that sites active controls, for example, the text control. This frame knows whether it's visible on screen, and sometimes it can cause the environment to switch so that the frame became visible.</para>
            <para>In Visual Studio, an example of such frames is an editor tab or a tool window, in which case this implementation is based on the VS Window Frame interface.</para>
            </summary>
        </member>
        <member name="M:JetBrains.UI.WindowManagement.WindowFrame.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="F:JetBrains.UI.WindowManagement.WindowFrame.Bag">
            <summary>
            Allows to attach payload. For instance, the raw VS Window Frame lives here.
            </summary>
        </member>
        <member name="F:JetBrains.UI.WindowManagement.WindowFrame.Closed">
            <summary>
            <para>Notifies the hosted control that the frame has been closed and the content is illegitimate from now on.</para>
            <para>Not guaranteed to fire.</para>
            </summary>
        </member>
        <member name="F:JetBrains.UI.WindowManagement.WindowFrame.Disposables">
            <summary>
            Lifetime control.
            </summary>
        </member>
        <member name="F:JetBrains.UI.WindowManagement.WindowFrame.IsVisibleOnScreen">
            <summary>
            <para>Gets whether the frame is currently visible onscreen, which tries to take into account not only the visibility flag of the window, but also whether the window layout allows content control to be visible onscreen.</para>
            <para>This property is <see cref="T:JetBrains.Threading.ReentrancyGuard">guarded</see>, which means that all of the property changes will only occur in the guarded context.</para>
            </summary>
        </member>
        <member name="F:JetBrains.UI.WindowManagement.WindowFrame.RootParentHwnd">
            <summary>
            <para>Gets the root parent HWND for this window frame. This window should be used as owner for window popups over the frame content.</para>
            <para>The root parent window is the window that has no parent (see <see cref="F:JetBrains.Interop.WinApi.GetAncestorFlags.GA_ROOT"/>) and whose descendant “contains” this frame. For HWND-based UI, it's the top-level window containing the HWND of the frame. For Avalon UI, it's the top-level window containing the HWND presentation source of the UI element (or <c>Null</c>, if the element is not parented by a HWND presentation source).</para>
            <para>Could be <c>Null</c> if the frame is not hosted on an HWND or the frame implementation cannot provide this value. Could change if the frame is reparented into another top-level window (eg floating a VS10 text view element).</para>
            </summary>
        </member>
        <member name="F:JetBrains.UI.WindowManagement.WindowFrame.SwitchToFrameRequested">
            <summary>
            Tries to make <see cref="F:JetBrains.UI.WindowManagement.WindowFrame.IsVisibleOnScreen"/> <c>True</c>. Even if successful, might not apply immediately, as the changes to the <see cref="F:JetBrains.UI.WindowManagement.WindowFrame.IsVisibleOnScreen"/> occur in the reentrancy-guarded context only.
            </summary>
        </member>
        <member name="F:JetBrains.UI.WindowManagement.WindowFrame.UiElement">
            <summary>
            <para>Gets the UI element that represents the window frame, in either UI framework, if exposed by the window frame.</para>
            <para>For HWND-based UI, query this object for the <see cref="T:System.Windows.Forms.IWin32Window"/> interface. For Avalon UI, try casting to 2D or 3D Avalon elements.</para>
            </summary>
        </member>
        <member name="M:JetBrains.UI.WindowManagement.WindowFrame.CreateDummyFrame">
            <summary>
            Creates a dummy window frame that always thinks it's visible.
            </summary>
        </member>
        <member name="M:JetBrains.UI.WindowManagement.WindowFrame.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.WindowManagement.WindowFrameEx.AttachToHwndStatic(JetBrains.UI.WindowManagement.WindowFrame,System.Windows.Forms.IWin32Window)">
            <summary>
            Assigns a HWND to the HWND-based window frame.
            The frame will not listen to changes in parent windows chain or visibility, hence “static”, but it does not leak any system-wide event handlers if not disposed of.
            </summary>
        </member>
        <member name="M:JetBrains.UI.WindowManagement.WindowFrameEx.AttachToRootParentLive(JetBrains.UI.WindowManagement.WindowFrame,JetBrains.DataFlow.Lifetime,System.Void*,JetBrains.UI.Application.WindowsMessageHookManager)">
            <summary>
            Takes a sample HWND from within the frame (or the frame itself, but could be a content window in it), watches changes in its parenting, keeps the <see cref="F:JetBrains.UI.WindowManagement.WindowFrame.RootParentHwnd"/> up to date.
            Such a frame MUST be disposed of.
            </summary>
        </member>
        <member name="M:JetBrains.UI.WindowManagement.WindowFrameEx.CreateChildFrame(JetBrains.UI.WindowManagement.WindowFrame)">
            <summary>
            Creates a new child window frame in a window frame, which always switches in sync with the parent window frame.
            Could be useful if you need to place two windowframed entities (eg text controls) in the same window frame.
            </summary>
        </member>
    </members>
</doc>
