<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.Platform.ReSharper.Util</name>
    </assembly>
    <members>
        <member name="T:JetBrains.UI.Anchoring">
            <summary>
            Linear anchoring constants.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Anchoring.NearWithout">
            <summary>
            Left or top, anchored outside the area.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Anchoring.NearWithin">
            <summary>
            Left or top, anchored inside the area.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Anchoring.MiddleWithin">
            <summary>
            Center or middle, anchored inside the area. Preferrably, in the center.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Anchoring.FarWithin">
            <summary>
            Right or bottom, anchored inside the area.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Anchoring.FarWithout">
            <summary>
            Right or bottom, anchored outside the area.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Anchoring2D">
            <summary>
            Describes the anchoring in two dimensions.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Anchoring2D.myAnchorAside">
            <summary>
            Backup for <see cref="P:JetBrains.UI.Anchoring2D.AnchorAside"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Anchoring2D.myAnchorBottomOrTop">
            <summary>
            Backup for <see cref="P:JetBrains.UI.Anchoring2D.AnchorBottomOrTop"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Anchoring2D.myAnchorLeftOrRightOnly">
            <summary>
            Backup for <see cref="P:JetBrains.UI.Anchoring2D.AnchorLeftOrRightOnly"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Anchoring2D.myAnchorTop">
            <summary>
            Backup for <see cref="P:JetBrains.UI.Anchoring2D.AnchorTop"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Anchoring2D.myAnchorTopOrBottom">
            <summary>
            Backup for <see cref="P:JetBrains.UI.Anchoring2D.AnchorTopOrBottom"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Anchoring2D.Value">
            <summary>
            The raw value combining both vertical and horizontal anchoring.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Anchoring2D.#ctor(System.Int32)">
            <summary>
            Initializes from a raw value.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Anchoring2D.#ctor(JetBrains.UI.Anchoring,JetBrains.UI.Anchoring)">
            <summary>
            Initializes the instance.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Anchoring2D.IsFar(JetBrains.UI.Anchoring)">
            <summary>
            Checks whether the given <paramref name="anchoring"/> is one of the Far— anchorings, namely, <see cref="F:JetBrains.UI.Anchoring.FarWithin"/> or <see cref="F:JetBrains.UI.Anchoring.FarWithout"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Anchoring2D.IsNear(JetBrains.UI.Anchoring)">
            <summary>
            Checks whether the given <paramref name="anchoring"/> is one of the Near— anchorings, namely, <see cref="F:JetBrains.UI.Anchoring.NearWithin"/> or <see cref="F:JetBrains.UI.Anchoring.NearWithout"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Anchoring2D.ToArray">
            <summary>
            Creates an array consisting of just one item.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Anchoring2D.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.UI.Anchoring2D.AnchorAside">
            <summary>
            Gets the list of anchoring to place the entity aside the anchor, preferrably, left, right, then bottom and top.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Anchoring2D.AnchorBottomOrTop">
            <summary>
            Gets the list of side-anchoring dispositions in descending order of preferrability.
            The preferred side is bottom, then top, then right and left.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Anchoring2D.AnchorLeftOrRightOnly">
            <summary>
            Gets the list of side-anchoring dispositions in descending order of preferrability.
            The preferred side is right, then left. That's all.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Anchoring2D.AnchorTop">
            <summary>
            Gets the list of side-anchoring dispositions in descending order of preferrability.
            The preferred side is top, sides top to bottom, then bottom.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Anchoring2D.AnchorTopOrBottom">
            <summary>
            Gets the list of side-anchoring dispositions in descending order of preferrability.
            The preferred side is top, then bottom, then left and right.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Anchoring2D.Horizontal">
            <summary>
            Gets or sets the hotizontal component of the anchoring.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Anchoring2D.IsInside">
            <summary>
            Gets whether the anchoring is inside the rect against both dimensions.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Anchoring2D.Vertical">
            <summary>
            Gets or sets the hotizontal component of the anchoring.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Collections.EnumerableCollection`1">
            <summary>
            This class adapts <see cref="T:System.Collections.Generic.IEnumerable`1"/> to <see cref="T:System.Collections.Generic.ICollection`1"/> involving count of items.
            Used to optimize getting count of items only.
            </summary>
            <typeparam name="T">The type of the elements in the collection.</typeparam>
        </member>
        <member name="T:System.Linq.EnumerableExJet">
            <summary>
            Extension methods that mimic or extend the standard <see cref="T:System.Linq.Enumerable"/> methods, sharing the same names.
            Thus, this class MUST be in the same namespace, so that there were no problems when importing one of them at random.
            </summary>
        </member>
        <member name="M:System.Linq.EnumerableExJet.First``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Returns the first element of a sequence. 
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return the first element of. </param>
            <param name="sExceptionMessageEmpty">The message for an exception to be thrown if the <paramref name="source"/> is empty.</param>
            <returns>The first element in the specified sequence. </returns>
        </member>
        <member name="M:System.Linq.EnumerableExJet.Single``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return a single element from. </param>
            <param name="sExceptionMessageEmpty">The message for an exception to be thrown if the <paramref name="source"/> is empty.</param>
            <param name="sExceptionMessageAmbiguous">The message for an exception to be thrown if the <paramref name="source"/> contains more than one element.</param>
            <returns>The single element of the input sequence that satisfies a condition.</returns>
        </member>
        <member name="T:JetBrains.Util.Collections.HashMap`2">
            <summary>
            Reimplementation of Dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="F:JetBrains.Util.Collections.HashMap`2.Entry.HashCode">
            <summary>
            Cached hash code of the key, -1 means entry is free
            </summary>
        </member>
        <member name="F:JetBrains.Util.Collections.HashMap`2.Entry.NextEntryIndex">
            <summary>
            Index of next entry in the chain of keys with the same hashcodes (modulo size), -1 means last
            </summary>
        </member>
        <member name="F:JetBrains.Util.Collections.HashMap`2.Entry.PrevEntryIndex">
            <summary>
            Index of previous entry in the chain of keys with the same hashcodes (modulo size), -1 means first
            </summary>
        </member>
        <member name="T:JetBrains.Util.Collections.ICountable`1">
            <summary>
            Exposes the enumerator, which supports a simple iteration over a collection of a specified type 
            and count of objects in the collection.
            </summary>
            <typeparam name="T">The type of objects to enumerate.</typeparam>
        </member>
        <member name="T:JetBrains.Util.DataStructures.ReadOnlyException">
            <summary>Represents the exception that is thrown when you try to change the value of a read-only entity.</summary>
        </member>
        <member name="F:JetBrains.Util.StrongToWeakDictionary`2.Entry.HashCode">
            <summary>
            Cached hash code of the key, -1 means entry is free
            </summary>
        </member>
        <member name="F:JetBrains.Util.StrongToWeakDictionary`2.Entry.NextEntryIndex">
            <summary>
            Index of next entry in the chain of keys with the same hashcodes (modulo size), -1 means last
            </summary>
        </member>
        <member name="F:JetBrains.Util.StrongToWeakDictionary`2.Entry.PrevEntryIndex">
            <summary>
            Index of previous entry in the chain of keys with the same hashcodes (modulo size), -1 means first
            </summary>
        </member>
        <member name="T:JetBrains.Util.TypeOf">
            <summary>
            Caches <see cref="T:System.Type"/> instances for popular types.
            </summary>
        </member>
        <member name="T:JetBrains.Concurrency.Fiber">
            <summary>
            Implements the fibers (non-preemptive multitasking).
            </summary>
        </member>
        <member name="T:JetBrains.Concurrency.IFiber">
            <summary>
            Common interface for various fiber incarnations.
            </summary>
        </member>
        <member name="M:JetBrains.Concurrency.IFiber.YieldTo">
            <summary>
            Yields execution to this fiber.
            </summary>
        </member>
        <member name="P:JetBrains.Concurrency.IFiber.IsCompleted">
            <summary>
            Whether the fiber coroutine has started running and completed its run successfully.
            A primary fiber is never considered completed, as its code has no specific end.
            </summary>
        </member>
        <member name="P:JetBrains.Concurrency.IFiber.IsPrimary">
            <summary>
            Whether this is the primary fiber, a wrapper over the thread's main execution flow, rather than a specifically created coroutine.
            </summary>
        </member>
        <member name="M:JetBrains.Concurrency.Fiber.#ctor(System.Action)">
            <summary>
            Creates a new secondary fiber.
            </summary>
        </member>
        <member name="M:JetBrains.Concurrency.Fiber.#ctor">
            <summary>
            Wraps the primary fiber.
            </summary>
        </member>
        <member name="M:JetBrains.Concurrency.Fiber.CreateSecondaryFiber(System.Action)">
            <summary>
            Creates a new fiber to execute the <paramref name="action"/> in.
            To start execution, <see cref="M:JetBrains.Concurrency.Fiber.YieldTo"/> this fiber.
            </summary>
        </member>
        <member name="M:JetBrains.Concurrency.Fiber.GetPrimaryFiber">
            <summary>
            Gets the primary fiber for this thread. It represents the main execution path of the thread.
            </summary>
        </member>
        <member name="M:JetBrains.Concurrency.Fiber.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Concurrency.Fiber.YieldTo">
            <summary>
            Yields execution to this fiber.
            </summary>
        </member>
        <member name="P:JetBrains.Concurrency.Fiber.IsCompleted">
            <summary>
            Whether the fiber coroutine has started running and completed its run successfully.
            A primary fiber is never considered completed, as its code has no specific end.
            </summary>
        </member>
        <member name="P:JetBrains.Concurrency.Fiber.IsPrimary">
            <summary>
            Whether this is the primary fiber, a wrapper over the thread's main execution flow (<see cref="M:JetBrains.Concurrency.Fiber.GetPrimaryFiber"/>), rather than a specifically created coroutine (<see cref="M:JetBrains.Concurrency.Fiber.CreateSecondaryFiber(System.Action)"/>).
            </summary>
        </member>
        <member name="T:JetBrains.Concurrency.Fiber.FiberProc">
            <summary>
            Fiber proc prototype. Cannot use a generic <see cref="T:System.Action`1"/> for marshalling.
            </summary>
        </member>
        <member name="T:JetBrains.Concurrency.FiberOverThread">
            <summary>
            Manages multiple threads of execution via fiber-like API.
            </summary>
        </member>
        <member name="F:JetBrains.Concurrency.FiberOverThread._current">
            <summary>
            The current fiber for this thread, or <c>Null</c> if no active one available.
            </summary>
        </member>
        <member name="M:JetBrains.Concurrency.FiberOverThread.#ctor">
            <summary>
            Primary.
            </summary>
        </member>
        <member name="M:JetBrains.Concurrency.FiberOverThread.#ctor(System.Action)">
            <summary>
            Secondary.
            </summary>
        </member>
        <member name="M:JetBrains.Concurrency.FiberOverThread.CreateSecondaryFiber(System.Action)">
            <summary>
            Creates a new fiber to execute the <paramref name="action"/> in.
            To start execution, <see cref="M:JetBrains.Concurrency.FiberOverThread.YieldTo"/> this fiber.
            </summary>
        </member>
        <member name="M:JetBrains.Concurrency.FiberOverThread.GetPrimaryFiber">
            <summary>
            Gets the primary fiber for this thread. It represents the main execution path of the thread.
            </summary>
        </member>
        <member name="M:JetBrains.Concurrency.FiberOverThread.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Concurrency.FiberOverThread.YieldTo">
            <summary>
            Yields execution to this fiber.
            </summary>
        </member>
        <member name="P:JetBrains.Concurrency.FiberOverThread.IsCompleted">
            <summary>
            Whether the fiber coroutine has started running and completed its run successfully.
            A primary fiber is never considered completed, as its code has no specific end.
            </summary>
        </member>
        <member name="P:JetBrains.Concurrency.FiberOverThread.IsPrimary">
            <summary>
            Whether this is the primary fiber, a wrapper over the thread's main execution flow, rather than a specifically created coroutine.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Concurrency.FrugalLocalLazy`1">
            <summary>
            <para>Provides support for several common patterns of lazy initialization, including the ability to initialize value types and to use null values.</para>
            <para>This is a frugal version of <see cref="T:JetBrains.Util.Lazy.Lazy`1"/> and <see cref="T:JetBrains.Util.Concurrency.LocalLazy`1"/> that does not create any objects until the lazy value is initialized to a reference type.</para>
            <para>This class only supports creating reference types with default constructors in a thread-unsafe manner, but its added memory usage is exactly zero (it takes as much space in the containing class as a field with a reference to the lazily-created value would do).</para>
            <para>For use in private fields only. Do not expose! Assigning this object to any variables breaks the pattern.</para>
            </summary>
            <typeparam name="T">Specifies the type of element being laziliy initialized.</typeparam>
        </member>
        <member name="T:JetBrains.Threading.GuardAttribute">
            <summary>
            Defines the guarded context affinity of the method: whether it expects to be always executed in a guarded context, or is considered an “outer world” method.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.GuardAttribute.#ctor(JetBrains.Threading.Rgc)">
            <summary>
            Defines the guarded context affinity of the method: whether it expects to be always executed in a guarded context, or is considered an “outer world” method.
            </summary>
        </member>
        <member name="T:JetBrains.Threading.Rgc">
            <summary>
            <c>ReentrancyGuardContext</c>
            Defines the guarded context affinity of the method: whether it expects to be always executed in a guarded context, or is considered an “outer world” method.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.Rgc.NotSpecified">
            <summary>
            There is no information regarding guarded context affinity yet.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.Rgc.Guarded">
            <summary>
            Must be guarded from reentrancy. Make sure to either take a <see cref="T:JetBrains.Threading.ReentrancyGuard"/> or call it from the guarded context.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.Rgc.Unguarded">
            <summary>
            Assumed to be executed in the “outer world” and must tage a <see cref="T:JetBrains.Threading.ReentrancyGuard"/> before calling any <see cref="F:JetBrains.Threading.Rgc.Guarded"/> things.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.Rgc.Invariant">
            <summary>
            Does not deal with <see cref="F:JetBrains.Threading.Rgc.Guarded"/> entities and can thus be used both in guarded and unguarded contexts.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.Rgc.Special">
            <summary>
            Neither <see cref="F:JetBrains.Threading.Rgc.Guarded"/> nor <see cref="F:JetBrains.Threading.Rgc.Unguarded"/> nor <see cref="F:JetBrains.Threading.Rgc.Invariant"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Concurrency.LocalLazy`1">
            <summary>
            Provides support for several common patterns of lazy initialization, including the ability to initialize value types and to use null values.
            This is a frugal version of <see cref="T:JetBrains.Util.Lazy.Lazy`1"/> that does not create any objects until the lazy value is initialized to a reference type.
            </summary>
            <typeparam name="T">Specifies the type of element being laziliy initialized.</typeparam>
        </member>
        <member name="T:JetBrains.UI.Application.LocalReentrancyGuard">
            <summary>
            In the local scope, prevents reentrancy with own methods only.
            Thread-safe.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.LocalReentrancyGuard.TryExecute(System.Action)">
            <summary>
            Executes the action, if not yet executing another one.
            </summary>
            <param name="action">Action.</param>
            <returns>Whether the action were executed.</returns>
        </member>
        <member name="M:JetBrains.UI.Application.LocalReentrancyGuard.Execute(System.Action)">
            <summary>
            Executes the action, if not yet executing another one.
            </summary>
            <param name="action">Action.</param>
        </member>
        <member name="T:JetBrains.Util.Concurrency.UnguardedCallbackMerger">
            <summary>
            <para>Allows to join expected callbacks from unguarded context into the current guarded context.</para>
            <para>When running in the guarded context, nest the actions that might cause callbacks from unguarded context within a <see cref="M:JetBrains.Util.Concurrency.UnguardedCallbackMerger.ExpectUnguardedCallback(System.Action)"/> call. <see cref="P:JetBrains.Util.Concurrency.UnguardedCallbackMerger.IsExpectingUnguardedCallback"/> will come <c>True</c>.</para>
            <para>In the callback handler, use <see cref="M:JetBrains.Util.Concurrency.UnguardedCallbackMerger.ExecuteOrQueueOrMerge(System.String,System.Action)"/>. If <see cref="P:JetBrains.Util.Concurrency.UnguardedCallbackMerger.IsExpectingUnguardedCallback"/>, it will be merged into the current guarded context (this is considered a reentrant-safe activity). Otherwise, <see cref="M:JetBrains.Threading.ReentrancyGuard.ExecuteOrQueue(System.String,System.Action)"/> will be used.</para>
            <para>Can be reused.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Util.Concurrency.UnguardedCallbackMerger.#ctor(JetBrains.Threading.ReentrancyGuard,JetBrains.Util.Concurrency.UnguardedCallbackMerger.BehaviorFlags)">
            <summary>
            Init.
            </summary>
            <param name="guard">Identifies the thread.</param>
            <param name="flags">Behavior flags &amp; options.</param>
        </member>
        <member name="M:JetBrains.Util.Concurrency.UnguardedCallbackMerger.ExecuteOrQueue(JetBrains.Threading.ReentrancyGuard,JetBrains.DataFlow.Disposables,System.String,System.Action)">
            <summary>
            <para>Executes an action on the guarded thread in a reentrant-safe manner.</para>
            <para>If called on a foreign thread, executes the action asynchronously, like <see cref="M:JetBrains.Threading.ReentrancyGuard.Queue(System.String,System.Action)"/>.</para>
            <para>If called on the guarded thread, checks for reentrancy. If there are no guarded executions on the stack yet, executes the action immediately and synchronously. Otherwise, postpones the action for asynchronous execution, like <see cref="M:JetBrains.Threading.ReentrancyGuard.Queue(System.String,System.Action)"/> does.</para>
            </summary>
            <param name="reega">The guarded context owner.</param>
            <param name="disposables">When this container is disposed of, the pending action is canceled (if resolved to <see cref="M:JetBrains.Threading.ReentrancyGuard.Queue(System.String,System.Action)"/> and were postponed).</param>
            <param name="name">Identifies the action in the queue.</param>
            <param name="F">The action to execute. Exceptions will be trapped.</param>
            <returns><c>True</c> if executed immediately, <c>False</c> if queued (<see cref="M:JetBrains.Threading.ReentrancyGuard.TryExecute(System.String,System.Action)"/>-compatible behavior).</returns>
        </member>
        <member name="M:JetBrains.Util.Concurrency.UnguardedCallbackMerger.ExecuteOrQueueOrMerge(System.String,System.Action)">
            <summary>
            <para>Executes the <paramref name="F"/> in the guarded context.</para>
            <para>If <see cref="P:JetBrains.Util.Concurrency.UnguardedCallbackMerger.IsExpectingUnguardedCallback"/> (ie running inside <see cref="M:JetBrains.Util.Concurrency.UnguardedCallbackMerger.ExpectUnguardedCallback(System.Action)"/>), merges the call into the current guarded context. Otherwise, does the regular <see cref="M:JetBrains.Threading.ReentrancyGuard.ExecuteOrQueue(System.String,System.Action)"/>.</para>
            <para>Executes sync or async. Must be run on the <see cref="F:JetBrains.Util.Concurrency.UnguardedCallbackMerger.ReentrancyGuard"/> thread.</para>
            <para>Catches all exceptions.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Util.Concurrency.UnguardedCallbackMerger.ExpectUnguardedCallback(System.Action)">
            <summary>
            <para>Says that we're expecting callbacks from the unguarded context, and they should be allowed into the current context if they use <see cref="M:JetBrains.Util.Concurrency.UnguardedCallbackMerger.ExecuteOrQueueOrMerge(System.String,System.Action)"/>.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Util.Concurrency.UnguardedCallbackMerger.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.Util.Concurrency.UnguardedCallbackMerger.IsExpectingUnguardedCallback">
            <summary>
            Whether we're inside <see cref="M:JetBrains.Util.Concurrency.UnguardedCallbackMerger.ExpectUnguardedCallback(System.Action)"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Concurrency.UnguardedCallbackMerger.BehaviorFlags">
            <summary>
            <see cref="T:JetBrains.Util.Concurrency.UnguardedCallbackMerger"/> behavior aspects.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Concurrency.UnguardedCallbackMerger.BehaviorFlags.ExecutePendingLeftovers">
            <summary>
            <para>Use the default <see cref="F:JetBrains.Util.Concurrency.UnguardedCallbackMerger.ReentrancyGuard"/> behavior: if the callbacks were queued for execution with <see cref="!:ReentrancyGuard.Queue"/>, they're not reclaimed after the owning object is disposed of, and will still have a chance to execute.</para>
            <para>This is the default.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Util.Concurrency.UnguardedCallbackMerger.BehaviorFlags.DropPendingLeftovers">
            <summary>
            <para>If there're any pending callbacks queued for execution with <see cref="!:ReentrancyGuard.Queue"/> at the moment the owning object is disposed of, they're dropped.</para>
            <para>No code submitted through this object will execute after it is disposed of.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Util.Concurrency.UnguardedCallbackMerger.BehaviorFlags.ProhibitNestedExpectations">
            <summary>
            <para>When running inside <see cref="M:JetBrains.Util.Concurrency.UnguardedCallbackMerger.ExpectUnguardedCallback(System.Action)"/>, nested calls to <see cref="M:JetBrains.Util.Concurrency.UnguardedCallbackMerger.ExpectUnguardedCallback(System.Action)"/> are prohibited. An attempt to place such a call will result in an exception.</para>
            <para>This is the default.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Util.Concurrency.UnguardedCallbackMerger.BehaviorFlags.AllowNestedExpectations">
            <summary>
            <para>When running inside <see cref="M:JetBrains.Util.Concurrency.UnguardedCallbackMerger.ExpectUnguardedCallback(System.Action)"/>, nested calls to <see cref="M:JetBrains.Util.Concurrency.UnguardedCallbackMerger.ExpectUnguardedCallback(System.Action)"/> are allowed.</para>
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.CompositeProperty`3">
            <summary>
            Creates a new composite property that composes the values of two source ones.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.CompositeProperty`3.Create(JetBrains.DataFlow.IProperty{`0},JetBrains.DataFlow.IProperty{`1},JetBrains.DataFlow.CompositeProperty{`0,`1,`2}.ComposerDelegate)">
            <summary>
            Creates a new composite property that composes the values of two source ones.
            </summary>
            <param name="propertySourceOne">The source property.</param>
            <param name="propertySourceTwo">The source property.</param>
            <param name="composer">The composer that produces the target from the sources.</param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.DataFlow.CompositeProperty`3.ComposerDelegate">
            <summary>
            Composes a target value from two source ones.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.DataFlowEx">
            <summary>
            Extension method helpers for the data flow classes.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.DataFlowEx.OnSignal(JetBrains.DataFlow.IPropertyBinding,JetBrains.DataFlow.IUntypedSignal,JetBrains.DataFlow.DataFlowDirection)">
            <summary>
            Sets up the binding to update when the <paramref name="signal"/> fires.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.ICollectionEventsEx">
            <summary>
            Extension method helpers for the data flow classes.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ICollectionEventsEx.BeginAdd``1(JetBrains.DataFlow.ICollectionEvents{``0},JetBrains.Threading.JetDispatcher,``0)">
            <summary>
            Asynchronously adds a new item to the collection.
            </summary>
            <typeparam name="TValue">Item type.</typeparam>
            <param name="coll">Collection.</param>
            <param name="dispatcher">Identifies the thread the modification should happen on.</param>
            <param name="item">The item to be added.</param>
        </member>
        <member name="M:JetBrains.DataFlow.ICollectionEventsEx.BridgeInto_Guarded_Slow``1(JetBrains.DataFlow.ICollectionEvents{``0},JetBrains.DataFlow.ICollectionEvents{``0},JetBrains.Threading.ReentrancyGuard,System.Object)">
            <summary>
            Bridges first collection modifications into the second collection, in the guarded context.
            Slow. Not suitable for large collections. Better use hashsets (both).
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ICollectionEventsEx.CreateCount``1(JetBrains.DataFlow.ICollectionEvents{``0})">
            <summary>
            Creates a property that tells the numer of items in the collection.
            When the retval is disposed of, the collection listener is alos disconnected.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ICollectionEventsEx.CreateIsEmpty``1(JetBrains.DataFlow.ICollectionEvents{``0})">
            <summary>
            Creates a property that tells whether the collection is empty or not.
            When the retval is disposed of, the collection listener is alos disconnected.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ICollectionEventsEx.CreateIsNotEmpty``1(JetBrains.DataFlow.ICollectionEvents{``0})">
            <summary>
            Creates a property that tells whether the collection has some items in it.
            When the retval is disposed of, the collection listener is alos disconnected.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ICollectionEventsEx.IsNotEmptyProperty``1(JetBrains.DataFlow.ICollectionEvents{``0})">
            <summary>
            Gets a property that tells whether the collection is currently empty.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ICollectionEventsEx.LogChanges``1(JetBrains.DataFlow.ICollectionEvents{``0},System.String)">
            <summary>
            Logs the collection modifications.
            </summary>
            <param name="collection">The collection.</param>
            <param name="prefix">The optional prefix to be prepended in square brackets to each log message.</param>
        </member>
        <member name="M:JetBrains.DataFlow.ICollectionEventsEx.LogChanges``1(JetBrains.DataFlow.ICollectionEvents{``0},System.Object)">
            <summary>
            Logs the collection modifications.
            </summary>
            <param name="collection">The collection.</param>
            <param name="logprefix">The object whose local name will be used as a logging prefix, ie prepended in square brackets to each log message, or a <see cref="T:System.Type"/> whose short name will be used.</param>
        </member>
        <member name="M:JetBrains.DataFlow.ICollectionEventsEx.PushForEachItem``1(JetBrains.DataFlow.ICollectionEvents{``0},System.Func{``0,System.IDisposable})">
            <summary>
            Executes a pair of actions for each of the items in the collection.
            When a new items comes into view, executes the <paramref name="handler"/> for it. The return value of the <paramref name="handler"/> is the closing bracket and will be executed when the collection item goes off the view.
            </summary>
            <typeparam name="TValue">Type of the collection items.</typeparam>
            <param name="coll">The collection.</param>
            <param name="handler">The handler that executes the opening bracket and returns an <see cref="T:System.IDisposable"/> that executes the closing bracket when disposed of.</param>
        </member>
        <member name="M:JetBrains.DataFlow.ICollectionEventsEx.PushForEachItem``1(JetBrains.DataFlow.ICollectionEvents{``0},System.Func{JetBrains.DataFlow.AddRemoveEventArgs{``0},System.IDisposable})">
            <summary>
            Executes a pair of actions for each of the items in the collection.
            When a new items comes into view, executes the <paramref name="handler"/> for it. The return value of the <paramref name="handler"/> is the closing bracket and will be executed when the collection item goes off the view.
            </summary>
            <typeparam name="TValue">Type of the collection items.</typeparam>
            <param name="coll">The collection.</param>
            <param name="handler">The handler that executes the opening bracket and returns an <see cref="T:System.IDisposable"/> that executes the closing bracket when disposed of.</param>
        </member>
        <member name="M:JetBrains.DataFlow.IPropertyBagEx.LogChanges(JetBrains.DataFlow.IPropertyBag,System.String)">
            <summary>
            Logs the changes to the bag property set and the bag property values.
            </summary>
            <param name="thіs">The property.</param>
            <param name="prefix">The optional prefix to be prepended in square brackets to each log message.</param>
        </member>
        <member name="T:JetBrains.DataFlow.IPropertyEx">
            <summary>
            Extension method helpers for the data flow classes.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.IPropertyEx.BeginSetValue``1(JetBrains.DataFlow.IProperty{``0},JetBrains.Threading.JetDispatcher,``0)">
            <summary>
            Asynhronously assigns a new value to the property.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.IPropertyEx.BeginSetValue``1(JetBrains.DataFlow.IProperty{``0},JetBrains.Threading.JetDispatcher,``0,System.Object)">
            <summary>
            Asynhronously assigns a new value to the property.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.IPropertyEx.Cast``1(JetBrains.DataFlow.IUntypedProperty,JetBrains.DataFlow.IPropertyEx.SyncDisposal)">
            <summary>
            Casts the property value to the given type by creating a new property of that type.
            If the type of the value in the source property is wrong, an exception will be reported, and <c>Null</c> will be assigned to the target property for that period.
            A new property is created that must also be disposed of, for which the <paramref name="syncdisposal"/> parameter sets up the policy.
            </summary>
            <typeparam name="TTarget">Target type.</typeparam>
            <param name="propSource">Source property of the source type.</param>
            <param name="syncdisposal">Lifetime synchronization policy for the two properties.</param>
            <returns>A newly-created target property of the target type.</returns>
        </member>
        <member name="M:JetBrains.DataFlow.IPropertyEx.FlowDeferredInto(JetBrains.DataFlow.IUntypedProperty,JetBrains.DataFlow.IUntypedProperty)">
            <summary>
            Creates a one-way from-source binding between two properties, deferring the new value until execution gets off stack and collecting all the assignments that happen within that time span. The intermediate values are lost, assignments are not replayed, just the last one is applied. The assignment goes on the same thread with the change.
            </summary>
            <param name="source">The source property.</param>
            <param name="target">The target property.</param>
        </member>
        <member name="M:JetBrains.DataFlow.IPropertyEx.FlowDeferredInto(JetBrains.DataFlow.IUntypedProperty,JetBrains.Threading.JetDispatcher,JetBrains.DataFlow.IUntypedProperty)">
            <summary>
            Creates a one-way from-source binding between two properties, deferring the new value until execution gets off stack and collecting all the assignments that happen within that time span. The intermediate values are lost, assignments are not replayed, just the last one is applied. The assignment occurs on the <paramref name="dispatcher"/> thread.
            </summary>
            <param name="source">The source property.</param>
            <param name="dispatcher">The dispatcher on which the assignment should occur.</param>
            <param name="target">The target property.</param>
        </member>
        <member name="M:JetBrains.DataFlow.IPropertyEx.FlowInto``1(JetBrains.DataFlow.IProperty{``0},JetBrains.DataFlow.IProperty{``0})">
            <summary>
            Establishes a data flow between two properties.
            Creates a <see cref="T:JetBrains.DataFlow.PropertyBinding"/> of the <see cref="F:JetBrains.DataFlow.DataFlowDirection.FromSource"/> type.
            Returns a cookie for terminating the flow.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.IPropertyEx.FlowInto``2(JetBrains.DataFlow.IProperty{``0},JetBrains.DataFlow.IProperty{``1},System.Func{``0,``1})">
            <summary>
            Establishes a data flow between two properties of different types, thru a converter.
            Creates a <see cref="T:JetBrains.DataFlow.PropertyBinding"/> of the <see cref="F:JetBrains.DataFlow.DataFlowDirection.FromSource"/> type.
            Returns a cookie for terminating the flow.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.IPropertyEx.FlowIntoReadonly``2(JetBrains.DataFlow.IProperty{``0},JetBrains.DataFlow.IProperty{``1},System.Func{``0,``1},JetBrains.DataFlow.StandardPreconditions.ReadonlyToken)">
            <summary>
            Establishes a data flow between two properties of different types, thru a converter.
            Returns a cookie for terminating the flow.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.IPropertyEx.FlowIntoReadonly``1(JetBrains.DataFlow.IProperty{``0},JetBrains.DataFlow.IProperty{``0},JetBrains.DataFlow.StandardPreconditions.ReadonlyToken)">
            <summary>
            Establishes a data flow between two properties.
            Returns a cookie for terminating the flow.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.IPropertyEx.FlowInto_Grouped``1(JetBrains.DataFlow.IProperty{``0},JetBrains.DataFlow.IProperty{``0},JetBrains.Threading.GroupingEvent)">
            <summary>
            Establishes one-way frequency-limited data flow between two properties.
            The target update occurs no more often than allowed by the signals.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.IPropertyEx.FlowInto_Grouped``1(JetBrains.DataFlow.IProperty{``0},JetBrains.DataFlow.IProperty{``0},JetBrains.Threading.GroupingEvent,System.Object)">
            <summary>
            Establishes one-way frequency-limited data flow between two properties.
            The target update occurs no more often than allowed by the signals.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.IPropertyEx.Invert(JetBrains.DataFlow.IProperty{System.Boolean})">
            <summary>
            Creates a boolean property with an inverter value.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.IPropertyEx.LogChanges``1(JetBrains.DataFlow.IProperty{``0},System.String)">
            <summary>
            Logs the changes to the property value.
            </summary>
            <param name="property">The property.</param>
            <param name="prefix">The optional prefix to be prepended in square brackets to each log message.</param>
        </member>
        <member name="M:JetBrains.DataFlow.IPropertyEx.LogChanges``1(JetBrains.DataFlow.IProperty{``0},System.Object)">
            <summary>
            Logs the changes to the property value.
            </summary>
            <param name="property">The property.</param>
            <param name="logprefix">The object whose local name will be used as a logging prefix, ie prepended in square brackets to each log message, or a <see cref="T:System.Type"/> whose short name will be used.</param>
        </member>
        <member name="M:JetBrains.DataFlow.IPropertyEx.MakeFlag``1(JetBrains.DataFlow.IProperty{``0},System.Func{``0,System.Boolean},System.String)">
            <summary>
            Creates a flag property out of an arbitrary property which is either <c>True</c> or <c>False</c>, based on the <paramref name="funcCondition"/> evaluated on the live value of the <paramref name="prop"/>.
            </summary>
            <typeparam name="TValue">Type of the source property.</typeparam>
            <param name="prop">The source property.</param>
            <param name="funcCondition">The condition to be evaluated on each new value of the property.</param>
            <param name="sConditionName">The name of the condition. This name is appended to the <paramref name="prop"/>'s <see cref="P:JetBrains.DataFlow.IProperty`1.Id"/> to form the new <see cref="T:JetBrains.DataFlow.PropertyId`1"/> for the resulting flag.</param>
        </member>
        <member name="M:JetBrains.DataFlow.IPropertyEx.MakeFlag_NotNull``1(JetBrains.DataFlow.IProperty{``0})">
            <summary>
            Creates a flag property that indicates whether the <paramref name="prop"/> currently has a non-<c>Null</c> value.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.IPropertyEx.OfType``1(JetBrains.DataFlow.IUntypedProperty,JetBrains.DataFlow.IPropertyEx.SyncDisposal)">
            <summary>
            Softly casts the property value to the given type by creating a new property of that type.
            If the type of the value in the source property is wrong, a <c>Null</c> will be assigned to the target property for that period.
            A new property is created that must also be disposed of, for which the <paramref name="syncdisposal"/> parameter sets up the policy.
            </summary>
            <typeparam name="TTarget">Target type.</typeparam>
            <param name="propSource">Source property of the source type.</param>
            <param name="syncdisposal">Lifetime synchronization policy for the two properties.</param>
            <returns>A newly-created target property of the target type.</returns>
        </member>
        <member name="M:JetBrains.DataFlow.IPropertyEx.PushForEachValue``1(JetBrains.DataFlow.IProperty{``0},System.Func{``0,System.IDisposable})">
            <summary>
            Executes a pair of actions for each new value of the <paramref name="property"/>.
            For each new value of the property, the <paramref name="handler"/> is executed.
            Its return value is disposed of when the property looses the value for each it were executed.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.IPropertyEx.PushForEachValue``1(JetBrains.DataFlow.IProperty{``0},System.Func{``0,System.Boolean},System.Func{``0,System.IDisposable})">
            <summary>
            Executes a pair of actions for each new value of the <paramref name="property"/>.
            If the <paramref name="funcCondition"/> is <c>True</c> for the current value, then the <paramref name="handler"/> is executed.
            Its return value is disposed of when the property looses the value for each it were executed.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.IPropertyEx.PushForEachValue_DisposeValue``1(JetBrains.DataFlow.IProperty{``0})">
            <summary>
            Makes sure each value of the property is disposed of when it exits the property.
            Don't forget to dispose of what this method returns (or the property itself in the whole) to also deal correctly with the very last value.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.IPropertyEx.PushForEachValue_NotNull``1(JetBrains.DataFlow.IProperty{``0},System.Func{``0,System.IDisposable})">
            <summary>
            Executes a pair of actions for each new value of the <paramref name="property"/>.
            For each new value of the property that is not <c>Null</c>, the <paramref name="handler"/> is executed.
            Its return value is disposed of when the property looses the value for each it were executed.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.IPropertyEx.PushValue``1(JetBrains.DataFlow.IProperty{``0},``0,System.Object)">
            <summary>
            Pushes the given value into the property when entering the try-finally brackets, pops (restores the former value) when exiting, which happens when the return value gets disposed of.
            The in-brackets writes are not handled.
            </summary>
            <param name="property">The property to process.</param>
            <param name="value">In-brackets property value.</param>
            <param name="cookie">An optional readonly cookie.</param>
            <returns>An instance to dispose of when leaving the brackets.</returns>
        </member>
        <member name="M:JetBrains.DataFlow.IPropertyEx.PushValue``1(JetBrains.DataFlow.IProperty{``0},``0)">
            <summary>
            Pushes the given value into the property when entering the try-finally brackets, pops (restores the former value) when exiting, which happens when the return value gets disposed of.
            The in-brackets writes are not handled.
            </summary>
            <param name="property">The property to process.</param>
            <param name="value">In-brackets property value.</param>
            <returns>An instance to dispose of when leaving the brackets.</returns>
        </member>
        <member name="M:JetBrains.DataFlow.IPropertyEx.PushWhenHigh(JetBrains.DataFlow.IProperty{System.Boolean},System.Func{System.IDisposable})">
            <summary>
            Monitors the property value changes. Whenever the it raises, executes the <paramref name="handler"/> (pushes the action). When the value falls, disposes of the undo action returned by the handler (pops the action).
            </summary>
            <param name="property">The property whose value is to be monitored.</param>
            <param name="handler">The handlers that is executed when the value raises and whose return value is disposed of when the value falls.</param>
        </member>
        <member name="M:JetBrains.DataFlow.IPropertyEx.Select``2(JetBrains.DataFlow.IProperty{``0},System.String,System.Func{``0,``1},JetBrains.DataFlow.IPropertyEx.SyncDisposal)">
            <summary>
            Creates a new property whose value is produced from the source property value.
            Analogous to the LINQ <c>Select</c> functionality.
            A new property is created that must also be disposed of, for which the <paramref name="syncdisposal"/> parameter sets up the policy.
            </summary>
            <typeparam name="TSource">Source type.</typeparam>
            <typeparam name="TTarget">Target type.</typeparam>
            <param name="propSource">Source value.</param>
            <param name="comment">Adds a comment suffix to the Property ID.</param>
            <param name="FSelect">Selector.</param>
            <param name="syncdisposal">Lifetime synchronization policy for the two properties.</param>
            <returns>A newly-created target property of the target type.</returns>
        </member>
        <member name="M:JetBrains.DataFlow.IPropertyEx.SyncDispose(JetBrains.DataFlow.IUntypedProperty,JetBrains.DataFlow.IUntypedProperty,JetBrains.DataFlow.IPropertyEx.SyncDisposal)">
            <summary>
            Synchronizes the lifetime of two properties.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.IPropertyEx.TryGetPropertyType(System.Type)">
            <summary>
            When given a <see cref="T:System.Type"/> of a CLR field or property that has the <see cref="T:JetBrains.DataFlow.IProperty`1"/> type wrapping some other type, unwraps and returns the underlying type of the property (generic argument, the same as its <see cref="P:JetBrains.DataFlow.IUntypedProperty.PropertyType"/>). If the <paramref name="type"/> is not a property type, returns <c>Null</c>.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.IPropertyEx.FlowDeferredIntoCore(JetBrains.DataFlow.IUntypedProperty,System.Func{JetBrains.Threading.JetDispatcher},JetBrains.DataFlow.IUntypedProperty)">
             <summary>
             Creates a one-way from-source binding between two properties, deferring the new value until execution gets off stack and collecting all the assignments that happen within that time span. The intermediate values are lost, assignments are not replayed, just the last one is applied. The thread to run the assignment on is determined by the function <paramref name="FGetDispatcher"/>.
             </summary>
            <param name="source">The source property.</param>
            <param name="FGetDispatcher">Determines the thread to use.</param>
            <param name="target">The target property.</param>
        </member>
        <member name="T:JetBrains.DataFlow.IPropertyEx.SyncDisposal">
            <summary>
            If there're two disposable entities whose lifetimes are connected, defines whether the connection should be established, and which way it should go.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.IPropertyEx.SyncDisposal.No">
            <summary>
            The lifetimes are not synchronized.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.IPropertyEx.SyncDisposal.OldWhenNew">
            <summary>
            When the new object is disposed of, the old one is also destroyed automatically.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.IPropertyEx.SyncDisposal.NewWhenOld">
            <summary>
            When the old object is disposed of, the new one is also destroyed automatically.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.IPropertyEx.SyncDisposal.BothWays">
            <summary>
            When either object is disposed of, the other one is also destroyed automatically.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.ISignalEx">
            <summary>
            Extension method helpers for the data flow classes related to signals.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ISignalEx.Advise_Add``1(JetBrains.DataFlow.ISignal{JetBrains.DataFlow.AddRemoveEventArgs{``0}},System.Action{JetBrains.DataFlow.AddRemoveEventArgs{``0}})">
            <summary>
            Sinks the collection's <see cref="F:JetBrains.DataFlow.AddRemove.Add"/> operation selectively.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ISignalEx.Advise_Add``1(JetBrains.DataFlow.ISignal{JetBrains.DataFlow.AddRemoveIndexEventArgs{``0}},System.Action{JetBrains.DataFlow.AddRemoveIndexEventArgs{``0}})">
            <summary>
            Sinks the collection's <see cref="F:JetBrains.DataFlow.AddRemove.Add"/> operation selectively.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ISignalEx.Advise_InOut``2(JetBrains.DataFlow.ISignal{JetBrains.DataFlow.InOutEventArgs{``0,``1}},System.Func{``0,``1})">
            <summary>
            A helper for sinking IN-OUT events. Gets just the IN-argument for input, returns the OUT-argument.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ISignalEx.Advise_NoAcknowledgement``1(JetBrains.DataFlow.ISignal{JetBrains.DataFlow.BeforeAddRemoveEventArgs{``0}},System.Action{JetBrains.DataFlow.BeforeAddRemoveEventArgs{``0}})">
            <summary>
            Sinks the <see cref="P:JetBrains.DataFlow.ICollectionEvents`1.BeforeAddRemove"/> so that the handler is not acknwledged.
            Useful for user-restricting rather than data-restricting handlers, as those would not pass the data already in the collection.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ISignalEx.Advise_NoAcknowledgement``1(JetBrains.DataFlow.ISignal{JetBrains.DataFlow.BeforeAddRemoveEventArgs{``0}},System.Action)">
            <summary>
            Sinks the <see cref="P:JetBrains.DataFlow.ICollectionEvents`1.BeforeAddRemove"/> so that the handler is not acknwledged.
            Useful for user-restricting rather than data-restricting handlers, as those would not pass the data already in the collection.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ISignalEx.Advise_NoAcknowledgement``1(JetBrains.DataFlow.ISignal{JetBrains.DataFlow.AddRemoveEventArgs{``0}},System.Action{JetBrains.DataFlow.AddRemoveEventArgs{``0}})">
            <summary>
            Sinks the <see cref="P:JetBrains.DataFlow.ICollectionEvents`1.BeforeAddRemove"/> so that the handler is not acknwledged.
            Useful for user-restricting rather than data-restricting handlers, as those would not pass the data already in the collection.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ISignalEx.Advise_NoAcknowledgement``1(JetBrains.DataFlow.ISignal{JetBrains.DataFlow.AddRemoveIndexEventArgs{``0}},System.Action{JetBrains.DataFlow.AddRemoveEventArgs{``0}})">
            <summary>
            Sinks the <see cref="P:JetBrains.DataFlow.ICollectionEvents`1.BeforeAddRemove"/> so that the handler is not acknwledged.
            Useful for user-restricting rather than data-restricting handlers, as those would not pass the data already in the collection.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ISignalEx.Advise_NoAcknowledgement``1(JetBrains.DataFlow.ISignal{JetBrains.DataFlow.BeforePropertyChangedEventArgs{``0}},System.Action{JetBrains.DataFlow.BeforePropertyChangedEventArgs{``0}})">
            <summary>
            Sinks the <see cref="P:JetBrains.DataFlow.IProperty`1.BeforeChange"/> so that the handler is not acknwledged.
            Useful for user-restricting rather than data-restricting handlers, as those would not pass the data already in the collection.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ISignalEx.Advise_NoAcknowledgement``1(JetBrains.DataFlow.ISignal{JetBrains.DataFlow.PropertyChangedEventArgs{``0}},System.Action{JetBrains.DataFlow.PropertyChangedEventArgs{``0}})">
            <summary>
            Sinks the <see cref="P:JetBrains.DataFlow.IProperty`1.Change"/> so that the handler is not acknwledged.
            Useful for user-restricting rather than data-restricting handlers, as those would not pass the data already in the collection.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ISignalEx.Advise_NoAcknowledgement``1(JetBrains.DataFlow.ISignal{JetBrains.DataFlow.PropertyChangedEventArgs{``0}},System.Action)">
            <summary>
            Sinks the <see cref="P:JetBrains.DataFlow.IProperty`1.Change"/> so that the handler is not acknwledged.
            Useful for user-restricting rather than data-restricting handlers, as those would not pass the data already in the collection.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ISignalEx.Advise_NoAcknowledgement``1(JetBrains.DataFlow.ISignal{JetBrains.DataFlow.BeforePropertyChangedEventArgs{``0}},System.Action)">
            <summary>
            Sinks the <see cref="P:JetBrains.DataFlow.IProperty`1.BeforeChange"/> so that the handler is not acknwledged.
            Useful for user-restricting rather than data-restricting handlers, as those would not pass the data already in the collection.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ISignalEx.Advise_NoAcknowledgement``1(JetBrains.DataFlow.ISignal{JetBrains.DataFlow.AddRemoveEventArgs{``0}},System.Action)">
            <summary>
            Sinks the <see cref="P:JetBrains.DataFlow.ICollectionEvents`1.BeforeAddRemove"/> so that the handler is not acknwledged.
            Useful for user-restricting rather than data-restricting handlers, as those would not pass the data already in the collection.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ISignalEx.Advise_NoAcknowledgement``1(JetBrains.DataFlow.ISignal{JetBrains.DataFlow.AddRemoveIndexEventArgs{``0}},System.Action)">
            <summary>
            Sinks the <see cref="P:JetBrains.DataFlow.ICollectionEvents`1.BeforeAddRemove"/> so that the handler is not acknwledged.
            Useful for user-restricting rather than data-restricting handlers, as those would not pass the data already in the collection.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ISignalEx.Advise_RaisingFront``1(JetBrains.DataFlow.ISignal{JetBrains.DataFlow.PropertyChangedEventArgs{``0}},System.Action)">
            <summary>
            Invokes the handler on the raising front of the boolean property value, that is, when anything changes to <c>True</c>.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ISignalEx.Advise_RaisingFront``1(JetBrains.DataFlow.ISignal{JetBrains.DataFlow.PropertyChangedEventArgs{``0}},System.Action{JetBrains.DataFlow.PropertyChangedEventArgs{``0}})">
            <summary>
            Invokes the handler on the raising front of the boolean property value, that is, when anything changes to <c>True</c>.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ISignalEx.Advise_Remove``1(JetBrains.DataFlow.ISignal{JetBrains.DataFlow.AddRemoveEventArgs{``0}},System.Action{JetBrains.DataFlow.AddRemoveEventArgs{``0}})">
            <summary>
            Sinks the collection's <see cref="F:JetBrains.DataFlow.AddRemove.Remove"/> operation selectively.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ISignalEx.Advise_Remove``1(JetBrains.DataFlow.ISignal{JetBrains.DataFlow.AddRemoveIndexEventArgs{``0}},System.Action{JetBrains.DataFlow.AddRemoveIndexEventArgs{``0}})">
            <summary>
            Sinks the collection's <see cref="F:JetBrains.DataFlow.AddRemove.Remove"/> operation selectively.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ISignalEx.Advise_When``1(JetBrains.DataFlow.ISignal{JetBrains.DataFlow.PropertyChangedEventArgs{``0}},System.Func{``0,System.Boolean},System.Action{``0})">
            <summary>
            Invokes the handler for specific property values only. Filters down the <see cref="!:Advise_HasNew(ISignal&lt;TValue&gt;,Action&lt;PropertyChangedEventArgs&lt;TValue&gt;&gt;)"/> invocations to only those whose new-value passes the <paramref cref="!:filter"/>.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ISignalEx.BeginFire(JetBrains.DataFlow.ISimpleSignal,JetBrains.Threading.JetDispatcher)">
            <summary>
            Asynhronously fires the signal.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ISignalEx.BeginFire``1(JetBrains.DataFlow.ISignal{``0},JetBrains.Threading.JetDispatcher,``0)">
            <summary>
            Asynhronously fires the signal.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ISignalEx.BeginFire``1(JetBrains.DataFlow.ISignal{``0},JetBrains.Threading.JetDispatcher,``0,System.Object)">
            <summary>
            Asynhronously fires the signal.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ISignalEx.Fire``1(JetBrains.DataFlow.ISignal{JetBrains.DataFlow.OutEventArgs{``0}})">
            <summary>
            For a signal that has an out-value only, fires the signal and collects the out-value.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ISignalEx.FireInOut``2(JetBrains.DataFlow.ISignal{JetBrains.DataFlow.InOutEventArgs{``0,``1}},``0)">
            <summary>
            For a signal that has an in-out value, fires the signal and collects the out-value.
            </summary>
            <remarks>Method name is not <c>Fire</c> because otherwise the <see cref="M:JetBrains.DataFlow.ISignalEx.FireInOut``2(JetBrains.DataFlow.ISignal{JetBrains.DataFlow.InOutEventArgs{``0,``1}},``0,``1)"/> overload conflicts with <see cref="M:JetBrains.DataFlow.IUntypedSignal.Fire(System.Object,System.Object)"/>.</remarks>
        </member>
        <member name="M:JetBrains.DataFlow.ISignalEx.FireInOut``2(JetBrains.DataFlow.ISignal{JetBrains.DataFlow.InOutEventArgs{``0,``1}},``0,``1)">
            <summary>
            For a signal that has an in-out value, fires the signal and collects the out-value.
            </summary>
            <remarks>Method name is not <c>Fire</c> because otherwise the <see cref="M:JetBrains.DataFlow.ISignalEx.FireInOut``2(JetBrains.DataFlow.ISignal{JetBrains.DataFlow.InOutEventArgs{``0,``1}},``0,``1)"/> overload conflicts with <see cref="M:JetBrains.DataFlow.IUntypedSignal.Fire(System.Object,System.Object)"/>.</remarks>
        </member>
        <member name="M:JetBrains.DataFlow.ISignalEx.FlowDeferredInto(JetBrains.DataFlow.IUntypedSignal,JetBrains.DataFlow.ISimpleSignal)">
            <summary>
            Creates a one-way binding between two signals, deferring the action until execution gets off stack and collecting all the signals that happen within that time span.
            </summary>
            <param name="source">The source signal.</param>
            <param name="target">The target signal.</param>
        </member>
        <member name="M:JetBrains.DataFlow.ISignalEx.FlowInto``1(JetBrains.DataFlow.ISignal{``0},JetBrains.DataFlow.ISimpleSignal)">
            <summary>
            Creates a <see cref="F:JetBrains.DataFlow.DataFlowDirection.FromSource"/>-binding for two signals, the second one a reduced simple signal.
            </summary>
            <param name="source">The originating signal.</param>
            <param name="target">The dependent simple signal.</param>
        </member>
        <member name="M:JetBrains.DataFlow.ISignalEx.FlowInto``1(JetBrains.DataFlow.ISignal{``0},JetBrains.DataFlow.ISignal{``0})">
            <summary>
            Creates a <see cref="F:JetBrains.DataFlow.DataFlowDirection.FromSource"/>-binding for two signals, the second one a reduced simple signal.
            </summary>
            <param name="source">The originating signal.</param>
            <param name="target">The dependent simple signal.</param>
        </member>
        <member name="M:JetBrains.DataFlow.ISignalEx.FlowInto``2(JetBrains.DataFlow.ISignal{``0},JetBrains.DataFlow.ISignal{``1},System.Func{``0,``1})">
            <summary>
            Creates a <see cref="F:JetBrains.DataFlow.DataFlowDirection.FromSource"/>-binding for two signals, the second one a reduced simple signal.
            </summary>
            <param name="source">The originating signal.</param>
            <param name="target">The dependent signal.</param>
            <param name="converter">Function that converts the high value of the source signal to value for the target signal.</param>
        </member>
        <member name="M:JetBrains.DataFlow.ISignalEx.FlowInto(JetBrains.DataFlow.ISimpleSignal,JetBrains.DataFlow.ISimpleSignal)">
            <summary>
            Creates a <see cref="F:JetBrains.DataFlow.DataFlowDirection.FromSource"/>-binding for two simple signals.
            </summary>
            <param name="source">The originating signal.</param>
            <param name="target">The dependent simple signal.</param>
        </member>
        <member name="M:JetBrains.DataFlow.ISignalEx.LogFirings``1(JetBrains.DataFlow.ISignal{``0},System.String)">
            <summary>
            Logs the event firings and the payload of the event.
            </summary>
            <param name="signal">The event.</param>
            <param name="prefix">The optional prefix to be prepended in square brackets to each log message.</param>
        </member>
        <member name="M:JetBrains.DataFlow.ISignalEx.LogFirings``1(JetBrains.DataFlow.ISignal{``0},System.Object)">
            <summary>
            Logs the event firings and the payload of the event.
            </summary>
            <param name="signal">The event.</param>
            <param name="logprefix">The object whose local name will be used as a logging prefix, ie prepended in square brackets to each log message, or a <see cref="T:System.Type"/> whose short name will be used.</param>
        </member>
        <member name="T:JetBrains.DataFlow.PropertyChangeEventArgsEx">
            <summary>
            Extension method helpers for the data flow classes.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyChangeEventArgsEx.IsRaising(JetBrains.DataFlow.PropertyChangedEventArgs{System.Boolean})">
            <summary>
            Gets whether the boolean property value is raising.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.SignalValidator">
            <summary>
            Validations for signal firings.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.SignalValidator.CreateReadonlyValidator``1(JetBrains.DataFlow.ISignal{``0},JetBrains.DataFlow.StandardPreconditions.ReadonlyToken)">
            <summary>
            Makes a readonly signal. All the legitimate <see cref="M:JetBrains.DataFlow.ISignal`1.Fire(`0,System.Object)"/> calls must pass the <paramref name="token"/> as an argument.
            If the <paramref name="token"/> is invalid, an exception is thrown.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.SignalValidator.CreateThreadAffinityValidator``1(JetBrains.DataFlow.ISignal{``0},System.Threading.Thread)">
            <summary>
            Ensures the <paramref name="signal"/> is fired only on the given <paramref name="thread"/>.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.InOutEventArgs`2">
            <summary>
            An event arguments class with one typed constant value, plus one typed mutable value that can be changed by any consumer.
            </summary>
            <typeparam name="TIn">Type of the incoming value that is constant and cannot be changed.</typeparam>
            <typeparam name="TOut">Type of the outgoing value that is intended to be set by the event sink.</typeparam>
        </member>
        <member name="M:JetBrains.DataFlow.InOutEventArgs`2.#ctor(`0,`1)">
            <summary>
            Constructs the universal event args with the <see cref="P:JetBrains.DataFlow.InOutEventArgs`2.Out"/> parameter set to its predefined value.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.InOutEventArgs`2.#ctor(`0)">
            <summary>
            Constructs the universal event args with the <see cref="P:JetBrains.DataFlow.InOutEventArgs`2.Out"/> parameter set to <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.InOutEventArgs`2.In">
            <summary>
            Gets the event data specified by the event source.
            Generally, it specifies which/how the <see cref="P:JetBrains.DataFlow.InOutEventArgs`2.Out"/> data should be filled.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.InOutEventArgs`2.Out">
            <summary>
            Data to be provided by the event sink, based on the event semantics and the <see cref="P:JetBrains.DataFlow.InOutEventArgs`2.In"/> value.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.PropertyChangedEventArgs`2">
            <summary>
            When something changes, presents the details about the change.
            </summary>
            <typeparam name="TIdentity">The identity of the item that changes.</typeparam>
            <typeparam name="TValue">The old and new values for the item.</typeparam>
        </member>
        <member name="P:JetBrains.DataFlow.PropertyChangedEventArgs`2.Identity">
            <summary>
            Gets the name of the entity that has changed, eg property name.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.PropertyChangedEventArgs`2.New">
            <summary>
            Gets the new value.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.PropertyChangedEventArgs`2.Old">
            <summary>
            Gets the old value.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.OutEventArgs`1">
            <summary>
            An event arguments class with one typed mutable value that can be changed by any consumer.
            </summary>
            <typeparam name="TOut">Type of the outgoing value that is intended to be set by the event sink.</typeparam>
        </member>
        <member name="M:JetBrains.DataFlow.OutEventArgs`1.#ctor(`0)">
            <summary>
            Constructs the universal event args with the <see cref="P:JetBrains.DataFlow.OutEventArgs`1.Out"/> parameter set to its predefined value.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.OutEventArgs`1.#ctor">
            <summary>
            Constructs the universal event args with the <see cref="P:JetBrains.DataFlow.OutEventArgs`1.Out"/> parameter set to <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.OutEventArgs`1.Out">
            <summary>
            Data to be provided by the event sink, based on the event semantics.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.RegistryValueProperty">
            <summary>
            Creates <see cref="T:JetBrains.DataFlow.IProperty`1"/> that passively reflect the Registry values. Note that currently they do not track Registry changes.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.RegistryValueProperty.CreatePassive``1(Microsoft.Win32.RegistryKey,System.String,System.String,``0)">
            <summary>
            Creates a property that's passively mirrored into Registry (does not listen to Registry changes).
            Note that the Registry key is not kept open between the read/write sessions.
            </summary>
            <typeparam name="TValue">Value type.</typeparam>
            <param name="keyRoot">The root key, eg <see cref="F:Microsoft.Win32.Registry.ClassesRoot"/>.</param>
            <param name="sKeyPath">The relative path from the root key to the key that contains the data we're binding to.</param>
            <param name="sDataName">Name of the data. Null for the default value of the key.</param>
            <param name="defvalue">Default value for the data when reading it from Registry initially, in case it's missing.</param>
        </member>
        <member name="T:JetBrains.DataFlow.SingleDisposable">
            <summary>
            Holds one disposable at most. When a new one is assigned, the old one goes away.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.SingleDisposable.myContainee">
            <summary>
            The current value.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.SingleDisposable.Clear">
            <summary>
            <para>Disposes of the current contained value, if any.</para>
            <para>If you'd like to make sure the old value is disposed of BEFORE you evaluate the new one, either use <see cref="M:JetBrains.DataFlow.SingleDisposable.Put(System.Func{System.IDisposable})"/> or pipe a <see cref="M:JetBrains.DataFlow.SingleDisposable.Clear"/> call before the <see cref="M:JetBrains.DataFlow.SingleDisposable.Put(System.IDisposable)"/> call. This might be necessary for sequencing the disposables brackets, to close the previous bracked before opening the new one.</para>
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.SingleDisposable.Put(System.IDisposable)">
            <summary>
            <para>Disposes of the old contained value, and places a new one instead.</para>
            <para>If you'd like to make sure the old value is disposed of BEFORE you evaluate the new one, either use <see cref="M:JetBrains.DataFlow.SingleDisposable.Put(System.Func{System.IDisposable})"/> or pipe a <see cref="M:JetBrains.DataFlow.SingleDisposable.Clear"/> call before the <see cref="M:JetBrains.DataFlow.SingleDisposable.Put(System.IDisposable)"/> call. This might be necessary for sequencing the disposables brackets, to close the previous bracked before opening the new one.</para>
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.SingleDisposable.Put(System.Func{System.IDisposable})">
            <summary>
            <para>Disposes of the old contained value, and places a new one instead.
            Guarantees that the old value is disposed of BEFORE the new value is evaluated by <paramref name="funcNew"/>.</para>
            <para>If you'd like to make sure the old value is disposed of BEFORE you evaluate the new one, either use <see cref="M:JetBrains.DataFlow.SingleDisposable.Put(System.Func{System.IDisposable})"/> or pipe a <see cref="M:JetBrains.DataFlow.SingleDisposable.Clear"/> call before the <see cref="M:JetBrains.DataFlow.SingleDisposable.Put(System.IDisposable)"/> call. This might be necessary for sequencing the disposables brackets, to close the previous bracked before opening the new one.</para>
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.SingleDisposable.PutBracket(System.Action,System.Action)">
            <summary>
            Disposes of the old contained value first. Then executes the <paramref name="FEnter"/> action and schedulles <paramref name="FLeave"/> for execution when the contained value is disposed of.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.SingleDisposable.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.DataFlow.StandardPreconditions.IReadOnlyPrecondition">
            <summary>
            Locks writes/firings on the object by requiring all the modification attempts to provide a valid token equal to the given one.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.StandardPreconditions.IStandardPrecondition">
            <summary>
            <para>Base interface for standard preconditions.</para>
            <para>These exist to allow fast implementations for standard preconditions on signals and properties, such as thread affinity and readonly validators.</para>
            <para>When implemented as custom preconditions on a property, handlers are attached to <see cref="T:JetBrains.DataFlow.IProperty`1"/>'s <see cref="P:JetBrains.DataFlow.IProperty`1.BeforeChange"/> event. In case of a <see cref="T:JetBrains.DataFlow.ISignal`1"/> or <see cref="T:JetBrains.DataFlow.ISimpleSignal"/>, the handlers are attached to <see cref="P:JetBrains.DataFlow.IProperty`1.BeforeChange"/> of the underlying <see cref="P:JetBrains.DataFlow.ISignal`1.Property"/> of the signal, which causes the property to be created in the first place and cause all the firings routed thru it. Standard preconditions are implemented in the object core and do not cause any external handlers called or underlying properties created.</para>
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.StandardPreconditions.IReadOnlyPrecondition.LockReadOnly(JetBrains.DataFlow.StandardPreconditions.ReadonlyToken)">
             <summary>
             Locks writes/firings on the object by requiring all the modification attempts to provide a valid token equal to the given one.
             It's an error to call this method more than once (without disposing of the previous result first).
             </summary>
            <param name="token">A token that must be provided by all the parties trying to change the object state.
            	<c>Null</c>
            	is ignored and no precondition is set.</param>
            <returns>Undo token.</returns>
             <remarks>A <c>Null</c> value for <paramref name="token"/> is allowed only to support temporary [debug] conditions where some component has a readonly token data field set to <c>Null</c> for use in both preconditions and callers, to temporarily allow foreign writers/firers.</remarks>
        </member>
        <member name="T:JetBrains.DataFlow.StandardPreconditions.IThreadAffinityPrecondition">
            <summary>
            Makes the object operable for writing/firing on the given thread only.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.StandardPreconditions.IThreadAffinityPrecondition.AffineToThread(System.Threading.Thread)">
            <summary>
            Makes the object operable for writing/firing on the given thread only.
            It's an error to call this method more than once (without disposing of the previous result first).
            </summary>
            <param name="thread">The thread to which the object should be affined for writing/firing from now on.</param>
            <returns>Undo token.</returns>
        </member>
        <member name="T:JetBrains.DataFlow.StandardPreconditions.ReadonlyToken">
            <summary>
            <para>A special object that locks property writes to the authorized owner, one who can provide the correct token.</para>
            <para>Even though the token has a comment string, it's used for failure diagnostic only and does not affect tokens equality. Each new token instance is unique, regardless of the comment string.</para>
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.StandardPreconditions.ReadonlyToken.#ctor(System.String)">
            <summary>
            Creates a special object that locks property writes to the authorized owner, one who can provide the correct token.
            </summary>
            <param name="info">Provides information about the readonly lock: who the owner of the lock is (usually, the owner of the locked object), and why the object is locked.</param>
            <remarks>Even though the token has a comment string, it's used for failure diagnostic only and does not affect tokens equality. Each new token instance is unique, regardless of the comment string.</remarks>
        </member>
        <member name="F:JetBrains.DataFlow.StandardPreconditions.ReadonlyToken.Info">
            <summary>
            Provides information about the readonly lock: who the owner of the lock is (usually, the owner of the locked object), and why the object is locked.
            </summary>
            <remarks>Even though the token has a comment string, it's used for failure diagnostic only and does not affect tokens equality. Each new token instance is unique, regardless of the comment string.</remarks>
        </member>
        <member name="T:JetBrains.DataFlow.StandardPreconditions.StandardPreconditionOptions">
            <summary>
            Some options related to <see cref="T:JetBrains.DataFlow.StandardPreconditions.IStandardPrecondition"/> entities, mostly for tests/debug.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.StandardPreconditions.StandardPreconditionOptions.UseStandardPreconditionsInHelperMethods">
            <summary>
            <para>Whether helper extension methods should use standard preconditions whenever possible.</para>
            <para><c>True</c>: production setting. Hard-coded standard preconditions are used wherever possible for speed.</para>
            <para><c>False</c>: test environment settings. Slower, but allows to test the code paths not available with standard preconditions.</para>
            </summary>
        </member>
        <member name="T:JetBrains.DataStructures.CyclicBuffer">
            <summary>
            A cyclic buffer, like a queue for bytes, but optimized for byte block operations. For reading and writing, use the provided <see cref="T:System.IO.Stream"/> interface.
            </summary>
        </member>
        <member name="F:JetBrains.DataStructures.CyclicBuffer._end">
            <summary>
            End of used data range in <see cref="F:JetBrains.DataStructures.CyclicBuffer._storage"/>, non-inclusive (points after the last used byte, might be equal to storage length). Might be below <see cref="F:JetBrains.DataStructures.CyclicBuffer._start"/>, in which case the data loops around the buffer end.
            </summary>
        </member>
        <member name="F:JetBrains.DataStructures.CyclicBuffer._start">
            <summary>
            Starts of used data range in <see cref="F:JetBrains.DataStructures.CyclicBuffer._storage"/>.
            </summary>
        </member>
        <member name="F:JetBrains.DataStructures.CyclicBuffer._storage">
            <summary>
            The cyclic storage.
            </summary>
        </member>
        <member name="M:JetBrains.DataStructures.CyclicBuffer.ReadCore(System.Byte[],System.Int32,System.Int32,JetBrains.DataStructures.CyclicBuffer.OutputStream.BehaviorFlags,System.Boolean)">
            <summary>
            Implements reading from the stream (and also peeking at the data without spending the stored bytes).
            </summary>
            <param name="arTarget">Target for reading (as in <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)"/>).</param>
            <param name="nTargetOffset">Target for reading (as in <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)"/>).</param>
            <param name="nTargetCount">Target for reading (as in <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)"/>).</param>
            <param name="behavior">Behavior when running out of buffer.</param>
            <param name="bAdvanceReadPosition">Spend the read bytes and decrease the number of bytes available in the storage. If <c>False</c>, just peeks at the stored data without modifying the storage.</param>
            <returns>The number of bytes actually read.</returns>
        </member>
        <member name="M:JetBrains.DataStructures.CyclicBuffer.WriteCore(System.Byte[],System.Int32,System.Int32,JetBrains.DataStructures.CyclicBuffer.InputStream.BehaviorFlags)">
            <summary>
            Implements writing to the stream.
            </summary>
            <param name="arSource">Source for writing (as in <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)"/>).</param>
            <param name="nSourceOffset">Source for writing (as in <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)"/>).</param>
            <param name="nSourceCount">Source for writing (as in <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)"/>).</param>
            <param name="behavior">Behavior when running out of buffer.</param>
            <returns>The number of bytes actually written.</returns>
        </member>
        <member name="M:JetBrains.DataStructures.CyclicBuffer.Add(System.Byte)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
        </member>
        <member name="M:JetBrains.DataStructures.CyclicBuffer.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. </exception>
        </member>
        <member name="M:JetBrains.DataStructures.CyclicBuffer.Contains(System.Byte)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:JetBrains.DataStructures.CyclicBuffer.CopyTo(System.Byte[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" /> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="array" /> is multidimensional.-or-<paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.-or-Type <c>T</c> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
        </member>
        <member name="M:JetBrains.DataStructures.CyclicBuffer.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:JetBrains.DataStructures.CyclicBuffer.Remove(System.Byte)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
        </member>
        <member name="M:JetBrains.DataStructures.CyclicBuffer.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.DataStructures.CyclicBuffer.Capacity">
            <summary>
            Gets or sets the capacity of the buffer storage, which is the maximum <see cref="P:JetBrains.DataStructures.CyclicBuffer.Count"/> it can hold without growing, which growing could be prohibited by setting the <see cref="P:JetBrains.DataStructures.CyclicBuffer.Input"/> <see cref="P:JetBrains.DataStructures.CyclicBuffer.InputStream.Behavior"/>.
            </summary>
        </member>
        <member name="P:JetBrains.DataStructures.CyclicBuffer.Input">
            <summary>
            Gets the stream for writing to the buffer.
            </summary>
        </member>
        <member name="P:JetBrains.DataStructures.CyclicBuffer.Output">
            <summary>
            Gets the stream for reading from the buffer.
            </summary>
        </member>
        <member name="P:JetBrains.DataStructures.CyclicBuffer.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="P:JetBrains.DataStructures.CyclicBuffer.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="T:JetBrains.DataStructures.CyclicBuffer.InputStream">
            <summary>
            <see cref="T:System.IO.Stream"/> for the <see cref="P:JetBrains.DataStructures.CyclicBuffer.Input"/>.
            </summary>
        </member>
        <member name="M:JetBrains.DataStructures.CyclicBuffer.InputStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.DataStructures.CyclicBuffer.InputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - 1) replaced by the bytes read from the current source. </param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin storing the data read from the current stream. </param>
            <param name="count">The maximum number of bytes to be read from the current stream. </param>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length. </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> or <paramref name="count" /> is negative. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:JetBrains.DataStructures.CyclicBuffer.InputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <returns>
            The new position within the current stream.
            </returns>
            <param name="offset">A byte offset relative to the <paramref name="origin" /> parameter. </param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin" /> indicating the reference point used to obtain the new position. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:JetBrains.DataStructures.CyclicBuffer.InputStream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.DataStructures.CyclicBuffer.InputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count" /> bytes from <paramref name="buffer" /> to the current stream. </param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin copying bytes to the current stream. </param>
            <param name="count">The number of bytes to be written to the current stream. </param>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset" /> and <paramref name="count" /> is greater than the buffer length. </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> or <paramref name="count" /> is negative. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="P:JetBrains.DataStructures.CyclicBuffer.InputStream.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
            <returns>
            true if the stream supports reading; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:JetBrains.DataStructures.CyclicBuffer.InputStream.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
            <returns>
            true if the stream supports seeking; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:JetBrains.DataStructures.CyclicBuffer.InputStream.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
            <returns>
            true if the stream supports writing; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:JetBrains.DataStructures.CyclicBuffer.InputStream.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
            <returns>
            A long value representing the length of the stream in bytes.
            </returns>
            <exception cref="T:System.NotSupportedException">A class derived from Stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="P:JetBrains.DataStructures.CyclicBuffer.InputStream.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
            <returns>
            The current position within the stream.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="F:JetBrains.DataStructures.CyclicBuffer.InputStream.BehaviorFlags.WhenFullGrow">
            <summary>
            When there is no more room for writing, grows the storage.
            </summary>
        </member>
        <member name="F:JetBrains.DataStructures.CyclicBuffer.InputStream.BehaviorFlags.WhenFullThrow">
            <summary>
            When there is no more room for writing, throws an exception.
            </summary>
        </member>
        <member name="T:JetBrains.DataStructures.CyclicBuffer.OutputStream">
            <summary>
            <see cref="T:System.IO.Stream"/> for the <see cref="P:JetBrains.DataStructures.CyclicBuffer.Output"/>.
            </summary>
        </member>
        <member name="M:JetBrains.DataStructures.CyclicBuffer.OutputStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.DataStructures.CyclicBuffer.OutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - 1) replaced by the bytes read from the current source. </param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin storing the data read from the current stream. </param>
            <param name="count">The maximum number of bytes to be read from the current stream. </param>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length. </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> or <paramref name="count" /> is negative. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:JetBrains.DataStructures.CyclicBuffer.OutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <returns>
            The new position within the current stream.
            </returns>
            <param name="offset">A byte offset relative to the <paramref name="origin" /> parameter. </param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin" /> indicating the reference point used to obtain the new position. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:JetBrains.DataStructures.CyclicBuffer.OutputStream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.DataStructures.CyclicBuffer.OutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count" /> bytes from <paramref name="buffer" /> to the current stream. </param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin copying bytes to the current stream. </param>
            <param name="count">The number of bytes to be written to the current stream. </param>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset" /> and <paramref name="count" /> is greater than the buffer length. </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> or <paramref name="count" /> is negative. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="P:JetBrains.DataStructures.CyclicBuffer.OutputStream.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
            <returns>
            true if the stream supports reading; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:JetBrains.DataStructures.CyclicBuffer.OutputStream.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
            <returns>
            true if the stream supports seeking; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:JetBrains.DataStructures.CyclicBuffer.OutputStream.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
            <returns>
            true if the stream supports writing; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:JetBrains.DataStructures.CyclicBuffer.OutputStream.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
            <returns>
            A long value representing the length of the stream in bytes.
            </returns>
            <exception cref="T:System.NotSupportedException">A class derived from Stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="P:JetBrains.DataStructures.CyclicBuffer.OutputStream.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
            <returns>
            The current position within the stream.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="F:JetBrains.DataStructures.CyclicBuffer.OutputStream.BehaviorFlags.WhenEmptyReadLess">
            <summary>
            When there are no more bytes to read, returns the reduced read-bytes count.
            </summary>
        </member>
        <member name="F:JetBrains.DataStructures.CyclicBuffer.OutputStream.BehaviorFlags.WhenEmptyThrow">
            <summary>
            When there are no more bytes to read, throws an exception.
            </summary>
        </member>
        <member name="M:JetBrains.Util.DataStructures.ChunkHashSet`1.#ctor(System.Collections.Generic.ICollection{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:JetBrains.Util.DataStructures.ChunkHashSet`1.SetEquals(JetBrains.Util.DataStructures.ChunkHashSet{`0})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:JetBrains.Util.DataStructures.ChunkHashSet`1.IsSupersetOf(System.Collections.Generic.ICollection{`0})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:JetBrains.Util.DataStructures.ChunkHashSet`1.IsSupersetOf(JetBrains.Util.DataStructures.ChunkHashSet{`0})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DataStructures.ChunkHashSet`1.Entry.HashCode">
            <summary>
            Cached hash code of the key, -1 means entry is free
            </summary>
        </member>
        <member name="F:JetBrains.Util.DataStructures.ChunkHashSet`1.Entry.NextEntryIndex">
            <summary>
            Index of next entry in the chain of keys with the same hashcodes (modulo size), -1 means last
            </summary>
        </member>
        <member name="T:JetBrains.Util.DataStructures.ChunkHashMap`2">
            <summary>
            Reimplementation of Dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="F:JetBrains.Util.DataStructures.ChunkHashMap`2.Entry.HashCode">
            <summary>
            Cached hash code of the key, -1 means entry is free
            </summary>
        </member>
        <member name="F:JetBrains.Util.DataStructures.ChunkHashMap`2.Entry.NextEntryIndex">
            <summary>
            Index of next entry in the chain of keys with the same hashcodes (modulo size), -1 means last
            </summary>
        </member>
        <member name="M:JetBrains.dataStructures.ImmutableArray`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Sightly optimized version where the count of the data is known before hand
            </summary>
            <param name="data"></param>
            <param name="count"></param>
        </member>
        <member name="T:JetBrains.DataStructures.StreamPipe">
            <summary>
            Pipes a stream-for-writing into a stream-for-reading.
            Allows to pipe an output from some <see cref="T:System.IO.StreamWriter"/> into a <see cref="T:System.IO.StreamReader"/> directly, without storing the full stream contents in memory.
            The pipe executes two functions, one for writing and one for reading. The execution terminates when both routines exit. After the writing routine exits, the reading has nothing more to read (<see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)"/> always returns zero), and should exit too.
            </summary>
        </member>
        <member name="M:JetBrains.DataStructures.StreamPipe.Run(System.Action{System.IO.Stream},System.Action{System.IO.Stream})">
            <summary>
            Runs the writing and reading, synchronously, thru the pipe.
            </summary>
            <param name="funcWriter">This function is given the stream it should write to. Try to use reasonably sized blocks, if possible.</param>
            <param name="funcReader">This function is given the stream it should read from.</param>
        </member>
        <member name="T:JetBrains.DataStructures.StreamPipe.Streamer">
            <summary>
            <see cref="T:System.IO.Stream"/> plus some events.
            </summary>
        </member>
        <member name="M:JetBrains.DataStructures.StreamPipe.Streamer.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.DataStructures.StreamPipe.Streamer.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - 1) replaced by the bytes read from the current source. </param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin storing the data read from the current stream. </param>
            <param name="count">The maximum number of bytes to be read from the current stream. </param>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length. </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> or <paramref name="count" /> is negative. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:JetBrains.DataStructures.StreamPipe.Streamer.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <returns>
            The new position within the current stream.
            </returns>
            <param name="offset">A byte offset relative to the <paramref name="origin" /> parameter. </param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin" /> indicating the reference point used to obtain the new position. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:JetBrains.DataStructures.StreamPipe.Streamer.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes. </param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.DataStructures.StreamPipe.Streamer.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count" /> bytes from <paramref name="buffer" /> to the current stream. </param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin copying bytes to the current stream. </param>
            <param name="count">The number of bytes to be written to the current stream. </param>
            <exception cref="T:System.ArgumentException">The sum of <paramref name="offset" /> and <paramref name="count" /> is greater than the buffer length. </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> or <paramref name="count" /> is negative. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="P:JetBrains.DataStructures.StreamPipe.Streamer.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
            <returns>
            true if the stream supports reading; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:JetBrains.DataStructures.StreamPipe.Streamer.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
            <returns>
            true if the stream supports seeking; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:JetBrains.DataStructures.StreamPipe.Streamer.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
            <returns>
            true if the stream supports writing; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:JetBrains.DataStructures.StreamPipe.Streamer.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
            <returns>
            A long value representing the length of the stream in bytes.
            </returns>
            <exception cref="T:System.NotSupportedException">A class derived from Stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="P:JetBrains.DataStructures.StreamPipe.Streamer.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
            <returns>
            The current position within the stream.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="T:JetBrains.DataStructures.StreamPipe.StreamPipeRun">
            <summary>
            The object for the <see cref="T:JetBrains.DataStructures.StreamPipe"/> run.
            </summary>
        </member>
        <member name="F:JetBrains.DataStructures.StreamPipe.StreamPipeRun.MinDemandDefault">
            <summary>
            Default value for <see cref="P:JetBrains.DataStructures.StreamPipe.StreamPipeRun.MinDemand"/>.
            </summary>
        </member>
        <member name="F:JetBrains.DataStructures.StreamPipe.StreamPipeRun.Buffer">
            <summary>
            The buffer that caches writer's output until there's enough data for the reader to read the next block (more specifically, until <see cref="P:JetBrains.DataStructures.StreamPipe.StreamPipeRun.MinDemand"/> is met).
            </summary>
        </member>
        <member name="M:JetBrains.DataStructures.StreamPipe.StreamPipeRun.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.DataStructures.StreamPipe.StreamPipeRun.MinDemand">
            <summary>
            <para>When the reader exhaust the buffer, it claims the demand on minimum buffer size required to proceed (usually, the number of bytes requested in the read command), and yields to the writer to fulfill the demand.</para>
            <para>The <see cref="P:JetBrains.DataStructures.StreamPipe.StreamPipeRun.MinDemand"/> value limits the minimum reasonable demand so that to prevent the reader and the writer from yielding to each other too often, for example, if they are reading and writing byte-by-byte.</para>
            <para>Set to <c>0</c> to suppress min-demand and operate on actual demands.</para>
            </summary>
        </member>
        <member name="P:JetBrains.DataStructures.StreamPipe.StreamPipeRun.Demand">
            <summary>
            When the reader needs more bytes that avail, it publishes the demand and yields to the writer.
            </summary>
        </member>
        <member name="T:JetBrains.DataStructures.StreamPipeXml">
            <summary>
            Pipes an <see cref="T:System.Xml.XmlWriter"/> into an <see cref="T:System.Xml.XmlReader"/>.
            Allows to pipe an output from some <see cref="T:System.Xml.XmlWriter"/> into a <see cref="T:System.Xml.XmlReader"/> directly, without storing the full stream contents in memory.
            The pipe executes two functions, one for writing and one for reading. The execution terminates when both routines exit. After the writing routine exits, the reading has nothing more to read (<see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)"/> always returns zero), and should exit too.
            </summary>
        </member>
        <member name="M:JetBrains.DataStructures.StreamPipeXml.Run(System.Action{System.Xml.XmlWriter},System.Action{System.Xml.XmlReader})">
            <summary>
            Runs the writing and reading, synchronously, thru the pipe.
            </summary>
            <param name="FInput">This function is given the stream it should write to. Try to use reasonably sized blocks, if possible.</param>
            <param name="FOutput">This function is given the stream it should read from.</param>
        </member>
        <member name="M:JetBrains.DataStructures.StreamPipeXml.Run(System.Action{System.Xml.XmlWriter},System.Action{System.Xml.XmlReader,System.Xml.XmlWriter},System.Action{System.Xml.XmlReader})">
            <summary>
            Runs the writing and reading, synchronously, thru the pipe.
            </summary>
            <param name="FInput">This function is given the stream it should write to. Try to use reasonably sized blocks, if possible.</param>
            <param name="FTransform">This function sits in the middle of the pipe.</param>
            <param name="FOutput">This function is given the stream it should read from.</param>
        </member>
        <member name="T:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1">
            <summary>
            Represents an integer value with specific semantics that cannot be freely assigned to/from other ints.
            </summary>
            <typeparam name="TType">This type is not used for storing data values. It it solely used for distinguishing between typed intrinsics.</typeparam>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.Limited(JetBrains.Util.dataStructures.TypedIntrinsics.Int32{`0},JetBrains.Util.dataStructures.TypedIntrinsics.Int32{`0})">
            <summary>
            Limits the current value. Returns a copy that's guaranteed to be in the <c>[</c><paramref name="minInclusive"/><c>, </c><paramref name="maxExclusive"/><c>)</c> limits.
            </summary>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.Minus1">
            <summary>
            Adds one to the current value.
            Does not modify the original object.
            </summary>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.Plus1">
            <summary>
            Adds one to the current value.
            Does not modify the original object.
            </summary>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.System#IComparable#CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than <paramref name="obj"/>. Zero This instance is equal to <paramref name="obj"/>. Greater than zero This instance is greater than <paramref name="obj"/>. 
            </returns>
            <param name="obj">An object to compare with this instance. </param><exception cref="T:System.ArgumentException"><paramref name="obj"/> is not the same type as this instance. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.System#IComparable{JetBrains#Util#dataStructures#TypedIntrinsics#Int32{TType}}#CompareTo(JetBrains.Util.dataStructures.TypedIntrinsics.Int32{`0})">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.System#IConvertible#GetTypeCode">
            <summary>
            Returns the <see cref="T:System.TypeCode"/> for this instance.
            </summary>
            <returns>
            The enumerated constant that is the <see cref="T:System.TypeCode"/> of the class or value type that implements this interface.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.System#IConvertible#ToBoolean(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information.
            </summary>
            <returns>
            A Boolean value equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.System#IConvertible#ToByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 8-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.System#IConvertible#ToChar(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information.
            </summary>
            <returns>
            A Unicode character equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.System#IConvertible#ToDateTime(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.DateTime"/> using the specified culture-specific formatting information.
            </summary>
            <returns>
            A <see cref="T:System.DateTime"/> instance equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.System#IConvertible#ToDecimal(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.Decimal"/> number using the specified culture-specific formatting information.
            </summary>
            <returns>
            A <see cref="T:System.Decimal"/> number equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.System#IConvertible#ToDouble(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information.
            </summary>
            <returns>
            A double-precision floating-point number equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.System#IConvertible#ToInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 16-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.System#IConvertible#ToInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 32-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.System#IConvertible#ToInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 64-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.System#IConvertible#ToSByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 8-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.System#IConvertible#ToSingle(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information.
            </summary>
            <returns>
            A single-precision floating-point number equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.System#IConvertible#ToString(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.String"/> using the specified culture-specific formatting information.
            </summary>
            <returns>
            A <see cref="T:System.String"/> instance equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an <see cref="T:System.Object"/> of the specified <see cref="T:System.Type"/> that has an equivalent value, using the specified culture-specific formatting information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> instance of type <paramref name="conversionType"/> whose value is equivalent to the value of this instance.
            </returns>
            <param name="conversionType">The <see cref="T:System.Type"/> to which the value of this instance is converted. </param><param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.System#IConvertible#ToUInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 16-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.System#IConvertible#ToUInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 32-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.System#IConvertible#ToUInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 64-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.Equals(JetBrains.Util.dataStructures.TypedIntrinsics.Int32{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:JetBrains.Util.dataStructures.TypedIntrinsics.Int32`1.System#IFormattable#ToString(System.String,System.IFormatProvider)">
            <summary>
            Formats the value of the current instance using the specified format.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the value of the current instance in the specified format.
            </returns>
            <param name="format">The <see cref="T:System.String"/> specifying the format to use.-or- null to use the default format defined for the type of the <see cref="T:System.IFormattable"/> implementation. </param><param name="formatProvider">The <see cref="T:System.IFormatProvider"/> to use to format the value.-or- null to obtain the numeric format information from the current locale setting of the operating system. </param><filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.Util.DirectoryScanner">
            <summary>
            Nant-syntax wildcard matcher on file system trees
            </summary>
        </member>
        <member name="T:JetBrains.Util.FileSystemPathEx">
            <summary>
            Extension methods.
            </summary>
        </member>
        <member name="M:JetBrains.Util.FileSystemPathEx.GetChildDirectories(JetBrains.Util.FileSystemPath)">
            <summary>
            Gets the child directories, non-recursive.
            </summary>
        </member>
        <member name="M:JetBrains.Util.FileSystemPathEx.GetChildDirectories(JetBrains.Util.FileSystemPath,System.String)">
            <summary>
            Gets the child directories, non-recursive.
            </summary>
        </member>
        <member name="M:JetBrains.Util.FileSystemPathEx.GetChildDirectories(JetBrains.Util.FileSystemPath,System.String,JetBrains.Util.PathSearchFlags)">
            <summary>
            Gets the child directories.
            </summary>
        </member>
        <member name="M:JetBrains.Util.FileSystemPathEx.GetChildFiles(JetBrains.Util.FileSystemPath)">
            <summary>
            Gets the child files, non-recursive.
            </summary>
        </member>
        <member name="M:JetBrains.Util.FileSystemPathEx.GetChildFiles(JetBrains.Util.FileSystemPath,System.String)">
            <summary>
            Gets the child files, non-recursive.
            </summary>
        </member>
        <member name="M:JetBrains.Util.FileSystemPathEx.GetChildFiles(JetBrains.Util.FileSystemPath,System.String,JetBrains.Util.PathSearchFlags)">
            <summary>
            Gets the child files.
            </summary>
        </member>
        <member name="M:JetBrains.Util.FileSystemPathEx.GetDescendants(JetBrains.Util.FileSystemPath)">
            <summary>
            Gets the descendant files and folders, recursive.
            </summary>
        </member>
        <member name="M:JetBrains.Util.FileSystemPathEx.GetDescendants(JetBrains.Util.FileSystemPath,System.String,JetBrains.Util.PathSearchFlags)">
            <summary>
            Gets the descendant files and folders, recursive.
            </summary>
        </member>
        <member name="M:JetBrains.Util.FileSystemPathEx.QuoteIfNeeded(JetBrains.Util.FileSystemPath)">
            <summary>
            Returns the full path, quoted if it contains spaces.
            </summary>
        </member>
        <member name="M:JetBrains.Util.FileSystemPathEx.ReadStream(JetBrains.Util.FileSystemPath,System.Action{System.IO.Stream})">
            <summary>
            Opens a stream on this file system path for reading, requesting minimum permissions and trying to be as non-blocking as possible.
            </summary>
        </member>
        <member name="M:JetBrains.Util.FileSystemPathEx.ReadStreamExclusive(JetBrains.Util.FileSystemPath,System.Action{System.IO.Stream})">
            <summary>
            Opens a stream on this file system path for reading, preventing all other parties from writing to the stream at the same time.
            </summary>
        </member>
        <member name="M:JetBrains.Util.FileSystemPathEx.WriteStream(JetBrains.Util.FileSystemPath,System.Action{System.IO.Stream})">
            <summary>
            Opens a stream on this file system path for writing, requesting minimum permissions and trying to be as non-blocking as possible.
            </summary>
        </member>
        <member name="M:JetBrains.Util.FileSystemPathEx.WriteStreamExclusive(JetBrains.Util.FileSystemPath,System.Action{System.IO.Stream})">
            <summary>
            Opens a stream on this file system path for writing, preventing all other parties from reading or writing the stream at the same time.
            </summary>
        </member>
        <member name="M:JetBrains.Util.FileSystemPathEx.WriteStreamWriter(JetBrains.Util.FileSystemPath,System.Action{System.IO.StreamWriter})">
            <summary>
            Opens a stream-writer on this file system path for writing, requesting minimum permissions and trying to be as non-blocking as possible.
            </summary>
        </member>
        <member name="M:JetBrains.Util.PermanentUserIdUtil.GetUnuqueUserId">
            <summary>
            Returns global unique id of user. The Id is shared among all JetBrainss the applications.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.Interop.HResultsEx.Assert(JetBrains.Interop.WinApi.HResults)">
            <summary>
            Checks the given <c>HRESULT</c>, and throws an exception if it's a failure one (<see cref="M:JetBrains.Interop.WinApi.HResultHelpers.FAILED(System.Int32)"/>).
            The comment is used in case of the failure only.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.HResultsEx.Assert(JetBrains.Interop.WinApi.HResults,System.String)">
            <summary>
            Checks the given <c>HRESULT</c>, and throws an exception if it's a failure one (<see cref="M:JetBrains.Interop.WinApi.HResultHelpers.FAILED(System.Int32)"/>).
            The comment is used in case of the failure only.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.HResultsEx.AssertSucceeded(System.Int32,System.String)">
            <summary>
            Checks the given <c>HRESULT</c>, and throws an exception if it's a failure one (<see cref="M:JetBrains.Interop.WinApi.HResultHelpers.FAILED(System.Int32)"/>).
            The comment is used in case of the failure only.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.HResultsEx.AssertSucceeded(System.UInt32,System.String)">
            <summary>
            Checks the given <c>HRESULT</c>, and throws an exception if it's a failure one (<see cref="M:JetBrains.Interop.WinApi.HResultHelpers.FAILED(System.Int32)"/>).
            The comment is used in case of the failure only.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.HResultsEx.AssertSucceeded(System.Int32)">
            <summary>
            Checks the given <c>HRESULT</c>, and throws an exception if it's a failure one (<see cref="M:JetBrains.Interop.WinApi.HResultHelpers.FAILED(System.Int32)"/>).
            The comment is used in case of the failure only.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.HResultsEx.Failed(JetBrains.Interop.WinApi.HResults)">
            <summary>
            The <c>FAILED</c> WinAPI Macro.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.HResultsEx.Succeeded(JetBrains.Interop.WinApi.HResults)">
            <summary>
            The <c>SUCCEEDED</c> WinAPI Macro.
            </summary>
        </member>
        <member name="T:JetBrains.Util.ExceptionText">
            <summary>
            Result of rendering an exception.
            </summary>
        </member>
        <member name="M:JetBrains.Util.ExceptionText.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="F:JetBrains.Util.ExceptionText.FullText">
            <summary>
            <para>String representation of the exception rendered by collecting all of the data about the original exception and all of the inner/related exceptions in the tree.</para>
            <para>A more detailed and well-organized counterpart for <see cref="T:System.Exception"/>'s <see cref="M:System.Exception.ToString"/> method.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Util.ExceptionText.Message">
            <summary>
            <para>Message of the exception, into which all of the inner exceptions' messages are also included.</para>
            <para>A more detailed counterpart for <see cref="T:System.Exception"/>'s <see cref="P:System.Exception.Message"/> property.</para>
            </summary>
        </member>
        <member name="T:JetBrains.UI.Application.LogEventListener">
            <summary>
            Listens for <see cref="T:JetBrains.Util.Logger"/> events, reports them to the consumer.
            Prevents reentrancy in handlers.
            </summary>
        </member>
        <member name="T:JetBrains.Util.ILogEventListener">
            <summary>
            Consumes the activities reported to the <see cref="T:JetBrains.Util.Logger"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Util.ILogEventListener.OnError(System.String)">
            <summary>
            An error has occured and was reported to the <see cref="M:JetBrains.Util.Logger.LogError(System.String)"/> method, or <see cref="M:JetBrains.Util.Logger.Fail(System.String)"/> / <see cref="M:JetBrains.Util.Logger.Assert(System.Boolean,System.String)"/> methods were called.
            The error text is also reported to <see cref="M:JetBrains.Util.ILogEventListener.OnMessage(System.String,JetBrains.Util.LoggingLevel)"/> prefixed with <see cref="F:JetBrains.Util.Logger.ErrorMessagePrefix"/>, and to <see cref="M:JetBrains.Util.ILogEventListener.OnException(System.Exception)"/> with an exception whose message is <see cref="!:error"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Util.ILogEventListener.OnException(System.Exception)">
            <summary>
            An exception has occured and were reported to one of the <see cref="M:JetBrains.Util.Logger.LogException(System.Exception)"/>-family methods.
            Of its text, only the message is automatically supplied to <see cref="M:JetBrains.Util.ILogEventListener.OnMessage(System.String,JetBrains.Util.LoggingLevel)"/>, prefixed with <see cref="F:JetBrains.Util.Logger.ExceptionMessagePrefix"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Util.ILogEventListener.OnMessage(System.String,JetBrains.Util.LoggingLevel)">
            <summary>
            A text message of a specific importance level.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.LogEventListener.myIdentity">
            <summary>
            Identity.
            ACHTUNG ACHTUNG! Special handling in Equals.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.LogEventListener.myNoReentrancy">
            <summary>
            Reentrancy in these handler methods most probably means infinite recursion.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.LogEventListener.#ctor">
            <summary>
            Creates a new unique listener.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.LogEventListener.#ctor(System.String)">
            <summary>
            Creates a listener that could be matched by its identity which prevents adding more than one instance with the same identity to the logger.
            An empty string is considered to be the unique identity.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.LogEventListener.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.Application.LogEventListener.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.Application.LogEventListener.Equals(JetBrains.UI.Application.LogEventListener)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="P:JetBrains.UI.Application.LogEventListener.Identity">
            <summary>
            A listener that could be matched by its identity which prevents adding more than one instance with the same identity to the logger.
            An empty string is considered to be the unique identity.
            </summary>
        </member>
        <member name="E:JetBrains.UI.Application.LogEventListener.OnError">
            <summary>
            <see cref="M:JetBrains.Util.ILogEventListener.OnError(System.String)"/>.
            </summary>
        </member>
        <member name="E:JetBrains.UI.Application.LogEventListener.OnException">
            <summary>
            <see cref="M:JetBrains.Util.ILogEventListener.OnException(System.Exception)"/>.
            </summary>
        </member>
        <member name="E:JetBrains.UI.Application.LogEventListener.OnMessage">
            <summary>
            <see cref="M:JetBrains.Util.ILogEventListener.OnMessage(System.String,JetBrains.Util.LoggingLevel)"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Util.OnError">
            <summary>
            Option for the functions that serve as a <c>[NotNull]</c> or <c>[CanBeNull]</c> implementation, depending on the settings.
            </summary>
        </member>
        <member name="M:JetBrains.Util.OnError.#ctor(System.Action{System.Exception})">
            <summary>
            Initializes with the handler to be called on <see cref="M:JetBrains.Util.OnError.Handle(System.Exception)"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Util.OnError.Ignore">
            <summary>
            A handler that ignores failures.
            Provides for <c>[CanBeNull]</c> behavior.
            </summary>
        </member>
        <member name="F:JetBrains.Util.OnError.Throw">
            <summary>
            A handler that always throws an exception.
            When the calling function is properly implemented, provides for <c>[NotNull]</c> behavior.
            </summary>
        </member>
        <member name="M:JetBrains.Util.OnError.Handle(System.Exception)">
            <summary>
            <para>Called by a not-null-or-can-be-null function when an exception-worth error occurs. Could throw, store, or ignore the failure.</para>
            <para>The calling code must be ready that an exception might be thrown out (<c>[NotNull]</c> case).</para>
            <para>The calling code must be ready that execution might continue (<c>[CanBeNull]</c> case should return <c>Null</c> if so).</para>
            <para>Typical usage:</para>
            <code>
            if(isFailed)
            {
                onerror.Handle(new InvalidOperationException("FAIL").AddData("More", () => "Info"));	// Throws in [NotNull] case
                return null;	// Executes in [CanBeNull] case
            }
            </code>
            </summary>
        </member>
        <member name="T:JetBrains.Util.PathSearchFlags">
            <summary>
            Controls how <see cref="T:JetBrains.Util.FileSystemPath"/> looks for its sub-paths.
            </summary>
        </member>
        <member name="F:JetBrains.Util.PathSearchFlags.RecurseIntoSubdirectories">
            <summary>
            If set, includes items in subfolders with the search. Otherwise looks among immediate children only.
            </summary>
        </member>
        <member name="F:JetBrains.Util.PathSearchFlags.ExcludeHidden">
            <summary>
            Excludes items that have <see cref="F:System.IO.FileAttributes.Hidden"/> attribute set.
            Functions that are non-recursive by default (eg <see cref="M:JetBrains.Util.FileSystemPathEx.GetChildFiles(JetBrains.Util.FileSystemPath)"/>) when working in recursive mode will not exclude files in hidden directories.
            Natively recursive functions, like <see cref="M:JetBrains.Util.FileSystemPathEx.GetDescendants(JetBrains.Util.FileSystemPath)"/>, do not recurse into hidden directories at all.
            </summary>
        </member>
        <member name="F:JetBrains.Util.PathSearchFlags.ExcludeFiles">
            <summary>
            Does not return paths that point to files.
            </summary>
        </member>
        <member name="F:JetBrains.Util.PathSearchFlags.ExcludeDirectories">
            <summary>
            Does not return paths that point to directories.
            </summary>
        </member>
        <member name="T:JetBrains.Util.DisposablesHelper">
            <summary>
            Helper methods for <see cref="T:System.IDisposable"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Util.DisposablesHelper.CreateDisposable(System.Action)">
            <summary>
            Create disposable helper.
            </summary>
        </member>
        <member name="T:JetBrains.Util.ElementCreator`2">
            <summary>
            Äåëåãàò äëÿ ñîçäàíèÿ ýëåìåíòà êåøà.
            </summary>
        </member>
        <member name="T:JetBrains.Util.ElementsCache`2">
            <summary>
            Êåø ýëåìåíòîâ. Äëÿ ñîçäàíèÿ íåîáõîäèì ïàðàìåòð.
            </summary>
        </member>
        <member name="M:JetBrains.Util.ElementsCache`2.#ctor(JetBrains.Util.ElementCreator{`0,`1})">
            <summary>
            Èíèöèàëèçèðóåò ýêçåìïëÿð.
            </summary>
        </member>
        <member name="M:JetBrains.Util.ElementsCache`2.Get(`0)">
            <summary>
            Èçâëåêàåò ýëåìåíò èç êåøà.
            </summary>
        </member>
        <member name="M:JetBrains.Util.ElementsCache`2.OnAfterElementCreated(`0,`1)">
            <summary>
            Âûçûâàåòñÿ ïîñëå ñîçäàíèÿ íîâîãî ýëåìåíòà.
            </summary>
        </member>
        <member name="M:JetBrains.Util.ElementsCache`2.TryGet(`0,`1@)">
            <summary>
            Ïðîèçâîäèò ïîïûòêó èçâëå÷åíèÿ ýëåìåíòà.
            </summary>
        </member>
        <member name="M:JetBrains.Util.ElementsCache`2.Contains(`0)">
            <summary>
            Âîçâðàùàåò, ñîäåðæèò ëè êåø ýëåìåíò ñ óêàçàííûì êëþ÷åì.
            </summary>
        </member>
        <member name="M:JetBrains.Util.ElementsCache`2.Drop(`0)">
            <summary>
            Óäàëÿåò ýëåìåíò êåøà ïî çàäàííîìó êëþ÷ó.
            </summary>
        </member>
        <member name="M:JetBrains.Util.ElementsCache`2.Reset">
            <summary>
            Ñáðîñèòü êåø.
            </summary>
        </member>
        <member name="P:JetBrains.Util.ElementsCache`2.ElementCreator">
            <summary>
            Ñîçäàòåëü ýëåìåíòîâ.
            </summary>
        </member>
        <member name="P:JetBrains.Util.ElementsCache`2.Keys">
            <summary>
            Êîëëåêöèÿ âñåõ êëþ÷åé.
            </summary>
        </member>
        <member name="F:JetBrains.Util.IsDisposedState.Live">
            <summary>
            The object is live and running.
            </summary>
        </member>
        <member name="F:JetBrains.Util.IsDisposedState.Disposing">
            <summary>
            The object is still valid, but has entered the disposal routine. Used to prevent the <see cref="M:System.IDisposable.Dispose"/> from reentrancy.
            </summary>
        </member>
        <member name="F:JetBrains.Util.IsDisposedState.Disposed">
            <summary>
            The object has been disposed of.
            </summary>
        </member>
        <member name="T:JetBrains.EqualityComparer`1">
            <summary>
            Universal equality comparer.
            </summary>
        </member>
        <member name="M:JetBrains.EqualityComparer`1.System#Collections#Generic#IEqualityComparer{T}#Equals(`0,`0)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
            <param name="x">The first object of type <typeparamref name="T" /> to compare.</param>
            <param name="y">The second object of type <typeparamref name="T" /> to compare.</param>
        </member>
        <member name="M:JetBrains.EqualityComparer`1.System#Collections#Generic#IEqualityComparer{T}#GetHashCode(`0)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <returns>
            A hash code for the specified object.
            </returns>
            <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is null.</exception>
        </member>
        <member name="T:JetBrains.EqualityComparer">
            <summary>
            Factory for <see cref="T:JetBrains.EqualityComparer`1"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Extension.ICustomAttributeProviderEx.GetCustomAttributeNoInherit``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            For an attribute provider that has exactly one custom attribute of the given type, returns that attribute.
            Otherwise, throws.
            Inherited attributes are ignored.
            </summary>
        </member>
        <member name="M:JetBrains.Extension.ICustomAttributeProviderEx.HasCustomAttributeNoInherit``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            For an attribute provider that has zero or one custom attribute of the given type, returns whether it's one not zero.
            Otherwise, throws.
            Inherited attributes are ignored.
            </summary>
        </member>
        <member name="M:JetBrains.Extension.ICustomAttributeProviderEx.TryGetCustomAttributeNoInherit``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            For an attribute provider that has zero or one custom attribute of the given type, returns that attribute, or <c>Null</c> if none.
            Otherwise, throws.
            Inherited attributes are ignored.
            </summary>
        </member>
        <member name="M:JetBrains.Extension.IWin32WindowEx.PushDisable(System.Windows.Forms.IWin32Window)">
            <summary>
            Disables the given window temporarily.
            </summary>
        </member>
        <member name="M:JetBrains.Extension.StreamEx.Read(System.IO.Stream,System.Byte[])">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
        </member>
        <member name="M:JetBrains.Extension.StreamEx.StreamReader(System.IO.Stream,System.Action{System.IO.StreamReader})">
            <summary>
            Creates a stream reader over a stream.
            </summary>
        </member>
        <member name="M:JetBrains.Extension.StreamEx.StreamWriter(System.IO.Stream,System.Action{System.IO.StreamWriter})">
            <summary>
            Creates a stream writer over a stream.
            </summary>
        </member>
        <member name="M:JetBrains.Extension.StreamEx.Write(System.IO.Stream,System.Byte[])">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
        </member>
        <member name="T:JetBrains.Extension.TypeEx">
            <summary>
            Extension methods for <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Extension.TypeEx.GetDefaultValue(System.Type)">
            <summary>
            Gets the default value for this reference or value type.
            </summary>
        </member>
        <member name="M:JetBrains.Extension.TypeEx.IsDefaultValue(System.Object)">
            <summary>
            Gets whether the <paramref name="value"/> is the default value for this reference or value type.
            </summary>
        </member>
        <member name="M:JetBrains.Extension.TypeEx.IsDefaultValue(System.Type,System.Object)">
            <summary>
            Gets whether the <paramref name="value"/> is the default value for this reference or value type.
            </summary>
        </member>
        <member name="M:JetBrains.Extension.TypeEx.IsDefaultValueOrEmptyString(System.Type,System.Object)">
            <summary>
            Gets whether the <paramref name="value"/> is the default value for this reference or value type, or an empty string.
            </summary>
        </member>
        <member name="M:JetBrains.Extension.TypeEx.IsDefaultValueOrEmptyString(System.Object)">
            <summary>
            Gets whether the <paramref name="value"/> is the default value for its reference or value type, or an empty string.
            </summary>
        </member>
        <member name="M:JetBrains.Extension.TypeEx.QuoteIfNeeded(System.Type)">
            <summary>
            Takes the type presentation, surrounds it with quotes if it contains spaces.
            </summary>
        </member>
        <member name="M:JetBrains.Util.FEx.Return``1(System.Action{System.Func{System.Func{``0},System.Action}})">
            <summary>
            <para>Allows to pass a return value thru a void-result <see cref="T:System.Action"/>.</para>
            <para>Suppose the following piece of code that should be surrounded with some pre- and post-activity:</para>
            <code>
            int GetResult()
            {
              return 5;
            }
            </code>
            <para>If the activity is available as an <see cref="T:System.IDisposable"/>, the code is surrounded with <c>using</c> without any problem with <c>return</c> statement:</para>
            <code>
            int GetResult()
            {
              using(EnterScope())
              {
                return 5;
              }
            }
            </code>
            <para>Suppose that the surrounding activity is implemented as a function that takes an <see cref="T:System.Action"/> to execute in the scope (e.g. <see cref="M:JetBrains.Threading.ReentrancyGuard.Execute(System.String,System.Action)"/>):</para>
            <code>
            int GetResult()
            {
              ExecuteInScope(delegate
              {
                return 5;	// Compilation error
              });
            }
            </code>
            <para>This won't compile, because <c>ExecuteInScope</c> is <c>void</c> and the action that it takes to execute is also <c>void</c>.</para>
            <para>A temp local variable could be an option to use it for assignment, but it's hard to maintain in case the inner action has multiple returns against various code paths.</para>
            <para>This <see cref="M:JetBrains.Util.FEx.Return``1(System.Action{System.Func{System.Func{``0},System.Action}})"/> function wraps the <c>ExecuteInScope</c> call and gives you a functor that turns your <c>int</c>-returning inner code into a <c>void</c> action suitable for the executor:</para>
            <code>
            int GetResult()
            {
              FEx.Return&lt;int&gt;(FR =&gt; ExecuteInScope(FR(() =&gt;
              {
                return 5;
              })));
            }
            </code>
            </summary>
        </member>
        <member name="T:JetBrains.UI.Interop.HookEventArgs">
            <summary>
            Event arguments for the <see cref="T:JetBrains.UI.Interop.WindowsHook"/> notification.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.HookEventArgs.GetCwpRetStruct">
            <summary>
            Gets the hook data as a <see cref="T:JetBrains.Interop.WinApi.CWPRETSTRUCT"/>. Valid for some messages only. Valid within the hook callback only. LIVE, do not modify unless that's intentional.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.HookEventArgs.GetCwpStruct">
            <summary>
            Gets the hook data as a <see cref="T:JetBrains.Interop.WinApi.CWPSTRUCT"/>. Valid for some messages only. Valid within the hook callback only. LIVE, do not modify unless that's intentional.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.HookEventArgs.GetMouseHookStruct">
            <summary>
            Gets the hook data as a <see cref="T:JetBrains.Interop.WinApi.MOUSEHOOKSTRUCT"/>. Valid for some messages only. Valid within the hook callback only. LIVE, do not modify unless that's intentional.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.HookEventArgs.GetMsgStruct">
            <summary>
            Gets the hook data as a <see cref="T:JetBrains.Interop.WinApi.MSG"/>. Valid for some messages only. Valid within the hook callback only. LIVE, do not modify unless that's intentional.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.HookEventArgs.GetMsLlHookStruct">
            <summary>
            Gets the hook data as a <see cref="T:JetBrains.Interop.WinApi.MSLLHOOKSTRUCT"/>. Valid for some messages only. Valid within the hook callback only. LIVE, do not modify unless that's intentional.
            </summary>
        </member>
        <member name="M:JetBrains.Util.ExceptionEx.AddData``1(``0,System.String,System.Func{System.Object})">
            <summary>
            Adds some data to be reported with the exception.
            Note that the data is added as an object by default, and is not committed to text until the exception is.
            </summary>
            <param name="exception">The exception to enrich with data.</param>
            <param name="name">Data entry name. Must be unique with the exception.</param>
            <param name="FValue">Data entry value, passed as a func so that it were executed in a safe context (meaning that all of the exceptions in the data value retrieval are suppressed altogether).</param>
            <returns>The same exception object, for fluent usages.</returns>
        </member>
        <member name="M:JetBrains.Util.ExceptionEx.AddDataIndirect``1(``0,System.Action{System.Exception})">
            <summary>
            Adds some data to be reported with the exception.
            Allows to call a data-adding function on some object that bears the exception context.
            The call is executed in a safe manner.
            </summary>
        </member>
        <member name="M:JetBrains.Util.ExceptionEx.AddDataIndirect2``1(``0,System.Func{``0,``0})">
            <summary>
            Adds some data to be reported with the exception.
            Allows to call a data-adding function on some object that bears the exception context.
            The call is executed in a safe manner.
            </summary>
        </member>
        <member name="M:JetBrains.Util.ExceptionEx.FlattenDataValue(System.Object)">
            <summary>
            “Flattens” the data value by converting all of the objects to their string representation. Understands some kinds of collections.
            This is needed for safe marshalling of exceptions containing data values across appdomain boundaries. Keeping original object values might fail unmarshalling their custom types.
            // TODO: maybe use some parts of exception renderer for walking the value trees
            </summary>
            <param name="oValue"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.ExceptionRenderer.GetAllNestedExceptions(System.Exception)">
            <summary>
            Looks up all of the exceptions in the exception tree. Checks for the <see cref="P:System.Exception.InnerException"/>, other possible exception properties (eg <see cref="P:System.Reflection.ReflectionTypeLoadException.LoaderExceptions"/>), and data bag. The original exception is too included with the collection.
            </summary>
            <param name="ex">The exception to look into.</param>
            <returns>The <paramref name="ex"/> plus all of the nested exceptions.</returns>
            <remarks>This method is slow somewhat and does not cache the results.</remarks>
        </member>
        <member name="M:JetBrains.Util.ExceptionRenderer.RenderException(System.Exception)">
            <summary>
            <para>Renders a string representation of the exception by collecting all of the data about the original exception and all of the inner/related exceptions in the tree.</para>
            <para>Explicitly outlines the relation between the exceptions, like which is whose inner and where they're coming from in the inner-exception tree.</para>
            <para>Note that <see cref="P:System.Exception.Message"/> plus <see cref="P:System.Exception.StackTrace"/> might miss the custom fields of the exception, and <see cref="M:System.Exception.ToString"/> ignores related exceptions that are not exactly inners (eg <see cref="P:System.Reflection.ReflectionTypeLoadException.LoaderExceptions"/>).</para>
            </summary>
            <param name="ex">The exception to render.</param>
            <returns>
            <para>A string containing all of the meaningful messages of all the inner exceptions.</para>
            <para>A string with the above message plus stack traces and any other associated data.</para>
            </returns>
            <remarks>This method might be slow, but it caches the rendered data on the exception after the first call.</remarks>
        </member>
        <member name="M:JetBrains.Util.ExceptionRenderer.RenderOuterExceptionMessageAndData(System.Exception)">
            <summary>
            Renders the exception message that includes all of the additional data fields, but of the outermost exception only.
            </summary>
        </member>
        <member name="M:JetBrains.Util.ExceptionRenderer.CollectExDatas(System.Exception)">
            <summary>
            Traverses the inner exceptions tree and extracts atomic datas ready for printing out.
            </summary>
        </member>
        <member name="M:JetBrains.Util.ExceptionRenderer.GetExceptionDataCached(System.Exception,System.String,System.Func{System.String})">
            <summary>
            Gets the value cached on the exception object.
            Calculates and caches if missing.
            </summary>
        </member>
        <member name="M:JetBrains.Util.ExceptionRenderer.PrintExDatas(System.Collections.Generic.IList{JetBrains.Util.ExceptionRenderer.ExData})">
            <summary>
            All of the data is collected, entries are atomic, render them (just resolve the exception index references).
            </summary>
        </member>
        <member name="M:JetBrains.Util.ExceptionRenderer.PrintExMessage(System.Collections.Generic.IEnumerable{JetBrains.Util.ExceptionRenderer.ExData})">
            <summary>
            Extracts the exception message out of the exceptions. In case the inner exceptions message is omitted from the outer exception, tries to collect all such messages too.
            </summary>
        </member>
        <member name="M:JetBrains.Util.ExceptionRenderer.RenderSingleExceptionObject(JetBrains.Util.ExceptionRenderer.ExData)">
            <summary>
            Starts rendering an exception object, delegates to <see cref="M:JetBrains.Util.ExceptionRenderer.RenderObject(System.Object,System.Action{System.String,System.Object})"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Util.ExceptionRenderer.ExData.myParentStorage">
            <summary>
            Parent, for simplicity just an array.
            </summary>
        </member>
        <member name="M:JetBrains.Util.ExceptionRenderer.ExData.AddInnerException(System.String,System.Exception)">
            <summary>
            Reports an inner exception of the current exception.
            </summary>
            <param name="relprefix">Path relative to the current object.</param>
            <param name="exIn">The inner exception to register.</param>
        </member>
        <member name="M:JetBrains.Util.ExceptionRenderer.ExData.AddPathLines">
            <summary>
            For every entry in the <see cref="F:JetBrains.Util.ExceptionRenderer.ExData.Paths"/>, adds a line to the head of the <see cref="F:JetBrains.Util.ExceptionRenderer.ExData.Lines"/> list.
            </summary>
        </member>
        <member name="M:JetBrains.Util.ExceptionRenderer.ExData.DemoteLine(System.String)">
            <summary>
            Moves a line with the given name to be the last in the list.
            </summary>
        </member>
        <member name="M:JetBrains.Util.ExceptionRenderer.ExData.PromoteLine(System.String)">
            <summary>
            Moves a line with the given name to be the first in the list.
            </summary>
        </member>
        <member name="M:JetBrains.Util.ExceptionRenderer.ExData.WithLineByName(System.String,System.Action{JetBrains.Util.Tuple{System.String,System.String},System.Int32})">
            <summary>
            Find the line, exec if OK.
            </summary>
        </member>
        <member name="T:JetBrains.Util.LoggerException">
            <summary>
            A version of the Internal Error Exception that was created within the logger.
            </summary>
        </member>
        <member name="M:JetBrains.Util.LoggerException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
        </member>
        <member name="M:JetBrains.Util.LoggerException.ToString">
            <summary>
            Creates and returns a string representation of the current exception.
            </summary>
            <returns>
            A string representation of the current exception.
            </returns>
            <filterpriority>1</filterpriority><PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*"/></PermissionSet>
        </member>
        <member name="T:JetBrains.Util.ReaderWriterLockHelper">
            <summary>
            Реализация паттерна IDisposable для <see cref="T:System.Threading.ReaderWriterLock"/>
            </summary>
        </member>
        <member name="M:JetBrains.Util.ReaderWriterLockHelper.GetReaderLock(System.Threading.ReaderWriterLock)">
            <summary>
            Получить лок для читающего.
            </summary>
        </member>
        <member name="M:JetBrains.Util.ReaderWriterLockHelper.GetWriterLock(System.Threading.ReaderWriterLock)">
            <summary>
            Получить лок для пишущего.
            </summary>
        </member>
        <member name="M:JetBrains.Util.ReaderWriterLockHelper.UpgradeToWriterLock(System.Threading.ReaderWriterLock)">
            <summary>
            Получить лок для читающего с возможностью апгрейда до пишущего.
            </summary>
        </member>
        <member name="M:JetBrains.StringEx.ToEnum``1(System.String,System.Boolean)">
            <summary>
            Parse string to enum without any checking
            </summary>
        </member>
        <member name="M:JetBrains.StringEx.ToEnum``1(System.String)">
            <summary>
            Parse string to enum without any checking
            </summary>
        </member>
        <member name="M:JetBrains.StringEx.ToEnum``1(System.String,``0)">
            <summary>
            Parse string to enum with returning specified default value if parameter is null
            </summary>
        </member>
        <member name="M:JetBrains.StringEx.ToEnum``1(System.String,System.Boolean,``0)">
            <summary>
            Parse string to enum with returning specified default value if parameter is null
            </summary>
        </member>
        <member name="M:JetBrains.StringEx.ToEnumSafe``1(System.String)">
            <summary>
            Parse string to enum with returning default value if parameter is null or invalid
            </summary>
        </member>
        <member name="M:JetBrains.StringEx.ToEnumSafe``1(System.String,``0)">
            <summary>
            Parse string to enum with returning specified default value if parameter is null or invalid
            </summary>
        </member>
        <member name="M:JetBrains.StringEx.ToEnumNullable``1(System.String)">
            <summary>
            Parse string to nullable enum with returning null if parameter is null
            </summary>
        </member>
        <member name="M:JetBrains.StringEx.ToEnumNullableSafe``1(System.String)">
            <summary>
            Parse string to nullable enum with returning null if parameter is null or invalid
            </summary>
        </member>
        <member name="M:JetBrains.StringEx.ToEnumNullableSafe``1(System.String,System.Nullable{``0})">
            <summary>
            Parse string to nullable enum with returning specified default value if parameter is null or invalid
            </summary>
        </member>
        <member name="T:JetBrains.Util.CollectionAdapter`1">
            <summary>
            Adapts a generic collection so that it can be handled as a non-generic collection.
            </summary>
            <typeparam name="T">Type of the generic collection.</typeparam>
        </member>
        <member name="M:JetBrains.Util.CollectionAdapter`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
            <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.CollectionAdapter`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.Util.CollectionAdapter`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.Util.CollectionAdapter`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.Util.CollectionAdapter`1.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            
            <returns>
            true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:System.Collections.Specialized.Dummy.INotifyCollectionChanged">
            <summary>
            An emulation of the Netfx30 items.
            </summary>
        </member>
        <member name="T:System.ComponentModel.INotifyPropertyChanging">
            <summary>
            An emulation of the Netfx30 items.
            </summary>
        </member>
        <member name="T:System.Collections.Specialized.Dummy.NotifyCollectionChangedAction">
            <summary>
            An emulation of the Netfx30 items.
            </summary>
        </member>
        <member name="T:System.Collections.Specialized.Dummy.NotifyCollectionChangedEventArgs">
            <summary>
            An emulation of the Netfx30 items.
            </summary>
        </member>
        <member name="T:System.Collections.Specialized.Dummy.NotifyCollectionChangedEventHandler">
            <summary>
            An emulation of the Netfx30 items.
            </summary>
        </member>
        <member name="T:System.ComponentModel.PropertyChangingEventArgs">
            <summary>
            An emulation of the Netfx30 items.
            </summary>
        </member>
        <member name="T:System.ComponentModel.PropertyChangingEventHandler">
            <summary>
            An emulation of the Netfx30 items.
            </summary>
        </member>
        <member name="T:JetBrains.Util.LocalList`1">
            <summary>
            Represents collection of items that doesn't create heap objects unless items are added
            </summary>
        </member>
        <member name="M:JetBrains.Util.LocalList`1.Add(`0)">
            <summary>
            Adds an weak reference to item to the <see cref="T:JetBrains.Util.LocalList`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:JetBrains.Util.LocalList`1"></see>.</param>
        </member>
        <member name="M:JetBrains.Util.LocalList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:JetBrains.Util.LocalList`1"></see>.
            </summary>
            <returns>
            true if item was successfully removed from the <see cref="T:JetBrains.Util.LocalList`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:JetBrains.Util.LocalList`1"></see>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:JetBrains.Util.LocalList`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:JetBrains.Util.LocalList`1"></see> is read-only.</exception>
        </member>
        <member name="M:JetBrains.Util.LocalList`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:JetBrains.Util.LocalList`1"></see> contains a specific value.
            </summary>
            <returns>
            true if item is found in the <see cref="T:JetBrains.Util.LocalList`1"></see>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:JetBrains.Util.LocalList`1"></see>.</param>
        </member>
        <member name="P:JetBrains.Util.LocalList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:JetBrains.Util.LocalList`1"></see>.
            </summary>
        </member>
        <member name="F:JetBrains.Util.WeakToStrongDictionary`2.Entry.HashCode">
            <summary>
            Cached hash code of the key, -1 means entry is free
            </summary>
        </member>
        <member name="F:JetBrains.Util.WeakToStrongDictionary`2.Entry.NextEntryIndex">
            <summary>
            Index of next entry in the chain of keys with the same hashcodes (modulo size), -1 means last
            </summary>
        </member>
        <member name="F:JetBrains.Util.WeakToStrongDictionary`2.Entry.PrevEntryIndex">
            <summary>
            Index of previous entry in the chain of keys with the same hashcodes (modulo size), -1 means first
            </summary>
        </member>
        <member name="F:JetBrains.Util.WeakToWeakDictionary`2.Entry.HashCode">
            <summary>
            Cached hash code of the key, -1 means entry is free
            </summary>
        </member>
        <member name="F:JetBrains.Util.WeakToWeakDictionary`2.Entry.NextEntryIndex">
            <summary>
            Index of next entry in the chain of keys with the same hashcodes (modulo size), -1 means last
            </summary>
        </member>
        <member name="F:JetBrains.Util.WeakToWeakDictionary`2.Entry.PrevEntryIndex">
            <summary>
            Index of previous entry in the chain of keys with the same hashcodes (modulo size), -1 means first
            </summary>
        </member>
        <member name="F:JetBrains.Application.CompanyInfo.PlatformProductRegistryKeyName">
            <summary>
            <para>In the Registry, name of the key that's shared by all of the Platform-based products (under the company name key).</para>
            <para>Things like InstanceId that are used by usage statistics of all the products are stored there.</para>
            </summary>
            <example><code>HKEY_CURRENT_USER\Software\JetBrains\Platform</code></example>
        </member>
        <member name="T:JetBrains.Comparer`1">
            <summary>
            A generic method-based comparer.
            </summary>
        </member>
        <member name="T:JetBrains.Comparer">
            <summary>
            Factory for <see cref="T:JetBrains.Comparer`1"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Threading.GroupingEvent">
            <summary>
            <para>An event that groups multiple incoming signals within a time span and issues only one outgoing signal for them.</para>
            <para>This allows to accomodate for external events firing at a high rate and execute the handler only when their activity suspends.</para>
            <para>The object is thread-safe: the incoming event may fire on any thread, the outgoing activity always happens on the primary thread, identified by <see cref="P:JetBrains.Threading.GroupingEvent.Host"/>-&gt;<see cref="F:JetBrains.Threading.GroupingEventHost.ReentrancyGuard"/>-&gt;<see cref="P:JetBrains.Threading.ReentrancyGuard.Dispatcher"/>.</para>
            <para>If the owning <see cref="T:JetBrains.Threading.GroupingEventHost"/> has <see cref="F:JetBrains.Threading.GroupingEventHost.IsGuarded"/> on, then the outgoing activity is executed under the <see cref="T:JetBrains.Threading.ReentrancyGuard"/>.</para>
            <para>The maximum grouping interval is limited by <see cref="F:JetBrains.Threading.GroupingEvent.MaxInterval"/>.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Threading.GroupingEvent.myDeadline">
            <summary>
            The deadline, in <see cref="T:System.DateTime"/>-UTC format, if waiting for execution. <c>Null</c>, otherwise.
            Interlocked access required.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.GroupingEvent.myFHandler">
            <summary>
            The outgoing event handler, as passed from ctor, if available.
            <c>Null</c> when:
            (1) Not given to ctor (user relies on <see cref="P:JetBrains.Threading.GroupingEvent.Outgoing"/>).
            (2) After <see cref="M:JetBrains.Threading.GroupingEvent.Dispose"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.GroupingEvent.myIncoming">
            <summary>
            Lazy-created backing for <see cref="P:JetBrains.Threading.GroupingEvent.Incoming"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.GroupingEvent.myIncomingDontProlongate">
            <summary>
            Lazy-created backing for <see cref="P:JetBrains.Threading.GroupingEvent.IncomingDontProlongate"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.GroupingEvent.myIsExecuting">
            <summary>
            True while we're inside the user <see cref="P:JetBrains.Threading.GroupingEvent.Outgoing"/> handler execution, to avoid reentrancy.
            Primary-thread only.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.GroupingEvent.myLazyIsWaiting">
            <summary>
            Lazy-created by <see cref="M:JetBrains.Threading.GroupingEvent.CreateIsWaitingProperty"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.GroupingEvent.myLockOutgoingField">
            <summary>
            Ensures thread safety of <see cref="F:JetBrains.Threading.GroupingEvent.myOutgoing"/>.
            SWL wouldn't create system table entries for the object's monitor handle and allows zero impact for the case we do not use the signals/locks on a shortlived grouping-event.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.GroupingEvent.myOutgoing">
            <summary>
            Lazy-created backing for <see cref="P:JetBrains.Threading.GroupingEvent.Outgoing"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.GroupingEvent.#ctor(JetBrains.Threading.GroupingEventHost,System.String,System.TimeSpan,System.Action)">
            <summary>
            Creates a new grouping event. Must be executed on the primary thread.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.GroupingEvent.MaxInterval">
            <summary>
            Limit for an interval of a <see cref="T:JetBrains.Threading.GroupingEvent"/>.
            To avoid the overhead, events with intervals exceeding this value are not supported.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.GroupingEvent.Disposables">
            <summary>
            Provides an assertion in case the consumer forgets to dispose of the event.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.GroupingEvent.CancelIncoming">
            <summary>
            If there were incoming firings for which there was no outgoing firing yet, cancels that outgoing firing.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.GroupingEvent.CreateIsWaitingProperty">
            <summary><seealso cref="M:JetBrains.Threading.GroupingEvent.IsWaiting"/>
            Creates a property that tells whether the event is currently waiting for grouped execution.
            This method is not thread-safe.
            The property firings are free-threaded.
            </summary>
            <remarks>Lazy-creates the property so that the event resources are not spent if it's not needed.</remarks>
        </member>
        <member name="M:JetBrains.Threading.GroupingEvent.FireIncoming">
            <summary>
            <para>Fires the incoming event. May be called on any thread.</para>
            <para>Causes the action to execute on the primary thread (if <see cref="F:JetBrains.Threading.GroupingEventHost.IsGuarded"/>, then under the <see cref="T:JetBrains.Threading.ReentrancyGuard"/>) after the <see cref="P:JetBrains.Threading.GroupingEvent.Interval"/> elapses. Calling this function again within the <see cref="P:JetBrains.Threading.GroupingEvent.Interval"/> prolongates the wait by the <see cref="P:JetBrains.Threading.GroupingEvent.Interval"/>.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Threading.GroupingEvent.FireIncomingDontProlongate">
            <summary>
            <para>Fires the incoming event. May be called on any thread.</para>
            <para>Causes the action to execute on the primary thread (if <see cref="F:JetBrains.Threading.GroupingEventHost.IsGuarded"/>, then under the <see cref="T:JetBrains.Threading.ReentrancyGuard"/>) after the <see cref="P:JetBrains.Threading.GroupingEvent.Interval"/> elapses. Calling this function again within the <see cref="P:JetBrains.Threading.GroupingEvent.Interval"/> does not change the initial deadline, unlike <see cref="M:JetBrains.Threading.GroupingEvent.FireIncoming"/>.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Threading.GroupingEvent.IsWaiting">
            <summary><seealso cref="M:JetBrains.Threading.GroupingEvent.CreateIsWaitingProperty"/>
            <para>Checks whether the event has incoming firings for which there were no outgoing firings yet, ie is waiting for the <see cref="P:JetBrains.Threading.GroupingEvent.Interval"/> to elapse or for the reentrancy guard to allow the execution (if <see cref="F:JetBrains.Threading.GroupingEventHost.IsGuarded"/>) after it elapses.</para>
            <para>When the user action starts executing, gets <c>False</c> until there's the next icoming firing.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Threading.GroupingEvent.Execute">
            <summary>
            Called by the host on the primary thread to fire the action.
            Must be already guarded, if needed by <see cref="F:JetBrains.Threading.GroupingEventHost.IsGuarded"/>.
            Must not throw out.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.GroupingEvent.IsExpired(System.Int64)">
            <summary>
            Gets whether the event has expired waiting for the outgoing firing.
            This means there were no outgoing firings after the incoming firing, and at least an <see cref="P:JetBrains.Threading.GroupingEvent.Interval"/> has elapsed since the last incoming firing.
            </summary>
            <param name="datetimeNow">Caches the <see cref="P:System.DateTime.UtcNow"/> value, to avoid re-quering it in the loops. A 64bit integer in the <see cref="T:System.DateTime"/> format. Must be UTC!</param>
        </member>
        <member name="M:JetBrains.Threading.GroupingEvent.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Threading.GroupingEvent.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.Threading.GroupingEvent.Host">
            <summary>
            Gets the owning host for this object.
            </summary>
        </member>
        <member name="P:JetBrains.Threading.GroupingEvent.Incoming">
            <summary>
            <para>Fires the incoming event. May be called on any thread.</para>
            <para>Causes the action to execute on the primary thread under the reentrancy guard after the <see cref="P:JetBrains.Threading.GroupingEvent.Interval"/> elapses. Calling this function again within the <see cref="P:JetBrains.Threading.GroupingEvent.Interval"/> prolongates the wait by the <see cref="P:JetBrains.Threading.GroupingEvent.Interval"/>.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Threading.GroupingEvent.IncomingDontProlongate">
            <summary>
            <para>Fires the incoming event. May be called on any thread.</para>
            <para>Causes the action to execute on the primary thread under the reentrancy guard after the <see cref="P:JetBrains.Threading.GroupingEvent.Interval"/> elapses. Calling this function again within the <see cref="P:JetBrains.Threading.GroupingEvent.Interval"/> does not change the initial deadline, unlike <see cref="M:JetBrains.Threading.GroupingEvent.FireIncoming"/>.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Threading.GroupingEvent.Interval">
            <summary>
            The interval within which the incoming events are grouped before the outgoing event fires and the action is executed.
            </summary>
        </member>
        <member name="P:JetBrains.Threading.GroupingEvent.Name">
            <summary>
            Identifier for this event.
            </summary>
        </member>
        <member name="P:JetBrains.Threading.GroupingEvent.Outgoing">
            <summary>
            The outgoing event. Executed on the primary thread (if <see cref="F:JetBrains.Threading.GroupingEventHost.IsGuarded"/>, then under a <see cref="T:JetBrains.Threading.ReentrancyGuard"/>).
            </summary>
        </member>
        <member name="T:JetBrains.Threading.GroupingEventHost">
            <summary>
            Manages the <see cref="T:JetBrains.Threading.GroupingEvent"/> schedulling.
            Is affined to the thread thru <see cref="F:JetBrains.Threading.GroupingEventHost.ReentrancyGuard"/> (even if not <see cref="F:JetBrains.Threading.GroupingEventHost.IsGuarded"/>), by making the events fire on that thread only. All of the manipulations over this class (<see cref="M:JetBrains.Threading.GroupingEventHost.CreateEvent(System.String,System.TimeSpan,System.Action)"/>) or the <see cref="T:JetBrains.Threading.GroupingEvent">events</see> are free-threaded.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.GroupingEventHost.myClockTimer">
            <summary>
            Clocks the checks for expired events.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.GroupingEventHost.myDebugTotalEvents">
            <summary>
            In debug mode, counts the total number of events this instance met.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.GroupingEventHost.myDebugTotalThroughput">
            <summary>
            In debug mode, counts the total number of event state changes, like incoming firings, outgoing firings, and cancellings.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.GroupingEventHost.myEvents">
            <summary>
            The events handled by this instance, both waiting and not.
            Free-threaded, must be synced with <see cref="F:JetBrains.Threading.GroupingEventHost.myLock"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.GroupingEventHost.myExecuteExpiredEventsLocalGuard">
            <summary>
            If not <see cref="F:JetBrains.Threading.GroupingEventHost.IsGuarded"/> and we're not using <see cref="F:JetBrains.Threading.GroupingEventHost.ReentrancyGuard"/>, event execution becomes reentrancy prone. Protect the <see cref="M:JetBrains.Threading.GroupingEventHost.ExecuteExpiredEvents"/> func locally in this case.
            Not used when <see cref="F:JetBrains.Threading.GroupingEventHost.IsGuarded"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.GroupingEventHost.myIsWaitingOnReentrancyGuard">
            <summary>
            When timeout expires on any of the events, we try taking the reentrancy guard to execute it.
            This is <c>True</c> while we're waiting for the async or sync reega call.
            Primary-thread only.
            N/a if not <see cref="F:JetBrains.Threading.GroupingEventHost.IsGuarded"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.GroupingEventHost.myLock">
            <summary>
            Protects the <see cref="F:JetBrains.Threading.GroupingEventHost.myEvents"/> access.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.GroupingEventHost.myWatchdogEvent">
            <summary>
            A dummy event of the maximum inteval.
            The event is incoming-fired whenever any other live event fires, and keeps the clock alive until expires.
            This makes sure the timer is not constantly switched on and off (which means marshalling).
            </summary>
        </member>
        <member name="M:JetBrains.Threading.GroupingEventHost.#ctor(System.Boolean)">
            <summary>
            Creates the new host for the groping events that group multiple incoming signals into one outgoing signal that occurs with a limited frequency.
            </summary>
            <param name="isGuarded">Whether the outgoing action executions should be guarded by the <see cref="T:JetBrains.Threading.ReentrancyGuard"/>.</param>
        </member>
        <member name="F:JetBrains.Threading.GroupingEventHost.IsGuarded">
            <summary>
            Whether the outgoing event actions execution should be guarded by the <see cref="F:JetBrains.Threading.GroupingEventHost.ReentrancyGuard"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.GroupingEventHost.ReentrancyGuard">
            <summary>
            Identifies the hosts's primary thread.
            If <see cref="F:JetBrains.Threading.GroupingEventHost.IsGuarded"/>, guards the execution of all the outgoing actions.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.GroupingEventHost.CreateEvent(System.String,System.TimeSpan,System.Action)">
             <summary>
             Creates and registers a new grouping event.
             </summary>
             <param name="name">A name to identify the event.</param>
             <param name="interval">The grouping interval. The incoming events are grouped until there's a pause of the <paramref name="interval"/> length, and after that the outgoing event is fired. The interval must be not above <see cref="F:JetBrains.Threading.GroupingEvent.MaxInterval"/>.</param>
            <param name="FFirstHandler">Optional. The first handler for the <see cref="P:JetBrains.Threading.GroupingEvent.Outgoing"/> signal. Others could be advised on the signal object proper. Using this param avoids creating the signal object, and is preferrable in simple cases.</param>
            <returns>The event on which the incoming events can be fired. Must be disposed of.</returns>
        </member>
        <member name="M:JetBrains.Threading.GroupingEventHost.AddEvent(JetBrains.Threading.GroupingEvent)">
            <summary>
            Registers a new event on the host.
            Free-threaded.
            Must not be called on already-added events.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.GroupingEventHost.OnDeadlineChanged(JetBrains.Threading.GroupingEvent)">
            <summary>
            There was an incoming firing on one of the events, or a waiting event has been cancelled.
            Anyway, its deadline has changed and we must accomodate the schedulle.
            Free-threaded.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.GroupingEventHost.RemoveEvent(JetBrains.Threading.GroupingEvent)">
            <summary>
            Unregisters an event from the host.
            Free-threaded.
            Safe to call more than once (on unregistered events).
            </summary>
        </member>
        <member name="M:JetBrains.Threading.GroupingEventHost.ClearEvents">
            <summary>
            Clears the events queue.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.GroupingEventHost.ExecuteExpiredEvents">
            <summary>
            Executes any events that are currently in the expired state.
            Must be run under the <see cref="F:JetBrains.Threading.GroupingEventHost.ReentrancyGuard"/>, if <see cref="F:JetBrains.Threading.GroupingEventHost.IsGuarded"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.GroupingEventHost.OnClockTimerTick">
            <summary>
            The clock signal has fired.
            Check if there's anything to execute.
            Primary thread.
            Safe to throw.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.GroupingEventHost.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.Threading.GroupingEventHost.ClockTimer">
            <summary>
            The timer that clocks the checks-for-execution.
            Supports free-threaded IsEnabled.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.GroupingEventHost.ClockTimer.Interval">
            <summary>
            Default clock period.
            A value less than 50ms approx means we will be called each time the Thread Message Queue gets empty.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.GroupingEventHost.ClockTimer.Disposables">
            <summary>
            We use this to track whether we've been disposed of.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.GroupingEventHost.ClockTimer.myIsEnabledDesiredState">
            <summary>
            What we want to do to the timer. The immediate value set by <see cref="P:JetBrains.Threading.GroupingEventHost.ClockTimer.IsEnabled"/> from any thread.
            After marshalling to the UI thread, applies to the timer.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.GroupingEventHost.ClockTimer.myIsMarshalling">
            <summary>
            True while there's a pending <see cref="M:JetBrains.Threading.JetDispatcher.BeginInvoke(System.String,System.Action)"/> running. 
            We should avoid posting multiple simultaneous marshalling requests.
            The <see cref="F:JetBrains.Threading.GroupingEventHost.ClockTimer.myIsEnabledDesiredState"/> is not enough an indication, as it might be changed back and forth while a marshalling is in progress.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.GroupingEventHost.ClockTimer.OnTimerTick(System.Object,System.EventArgs)">
            <summary>
            The internal timer has ticked. Tick the clock.
            Primary thread.
            </summary>
        </member>
        <member name="P:JetBrains.Threading.GroupingEventHost.ClockTimer.IsEnabled">
            <summary>
            Controls the enabled state of the timer.
            Free-threaded.
            Will not pump.
            </summary>
        </member>
        <member name="T:JetBrains.Threading.RecurrentAlarm">
            <summary>
            Manages the recurrent actions. Wraps execution into the <see cref="T:JetBrains.Threading.ReentrancyGuard"/>.
            Makes sure that the action can be cancelled even if it's pending on the <see cref="T:JetBrains.Threading.ReentrancyGuard"/> queue.
            Works on the primary thread only.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.RecurrentAlarm.OptionExecutionPrecision">
            <summary>
            Action can be executed as much time before the deadline. 
            </summary>
        </member>
        <member name="F:JetBrains.Threading.RecurrentAlarm.OptionTimerPrecision">
            <summary>
            Timer deadline is set up with this precision.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.RecurrentAlarm.IsApplicationActive">
            <summary>
            Gets or sets whether the application that owns the alarm is currently active.
            Recurring actions are executed once at most when the application is inactive.
            This property must be set by the external owner in the UI applications.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.RecurrentAlarm.myGeneration">
            <summary>
            A generation is increased each time the application is deactivated. After deactivation, each action can be executed at most once until the app is activated again.
            Whenever an action is executed, its generation is set to the generation of the alarm.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.RecurrentAlarm.myIsDeferredSettingTimer">
            <summary>
            <see cref="M:JetBrains.Threading.RecurrentAlarm.UpdateNearestDeadline_SetTimer(System.DateTime)"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.RecurrentAlarm.myNearestDeadline">
            <summary>
            The nearest deadline for which the timer is set up, or default value if not waiting for any actions.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.RecurrentAlarm.myQueue">
            <summary>
            List of all the actions known to the alarm, those waiting for deadline, and waiting on reentrancy guard, and running.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.RecurrentAlarm.myReentrancyGuard">
            <summary>
            Identifies the primary thread.
            Guards actions execution.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.RecurrentAlarm.myTimer">
            <summary>
            Timer that is set to tick when the <see cref="F:JetBrains.Threading.RecurrentAlarm.myNearestDeadline"/> elapses.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.RecurrentAlarm.#ctor">
            <summary>
            Creates the instance.
            Attaches to the primary thread.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.RecurrentAlarm.Create(System.String,System.TimeSpan,System.Action)">
            <summary>
            Schedulles a new timed action that executes the <paramref name="action"/> at recurring <paramref name="interval"/>s.
            The new interval starts when the previous action completes exection, so the total interval depends on the execution time.
            This class can be used on the main thread only.
            </summary>
            <param name="name">Name to identify the action.</param>
            <param name="interval">Interval between the execution (end-to-start). The interval must be positive and not below 50 milliseconds.</param>
            <param name="action">The action to execute.</param>
            <returns>A token that MUST be disposed to stop the recurrence.</returns>
        </member>
        <member name="M:JetBrains.Threading.RecurrentAlarm.ExecuteElapsedActions">
            <summary>
            When the deadline comes, executes the actions.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.RecurrentAlarm.InternalAddAction(JetBrains.Threading.RecurrentAlarm.RecurrentAction)">
            <summary>
            Queue manipulation. Affects deadline.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.RecurrentAlarm.InternalRemoveAction(JetBrains.Threading.RecurrentAlarm.RecurrentAction)">
            <summary>
            Queue manipulation. Affects deadline.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.RecurrentAlarm.UpdateNearestDeadline">
            <summary>
            Scans thru the queue.
            Calculates the nearest deadline.
            Sets up the timer to point to that deadline.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.RecurrentAlarm.UpdateNearestDeadline_SetTimer(System.DateTime)">
            <summary>
            If <see cref="M:JetBrains.Threading.RecurrentAlarm.UpdateNearestDeadline"/> decided that the deadline should be changed, applies the deadline and adjusts the timer.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.RecurrentAlarm.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.Threading.RecurrentAlarm.EligibleTimedActions">
            <summary>
            Skips those actions already in the execution queue and, if the app is inactive, those that have already executed within this inactivity period.
            Returns only those actions that are eligible for execution at some later moment, from the current point of view.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.RecurrentAlarm.RecurrentAction.ZeroDeadlineAction">
            <summary>
            Dummy.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.RecurrentAlarm.RecurrentAction.myDeadline">
            <summary>
            The deadline date/time, if we're currently waiting for the deadline.
            <c>Null</c>, if we've reached the deadline and are now waiting for execution/executing/etc.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.RecurrentAlarm.RecurrentAction.myLastExecutedGeneration">
            <summary>
            When the action executes, this is set to the current generation of the alarm.
            Allows to track whether the action has executed since the last application deactivation, or not.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.RecurrentAlarm.RecurrentAction.BeginExecute(JetBrains.Threading.ReentrancyGuard,System.UInt32,System.Action,System.Func{JetBrains.Threading.RecurrentAlarm.RecurrentAction,System.Boolean})">
            <summary>
            After waiting on the alarm timer queue, starts waiting on the reentrancy guard.
            Called by the alarm queue when the <see cref="P:JetBrains.Threading.RecurrentAlarm.RecurrentAction.Deadline"/> comes.
            Places self on the <see cref="T:JetBrains.Threading.ReentrancyGuard"/>. Must not exec the action on this stack, must <see cref="M:JetBrains.Threading.ReentrancyGuard.Queue(System.String,System.Action)"/>.
            </summary>
            <param name="reega">Allows to execute reentrant-safe.</param>
            <param name="generation">Generation we should get upon execution.</param>
            <param name="funcDeadlineChanged">Notify parent when we reschedulle.</param>
            <param name="funcAmIAlive">Check if still alive after waiting on reega.</param>
        </member>
        <member name="M:JetBrains.Threading.RecurrentAlarm.RecurrentAction.Reschedulle">
            <summary>
            Schedulles the deadline for the action.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.RecurrentAlarm.RecurrentAction.CompareTo(JetBrains.Threading.RecurrentAlarm.RecurrentAction)">
            <summary>
            Compares by the deadline.
            </summary>
        </member>
        <member name="P:JetBrains.Threading.RecurrentAlarm.RecurrentAction.Deadline">
            <summary>
            The deadline date/time, if we're currently waiting for the deadline.
            Default value if we've reached the deadline and are now waiting for execution, or executing.
            </summary>
        </member>
        <member name="P:JetBrains.Threading.RecurrentAlarm.RecurrentAction.LastExecutedGeneration">
            <summary>
            When the action executes, this is set to the current generation of the alarm.
            Allows to track whether the action has executed since the last application deactivation, or not.
            </summary>
        </member>
        <member name="T:JetBrains.Threading.ReentrancyAlarm">
            <summary>
            Manages the timed deferred actions on top of the <see cref="T:JetBrains.Threading.ReentrancyGuard"/>.
            Makes sure that the action can be cancelled even if it's pending on the <see cref="P:JetBrains.Threading.ReentrancyAlarm.ReentrancyGuard"/> queue.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.ReentrancyAlarm.myGeneration">
            <summary>
            A generation is increased each time the application is deactivated. After deactivation, each action can be executed at most once until the app is activated again.
            Whenever an action is executed, its generation is set to the generation of the alarm.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.ReentrancyAlarm.myReentrancyGuard">
            <summary>
            <see cref="P:JetBrains.Threading.ReentrancyAlarm.ReentrancyGuard"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.ReentrancyAlarm.myTimedActions">
            <summary>
            The list of timed actions that are waiting for their deadline to come, and the actions already in the execution queue, whose deadline is <c>Null</c>.
            Main thread access only.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.ReentrancyAlarm.myTimer">
            <summary>
            Timer that is set to tick when the <see cref="F:JetBrains.Threading.ReentrancyAlarm.NearestDeadline"/> elapses.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.ReentrancyAlarm.NearestDeadline">
            <summary>
            Nearest deadline of all those deadlines of the timed actions in <see cref="F:JetBrains.Threading.ReentrancyAlarm.myTimedActions"/> that are eligible for execution under the current conditions (application inactivity etc).
            Or <c>0</c>, if there are no eligible timed actions to execute.
            Changes to this property start/stop and edit the <see cref="F:JetBrains.Threading.ReentrancyAlarm.myTimer"/>.
            UTC!
            </summary>
        </member>
        <member name="F:JetBrains.Threading.ReentrancyAlarm.NearestDeadlineGottenDirty">
            <summary>
            Means the <see cref="F:JetBrains.Threading.ReentrancyAlarm.NearestDeadline"/> has to be recalculated.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.ReentrancyAlarm.IsApplicationActive">
            <summary>
            Gets or sets whether the application that owns the alarm is currently active.
            Recurring actions are executed once at most when the application is inactive.
            This property must be set by the external owner in the UI applications.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyAlarm.QueueAt(System.String,System.Action,System.TimeSpan)">
            <summary>
            <para>Queues the action to execute once on the guarded thread when the timeout elapses.</para>
            <para>Returns a token that cancels the action execution. The token disposal is optional.</para>
            <para>A <see cref="T:JetBrains.Threading.ReentrancyGuard"/> is preventing reentrancy between the actions.</para>
            </summary>
            <param name="name">The name for the task.</param>
            <param name="action">The action to execute. Exceptions will be trapped.</param>
            <param name="interval">A non-negative time interval.</param>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyAlarm.QueueRecurring(System.String,System.Action,System.TimeSpan)">
            <summary>
            <para>Queues the action to execute asynchronously on the guarded thread at recurring intervals.</para>
            <para>Returns a token that cancels the recurring action execution. This token must be eventually disposed of.</para>
            <para>When the application gets inactive, the action is executed once, and then suspends until the application gets activated again.</para>
            <para>A <see cref="T:JetBrains.Threading.ReentrancyGuard"/> is preventing reentrancy between the actions.</para>
            </summary>
            <param name="name">The name for the task.</param>
            <param name="action">The action to execute. Exceptions will be trapped.</param>
            <param name="interval">A non-negative time interval.</param>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyAlarm.QueueTimed(System.String,System.Action,System.TimeSpan,JetBrains.Threading.ReentrancyAlarm.Recurrence)">
            <summary>
            Queues a timed action.
            May be called on any thread.
            </summary>
            <param name="name">Name of the action.</param>
            <param name="action">Action executor.</param>
            <param name="interval">Timeout/interval.</param>
            <param name="recurrence">Whether to repeat.</param>
            <returns>A token to cancel the activity.</returns>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyAlarm.OnTimerTick">
            <summary>
            When the timer ticks, the action whose deadline was reached are executed.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyAlarm.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.Threading.ReentrancyAlarm.ReentrancyGuard">
            <summary>
            Gets the reentrancy guard for the thread this alarm is working on.
            </summary>
        </member>
        <member name="P:JetBrains.Threading.ReentrancyAlarm.EligibleTimedActions">
            <summary>
            Skips those actions already in the execution queue and, if the app is inactive, those that have already executed within this inactivity period.
            Returns only those actions that are eligible for execution at some later moment, from the current point of view.
            </summary>
        </member>
        <member name="T:JetBrains.Threading.ReentrancyAlarm.Recurrence">
            <summary>
            Tells apart one-time and recurring actions.
            </summary>
        </member>
        <member name="T:JetBrains.Threading.ReentrancyAlarm.TimedAction">
            <summary>
            <para>The schedulling unit of the alarm.</para>
            </summary>
        </member>
        <member name="F:JetBrains.Threading.ReentrancyAlarm.TimedAction.myDeadline">
            <summary>
            The deadline date/time, if we're currently waiting for the deadline.
            <c>Null</c>, if we've reached the deadline and are now waiting for execution/executing/etc.
            UTC!
            </summary>
        </member>
        <member name="F:JetBrains.Threading.ReentrancyAlarm.TimedAction.myLastExecutedGeneration">
            <summary>
            When the action executes, this is set to the current generation of the alarm.
            Allows to track whether the action has executed since the last application deactivation, or not.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.ReentrancyAlarm.TimedAction.myLock">
            <summary>
            Protects non-atomic <see cref="F:JetBrains.Threading.ReentrancyAlarm.TimedAction.State"/>-related operations, as they might be executed from different threads.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.ReentrancyAlarm.TimedAction.myQueueMembershipToken">
            <summary>
            A token of the membership in the alarm's queue, or a <see cref="!:Disposables.Empty"/> dummy.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.ReentrancyAlarm.TimedAction.State">
            <summary>
            The current state of the timed action, see <see cref="T:JetBrains.Threading.ReentrancyAlarm.TimedAction.States"/> for details.
            First states might be set on a foreign thread.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.ReentrancyAlarm.TimedAction.GottenDirty">
            <summary>
            Fires when the timed-action state changes and the common deadline timer has to be recalculated.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyAlarm.TimedAction.BeginExecute(System.UInt32)">
            <summary>
            After waiting on the alarm timer queue in <see cref="F:JetBrains.Threading.ReentrancyAlarm.TimedAction.States.WaitingTimer"/>, starts waiting on the reentrancy guard.
            Called by the alarm queue when the <see cref="P:JetBrains.Threading.ReentrancyAlarm.TimedAction.Deadline"/> comes.
            Places self on the <see cref="P:JetBrains.Threading.ReentrancyAlarm.ReentrancyGuard"/>. Must not exec the action on this stack, must <see cref="!:ReentrancyGuard.Queue"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyAlarm.TimedAction.MarshallingComplete(JetBrains.DataFlow.ICollectionEvents{JetBrains.Threading.ReentrancyAlarm.TimedAction})">
            <summary>
            Called on the guarded thread as soon as possible after creating the action.
            Transitions from <see cref="F:JetBrains.Threading.ReentrancyAlarm.TimedAction.States.Marshalling"/> to <see cref="F:JetBrains.Threading.ReentrancyAlarm.TimedAction.States.WaitingTimer"/>.
            Adds itself to the alarm queue, if not cancelled yet (atomically).
            </summary>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyAlarm.TimedAction.Execute">
            <summary>
            After waiting on the reentrancy guard in <see cref="F:JetBrains.Threading.ReentrancyAlarm.TimedAction.States.WaitingReentrancy"/>, executes the action actually.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyAlarm.TimedAction.Reschedulle">
            <summary>
            Schedulles the deadline for the action.
            Free-threaded.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyAlarm.TimedAction.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyAlarm.TimedAction.CompareTo(JetBrains.Threading.ReentrancyAlarm.TimedAction)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the other parameter.Zero This object is equal to other. Greater than zero This object is greater than other. 
            </returns>
            
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyAlarm.TimedAction.Dispose">
            <summary>
            Cancels the timed action.
            Might be called on any thread
            </summary>
        </member>
        <member name="P:JetBrains.Threading.ReentrancyAlarm.TimedAction.Deadline">
            <summary>
            The deadline date/time, if we're currently waiting for the deadline.
            <c>Null</c>, if we've reached the deadline and are now waiting for execution/executing/etc.
            UTC!
            </summary>
        </member>
        <member name="P:JetBrains.Threading.ReentrancyAlarm.TimedAction.LastExecutedGeneration">
            <summary>
            When the action executes, this is set to the current generation of the alarm.
            Allows to track whether the action has executed since the last application deactivation, or not.
            </summary>
        </member>
        <member name="P:JetBrains.Threading.ReentrancyAlarm.TimedAction.Name">
            <summary>
            The user-supplied action name.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.ReentrancyAlarm.TimedAction.States.New">
            <summary>
            The action has just been created. It has not been returned to the user or added to the queue.
            Transites into <see cref="F:JetBrains.Threading.ReentrancyAlarm.TimedAction.States.Marshalling"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.ReentrancyAlarm.TimedAction.States.Marshalling">
            <summary>
            The action has been fully created, but has not been added to the queue.
            If created on the guarded thread, this immediately transitions into <see cref="F:JetBrains.Threading.ReentrancyAlarm.TimedAction.States.WaitingTimer"/> by the <see cref="M:JetBrains.Threading.ReentrancyAlarm.TimedAction.MarshallingComplete(JetBrains.DataFlow.ICollectionEvents{JetBrains.Threading.ReentrancyAlarm.TimedAction})"/> method.
            If created on a foreign thread, the action is returned to the user and can be either cancelled (with <see cref="M:System.IDisposable.Dispose"/>, transitions to <see cref="F:JetBrains.Threading.ReentrancyAlarm.TimedAction.States.Dead"/>) or added to the queue (by <see cref="M:JetBrains.Threading.ReentrancyAlarm.TimedAction.MarshallingComplete(JetBrains.DataFlow.ICollectionEvents{JetBrains.Threading.ReentrancyAlarm.TimedAction})"/>, transitions to <see cref="F:JetBrains.Threading.ReentrancyAlarm.TimedAction.States.WaitingTimer"/>).
            </summary>
        </member>
        <member name="F:JetBrains.Threading.ReentrancyAlarm.TimedAction.States.WaitingTimer">
            <summary>
            Waiting for the <see cref="P:JetBrains.Threading.ReentrancyAlarm.TimedAction.Deadline"/> to come on the alarm queue. Accepts <see cref="M:JetBrains.Threading.ReentrancyAlarm.TimedAction.BeginExecute(System.UInt32)"/> (transitions to <see cref="F:JetBrains.Threading.ReentrancyAlarm.TimedAction.States.WaitingReentrancy"/>) or <see cref="M:System.IDisposable.Dispose"/> (to <see cref="F:JetBrains.Threading.ReentrancyAlarm.TimedAction.States.Dead"/>).
            </summary>
        </member>
        <member name="F:JetBrains.Threading.ReentrancyAlarm.TimedAction.States.WaitingReentrancy">
            <summary>
            Deadline has come. Waiting when the <see cref="P:JetBrains.Threading.ReentrancyAlarm.ReentrancyGuard"/> allows us to run.
            <see cref="M:JetBrains.Threading.ReentrancyAlarm.TimedAction.Execute"/> transitions to <see cref="F:JetBrains.Threading.ReentrancyAlarm.TimedAction.States.Executing"/>.
            <see cref="M:System.IDisposable.Dispose"/> transitions to <see cref="F:JetBrains.Threading.ReentrancyAlarm.TimedAction.States.Dead"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.ReentrancyAlarm.TimedAction.States.Executing">
            <summary>
            The action is running. Too late to cancel.
            When thru, transitions either to <see cref="F:JetBrains.Threading.ReentrancyAlarm.TimedAction.States.Dead"/> (one-time) or <see cref="F:JetBrains.Threading.ReentrancyAlarm.TimedAction.States.WaitingTimer"/> (recurring).
            </summary>
        </member>
        <member name="F:JetBrains.Threading.ReentrancyAlarm.TimedAction.States.Dead">
            <summary>
            Either the action has been cancelled, or a one-time action has executed. Terminal state.
            Removes itself from the queue, if any.
            </summary>
        </member>
        <member name="T:JetBrains.Threading.ReentrancyGuard">
            <summary>
            A reentrancy guard that prevents controlled actions from running one on top of another.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.ReentrancyGuard.myDefaultExternalDriverExecutionLimit">
            <summary>
            The number of actions to be executed in a row in response to the external driver call to <see cref="M:JetBrains.Threading.ReentrancyGuard.PumpQueue(System.Int32)"/>, unless overridden in the function arguments.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.ReentrancyGuard.myInstance">
            <summary>
            The per-thread guard instance.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.ReentrancyGuard.myDispatcher">
            <summary>
            A dispatcher that identifies the guarded thread.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.ReentrancyGuard.myExecutionStack">
            <summary>
            While executing an action, the reentrancy constraint can be lifted and another action executed.
            The executions and liftings thus form a stack.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.ReentrancyGuard.myQueueActions">
            <summary>
            Actions that are coming through the <see cref="M:JetBrains.Threading.ReentrancyGuard.Queue(System.String,System.Action)"/> method.
            Added from any thread, peeked/removed from the UI thread.
            
            </summary>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyGuard.#ctor">
            <summary>
            Constructs an instance for the current thread, on first request to <see cref="P:JetBrains.Threading.ReentrancyGuard.Current"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyGuard.AllowNestedExecution(System.String,System.Action)">
            <summary>
            When under an <see cref="M:JetBrains.Threading.ReentrancyGuard.Execute(System.String,System.Action)"/> reentrancy guard, temporarily lifts the reentrancy constraints and allows other <see cref="M:JetBrains.Threading.ReentrancyGuard.Execute(System.String,System.Action)"/> to be called, as if there were no executions on the stack.
            This function can be called under execution only.
            </summary>
            <param name="name">A name that identifies this constraint lifting.</param>
            <param name="action">The activity to be executed with the constraint lifted.</param>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyGuard.AssertGuarded">
            <summary>
            Checks that the activity is executed on the proper thread and is being guarded from reentrancy.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyGuard.Execute(System.String,System.Action)">
            <summary>
            <para>If called on the guarded thread and <see cref="P:JetBrains.Threading.ReentrancyGuard.CanExecuteNow"/>, executes the <paramref name="action"/> immediately and synchronously.</para>
            <para>Otherwise, throws an exception and doesn't execute or queue the action.</para>
            <para>Throws exceptions on fatal errors, traps exceptions from the <param name="action"/> proper.</para>
            </summary>
            <param name="name">Identifies the action being executed.</param>
            <param name="action">The action to execute. Exceptions will be trapped.</param>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyGuard.ExecuteOrQueue(System.String,System.Action)">
            <summary>
            <para>Executes an action on the guarded thread in a reentrant-safe manner.</para>
            <para>If called on a foreign thread, executes the action asynchronously, like <see cref="M:JetBrains.Threading.ReentrancyGuard.Queue(System.String,System.Action)"/>.</para>
            <para>If called on the guarded thread, checks for reentrancy. If there are no guarded executions on the stack yet, executes the action immediately and synchronously. Otherwise, postpones the action for asynchronous execution, like <see cref="M:JetBrains.Threading.ReentrancyGuard.Queue(System.String,System.Action)"/> does.</para>
            </summary>
            <param name="name">Identifies the action in the queue.</param>
            <param name="action">The action to execute. Exceptions will be trapped.</param>
            <returns><c>True</c> if executed immediately, <c>False</c> if queued (<see cref="M:JetBrains.Threading.ReentrancyGuard.TryExecute(System.String,System.Action)"/>-compatible behavior).</returns>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyGuard.PumpQueue(System.Int32)">
            <summary>
            Causes the internal guard actions queue to pump, and actions to execute.
            The function must be called under good conditions (<see cref="P:JetBrains.Threading.ReentrancyGuard.CanExecuteNow"/>).
            </summary>
            <param name="limit">The maximum number of actions to execute, or <c>0</c> for the default internal value.</param>
            <returns>The number of actions actually executed.</returns>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyGuard.Queue(System.String,System.Action)">
            <summary>
            <para>Queues the action to execute asynchronously on the guarded thread, as soon as possible.</para>
            <para>The reentrancy between guarded actions is prevented.</para>
            </summary>
            <param name="name">Identifies the action in the queue.</param>
            <param name="action">The action to execute. Exceptions will be trapped.</param>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyGuard.TryExecute(System.String,System.Action)">
            <summary>
            <para>If called on the guarded thread and <see cref="P:JetBrains.Threading.ReentrancyGuard.CanExecuteNow"/>, executes the <paramref name="action"/> immediately and synchronously and returns <c>True</c>.</para>
            <para>Otherwise, immediately returns <c>False</c> and doesn't execute or queue the action.</para>
            </summary>
            <param name="name">Identifies the action being executed.</param>
            <param name="action">The action to execute. Exceptions will be trapped.</param>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyGuard.AddExceptionData(System.Exception)">
            <summary>
            Dumps state for an exception.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyGuard.AssertCanExecute(System.String)">
            <summary>
            Check that thread-affinity and reentrancy conditions allow us to execute an action right now.
            </summary>
            <param name="name">Action name, for error-reporting.</param>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyGuard.BeginInvokeExecutePendingActions">
            <summary>
            A method that schedulles execution of the actions queue.
            Called when <see cref="P:JetBrains.Threading.ReentrancyGuard.CanExecuteNow"/> comes true or from within <see cref="M:JetBrains.Threading.ReentrancyGuard.Queue(System.String,System.Action)"/>.
            Can be called on any thread.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyGuard.ExecutePendingActions">
            <summary>
            Executes the pending actions on the guarded thread, if possible.
            </summary>
        </member>
        <member name="P:JetBrains.Threading.ReentrancyGuard.Current">
            <summary>
            <para>Gets or creates a reentrancy guard for the current thread.</para>
            <para>Take caution if your code might execute on other threads. In these cases you might want to explicitly take the Guard for the desired thread instead of using <see cref="P:JetBrains.Threading.ReentrancyGuard.Current"/>.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Threading.ReentrancyGuard.CanExecuteNow">
            <summary>
            Tells whether the guard can execute actions at this moment, which means there's no action currently executing. Readonly.
            </summary>
            <seealso cref="P:JetBrains.Threading.ReentrancyGuard.IsExecuting"/>
        </member>
        <member name="P:JetBrains.Threading.ReentrancyGuard.CurrentActionName">
            <summary>
            <para>Gets a readonly property that tells the name of the current action (an execution or a lifting of the reentrancy constraint, see <see cref="P:JetBrains.Threading.ReentrancyGuard.IsExecuting"/>), or <c>Null</c> if neither is present.</para>
            <para>This is always non-<c>Null</c> when <see cref="P:JetBrains.Threading.ReentrancyGuard.IsExecuting"/>, but could be also non-<c>Null</c> when not <see cref="P:JetBrains.Threading.ReentrancyGuard.IsExecuting"/> (if <see cref="M:JetBrains.Threading.ReentrancyGuard.AllowNestedExecution(System.String,System.Action)"/> was called).</para>
            </summary>
        </member>
        <member name="P:JetBrains.Threading.ReentrancyGuard.Dispatcher">
            <summary>
            Gets the dispatcher for the thread guarded by this instance.
            </summary>
        </member>
        <member name="P:JetBrains.Threading.ReentrancyGuard.IsEmpty">
            <summary>
            Gets whether there are no pending actions on the Reentrancy Guard queue.
            All of the deferred actions go through this queue.
            </summary>
        </member>
        <member name="P:JetBrains.Threading.ReentrancyGuard.IsExecuting">
            <summary>
            <para>Gets whether a reentrant-safe execution is currently in progress.</para>
            <para>If <c>True</c>, then <see cref="P:JetBrains.Threading.ReentrancyGuard.CanExecuteNow"/> is <c>False</c>.</para>
            <para>As the <see cref="M:JetBrains.Threading.ReentrancyGuard.AllowNestedExecution(System.String,System.Action)"/> method that “lifts” the guard, this flag falls and only becomes <c>True</c> when an execution, not lifting, is on top of the executions stack.</para>
            </summary>
        </member>
        <member name="T:JetBrains.Threading.ReentrancyGuard.ExecutionStack">
            <summary>
            Encapsulates the stack of executions and reentrancy liftings.
            Supposed number of items: less than 10.
            Main-thread-only.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.ReentrancyGuard.ExecutionStack.myCurrentActionName">
            <summary>
            Backend for <see cref="P:JetBrains.Threading.ReentrancyGuard.ExecutionStack.CurrentActionName"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.ReentrancyGuard.ExecutionStack.myIsExecuting">
            <summary>
            Backend for <see cref="P:JetBrains.Threading.ReentrancyGuard.ExecutionStack.IsExecuting"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.ReentrancyGuard.ExecutionStack.myStack">
            <summary>
            Storage for executions and liftings.
            An execution is added with <see cref="M:JetBrains.Threading.ReentrancyGuard.Execute(System.String,System.Action)"/>, and a lifting with <see cref="M:JetBrains.Threading.ReentrancyGuard.AllowNestedExecution(System.String,System.Action)"/>. An execution prevents other executions, and a lifting allows them.
            An execution can only be added into an empty stack or on top of a lifting, and a lifting can only be added on top of an execution.
            Thus, the bottom of the stack and every even-indexed item is an execution, and every odd-indexed item is a lifting.
            Thread safety: changes only on the home thread (remember, this is the execution stack, not the actions queue). Safe to read on the home thread only. Lock-free.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.ReentrancyGuard.ExecutionStack.IsExecutingFalling">
            <summary>
            Event.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyGuard.ExecutionStack.PopExecution(System.String)">
            <summary>
            Removes a recorded execution from the stack.
            Home thread only.
            </summary>
            <param name="name">Item name.</param>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyGuard.ExecutionStack.PushExecution(System.String)">
            <summary>
            Records an execution on the stack.
            Home thread only.
            </summary>
            <param name="name">Item name.</param>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyGuard.ExecutionStack.PushLifting(System.String)">
            <summary>
            Records a reentrancy constraint lifting on the stack, removes upon retval disposal.
            Home thread only.
            </summary>
            <param name="name">Item name.</param>
            <remarks>Note: PushExecution has been broken into Push/Pop to avoid creating the disposable object. A lifting is a much rarer thing, let's keep the safer code here.</remarks>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyGuard.ExecutionStack.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.Threading.ReentrancyGuard.ExecutionStack.CurrentActionName">
            <summary>
            The name of the execution or lifting currently active (on top of the execution stack), or <c>Null</c> if there's none such.
            </summary>
            <remarks>
            This property could be evaluated on demand, but this is not thread-safe, so we make a copy in a thread-safe context (execution stack is only modified on the home thread).
            </remarks>
        </member>
        <member name="P:JetBrains.Threading.ReentrancyGuard.ExecutionStack.IsExecuting">
            <summary>
            Tells whether an execution is currently in progress.
            This means that the stack is not empty (an <see cref="M:JetBrains.Threading.ReentrancyGuard.Execute(System.String,System.Action)"/> is running), and the execution guard has not been lifted with <see cref="M:JetBrains.Threading.ReentrancyGuard.AllowNestedExecution(System.String,System.Action)"/> since the last <see cref="M:JetBrains.Threading.ReentrancyGuard.Execute(System.String,System.Action)"/>.
            </summary>
            <remarks>
            Technically, tells whether the number of items in the stack is even.
            This property could be evaluated on demand, but this is not thread-safe, so we make a copy in a thread-safe context (execution stack is only modified on the home thread).
            </remarks>
        </member>
        <member name="T:JetBrains.Threading.ReentrancyGuard.ExecutionStack.StackEventsLite`1">
            <summary>
            A stack data structure with events, lite version (compared to <see cref="T:JetBrains.DataFlow.CollectionEvents`1"/> and others), without interlocking.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.ReentrancyGuard.ExecutionStack.StackEventsLite`1.AddRemove">
            <summary>
            Fires when an add/remove operation is performed on the storage.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyGuard.ExecutionStack.StackEventsLite`1.Add(`0)">
            <summary>
            Adds an item to the stack. Updates the properties.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyGuard.ExecutionStack.StackEventsLite`1.PushAdd(`0)">
            <summary>
            An <see cref="M:JetBrains.Threading.ReentrancyGuard.ExecutionStack.StackEventsLite`1.Add(`0)"/>-<see cref="M:JetBrains.Threading.ReentrancyGuard.ExecutionStack.StackEventsLite`1.Remove(`0)"/> pair of actions.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyGuard.ExecutionStack.StackEventsLite`1.Remove(`0)">
            <summary>
            Removes an item from the stack. Updates the properties.
            </summary>
            <param name="item">Ensures that we removed exactly the same name we added (valid bracket structure).</param>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyGuard.ExecutionStack.StackEventsLite`1.TryGetLast">
            <summary>
            Peeks the item on top of the stack. <c>Null</c> if empty.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyGuard.ExecutionStack.StackEventsLite`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyGuard.ExecutionStack.StackEventsLite`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.Threading.ReentrancyGuard.ExecutionStack.StackEventsLite`1.Count">
            <summary>
            Gets the number of items in the stack.
            </summary>
        </member>
        <member name="T:JetBrains.Threading.ReentrancyGuard.InterlockedQueue">
            <summary>
            Encapsulates the queue in a thread-safe manner.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.ReentrancyGuard.InterlockedQueue.myLock">
            <summary>
            Lock for protecting the data structure.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.ReentrancyGuard.InterlockedQueue.myStorage">
            <summary>
            The internal storage. Must be protected by <see cref="F:JetBrains.Threading.ReentrancyGuard.InterlockedQueue.myLock"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyGuard.InterlockedQueue.Enqueue(JetBrains.Threading.ReentrancyGuard.QueuedAction)">
            <summary>
            Adds an item to the end of the queue.
            Thread-safe.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyGuard.InterlockedQueue.TryDequeue(System.Action{JetBrains.Threading.ReentrancyGuard.QueuedAction})">
            <summary>
            Removes the first item in the queue. Does not throw if the queue is empty.
            Thread-safe.
            <param name="funcVisitor">A handler that will be executed on the removed item, in case there were any items in the queue.</param>
            </summary>
            <returns>Whether the queue was not empty and anything were executed.</returns>
        </member>
        <member name="P:JetBrains.Threading.ReentrancyGuard.InterlockedQueue.IsEmpty">
            <summary>
            Gets whether the queue currently has no items in it.
            Thread-safe.
            </summary>
        </member>
        <member name="T:JetBrains.Threading.ReentrancyGuard.NoReentrancySynchronizationContext">
            <summary>
            A synchro-context to be set on the thread while executing the no-reentrancy action.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyGuard.NoReentrancySynchronizationContext.#ctor">
            <summary>
            Attaches to the current thread.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyGuard.NoReentrancySynchronizationContext.#ctor(JetBrains.Threading.JetDispatcher)">
            <summary>
            Attaches to some given thread (needed for <see cref="M:JetBrains.Threading.ReentrancyGuard.NoReentrancySynchronizationContext.CreateCopy"/>).
            </summary>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyGuard.NoReentrancySynchronizationContext.Push">
            <summary>
            Pushes/pops the context on the current thread.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyGuard.NoReentrancySynchronizationContext.WaitForMultipleObjectsEx(System.Int32,System.IntPtr[],System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Interop.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyGuard.NoReentrancySynchronizationContext.CreateCopy">
            <summary>
            Clone.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyGuard.NoReentrancySynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Use the dispatcher.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyGuard.NoReentrancySynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Use the dispatcher.
            </summary>
        </member>
        <member name="T:JetBrains.Threading.ReentrancyGuard.QueuedAction">
            <summary>
            Implements a data item that waits on the queue.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.ReentrancyGuard.QueuedAction.Action">
            <summary>
            The method to execute.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.ReentrancyGuard.QueuedAction.Name">
            <summary>
            User-assigned name of the action.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyGuard.QueuedAction.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> containing a fully qualified type name.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.Threading.ReentrancyGuardTimer">
            <summary>
            A timer that executes its activities under a reentrancy guard and (optionally) suspends the activity when the application is inactive, after executing the action once.
            This class must be disposed of.
            Can be used on the primary thread only.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.ReentrancyGuardTimer.InactiveExecutionTime">
            <summary>
            When the <see cref="F:JetBrains.Threading.ReentrancyGuardTimer.Tick"/> event is about to fire, is set to <see cref="P:System.DateTime.Now"/> if the app is inactive, or to a <c>Null</c> value if the app is active.
            Helps with the app-inactivity execution conditions: stop after first time inactive, fire if missed an execution when get active.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.ReentrancyGuardTimer.IsNotWaitingTimer">
            <summary>
            Raised when we're not waiting for the timer event, but sitting on the <see cref="T:JetBrains.Threading.ReentrancyGuard"/> queue or executing.
            In this state, the new timer events are ignored to avoid parallel execution.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.ReentrancyGuardTimer.IsWinFormsTimerEnabled">
            <summary>
            Tells whether the underlying WinForms <see cref="F:JetBrains.Threading.ReentrancyGuardTimer.myTimer"/> should be ON. Applied to the timer offstack to avoid pumping on <see cref="M:System.Windows.Forms.Timer.Stop"/>.
            Is composed from all the states: <see cref="F:JetBrains.Threading.ReentrancyGuardTimer.IsEnabled"/>, <see cref="F:JetBrains.Threading.ReentrancyGuardTimer.IsApplicationActive"/>, <see cref="F:JetBrains.Threading.ReentrancyGuardTimer.InactiveExecutionTime"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.ReentrancyGuardTimer.myReentrancyGuard">
            <summary>
            Identifies the owning thread.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.ReentrancyGuardTimer.myTimer">
            <summary>
            The timer implementation.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.ReentrancyGuardTimer.Interval">
            <summary>
            Gets or sets the timer interval.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.ReentrancyGuardTimer.IsApplicationActive">
            <summary>
            Allows to suspend the timer execution when application gets inactive.
            It's different from <see cref="F:JetBrains.Threading.ReentrancyGuardTimer.IsEnabled"/> in that after <see cref="F:JetBrains.Threading.ReentrancyGuardTimer.IsApplicationActive"/> falls, the action executes once more until the timer is suspended. When the application gets back active, if the action execution was missed, it's executed immediately.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.ReentrancyGuardTimer.IsEnabled">
            <summary>
            Gets or sets whether the timer is currently enabled.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.ReentrancyGuardTimer.Tick">
            <summary>
            Fires when the timer ticks, under a reentrancy guard.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyGuardTimer.OnTimerTick">
            <summary>
            Tick of the underlying winforms timer. Unguarded.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyGuardTimer.OnTimerTickReentrantSafe">
            <summary>
            Executes on the timer tick, but under the reentrancy guard.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyGuardTimer.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Threading.ReentrancyGuardTimer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.Threading.ReentrancyGuardTimer.Name">
            <summary>
            The name of this instance.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Concurrency.SpinWaitLockRef">
            <summary>
            A reference wrapper for the <see cref="T:JetBrains.Util.Concurrency.SpinWaitLock"/> for those usages that don't mind creating a new object.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Concurrency.SpinWaitLockRef.Enter">
            <summary>
            Locks.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Concurrency.SpinWaitLockRef.Exit">
            <summary>
            Unlocks.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Concurrency.SpinWaitLockRef.Push">
            <summary>
            Pushes an <see cref="M:JetBrains.Util.Concurrency.SpinWaitLockRef.Enter"/>/<see cref="M:JetBrains.Util.Concurrency.SpinWaitLockRef.Exit"/> bracket.
            </summary>
        </member>
        <member name="T:JetBrains.Threading.ThreadAccessException">
            <summary>
            Reports a thread access inconsistency.
            </summary>
        </member>
        <member name="P:JetBrains.Threading.ThreadAccessException.ThreadDesired">
            <summary>
            Gets the thread the action was expected to execute on. Optional.
            </summary>
        </member>
        <member name="P:JetBrains.Threading.ThreadAccessException.ThreadWrong">
            <summary>
            Gets the thread on which the action was prevented from being executed.
            </summary>
        </member>
        <member name="T:JetBrains.Threading.WeakTimer">
            <summary>
            A timer that is not held on a strong reference by the system.
            If there are no more root paths to your class that owns the timer, the ticks stop automatically.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.WeakTimer.Interval">
            <summary>
            Gets or sets the timer ticks interval.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.WeakTimer.IsEnabled">
            <summary>
            Gets or sets whether the timer is currently running.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.WeakTimer.Tick">
            <summary>
            Fires when the timer ticks.
            Sinking this event does not hold you on a permanent GC root.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.WeakTimer.myStrongTimer">
            <summary>
            This timer is held on a strong reference, but it does not hold us.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.WeakTimer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.DataFlow.AddRemove">
            <summary>
            Defines whether the action is <see cref="F:JetBrains.DataFlow.AddRemove.Add"/> or <see cref="F:JetBrains.DataFlow.AddRemove.Remove"/>.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.AddRemove.Add">
            <summary>
            Adding.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.AddRemove.Remove">
            <summary>
            Removing.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.AddRemoveEventArgs`1">
            <summary>
            Notifies that the item is being added to or removed from an event-equipped collection.
            </summary>
            <typeparam name="TValue">Collection values type.</typeparam>
        </member>
        <member name="T:JetBrains.DataFlow.EventArgs`1">
            <summary>
            An event arguments class with one typed value.
            </summary>
            <typeparam name="TValue">Type of the value.</typeparam>
        </member>
        <member name="M:JetBrains.DataFlow.EventArgs`1.#ctor(`0)">
            <summary>
            Constructs the universal event args.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.EventArgs`1.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.AddRemoveEventArgs`1.CreateAcknowledgementArgs(JetBrains.DataFlow.ICollectionEvents{`0},JetBrains.DataFlow.AddRemove,System.Object,System.Action{`0}@)">
            <summary>
            Creates the arguments specifically suited for acknowledgement, with the specific flag set and an ability to change the value in order to reuse the arguments object.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.AddRemoveEventArgs`1.Action">
            <summary>
            Gets the action (either <see cref="F:JetBrains.DataFlow.AddRemove.Add"/> or <see cref="F:JetBrains.DataFlow.AddRemove.Remove"/>).
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.AddRemoveEventArgs`1.Collection">
            <summary>
            Gets the owning event-equipped collection.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.AddRemoveEventArgs`1.Cookie">
            <summary>
            An optional cookie specified with the operation.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.AddRemoveEventArgs`1.IsAcknowledging">
            <summary>
            Gets whether the handler is being called in the Acknowledgement mode, that is, the items appear/disappear in the handler's view not because they're being put/removed into the collection, but because the collection itself comes/goes into view of the handler, with all of its items. This happens when you sink/unsink the signal.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.AddRemoveEventArgs`1.IsAdding">
            <summary>
            Gets whether <see cref="P:JetBrains.DataFlow.AddRemoveEventArgs`1.Action"/> is actually <see cref="F:JetBrains.DataFlow.AddRemove.Add"/>.
            Exactly one of <see cref="P:JetBrains.DataFlow.AddRemoveEventArgs`1.IsAdding"/> and <see cref="P:JetBrains.DataFlow.AddRemoveEventArgs`1.IsRemoving"/> is guaranteed to be <c>True</c>.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.AddRemoveEventArgs`1.IsRemoving">
            <summary>
            Gets whether <see cref="P:JetBrains.DataFlow.AddRemoveEventArgs`1.Action"/> is actually <see cref="F:JetBrains.DataFlow.AddRemove.Remove"/>.
            Exactly one of <see cref="P:JetBrains.DataFlow.AddRemoveEventArgs`1.IsAdding"/> and <see cref="P:JetBrains.DataFlow.AddRemoveEventArgs`1.IsRemoving"/> is guaranteed to be <c>True</c>.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.AddRemoveIndexEventArgs`1">
            <summary>
            Notifies that the item is being added to or removed from an event-equipped list.
            </summary>
            <typeparam name="TValue">Collection values type.</typeparam>
        </member>
        <member name="M:JetBrains.DataFlow.AddRemoveIndexEventArgs`1.CreateAcknowledgementArgs(JetBrains.DataFlow.ICollectionEvents{`0},JetBrains.DataFlow.AddRemove,System.Object,System.Action{`0,System.Int32}@)">
            <summary>
            Creates the arguments specifically suited for acknowledgement, with the specific flag set and an ability to change the value in order to reuse the arguments object.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.AddRemoveIndexEventArgs`1.Index">
            <summary>
            Gets the index at which the change is happening.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.BeforeAddRemoveEventArgs`1">
            <summary>
            Notifies that the item will be added to or removed from an event-equipped collection, and allows to cancel this action.
            </summary>
            <typeparam name="TValue">Collection values type.</typeparam>
        </member>
        <member name="M:JetBrains.DataFlow.BeforeAddRemoveEventArgs`1.CreateAcknowledgementArgs(JetBrains.DataFlow.ICollectionEvents{`0},JetBrains.DataFlow.AddRemove,System.Object,System.Action{`0}@)">
            <summary>
            Creates the arguments specifically suited for acknowledgement, with the specific flag set and an ability to change the value in order to reuse the arguments object.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.BeforeAddRemoveEventArgs`1.Cancel">
            <summary>
            Gets or sets whether the change will be cancelled.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.BeforeAddRemoveIndexEventArgs`1">
            <summary>
            Notifies that the item will be added to or removed from an event-equipped list, and allows to cancel this action.
            </summary>
            <typeparam name="TValue">Collection values type.</typeparam>
        </member>
        <member name="M:JetBrains.DataFlow.BeforeAddRemoveIndexEventArgs`1.CreateAcknowledgementArgs(JetBrains.DataFlow.ICollectionEvents{`0},JetBrains.DataFlow.AddRemove,System.Object,System.Action{`0,System.Int32}@)">
            <summary>
            Creates the arguments specifically suited for acknowledgement, with the specific flag set and an ability to change the value in order to reuse the arguments object.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.BeforeAddRemoveIndexEventArgs`1.Index">
            <summary>
            Gets the index at which the change is happening.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.BeforePropertyChangedEventArgs`1">
            <summary>
            Notifies of the intended property change.
            Comes before the <see cref="T:JetBrains.DataFlow.PropertyChangedEventArgs`1"/> and the actual property change, and allows to cancel the change.
            Acknowledges the fact that the property change can be either from “no value” to something, or from something to “no value”.
            </summary>
            <typeparam name="TValue">Type of the value.</typeparam>
        </member>
        <member name="T:JetBrains.DataFlow.PropertyChangedEventArgs`1">
            <summary>
            Notifies of the property change.
            Acknowledges the fact that the property change can be either from “no value” to something, or from something to “no value”.
            </summary>
            <typeparam name="TValue">Type of the value.</typeparam>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyChangedEventArgs`1.CreateBoth(JetBrains.DataFlow.Property{`0},`0,`0,System.Object)">
            <summary>
            Creates an instance that has both values defined.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyChangedEventArgs`1.CreateNew(JetBrains.DataFlow.Property{`0},`0,System.Object)">
            <summary>
            Creates an instance that has only the new value defined.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyChangedEventArgs`1.CreateOld(JetBrains.DataFlow.Property{`0},`0,System.Object)">
            <summary>
            Creates an instance that has only the old value defined.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.PropertyChangedEventArgs`1.Cookie">
            <summary>
            Gets the property modification cookie (a freehand parameter).
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.PropertyChangedEventArgs`1.HasNew">
            <summary>
            Gets whether the property will have a new value, ie <see cref="P:JetBrains.DataFlow.PropertyChangedEventArgs`1.New"/> is defined.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.PropertyChangedEventArgs`1.HasOld">
            <summary>
            Gets whether the property had an old value, ie <see cref="P:JetBrains.DataFlow.PropertyChangedEventArgs`1.Old"/> is defined.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.PropertyChangedEventArgs`1.IsAcknowledging">
            <summary>
            Gets whether the handler is being called in the acknowledgement mode, that is, because the property is coming into view or going off the view, and its value effectively changes either from “not known yet” to some value, or the other way.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.PropertyChangedEventArgs`1.New">
            <summary>
            Gets the new value of the property.
            It's an error to request the value if not <see cref="P:JetBrains.DataFlow.PropertyChangedEventArgs`1.HasNew"/>.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.PropertyChangedEventArgs`1.Old">
            <summary>
            Gets the old value of the property.
            It's an error to request the value if not <see cref="P:JetBrains.DataFlow.PropertyChangedEventArgs`1.HasOld"/>.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.PropertyChangedEventArgs`1.Property">
            <summary>
            Gets the property that has changed.
            You should use the <see cref="P:JetBrains.DataFlow.PropertyChangedEventArgs`1.Old"/> and <see cref="P:JetBrains.DataFlow.PropertyChangedEventArgs`1.New"/> properties on this object instead of quering values from the property directly.
            You should not set new values to the property, unless you're sure you know what you're doing.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.BeforePropertyChangedEventArgs`1.CreateBoth(JetBrains.DataFlow.Property{`0},`0,`0,System.Object)">
            <summary>
            Creates an instance that has both values defined.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.BeforePropertyChangedEventArgs`1.CreateNew(JetBrains.DataFlow.Property{`0},`0,System.Object)">
            <summary>
            Creates an instance that has only the new value defined.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.BeforePropertyChangedEventArgs`1.CreateOld(JetBrains.DataFlow.Property{`0},`0,System.Object)">
            <summary>
            Creates an instance that has only the old value defined.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.BeforePropertyChangedEventArgs`1.Cancel">
            <summary>
            Gets or sets whether the change will be cancelled.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.CancelEventArgs`1">
            <summary>
            An event arguments class with one typed value and the Cancel functionality.
            </summary>
            <typeparam name="TValue">Type of the value.</typeparam>
        </member>
        <member name="P:JetBrains.DataFlow.CancelEventArgs`1.Cancel">
            <summary>
            Gets or sets whether the change will be cancelled.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.CollectionBridge`2">
            <summary>
            Bridges two unordered collection of items.
            The items flow from the first collection to the second one. Conversion and filtering is supported on the items.
            </summary>
            <typeparam name="TSource">Type of the source collection items.</typeparam>
            <typeparam name="TTarget">Type of the target collection items.</typeparam>
        </member>
        <member name="F:JetBrains.DataFlow.CollectionBridge`2.myMapBothWays">
            <summary>
            Two-way map, non-Null only in two-way mode.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.CollectionBridge`2.myMapSourceToTarget">
            <summary>
            One-way map, non-Null only in one-way mode.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.CollectionBridge`2.#ctor(JetBrains.DataFlow.CollectionBridge.MappingInfo,JetBrains.DataFlow.ICollectionEvents{`0},JetBrains.DataFlow.ICollectionEvents{`1},System.Func{`0,`1},System.Object)">
            <summary>
            Wires up the bridge.
            </summary>
            <param name="mappinginfo">Specifies which mapping information is maintained by the bridge — source-to-target only, or both ways. one-way is cheaper.</param>
            <param name="source">The source collection.</param>
            <param name="target">The target collection.</param>
            <param name="funcConverter">The conversion operator.</param>
            <param name="oTaregtModificationCookie">An otpional cookie to be passed to the <paramref name="target"/> collection when performing modification operations on it.</param>
        </member>
        <member name="M:JetBrains.DataFlow.CollectionBridge`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.DataFlow.CollectionBridge`2.AllowForeignTargetRemovals">
            <summary>
            <para>Whether the bridged items could be removed from the target collection by a foreign actor, and the bridge should ignore such occurences.</para>
            <para>When <c>True</c>, <see cref="F:JetBrains.DataFlow.AddRemove.Remove"/> does nothing when the target item is already not there. This is the default.</para>
            <para>When <c>False</c>, <see cref="F:JetBrains.DataFlow.AddRemove.Remove"/> throws when about to remove a nonexistent item.</para>
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.CollectionBridge`2.MappingInfo">
            <summary>
            Gets which mapping information is maintained by the bridge — source-to-target only, or both ways.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.CollectionBridge`2.MapSourceToTarget">
            <summary>
            Gets the read-only source-to-target mapping info. This one is always available.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.CollectionBridge`2.MapTargetToSource">
            <summary>
            Gets the read-only target-to-source mapping. Available only if <see cref="P:JetBrains.DataFlow.CollectionBridge`2.MappingInfo"/> is set to <see cref="F:JetBrains.DataFlow.CollectionBridge.MappingInfo.BothWays"/>; in other cases, throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.CollectionBridge`2.Source">
            <summary>
            Gets the source collection.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.CollectionBridge`2.Target">
            <summary>
            Gets the target collection.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.CollectionBridge">
            <summary>
            Supplimentary class for the <see cref="T:JetBrains.DataFlow.CollectionBridge`2"/> utility.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.CollectionBridge.BridgeInto``2(JetBrains.DataFlow.ICollectionEvents{``0},JetBrains.DataFlow.ICollectionEvents{``1})">
            <summary>
            Mirrors one collection into another.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.CollectionBridge.BridgeInto``2(JetBrains.DataFlow.ICollectionEvents{``0},JetBrains.DataFlow.ICollectionEvents{``1},System.Func{``0,``1})">
            <summary>
            Mirrors one collection into another thru a converter.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.CollectionBridge.BridgeInto``2(JetBrains.DataFlow.ICollectionEvents{``0},JetBrains.DataFlow.ICollectionEvents{``1},System.Func{``0,``1},System.Object)">
            <summary>
            Mirrors one collection into another thru a converter.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.CollectionBridge.MappingInfo">
            <summary>
            Kind of info about collections mapping to be maintained by the bridge.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.CollectionBridge.MappingInfo.SourceToTarget">
            <summary>
            There's only data for translating from the source collection to the target one.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.CollectionBridge.MappingInfo.BothWays">
            <summary>
            There's data for translating both from source to target and from target to source collection items.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.CollectionEvents`1">
            <summary>
            A collection that fires events when items are added or removed.
            </summary>
            <typeparam name="TValue">Collection values type.</typeparam>
        </member>
        <member name="T:JetBrains.DataFlow.ICollectionEvents`1">
            <summary>
            A collection that fires events when items are added or removed.
            </summary>
            <typeparam name="TValue">Collection values type.</typeparam>
        </member>
        <member name="M:JetBrains.DataFlow.ICollectionEvents`1.Add(`0,System.Object)">
            <summary>
            Attempts to add the item to the collection.
            </summary>
            <param name="value">The value to be added.</param>
            <param name="cookie">An optional cookie that comes along with the notification events data.</param>
            <returns>Whether the item was added to the collection. An addition can be cancelled by the duplicates merger or the before-added handlers.</returns>
        </member>
        <member name="M:JetBrains.DataFlow.ICollectionEvents`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Executes the <see cref="M:JetBrains.DataFlow.ICollectionEvents`1.Add(`0,System.Object)"/> operation for all the elements in the given collection.
            </summary>
            <param name="items">The collection whose elements should be added.</param>
        </member>
        <member name="M:JetBrains.DataFlow.ICollectionEvents`1.Modify(JetBrains.DataFlow.AddRemove,`0,System.Object)">
            <summary>
            A universal method for modifications on the collection. Useful for data flow between the collections, when <see cref="P:JetBrains.DataFlow.ICollectionEvents`1.AddRemove"/> signal handler is pumping into another collection.
            </summary>
            <param name="action">Whether to add or remove the item.</param>
            <param name="item">The item to add or remove.</param>
            <param name="cookie">The optional modification cookie.</param>
            <returns>Success code.</returns>
        </member>
        <member name="M:JetBrains.DataFlow.ICollectionEvents`1.Push(`0,System.Object)">
            <summary>
            Attempts to add the item to the collection.
            </summary>
            <param name="value">The value to be added.</param>
            <param name="cookie">An optional cookie that comes along with the notification events data.</param>
            <returns>If the item was added to the collection (not cancelled by the duplicates merger or the before-added handlers), returns an object that removes the item from the collection on <see cref="M:System.IDisposable.Dispose"/>. Otherwise, returns a dummy <see cref="T:System.IDisposable"/>.</returns>
        </member>
        <member name="M:JetBrains.DataFlow.ICollectionEvents`1.Push(`0)">
            <summary>
            Attempts to add the item to the collection.
            </summary>
            <param name="value">The value to be added.</param>
            <returns>If the item was added to the collection (not cancelled by the duplicates merger or the before-added handlers), returns an object that removes the item from the collection on <see cref="M:System.IDisposable.Dispose"/>. Otherwise, returns a dummy <see cref="T:System.IDisposable"/>.</returns>
        </member>
        <member name="M:JetBrains.DataFlow.ICollectionEvents`1.Remove(`0,System.Object)">
            <summary>
            Attempts to remove a value from the collection.
            </summary>
            <param name="value">The value to be removed.</param>
            <param name="cookie">An optional cookie that comes along with the notification events data.</param>
            <returns>Whether the item was removed from the collection. A removal may fail either if the item is missing from the collection, or the before-removed handlers have cancelled the operation.</returns>
        </member>
        <member name="P:JetBrains.DataFlow.ICollectionEvents`1.AddRemove">
            <summary>
            Fires when an item is added or removed to your view on the collection.
            Throwing an exception does not prevent the item from being added or other handlers from being called.
            The event supports acknowledgement, which means that when you sink the event, all of the items currently in collection come into your view on the collection, so the add is fired for each. Similarly, remove is fired when you unsink and all of the elements go away from your view on the collection.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.ICollectionEvents`1.BeforeAddRemove">
            <summary>
            Fires before an item is added or removed.
            To prevent the add/remove operation, set <see cref="P:JetBrains.DataFlow.BeforeAddRemoveEventArgs`1.Cancel"/> to <c>True</c> (decline the operation silently) or throw an exception (the exception is let out to the caller). 
            After the first handler to cancel the operation, the remaining handlers may not be called.
            No <see cref="P:JetBrains.DataFlow.ICollectionEvents`1.AddRemove"/> are guaranteed to be executed if the operation is cancelled.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.ICollectionEvents`1.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.ICollectionEvents`1.Id">
            <summary>
            Gets the identification for this list.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.CollectionEvents`1.myStorage">
            <summary>
            Sync thru <see cref="F:JetBrains.DataFlow.CollectionEvents`1.myLock"/>.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.CollectionEvents`1.#ctor(System.String,System.Collections.Generic.ICollection{`0},System.Boolean)">
            <summary>
            Initializes the collection by giving the underlying storage that also implements the collection interface.
            </summary>
            <param name="id">An unique identifier for the list, to tell it apart in data flow chains.</param>
            <param name="storage">The underlying collection, all the operations will be relayed to it.</param>
            <param name="bUniqueItems">Whether the <see cref="M:JetBrains.DataFlow.CollectionEvents`1.Add(`0)"/> method should abort silently if the collection already <see cref="M:JetBrains.DataFlow.CollectionEvents`1.Contains(`0)"/> the item being added.</param>
        </member>
        <member name="M:JetBrains.DataFlow.CollectionEvents`1.#ctor(JetBrains.DataFlow.PropertyId{`0},System.Collections.Generic.ICollection{`0},System.Boolean)">
            <summary>
            Initializes the collection by giving the underlying storage that also implements the collection interface.
            </summary>
            <param name="id">An unique identifier for the list, to tell it apart in data flow chains.</param>
            <param name="storage">The underlying collection, all the operations will be relayed to it.</param>
            <param name="bUniqueItems">Whether the <see cref="M:JetBrains.DataFlow.CollectionEvents`1.Add(`0)"/> method should abort silently if the collection already <see cref="M:JetBrains.DataFlow.CollectionEvents`1.Contains(`0)"/> the item being added.</param>
        </member>
        <member name="M:JetBrains.DataFlow.CollectionEvents`1.#ctor(System.String)">
            <summary>
            Creates a collection that is based on a <see cref="T:System.Collections.Generic.List`1"/> and merges duplicate items.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.CollectionEvents`1.#ctor(JetBrains.DataFlow.PropertyId{`0})">
            <summary>
            Creates a collection that is based on a <see cref="T:System.Collections.Generic.List`1"/> and merges duplicate items.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.CollectionEvents`1.FireAddRemove(JetBrains.DataFlow.AddRemove,`0,System.Object)">
            <summary>
            Fires the <see cref="P:JetBrains.DataFlow.CollectionEvents`1.AddRemove"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.CollectionEvents`1.FireBeforeAddRemove(JetBrains.DataFlow.AddRemove,`0,System.Object)">
            <summary>
            Fires the <see cref="P:JetBrains.DataFlow.CollectionEvents`1.BeforeAddRemove"/> event.
            Returns whether the operation has been cancelled.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.CollectionEvents`1.FireCollectionChanged(`0,JetBrains.DataFlow.AddRemove)">
            <summary>
            Fires the <see cref="E:System.Collections.Specialized.Dummy.INotifyCollectionChanged.CollectionChanged"/> event in case the index is not known.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.CollectionEvents`1.FireCollectionChanged(`0,System.Int32,JetBrains.DataFlow.AddRemove)">
            <summary>
            Fires the <see cref="E:System.Collections.Specialized.Dummy.INotifyCollectionChanged.CollectionChanged"/> event in case the index is known.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.CollectionEvents`1.FirePropertyChanged(System.String)">
            <summary>
            Fires the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.CollectionEvents`1.InternalAdd(`0,System.Object)">
            <summary>
            One of the core methods that implement the actual functionality.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.CollectionEvents`1.InternalRemove(`0,System.Object)">
            <summary>
            One of the core methods that implement the actual functionality.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.CollectionEvents`1.OnAcknowledgeSinkAddRemove(System.Action{JetBrains.DataFlow.AddRemoveEventArgs{`0}},JetBrains.DataFlow.AddRemove)">
            <summary>
            Ackhowledges the handler.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.CollectionEvents`1.OnAcknowledgeSinkBeforeAddRemove(System.Action{JetBrains.DataFlow.BeforeAddRemoveEventArgs{`0}})">
            <summary>
            Called when someone attempts to sink the <see cref="P:JetBrains.DataFlow.CollectionEvents`1.BeforeAddRemove"/> signal. Acknowledges the handler.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.CollectionEvents`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.DataFlow.CollectionEvents`1.Add(`0,System.Object)">
            <summary>
            Attempts to add the item to the collection.
            </summary>
            <param name="value">The value to be added.</param>
            <param name="cookie">An optional cookie that comes along with the notification events data.</param>
            <returns>Whether the item was added to the collection. An addition can be cancelled by the duplicates merger or the before-added handlers.</returns>
        </member>
        <member name="M:JetBrains.DataFlow.CollectionEvents`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:JetBrains.DataFlow.CollectionEvents`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Executes the <see cref="M:JetBrains.DataFlow.ICollectionEvents`1.Add(`0,System.Object)"/> operation for all the elements in the given collection.
            </summary>
            <param name="items">The collection whose elements should be added.</param>
        </member>
        <member name="M:JetBrains.DataFlow.CollectionEvents`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:JetBrains.DataFlow.CollectionEvents`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
            
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
        </member>
        <member name="M:JetBrains.DataFlow.CollectionEvents`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:JetBrains.DataFlow.CollectionEvents`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.DataFlow.CollectionEvents`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:JetBrains.DataFlow.CollectionEvents`1.Modify(JetBrains.DataFlow.AddRemove,`0,System.Object)">
            <summary>
            A universal method for modifications on the collection. Useful for data flow between the collections, when <see cref="P:JetBrains.DataFlow.ICollectionEvents`1.AddRemove"/> signal handler is pumping into another collection.
            </summary>
            <param name="action">Whether to add or remove the item.</param>
            <param name="item">The item to add or remove.</param>
            <param name="cookie">The optional modification cookie.</param>
            <returns>Success code.</returns>
        </member>
        <member name="M:JetBrains.DataFlow.CollectionEvents`1.Push(`0,System.Object)">
            <summary>
            Attempts to add the item to the collection.
            </summary>
            <param name="value">The value to be added.</param>
            <param name="cookie">An optional cookie that comes along with the notification events data.</param>
            <returns>If the item was added to the collection (not cancelled by the duplicates merger or the before-added handlers), returns an object that removes the item from the collection on <see cref="M:System.IDisposable.Dispose"/>. Otherwise, returns a dummy <see cref="T:System.IDisposable"/>.</returns>
        </member>
        <member name="M:JetBrains.DataFlow.CollectionEvents`1.Push(`0)">
            <summary>
            Attempts to add the item to the collection.
            </summary>
            <param name="value">The value to be added.</param>
            <returns>If the item was added to the collection (not cancelled by the duplicates merger or the before-added handlers), returns an object that removes the item from the collection on <see cref="M:System.IDisposable.Dispose"/>. Otherwise, returns a dummy <see cref="T:System.IDisposable"/>.</returns>
        </member>
        <member name="M:JetBrains.DataFlow.CollectionEvents`1.Remove(`0,System.Object)">
            <summary>
            Attempts to remove a value from the collection.
            </summary>
            <param name="value">The value to be removed.</param>
            <param name="cookie">An optional cookie that comes along with the notification events data.</param>
            <returns>Whether the item was removed from the collection. A removal may fail either if the item is missing from the collection, or the before-removed handlers have cancelled the operation.</returns>
        </member>
        <member name="M:JetBrains.DataFlow.CollectionEvents`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:JetBrains.DataFlow.CollectionEvents`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.DataFlow.CollectionEvents`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.DataFlow.CollectionEvents`1.ThrowReadonlyFail(JetBrains.DataFlow.BeforeAddRemoveEventArgs{`0},System.Object)">
            <summary>
            Helper to throw an annotated exception whenever a collection fails the readonly lock precondition.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.CollectionEvents`1.ThrowThreadAffinityFail(JetBrains.DataFlow.BeforeAddRemoveEventArgs{`0},System.Threading.Thread)">
            <summary>
            Helper to throw an annotated exception whenever a collection fails the threading affinity precondition.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.CollectionEvents`1.IsNullValuesAllowed">
            <summary>
            Gets whether the <c>Null</c> values are allowed to be added to the collection.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.CollectionEvents`1.IsUniqueItems">
            <summary>
            Gets whether all of the items in the collection should be unique.
            Behavior of the collection in case of duplicates found depends on the 
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.CollectionEvents`1.SuppressItemErrors">
            <summary>
            Gets whether the errors when adding/removing items should be suppressed, and just <c>false</c> returned, when appropriate.
            The errors include “item already added” (when <see cref="P:JetBrains.DataFlow.CollectionEvents`1.IsUniqueItems"/>) or “cannot remove nonexistent item”.
            </summary>
        </member>
        <member name="E:JetBrains.DataFlow.CollectionEvents`1.CollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
            
        </member>
        <member name="E:JetBrains.DataFlow.CollectionEvents`1.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
            
        </member>
        <member name="P:JetBrains.DataFlow.CollectionEvents`1.AddRemove">
            <summary>
            Fires when an item is added (<see cref="P:JetBrains.DataFlow.PropertyChangedEventArgs`2.New"/> is defined) or removed (<see cref="P:JetBrains.DataFlow.PropertyChangedEventArgs`2.Old"/> is defined).
            Throwing an exception does not prevent the item from being added, and other handlers from being called.
            The event supports acquaintance, which means that when you sink it, all the items currently in collection are “added”, and when you unsink, they are “removed” for the particular eventhandler you're adding or removing.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.CollectionEvents`1.BeforeAddRemove">
            <summary>
            Fires before an item is added (<see cref="P:JetBrains.DataFlow.PropertyChangedEventArgs`2.New"/> is defined) or removed (<see cref="P:JetBrains.DataFlow.PropertyChangedEventArgs`2.Old"/> is defined).
            Setting <see cref="P:JetBrains.DataFlow.BeforeAddRemoveEventArgs`1.Cancel"/> to <c>True</c> or throwing an exception prevents the item from being added.
            Note that even though the number of before-handlers called is undefined in such a case, no <see cref="P:JetBrains.DataFlow.CollectionEvents`1.AddRemove"/> handlers are guaranteed to execute if you cancel the operation on the <see cref="P:JetBrains.DataFlow.CollectionEvents`1.BeforeAddRemove"/> event.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.CollectionEvents`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            
        </member>
        <member name="P:JetBrains.DataFlow.CollectionEvents`1.Id">
            <summary>
            Gets the identification for this list.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.CollectionEvents`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.
            </returns>
            
        </member>
        <member name="P:JetBrains.DataFlow.CollectionEvents`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            
            <returns>
            true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.DataFlow.CollectionEvents`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.DataFlow.CollectionValidator">
            <summary>
            Validates collections by preventing certain values from being added or removed.
            Note that for the validator to attach, the original values must all pass the validation.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.CollectionValidator.CreateReadonlyValidator``1(JetBrains.DataFlow.ICollectionEvents{``0},JetBrains.DataFlow.StandardPreconditions.ReadonlyToken)">
            <summary>
            Makes a readonly collection. All the legitimate modifiers must pass the <paramref name="token"/> as an argument.
            If the <paramref name="token"/> is invalid, an exception is thrown.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.CollectionValidator.CreateThreadAffinityValidator``1(JetBrains.DataFlow.ICollectionEvents{``0},System.Threading.Thread)">
            <summary>
            Ensures the <paramref name="collection"/> is modified only on the given <paramref name="thread"/>.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.DataFlowDirection">
            <summary>
            Defines the direction of the data flow between two properties.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.DataFlowDirection.None">
            <summary>
            No synchronization is performed automatically.
            Both bindings can still be invoked manually.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.DataFlowDirection.FromSource">
            <summary>
            A one-way forward data flow from the <see cref="P:JetBrains.DataFlow.PropertyBinding`2.Source"/> to the <see cref="P:JetBrains.DataFlow.PropertyBinding`2.Target"/>.
            The back-way binding can still be invoked manually.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.DataFlowDirection.FromTarget">
            <summary>
            A one-way backward data flow from the <see cref="P:JetBrains.DataFlow.PropertyBinding`2.Target"/> to the <see cref="P:JetBrains.DataFlow.PropertyBinding`2.Source"/>.
            The forward-way binding can still be invoked manually.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.DataFlowDirection.BothWays">
            <summary>
            A two-way data flow from the <see cref="P:JetBrains.DataFlow.PropertyBinding`2.Source"/> to the <see cref="P:JetBrains.DataFlow.PropertyBinding`2.Target"/>, and then back to the <see cref="P:JetBrains.DataFlow.PropertyBinding`2.Source"/>.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.DictionaryEvents`2">
            <summary>
            A dictionary that fires events when items are added or removed.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.IDictionaryEvents`2">
            <summary>
            A dictionary that fires events when items are added or removed.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.IDictionaryEvents`2.TryGetValue(`0,System.Func{`1})">
            <summary>
            Attempts to look up a value by its <paramref name="key"/> in the dictionary.
            In case there is no such key-value pair present, uses the <paramref name="funcCreateIfMissing"/> function to create a new value, and then places it into the dictionary under the <paramref name="key"/>.
            </summary>
            <param name="key">Key to the value we're trying to look up.</param>
            <param name="funcCreateIfMissing">In case there is no <paramref name="key"/> in the dictionary, produces a new value to be stored in the dictionary and returned to the caller.</param>
            <returns></returns>
        </member>
        <member name="F:JetBrains.DataFlow.DictionaryEvents`2.myStorage">
            <summary>
            Stores the dictionary entries.
            Sync thru <see cref="F:JetBrains.DataFlow.CollectionEvents`1.myLock"/>.
            </summary>
            <remarks>
            The storage must be passed to the base class in ctor, for the collection operations to work on the same data.
            </remarks>
        </member>
        <member name="M:JetBrains.DataFlow.DictionaryEvents`2.#ctor(System.String)">
            <summary>
            Creates a dictionary that allows storing <c>Null</c> values.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.DictionaryEvents`2.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Specifies whether <c>Null</c> keys or values are allowed or not.
            Take caution with value types, for them the <c>default</c> value is used.
            Note: the <c>Null</c>-checks are enforced only by those operations that add to the dictionary.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.DictionaryEvents`2.#ctor(JetBrains.DataFlow.PropertyId{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IDictionary{`0,`1},System.Boolean,System.Boolean)">
            <summary>
            Specifies whether <c>Null</c> keys or values are allowed or not.
            Take caution with value types, for them the <c>default</c> value is used.
            Note: the <c>Null</c>-checks are enforced only by those operations that add to the dictionary.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.DictionaryEvents`2.InternalAdd(System.Collections.Generic.KeyValuePair{`0,`1},System.Object)">
            <summary>
            One of the core methods that implement the actual functionality.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.DictionaryEvents`2.InternalRemove(System.Collections.Generic.KeyValuePair{`0,`1},System.Object)">
            <summary>
            One of the core methods that implement the actual functionality.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.DictionaryEvents`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            
            <param name="value">The object to use as the value of the element to add.</param>
            <param name="key">The object to use as the key of the element to add.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:JetBrains.DataFlow.DictionaryEvents`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the specified key.
            </summary>
            
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the key; otherwise, false.
            </returns>
            
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</param>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:JetBrains.DataFlow.DictionaryEvents`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if key was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </returns>
            
            <param name="key">The key of the element to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:JetBrains.DataFlow.DictionaryEvents`2.TryGetValue(`0,System.Func{`1})">
            <summary>
            Attempts to look up a value by its <paramref name="key"/> in the dictionary.
            In case there is no such key-value pair present, uses the <paramref name="funcCreateIfMissing"/> function to create a new value, and then places it into the dictionary under the <paramref name="key"/>.
            </summary>
            <param name="key">Key to the value we're trying to look up.</param>
            <param name="funcCreateIfMissing">In case there is no <paramref name="key"/> in the dictionary, produces a new value to be stored in the dictionary and returned to the caller.</param>
            <returns></returns>
        </member>
        <member name="P:JetBrains.DataFlow.DictionaryEvents`2.NullPairKeysAllowed">
            <summary>
            Gets whether <c>Null</c> keys are allowed or not.
            Note: the <c>Null</c>-checks are enforced only by those operations that add to the dictionary.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.DictionaryEvents`2.NullPairValuesAllowed">
            <summary>
            Gets whether <c>Null</c> values are allowed or not.
            Note: the <c>Null</c>-checks are enforced only by those operations that add to the dictionary.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.DictionaryEvents`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            
            <returns>
            The element with the specified key.
            </returns>
            
            <param name="key">The key of the element to get or set.</param>
            <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and key is not found.</exception>
        </member>
        <member name="P:JetBrains.DataFlow.DictionaryEvents`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </returns>
            
        </member>
        <member name="P:JetBrains.DataFlow.DictionaryEvents`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </returns>
            
        </member>
        <member name="T:JetBrains.DataFlow.Disposables">
            <summary>
            A disposable collection of disposable objects.
            On <see cref="M:System.IDisposable.Dispose"/>, disposes of each of the collection objects (isolating exceptions), in the reverse order, and clears the collection. Can be reused.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.Disposables.myIsFinalizeEnabled">
            <summary>
            Whether this object should ever be queued for finalization.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.Disposables.myItems">
            <summary>
            Stores the items to dispose.
            Access must be synchronized thru <see cref="F:JetBrains.DataFlow.Disposables.myLock"/>.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Disposables.#ctor(System.Boolean)">
            <summary>
            Creates a disposable container that either requires that it is disposed at some moment (<paramref name="finalize"/> = <c>True</c>) or just functions as a one-time composite without any obligations (<paramref name="finalize"/> = <c>False</c>).
            </summary>
            <param name="finalize">Whether the disposal is mandatory for the container. If yes, a finalizer is created that will report an exception. If no, the object does not add a strain to the finalization queue and does not do any implicit dispose on finalization.</param>
        </member>
        <member name="M:JetBrains.DataFlow.Disposables.#ctor(System.String)">
            <summary>
            Creates a disposable container that must be disposed of.
            If the <see cref="M:JetBrains.DataFlow.Disposables.Dispose"/> method is never called, an exception is reported from the finalizer.
            </summary>
            <param name="id">An arbitrary string tag that helps to identify the origin of a particular disposables container that never gotten disposed of.</param>
        </member>
        <member name="M:JetBrains.DataFlow.Disposables.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a disposable container that either requires that it is disposed at some moment (<paramref name="finalize"/> = <c>True</c>) or just functions as a one-time composite without any obligations (<paramref name="finalize"/> = <c>False</c>).
            </summary>
            <param name="id">An arbitrary string tag that helps to identify the origin of a particular disposables container that never gotten disposed of.</param>
            <param name="finalize">Whether the disposal is mandatory for the container. If yes, a finalizer is created that will report an exception. If no, the object does not add a strain to the finalization queue and does not do any implicit dispose on finalization.</param>
        </member>
        <member name="M:JetBrains.DataFlow.Disposables.#ctor(System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.IDisposable})">
            <summary>
            Creates a disposable container that either requires that it is disposed at some moment (<paramref name="finalize"/> = <c>True</c>) or just functions as a one-time composite without any obligations (<paramref name="finalize"/> = <c>False</c>).
            </summary>
            <param name="id">An arbitrary string tag that helps to identify the origin of a particular disposables container that never gotten disposed of.</param>
            <param name="finalize">Whether the disposal is mandatory for the container. If yes, a finalizer is created that will report an exception. If no, the object does not add a strain to the finalization queue and does not do any implicit dispose on finalization.</param>
            <param name="items">Initial items for the collection. May be <c>Null</c>.</param>
        </member>
        <member name="F:JetBrains.DataFlow.Disposables.Empty">
            <summary>
            A disposable class that does nothing on <see cref="M:System.IDisposable.Dispose"/>.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Disposables.Atomic(System.Action{JetBrains.DataFlow.Disposables})">
            <summary>
            Executes the <paramref name="func"/> in the transactional manner: if an exception is thrown, all of the <see cref="T:JetBrains.DataFlow.Disposables"/> added during the execution are rolled back, and the exception is let out; in case of no exception, the <see cref="T:JetBrains.DataFlow.Disposables"/> produced by the <paramref name="func"/> are returned.
            The <see cref="T:JetBrains.DataFlow.Disposables"/> created for the <paramref name="func"/> are of the optional sort.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Disposables.Add(System.IDisposable)">
            <summary>
             Adds an object that will be disposed of when the enclosing object is disposed of.
             Returns self to allow queueing the additions.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Disposables.Add(System.IDisposable[])">
            <summary>
             Adds a series of objects that will be disposed of when the enclosing object is disposed of.
             Returns self to allow queueing the additions.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Disposables.AddAction(System.Action)">
            <summary>
            Adds an action to be executed when the container is disposed of.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Disposables.AddBracket(System.Action,System.Action)">
            <summary>
            Adds a bracket of actions. The opening one is executed immediately, and the closing one — when the enclosing object is disposed of.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Disposables.AddRange(System.Collections.Generic.IEnumerable{System.IDisposable})">
            <summary>
             Adds a series of objects that will be disposed of when the enclosing object is disposed of.
             Returns self to allow queueing the additions.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Disposables.AddRef(System.Object)">
            <summary>
            Holds a reference to the given object <paramref name="object"/> until the container is disposed of.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Disposables.Push(System.IDisposable)">
            <summary>
            Adds a value to the disposables collection and thus controls its lifetime.
            Upon disposal of the return value (optional), removes the value from the collection and stops controlling its lifetime.
            It's OK to dispose of the return value after disposing of the collection.
            </summary>
            <param name="disposable">The disposable to be temporarily placed into the collection.</param>
        </member>
        <member name="M:JetBrains.DataFlow.Disposables.TryRemove(System.IDisposable)">
            <summary>
            Attempts to remove an entry from the disposables collection.
            Does not fail if it's missing (eg has already been disposed of), just returns <c>False</c>.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Disposables.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.DataFlow.Disposables.IsEmpty">
            <summary>
            Gets whether the container is empty of any disposable items.
            This means that the object is in either non-initialized or already-disposed state.
            The container is not eligible for finalization in this state.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.Disposables.EmptyDisposable">
            <summary>
            An <see cref="T:System.IDisposable"/> stub.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.IListEvents`1">
            <summary>
            A list that fires events when items are added or removed.
            </summary>
            <typeparam name="TValue">List values type.</typeparam>
        </member>
        <member name="M:JetBrains.DataFlow.IListEvents`1.Modify(JetBrains.DataFlow.AddRemove,`0,System.Int32,System.Object)">
            <summary>
            A universal method for modifications on the collection. Useful for data flow between the collections, when <see cref="P:JetBrains.DataFlow.IListEvents`1.AddRemove"/> signal handler is pumping into another collection.
            </summary>
            <param name="action">Whether to add or remove the item.</param>
            <param name="item">The item to add or remove. When doing the remove operation, this parameter is ignored and the index is used instead.</param>
            <param name="index">The index at which the modification should occur.</param>
            <param name="cookie">The optional modification cookie.</param>
            <returns>Success code.</returns>
        </member>
        <member name="M:JetBrains.DataFlow.IListEvents`1.Modify(JetBrains.DataFlow.AddRemove,System.Func{`0},System.Int32,System.Object)">
            <summary>
            A universal method for modifications on the collection. Useful for data flow between the collections, when <see cref="P:JetBrains.DataFlow.IListEvents`1.AddRemove"/> signal handler is pumping into another collection.
            </summary>
            <param name="action">Whether to add or remove the item.</param>
            <param name="funcGetItemIfAdding">A function that is called only when doing the <see cref="F:JetBrains.DataFlow.AddRemove.Add"/> operation and produces the new item to be added to the list. This allows to create a new item when pumping from one collection to another with creating the wrappers simultaneousely.</param>
            <param name="index">The index at which the modification should occur.</param>
            <param name="cookie">The optional modification cookie.</param>
            <returns>Success code.</returns>
        </member>
        <member name="P:JetBrains.DataFlow.IListEvents`1.AddRemove">
            <summary>
            Fires when an item is added or removed to your view on the collection.
            Throwing an exception does not prevent the item from being added or other handlers from being called.
            The event supports acknowledgement, which means that when you advise the event, all of the items currently in collection come into your view on the collection, so the add is fired for each. Similarly, remove is fired when you unadvise and all of the elements go away from your view on the collection.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.IListEvents`1.BeforeAddRemove">
            <summary>
            Fires before an item is added or removed.
            To prevent the add/remove operation, set <see cref="P:JetBrains.DataFlow.BeforeAddRemoveEventArgs`1.Cancel"/> to <c>True</c> (decline the operation silently) or throw an exception (the exception is let out to the caller). 
            After the first handler to cancel the operation, the remaining handlers may not be called.
            No <see cref="P:JetBrains.DataFlow.ICollectionEvents`1.AddRemove"/> are guaranteed to be executed if the operation is cancelled.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.Infra.SignalWithDelegates`1">
            <summary>
            A signal-inheritor that exposes the signal's virtual methods as delegates.
            The signal has virtual methods instead of delegates because it's cheaper to call the virtual method, which is essential for the property case, for example. Less performance-critical scenarios (like collections) would use delegates instead of inheriting custom classes.
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:JetBrains.DataFlow.Signal`1">
            <summary>
            An event-like signal that can be advised by any number of event sinks, fired by any number of external callers, and takes part in the data flow infrastructure.
            Suitable for use in MVC's codebehind, when the event should be fireable by the views.
            </summary>
            <typeparam name="TValue">The type of the payload, should a signal have any. <see cref="T:System.Boolean"/> is the simplest default.</typeparam>
            <remarks>
            <para>The signal uses an <see cref="T:JetBrains.DataFlow.IProperty`1"/> as its underlying transport. The signal is considered to be fired when the property value changes, has both <see cref="P:JetBrains.DataFlow.PropertyChangedEventArgs`1.HasOld"/> and <see cref="P:JetBrains.DataFlow.PropertyChangedEventArgs`1.HasNew"/>, and the value is falling (changes to <c>default(TValue)</c>).</para>
            <para>For the signal to take part in the data flow, use its underlying property in the bindings.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.DataFlow.ISignal`1">
            <summary>
            An event-like signal that can be sinked by any number of listeners, fired by any number of external callers, and takes part in the data flow infrastructure.
            Suitable for use in MVC's codebehind, when the event should be fireable by the views.
            </summary>
            <typeparam name="TValue">The type of the payload, should a signal have any. <see cref="T:System.Boolean"/> is the simplest default.</typeparam>
            <remarks>
            <para>The signal uses an <see cref="P:JetBrains.DataFlow.PropertyChangedEventArgs`1.HasOld"/> as its underlying transport. The signal is considered to be fired when the property value changes, has both <see cref="T:JetBrains.DataFlow.PropertyChangedEventArgs`1"/> and <see cref="T:JetBrains.DataFlow.PropertyChangedEventArgs`1"/>, and the value is falling (changes to <c>default(TValue)</c>).</para>
            <para>For the signal to take part in the data flow, use its underlying property in the bindings.</para>
            </remarks>
        </member>
        <member name="T:JetBrains.DataFlow.IUntypedSignal">
            <summary>
            A type-invariant interface to the <see cref="T:JetBrains.DataFlow.Signal`1"/>.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.IUntypedSignal.Advise(System.Action)">
            <summary>
            Advises the signal event so that the <paramref name="handler"/> is called when the signal fires.
            Unadvises when the return value is disposed of.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.IUntypedSignal.Advise(System.Action{System.Object})">
            <summary>
            Advises the signal event so that the <paramref name="handler"/> is called when the signal fires.
            Unadvises when the return value is disposed of.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.IUntypedSignal.Fire(System.Object,System.Object)">
            <summary>
            Fires the signal.
            </summary>
            <param name="value">The payload of the signal. Must not be <c>default(TValue)</c>.</param>
            <param name="cookie">A cookie for the <see cref="M:JetBrains.DataFlow.IProperty`1.SetValue(`0,System.Object)"/> of the underlying <see cref="P:JetBrains.DataFlow.IUntypedSignal.Property"/>.</param>
        </member>
        <member name="P:JetBrains.DataFlow.IUntypedSignal.Id">
            <summary>
            Gets the identifier of this signal.
            Getting the ID from the underlying property will lazy-create the property, while this getter is cheap.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.IUntypedSignal.Property">
            <summary>
            Gets the underlying property of the signal.
            Initially, the signal has no underlying property attached (unless you explicitly give it in the constructor).
            When the getter is accessed, an underlying property is created.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ISignal`1.Advise(System.Action{`0})">
            <summary>
            Advises the signal event so that the <paramref name="handler"/> is called when the signal fires.
            Unadvises when the return value is disposed of.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ISignal`1.Fire(`0)">
            <summary>
            Fires the signal.
            </summary>
            <param name="value">The payload of the signal. Must not be <c>default(TValue)</c>.</param>
        </member>
        <member name="M:JetBrains.DataFlow.ISignal`1.Fire(`0,System.Object)">
            <summary>
            Fires the signal.
            </summary>
            <param name="value">The payload of the signal. Must not be <c>default(TValue)</c>.</param>
            <param name="cookie">A cookie for the <see cref="M:JetBrains.DataFlow.IProperty`1.SetValue(`0,System.Object)"/> of the underlying <see cref="P:JetBrains.DataFlow.ISignal`1.Property"/>.</param>
        </member>
        <member name="P:JetBrains.DataFlow.ISignal`1.Id">
            <summary>
            Gets the identifier of this signal.
            Getting the ID from the underlying property will lazy-create the property, while this getter is cheap.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.ISignal`1.Property">
            <summary>
            Gets the underlying property of the signal.
            Initially, the signal has no underlying property attached (unless you explicitly give it in the constructor).
            When the getter is accessed, an underlying property is created.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.Signal`1.myId">
            <summary>
            Stores the identifier of the signal. This is always not <c>Null</c>.
            Used for lazy-creating the <see cref="F:JetBrains.DataFlow.Signal`1.myProperty"/> with this ID.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.Signal`1.myProperty">
            <summary>
            The underlying property useful for data flow bindings.
            Lazy-created at the moment when it's first requested externally via <see cref="P:JetBrains.DataFlow.Signal`1.Property"/>.
            Until that moment, is <c>Null</c> unless passed into the ctor.
            This is done to break the property-signal-property chain and allow for using both signals in the property and properties in the signal.
            Access must be synchronized via <see cref="F:JetBrains.DataFlow.Signal`1.myLock"/>.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.Signal`1.myReadOnlyLock">
            <summary>
            Non-<c>Null</c> when the object has a standard precondition on read-only lock set thru <see cref="T:JetBrains.DataFlow.StandardPreconditions.IReadOnlyPrecondition"/>.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.Signal`1.mySinks">
            <summary>
            Stores the event sinks.
            Write access must be synchronized with <see cref="F:JetBrains.DataFlow.Signal`1.myLock"/> and should do copy-on-write.
            Read access is free-threaded.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.Signal`1.myThreadAffinedTo">
            <summary>
            Non-<c>Null</c> when the object has a standard precondition on thread affinity set thru <see cref="T:JetBrains.DataFlow.StandardPreconditions.IThreadAffinityPrecondition"/>.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.Signal`1.myUnderlyingPropertyAffineToThread">
            <summary>
            Helps with propagating <see cref="M:JetBrains.DataFlow.StandardPreconditions.IThreadAffinityPrecondition.AffineToThread(System.Threading.Thread)"/> to the underlying property, if it exists.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.Signal`1.myUnderlyingPropertyReadOnlyLock">
            <summary>
            Helps with propagating <see cref="M:JetBrains.DataFlow.StandardPreconditions.IReadOnlyPrecondition.LockReadOnly(JetBrains.DataFlow.StandardPreconditions.ReadonlyToken)"/> to the underlying property, if it exists.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Signal`1.#ctor(JetBrains.DataFlow.IProperty{`0})">
            <summary>
            Creates the signal on the existing underlying property.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Signal`1.OnAfterAdvise(System.Action{`0})">
            <summary>
            Called after a new sink is attached.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Signal`1.OnAfterUnadvise(System.Action{`0})">
            <summary>
            Called after a sink is detached.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Signal`1.OnBeforeAdvise(System.Action{`0})">
            <summary>
            Called before a new sink is attached.
            Returns whether the attachment is allowed.
            Throwing an exception will effectively cancel the attachment.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Signal`1.AdviseCore(System.Action{`0})">
            <summary>
            Core implementation of the Advise methods family
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Signal`1.AttachToProperty(JetBrains.DataFlow.IProperty{`0})">
            <summary>
            Attaches to the underlying property, either in ctor or upon lazy-creation.
            It's assumed that a lock is taken externally by the caller, as appropriate.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Signal`1.Init(JetBrains.DataFlow.PropertyId{`0})">
            <summary>
            Shared part of the ctor.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Signal`1.NotifySinks(`0)">
            <summary>
            Iterates on the sinks registered for handling the signal.
            Invokes each in turn, maintaining the exception isolation.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Signal`1.OnUnderlyingPropertyChanged(JetBrains.DataFlow.PropertyChangedEventArgs{`0})">
            <summary>
            When working over a property, checks for its changes, whether to notify the sinks of the event happening.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Signal`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.DataFlow.Signal`1.JetBrains#DataFlow#StandardPreconditions#IReadOnlyPrecondition#LockReadOnly(JetBrains.DataFlow.StandardPreconditions.ReadonlyToken)">
             <summary>
             Locks writes/firings on the object by requiring all the modification attempts to provide a valid token equal to the given one.
             It's an error to call this method more than once (without disposing of the previous result first).
             </summary>
            <param name="token">A token that must be provided by all the parties trying to change the object state.
            	<c>Null</c>
            	is ignored and no precondition is set.</param>
            <returns>Undo token.</returns>
        </member>
        <member name="M:JetBrains.DataFlow.Signal`1.Advise(System.Action{`0})">
            <summary>
            Advises the signal event so that the <paramref name="handler"/> is called when the signal fires.
            Unadvises when the return value is disposed of.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Signal`1.Advise(System.Action)">
            <summary>
            Advises the signal event so that the <paramref name="handler"/> is called when the signal fires.
            Unadvises when the return value is disposed of.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Signal`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.DataFlow.Signal`1.Fire(`0)">
            <summary>
            Fires the signal.
            </summary>
            <param name="value">The payload of the signal. Must not be <c>default(TValue)</c>.</param>
        </member>
        <member name="M:JetBrains.DataFlow.Signal`1.Fire(`0,System.Object)">
            <summary>
            Fires the signal.
            </summary>
            <param name="value">The payload of the signal. Must not be <c>default(TValue)</c>.</param>
            <param name="cookie">A cookie for the <see cref="M:JetBrains.DataFlow.IProperty`1.SetValue(`0,System.Object)"/> of the underlying <see cref="P:JetBrains.DataFlow.ISignal`1.Property"/>.</param>
        </member>
        <member name="M:JetBrains.DataFlow.Signal`1.JetBrains#DataFlow#IUntypedSignal#Advise(System.Action{System.Object})">
            <summary>
            Advises the signal event so that the <paramref name="handler"/> is called when the signal fires.
            Unadvises when the return value is disposed of.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Signal`1.JetBrains#DataFlow#IUntypedSignal#Fire(System.Object,System.Object)">
            <summary>
            Fires the signal.
            </summary>
            <param name="value">The payload of the signal. Must not be <c>default(TValue)</c>.</param>
            <param name="cookie">A cookie for the <see cref="M:JetBrains.DataFlow.IProperty`1.SetValue(`0,System.Object)"/> of the underlying <see cref="P:JetBrains.DataFlow.IUntypedSignal.Property"/>.</param>
        </member>
        <member name="M:JetBrains.DataFlow.Signal`1.JetBrains#DataFlow#StandardPreconditions#IThreadAffinityPrecondition#AffineToThread(System.Threading.Thread)">
            <summary>
            Makes the object operable for writing/firing on the given thread only.
            It's an error to call this method more than once (without disposing of the previous result first).
            </summary>
            <param name="thread">The thread to which the object should be affined for writing/firing from now on.</param>
            <returns>Undo token.</returns>
        </member>
        <member name="P:JetBrains.DataFlow.Signal`1.IsTrappingExceptions">
            <summary>
            Gets or sets how the exceptions isolation works for the individual sinks of the signal.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.Signal`1.Id">
            <summary>
            Gets the identifier of this signal.
            Getting the ID from the underlying property will lazy-create the property, while this getter is cheap.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.Signal`1.Property">
            <summary>
            Gets the underlying property of the signal.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.Signal`1.JetBrains#DataFlow#IUntypedSignal#Id">
            <summary>
            Gets the identifier of this signal.
            Getting the ID from the underlying property will lazy-create the property, while this getter is cheap.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.Signal`1.JetBrains#DataFlow#IUntypedSignal#Property">
            <summary>
            Gets the underlying property of the signal.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Infra.SignalWithDelegates`1.OnAfterAdvise(System.Action{`0})">
            <summary>
            Called after a new sink is attached.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Infra.SignalWithDelegates`1.OnAfterUnadvise(System.Action{`0})">
            <summary>
            Called after a sink is detached.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Infra.SignalWithDelegates`1.OnBeforeAdvise(System.Action{`0})">
            <summary>
            Called before a new sink is attached.
            Returns whether the attachment is allowed.
            Throwing an exception will effectively cancel the attachment.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.Infra.SignalWithDelegates`1.AfterAdviseHandler">
            <summary>
            Called after a new sink is attached.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.Infra.SignalWithDelegates`1.AfterUnadviseHandler">
            <summary>
            Called after a sink is detached.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.Infra.SignalWithDelegates`1.BeforeAdviseHandler">
            <summary>
            Called before a new sink is attached.
            Returns whether the attachment is allowed.
            Throwing an exception will effectively cancel the attachment.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.IProperty`1">
            <summary>
            A property that tracks the changes, validates new values being assigned, and notifies of the change.
            </summary>
            <typeparam name="TValue">Type of the property.</typeparam>
        </member>
        <member name="T:JetBrains.DataFlow.IUntypedProperty">
            <summary>
            A non-generic version of the <see cref="T:JetBrains.DataFlow.IProperty`1"/> interface for automated bulk processing.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.IUntypedProperty.GetValue(System.Object)">
            <summary>
            Gets the property value.
            </summary>
            <param name="cookie">An optional cookie that comes along with the notification events data.</param>
            <returns>The current property value, whose nullability depends on <see cref="P:JetBrains.DataFlow.IUntypedProperty.IsNullable"/>.</returns>
        </member>
        <member name="M:JetBrains.DataFlow.IUntypedProperty.SetValue(System.Object,System.Object)">
            <summary>
            Sets the property value, validates, notifies the sinks.
            </summary>
            <param name="value">The desired value of the property, whose nullability depends on <see cref="P:JetBrains.DataFlow.IUntypedProperty.IsNullable"/>.</param>
            <param name="cookie">An optional cookie that comes along with the notification events data.</param>
            <returns>Whether the value has actually been set (was not cancelled by the <see cref="P:JetBrains.DataFlow.IProperty`1.BeforeChange"/> handlers).</returns>
        </member>
        <member name="P:JetBrains.DataFlow.IUntypedProperty.BeforeChange">
            <summary>
            Gets the signal that fires when someone attempts to change the property value.
            Allows to cancel the change, either silently (by setting <see cref="P:JetBrains.DataFlow.BeforePropertyChangedEventArgs`1.Cancel"/> to <c>True</c>) or by throwing an exception from the handler.
            The handler is first called when sinking, and sinking is cancelled if the handler fails to pass the current value of the property.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.IUntypedProperty.Change">
            <summary>
            Gets the signal that fires when the sink's view on the property value changes.
            Note that the view changes from N/A to whatever value upon sinking, and back upon unsinking.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.IUntypedProperty.Id">
            <summary>
            Gets the identifier of this property.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.IUntypedProperty.IsNullable">
            <summary>
            Gets whether the property can store NULL values of reference types and zero values of value types.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.IUntypedProperty.PropertyType">
            <summary>
            Gets the type of the generic property.
            </summary>
        </member>
        <member name="E:JetBrains.DataFlow.IUntypedProperty.Disposed">
            <summary>
            Fires when the property disposes.
            This event does not acknowlegde subscriptions.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.IProperty`1.GetValue">
            <summary>
            Gets the property value.
            </summary>
            <returns>The current property value, whose nullability depends on <see cref="T:System.Nullable"/>.</returns>
        </member>
        <member name="M:JetBrains.DataFlow.IProperty`1.GetValue(System.Object)">
            <summary>
            Gets the property value.
            </summary>
            <param name="cookie">An optional cookie that comes along with the notification events data.</param>
            <returns>The current property value, whose nullability depends on <see cref="T:System.Nullable"/>.</returns>
        </member>
        <member name="M:JetBrains.DataFlow.IProperty`1.SetValue(`0)">
            <summary>
            Sets the property value, validates, notifies the sinks.
            </summary>
            <param name="value">The desired value of the property, whose nullability depends on <see cref="T:System.Nullable"/>.</param>
            <returns>Whether the value has actually been set (was not cancelled by the <see cref="P:JetBrains.DataFlow.IProperty`1.BeforeChange"/> handlers).</returns>
        </member>
        <member name="M:JetBrains.DataFlow.IProperty`1.SetValue(`0,System.Object)">
            <summary>
            Sets the property value, validates, notifies the sinks.
            </summary>
            <param name="value">The desired value of the property, whose nullability depends on <see cref="T:System.Nullable"/>.</param>
            <param name="cookie">An optional cookie that comes along with the notification events data.</param>
            <returns>Whether the value has actually been set (was not cancelled by the <see cref="P:JetBrains.DataFlow.IProperty`1.BeforeChange"/> handlers).</returns>
        </member>
        <member name="P:JetBrains.DataFlow.IProperty`1.BeforeChange">
            <summary>
            Gets the signal that fires when someone attempts to change the property value.
            Allows to cancel the change, either silently (by setting <see cref="P:JetBrains.DataFlow.BeforePropertyChangedEventArgs`1.Cancel"/> to <c>True</c>) or by throwing an exception from the handler.
            The handler is first called when sinking, and sinking is cancelled if the handler fails to pass the current value of the property.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.IProperty`1.Change">
            <summary>
            Gets the signal that fires when the sink's view on the property value changes.
            Note that the view changes from N/A to whatever value upon sinking, and back upon unsinking.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.IProperty`1.Id">
            <summary>
            Gets the identifier of this property.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.IProperty`1.Value">
            <summary>
            Gets or sets the value by wrapping the <see cref="M:JetBrains.DataFlow.IProperty`1.GetValue"/> and <see cref="M:JetBrains.DataFlow.IProperty`1.SetValue(`0)"/> calls.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.IUntypedPropertyBag.GetOrCreateProperty(JetBrains.DataFlow.PropertyId,System.Object,System.Boolean)">
            <summary>
            Creates a property in the bag, or picks an existing one.
            The type is inferred from the generic data constant type <see cref="T:JetBrains.DataFlow.PropertyId`1"/>.
            </summary>
            <param name="id">An identifier for the property.</param>
            <param name="defaultvalue">Default value to assign to the property initially.</param>
            <param name="nullable">Whether <c>Null</c> values are accepted by the property.</param>
            <returns>The newly-created property, or an existing one, if available.</returns>
        </member>
        <member name="M:JetBrains.DataFlow.IUntypedPropertyBag.Remove``1(JetBrains.DataFlow.PropertyId{``0})">
            <summary>
            Tries to remove an existing property from the bag, returns whether successful (ie there really was such a property in the bag).
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.IPropertyBag.GetOrCreateProperty``1(JetBrains.DataFlow.PropertyId{``0},``0,System.Boolean)">
            <summary>
            Creates a property in the bag, or picks an existing one.
            </summary>
            <param name="id">An identifier for the property.</param>
            <param name="defaultvalue">Default value to assign to the property initially.</param>
            <param name="nullable">Whether <c>Null</c> values are accepted by the property.</param>
            <returns>The newly-created property, or an existing one, if available.</returns>
        </member>
        <member name="M:JetBrains.DataFlow.IPropertyBag.Remove``1(JetBrains.DataFlow.PropertyId{``0})">
            <summary>
            Tries to remove an existing property from the bag, returns whether successful (ie there really was such a property in the bag).
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.IPropertyBinding`2">
            <summary>
            Binds together two <see cref="T:JetBrains.DataFlow.IProperty`1"/>s.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.IPropertyBinding">
            <summary>
            A non-generic version of the <see cref="T:JetBrains.DataFlow.IPropertyBinding`2"/> interface for automated bulk processing.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.IPropertyBinding.CopySourceToTarget">
            <summary>
            Executes the binding by copying the source value to the target value.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.IPropertyBinding.CopyTargetToSource">
            <summary>
            Executes the binding by copying the source value to the target value.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.IPropertyBinding.Direction">
            <summary>
            Gets the binding direction.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.IPropertyBinding.Source">
            <summary>
            Gets the binding source.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.IPropertyBinding.Target">
            <summary>
            Gets the binding target.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.IPropertyBinding`2.Source">
            <summary>
            Gets the binding source.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.IPropertyBinding`2.Target">
            <summary>
            Gets the binding target.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.ISimpleSignal">
            <summary>
            A simple <see cref="T:JetBrains.DataFlow.ISignal`1"/> that has no payload.
            Stands for the simple <see cref="T:System.EventHandler"/>-based event, but encapsulates the firing method, can take part in data flow, can be fired by an external user.
            Suitable for use in MVC's codebehind, when the event should be fireable by the views.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ISimpleSignal.Fire">
            <summary>
            Fires the signal.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.ListBridge`2">
            <summary>
            Bridges two ordered lists of items.
            The items flow from the first collection to the second one. Conversion and filtering is supported on the items.
            The order of projected items in the target list is kept in sync with the original items order.
            </summary>
            <typeparam name="TSource">Type of the source collection items.</typeparam>
            <typeparam name="TTarget">Type of the target collection items.</typeparam>
        </member>
        <member name="F:JetBrains.DataFlow.ListBridge`2.myIndexMapping">
            <summary>
            Stores the mapping from indices in the <see cref="P:JetBrains.DataFlow.ListBridge`2.Source"/> list to those in the <see cref="P:JetBrains.DataFlow.ListBridge`2.Target"/> list.
            Indices in <see cref="F:JetBrains.DataFlow.ListBridge`2.myIndexMapping"/> correspond to those in <see cref="P:JetBrains.DataFlow.ListBridge`2.Source"/>, values — to those in <see cref="P:JetBrains.DataFlow.ListBridge`2.Target"/>.
            A value <c>-1</c> means that the source item is missing from the target list (has been filtered out).
            Items of the target collection missing from the source one (like those manually added) are just missing from the map.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.ListBridge`2.myMapItems">
            <summary>
            An optional map, can be <c>Null</c> if item-mapping is not needed.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ListBridge`2.#ctor(JetBrains.DataFlow.IListEvents{`0},JetBrains.DataFlow.IListEvents{`1},System.Func{`0,`1},System.Func{`0,System.Boolean},JetBrains.DataFlow.ListBridge.MappingInfo,System.Object)">
            <summary>
            Wires up the bridge.
            </summary>
            <param name="source">The source collection.</param>
            <param name="target">The target collection.</param>
            <param name="funcConverter">The conversion operator.</param>
            <param name="funcFilter">The mapping filter to exclude selected items from the target collection.</param>
            <param name="mappinginfo">Specifies whether the projection mapping information is maintained by the bridge.</param>
            <param name="oTaregtModificationCookie">An otpional cookie to be passed to the <paramref name="target"/> collection when performing modification operations on it.</param>
        </member>
        <member name="M:JetBrains.DataFlow.ListBridge`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.DataFlow.ListBridge`2.HaveMappingInfo">
            <summary>
            Gets whether the projection mapping information is maintained by the bridge.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.ListBridge`2.MapSourceToTarget">
            <summary>
            Gets the read-only source-to-target mapping.
            Available only if <see cref="P:JetBrains.DataFlow.ListBridge`2.HaveMappingInfo"/>. Otherwise, throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.ListBridge`2.MapTargetToSource">
            <summary>
            Gets the read-only target-to-source mapping.
            Available only if <see cref="P:JetBrains.DataFlow.ListBridge`2.HaveMappingInfo"/>. Otherwise, throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.ListBridge`2.Source">
            <summary>
            Gets the source list.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.ListBridge`2.Target">
            <summary>
            Gets the target list.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.ListBridge">
            <summary>
            Supplimentary class for the <see cref="T:JetBrains.DataFlow.ListBridge`2"/> utility.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ListBridge.BridgeInto``2(JetBrains.DataFlow.IListEvents{``0},JetBrains.DataFlow.IListEvents{``1})">
            <summary>
            Mirrors one list into another.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ListBridge.BridgeInto``2(JetBrains.DataFlow.IListEvents{``0},JetBrains.DataFlow.IListEvents{``1},System.Func{``0,``1})">
            <summary>
            Mirrors one list into another thru a converter.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ListBridge.BridgeInto``2(JetBrains.DataFlow.IListEvents{``0},JetBrains.DataFlow.IListEvents{``1},System.Func{``0,System.Boolean})">
            <summary>
            Mirrors one list into another thru a filter.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ListBridge.BridgeInto``2(JetBrains.DataFlow.IListEvents{``0},JetBrains.DataFlow.IListEvents{``1},System.Func{``0,``1},JetBrains.DataFlow.ListBridge.MappingInfo,System.Object)">
            <summary>
            Mirrors one list into another thru a converter.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.ListBridge.MappingInfo">
            <summary>
            Specifies which mapping info should be collected by the bridge.
            The mapping allows to translate source items into target ones and vice versa.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.ListBridge.MappingInfo.None">
            <summary>
            No mapping information collected. No translation possible.
            Wastes less memory.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.ListBridge.MappingInfo.TwoWay">
            <summary>
            Full mapping information collected.
            Self-checks for consistency are also made on the mapping.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.ListEvents`1">
            <summary>
            A list that fires events when items are added or removed.
            </summary>
            <typeparam name="TValue">List values type.</typeparam>
        </member>
        <member name="F:JetBrains.DataFlow.ListEvents`1.myStorage">
            <summary>
            Sync thru <see cref="F:JetBrains.DataFlow.CollectionEvents`1.myLock"/>.
            </summary>
            <remarks>
            The storage must be passed to the base class in ctor, for the collection operations to work on the same data.
            </remarks>
        </member>
        <member name="M:JetBrains.DataFlow.ListEvents`1.#ctor(System.String)">
            <summary>
            Creates a new list that does not allow duplicate items, with a simple list storage inside.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ListEvents`1.#ctor(JetBrains.DataFlow.PropertyId{`0})">
            <summary>
            Creates a new list that does not allow duplicate items, with a simple list storage inside.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ListEvents`1.#ctor(JetBrains.DataFlow.PropertyId{`0},System.Boolean)">
            <summary>
            Creates a new list with a simple list storage inside.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ListEvents`1.FireAddRemove(JetBrains.DataFlow.AddRemove,`0,System.Int32,System.Object)">
            <summary>
            Fires the <see cref="P:JetBrains.DataFlow.ListEvents`1.AddRemove"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ListEvents`1.FireBeforeAddRemove(JetBrains.DataFlow.AddRemove,`0,System.Int32,System.Object)">
            <summary>
            Fires the <see cref="P:JetBrains.DataFlow.ListEvents`1.BeforeAddRemove"/> event.
            Returns whether the operation has been cancelled.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ListEvents`1.InternalAdd(`0,System.Int32,System.Object)">
            <summary>
            One of the core methods that implement the actual List functionality.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ListEvents`1.InternalRemove(System.Int32,System.Object)">
            <summary>
            One of the core methods that implement the actual List functionality.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ListEvents`1.OnAcknowledgeSinkAddRemove_Add(System.Action{JetBrains.DataFlow.AddRemoveIndexEventArgs{`0}})">
            <summary>
            Ackhowledges the handler.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ListEvents`1.OnAcknowledgeSinkAddRemove_Remove(System.Action{JetBrains.DataFlow.AddRemoveIndexEventArgs{`0}})">
            <summary>
            Ackhowledges the handler.
            Cannot be merged with <see cref="M:JetBrains.DataFlow.ListEvents`1.OnAcknowledgeSinkAddRemove_Add(System.Action{JetBrains.DataFlow.AddRemoveIndexEventArgs{`0}})"/> because the iteration should go in the reverse order.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ListEvents`1.OnAcknowledgeSinkBeforeAddRemove(System.Action{JetBrains.DataFlow.BeforeAddRemoveIndexEventArgs{`0}})">
            <summary>
            Called when someone attempts to sink the <see cref="P:JetBrains.DataFlow.ListEvents`1.BeforeAddRemove"/> signal. Acknowledges the handler.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ListEvents`1.InternalAdd(`0,System.Object)">
            <summary>
            One of the core methods that implement the actual functionality.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ListEvents`1.InternalRemove(`0,System.Object)">
            <summary>
            One of the core methods that implement the actual functionality.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ListEvents`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"></see>.
            </summary>
            
            <returns>
            The index of item if found in the list; otherwise, -1.
            </returns>
            
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
        </member>
        <member name="M:JetBrains.DataFlow.ListEvents`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"></see> at the specified index.
            </summary>
            
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="M:JetBrains.DataFlow.ListEvents`1.Modify(JetBrains.DataFlow.AddRemove,`0,System.Int32,System.Object)">
            <summary>
            A universal method for modifications on the collection. Useful for data flow between the collections, when <see cref="P:JetBrains.DataFlow.ICollectionEvents`1.AddRemove"/> signal handler is pumping into another collection.
            </summary>
            <param name="action">Whether to add or remove the item.</param>
            <param name="item">The item to add or remove.</param>
            <param name="index">The index at which the modification should occur.</param>
            <param name="cookie">The optional modification cookie.</param>
            <returns>Success code.</returns>
        </member>
        <member name="M:JetBrains.DataFlow.ListEvents`1.Modify(JetBrains.DataFlow.AddRemove,System.Func{`0},System.Int32,System.Object)">
            <summary>
            A universal method for modifications on the collection. Useful for data flow between the collections, when <see cref="P:JetBrains.DataFlow.ListEvents`1.AddRemove"/> signal handler is pumping into another collection.
            </summary>
            <param name="action">Whether to add or remove the item.</param>
            <param name="funcGetItemIfAdding">A function that is called only when doing the <see cref="F:JetBrains.DataFlow.AddRemove.Add"/> operation and produces the new item to be added to the list. This allows to create a new item when pumping from one collection to another with creating the wrappers simultaneousely.</param>
            <param name="index">The index at which the modification should occur.</param>
            <param name="cookie">The optional modification cookie.</param>
            <returns>Success code.</returns>
        </member>
        <member name="M:JetBrains.DataFlow.ListEvents`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"></see> item at the specified index.
            </summary>
            
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="P:JetBrains.DataFlow.ListEvents`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            
            <returns>
            The element at the specified index.
            </returns>
            
            <param name="index">The zero-based index of the element to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
            <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
        </member>
        <member name="P:JetBrains.DataFlow.ListEvents`1.AddRemove">
            <summary>
            Fires when an item is added or removed to your view on the collection.
            Throwing an exception does not prevent the item from being added or other handlers from being called.
            The event supports acknowledgement, which means that when you sink the event, all of the items currently in collection come into your view on the collection, so the add is fired for each. Similarly, remove is fired when you unsink and all of the elements go away from your view on the collection.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.ListEvents`1.BeforeAddRemove">
            <summary>
            Fires before an item is added or removed.
            To prevent the add/remove operation, set <see cref="P:JetBrains.DataFlow.BeforeAddRemoveEventArgs`1.Cancel"/> to <c>True</c> (decline the operation silently) or throw an exception (the exception is let out to the caller). 
            After the first handler to cancel the operation, the remaining handlers may not be called.
            No <see cref="P:JetBrains.DataFlow.ICollectionEvents`1.AddRemove"/> are guaranteed to be executed if the operation is cancelled.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.ManualProperty">
            <summary>
            Creates properties bound to simple .NET properties or other manual data sources.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.ManualProperty.Create``1(System.String,System.Action{``0})">
            <summary>
            Creates a set-only property manually-bound to some external source via delegates.
            A set-only property is useful for placing at the end of the data flow.
            </summary>
            <typeparam name="TValue">Type of the property.</typeparam>
            <param name="id">An identifier to tell the property apart.</param>
            <param name="setter">External value setter.</param>
        </member>
        <member name="M:JetBrains.DataFlow.ManualProperty.Create``1(System.String,``0,System.Action{``0})">
            <summary>
            Creates a property manually-bound to some external source via delegates.
            </summary>
            <typeparam name="TValue">Type of the property.</typeparam>
            <param name="id">An identifier to tell the property apart.</param>
            <param name="initialvalue">The initial value for the property.</param>
            <param name="setter">External value setter.</param>
        </member>
        <member name="M:JetBrains.DataFlow.ManualProperty.Create``1(System.String,System.Func{``0},System.Action{``0})">
            <summary>
            Creates a property manually-bound to some external source via delegates.
            </summary>
            <typeparam name="TValue">Type of the property.</typeparam>
            <param name="id">An identifier to tell the property apart.</param>
            <param name="getter">External value getter.</param>
            <param name="setter">External value setter.</param>
        </member>
        <member name="T:JetBrains.DataFlow.MarshallingBehaviors">
            <summary>
            Defines how the data flow is marshalled to another thread.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.MarshallingBehaviors.QueueAlways">
            <summary>
            Any data flow occurs asynchronously, even within a single thread.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.MarshallingBehaviors.QueueIfNeeded">
            <summary>
            Only cross-thread data flow is async, within a single thread it works just like a simple <see cref="T:JetBrains.DataFlow.PropertyBinding"/>.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.MarshallingPropertyBinding`2">
            <summary>
            A property binding that marshals all of the updates to the primary thread.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.PropertyBinding`2">
            <summary>
            Binds together two <see cref="T:JetBrains.DataFlow.IProperty`1"/>s.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.PropertyBinding`2.myConverterSourceToTarget">
            <summary>
            The convertor implementation.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.PropertyBinding`2.myConverterTargetToSource">
            <summary>
            The convertor implementation.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.PropertyBinding`2.myDirection">
            <summary>
            Data flow direction, set to None initially to allow for initialization of the properties from their <c>Null</c> values.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.PropertyBinding`2.mySource">
            <summary>
            Stores the source property in yet another property, to allow for changing it later.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.PropertyBinding`2.myTarget">
            <summary>
            Stores the target property in yet another property, to allow for changing it later.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.PropertyBinding`2.myFreeze">
            <summary>
            Prevents recursion.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyBinding`2.#ctor(JetBrains.DataFlow.IProperty{`0},JetBrains.DataFlow.IProperty{`1},System.Func{`0,`1})">
            <summary>
            Creates a one-way binding.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyBinding`2.#ctor(JetBrains.DataFlow.IProperty{`0},JetBrains.DataFlow.IProperty{`1},System.Func{`0,`1},System.Func{`1,`0})">
            <summary>
            Creates a two-way binding.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyBinding`2.#ctor(JetBrains.DataFlow.IProperty{`0},JetBrains.DataFlow.IProperty{`1},JetBrains.DataFlow.DataFlowDirection)">
            <summary>
            Creates a binding.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyBinding`2.#ctor(JetBrains.DataFlow.IProperty{`0},JetBrains.DataFlow.IProperty{`1},JetBrains.DataFlow.DataFlowDirection,System.Func{`0,`1},System.Func{`1,`0})">
            <summary>
            Creates a binding.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyBinding`2.#ctor(JetBrains.DataFlow.IProperty{`0},JetBrains.DataFlow.IProperty{`1},JetBrains.DataFlow.DataFlowDirection,System.Func{`0,`1},System.Func{`1,`0},System.Object,System.Object)">
            <summary>
            The ultimate ctor.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyBinding`2.OnConvertSourceToTargetDefault(`0)">
            <summary>
            The default converter.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyBinding`2.OnConvertTargetToSourceDefault(`1)">
            <summary>
            The default converter.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyBinding`2.CopySourceToTarget">
            <summary>
            Executes the binding by copying the source value to the target value.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyBinding`2.CopyTargetToSource">
            <summary>
            Executes the binding by copying the source value to the target value.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyBinding`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.DataFlow.PropertyBinding`2.SourceCookie">
            <summary>
            An optional readonly cookie for reading and writing the source property values.
            <c>Null</c> by default.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.PropertyBinding`2.Tag">
            <summary>
            A freehand tag for marking the instance, mostly for the debugging needs.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.PropertyBinding`2.TargetCookie">
            <summary>
            An optional readonly cookie for reading and writing the target property values.
            <c>Null</c> by default.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.PropertyBinding`2.Direction">
            <summary>
            Gets or sets the binding direction.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.PropertyBinding`2.Source">
            <summary>
            Gets or sets the binding source.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.PropertyBinding`2.Target">
            <summary>
            Gets or sets the binding target.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.PropertyBinding`2.JetBrains#DataFlow#IPropertyBinding#Source">
            <summary>
            Gets the binding source.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.PropertyBinding`2.JetBrains#DataFlow#IPropertyBinding#Target">
            <summary>
            Gets the binding target.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.MarshallingPropertyBinding`2.#ctor(JetBrains.Threading.JetDispatcher,JetBrains.DataFlow.IProperty{`0},JetBrains.DataFlow.IProperty{`1},JetBrains.DataFlow.DataFlowDirection,System.Func{`0,`1},System.Func{`1,`0})">
            <summary>
            The ultimate ctor.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.MarshallingPropertyBinding`2.CopySourceToTarget">
            <summary>
            Executes the binding by copying the source value to the target value.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.MarshallingPropertyBinding`2.CopyTargetToSource">
            <summary>
            Executes the binding by copying the source value to the target value.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.MarshallingPropertyBinding`2.Dispatcher">
            <summary>
            Gets the dispatcher that defines the thread into which the operations are marshalled.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.MarshallingPropertyBinding`2.MarshallingBehavior">
            <summary>
            Gets or sets how the marshaller should behave, see <see cref="T:JetBrains.DataFlow.MarshallingBehaviors"/> for details.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.Property`1">
            <summary>
            A property that tracks the changes, validates new values being assigned, and notifies of the change.
            </summary>
            <typeparam name="TValue">Type of the property.</typeparam>
        </member>
        <member name="F:JetBrains.DataFlow.Property`1.myHandlersDisposed">
            <summary>
            Stores the <see cref="E:JetBrains.DataFlow.Property`1.Disposed"/> handlers.
            Synth thru <see cref="F:JetBrains.DataFlow.Property`1.myLock"/>.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.Property`1.myId">
            <summary>
            ID.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.Property`1.myIsNullable">
            <summary>
            Determines whether the property can store NULL values.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.Property`1.mySignalBeforeChange">
            <summary>
            The signal for the BeforeChange on the property.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.Property`1.mySignalChange">
            <summary>
            The signal for the Change on the property.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.Property`1.myValue">
            <summary>
            Stores the value of the property.
            Sync thru <see cref="F:JetBrains.DataFlow.Property`1.myLock"/>.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Property`1.#ctor(JetBrains.DataFlow.PropertyId{`0})">
            <summary>
            Initializes the roperty with the default initial value for its type. The property can take <c>Null</c> values (because for value-types it's the best pick and for reference types it's a must to initialize with <c>Null</c>).
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Property`1.#ctor(System.String)">
            <summary>
            Initializes the roperty with the default initial value for its type. The property can take <c>Null</c> values (because for value-types it's the best pick and for reference types it's a must to initialize with <c>Null</c>).
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Property`1.#ctor(JetBrains.DataFlow.PropertyId{`0},`0)">
            <summary>
            Initializes the roperty with the initial value. The property allows <c>Null</c> value if it's of a value type, and does not allow <c>Null</c> values if it's a reference type (unless explicitly initialized with <c>Null</c>).
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Property`1.#ctor(System.String,`0)">
            <summary>
            Initializes the roperty with the initial value. The property allows <c>Null</c> value if it's of a value type, and does not allow <c>Null</c> values if it's a reference type (unless explicitly initialized with <c>Null</c>).
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Property`1.#ctor(JetBrains.DataFlow.PropertyId{`0},`0,System.Boolean)">
            <summary>
            Initializes the property with the initial value.
            The ultimate ctor.
            </summary>
            <param name="id">ID for the property. Allows to tell properties apart at runtime and when debugging.</param>
            <param name="value">Initial value for the property. Must agree to <paramref name="bNullValueAllowed"/>.</param>
            <param name="bNullValueAllowed">Specifies whether <c>Null</c> values can be assigned to the property. Note that this applies to value types also; a <c>Null</c>-disallowing <see cref="T:System.Int32"/> property will not allow assigning values of <c>0</c>.</param>
        </member>
        <member name="M:JetBrains.DataFlow.Property`1.#ctor(System.String,`0,System.Boolean)">
            <summary>
            Initializes the property with the initial value.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Property`1.FireBeforeChange(`0,`0,System.Object)">
            <summary>
            Fires the <see cref="P:JetBrains.DataFlow.Property`1.BeforeChange"/> event, in course of assigning a new value to the property.
            If <c>False</c>, the transaction has been cancelled.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Property`1.FireChange(`0,`0,System.Object)">
            <summary>
            Fires the <see cref="P:JetBrains.DataFlow.Property`1.Change"/> event, in course of assigning a new value to the property.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Property`1.FireDisposed">
            <summary>
            Fires the <see cref="E:JetBrains.DataFlow.Property`1.Disposed"/> event to the pre-stored list of handlers.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Property`1.FirePropertyChanged">
            <summary>
            Fires the <see cref="E:JetBrains.DataFlow.Property`1.PropertyChanged"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Property`1.FirePropertyChanging">
            <summary>
            Fires the <see cref="E:JetBrains.DataFlow.Property`1.PropertyChanging"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Property`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.DataFlow.Property`1.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.DataFlow.Property`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.DataFlow.Property`1.GetValue">
            <summary>
            Gets the property value.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Property`1.GetValue(System.Object)">
            <summary>
            Gets the property value.
            </summary>
            <param name="cookie">An optional cookie that comes along with the notification events data.</param>
            <returns>The current property value, whose nullability depends on <see cref="P:JetBrains.DataFlow.IUntypedProperty.IsNullable"/>.</returns>
        </member>
        <member name="M:JetBrains.DataFlow.Property`1.SetValue(`0)">
            <summary>
            Sets the property value, validates, notifies the sinks.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Property`1.SetValue(`0,System.Object)">
            <summary>
            Sets the property value, validates, notifies the sinks.
            </summary>
            <param name="value">The desired value of the property, whose nullability depends on <see cref="P:JetBrains.DataFlow.IUntypedProperty.IsNullable"/>.</param>
            <param name="cookie">An optional cookie that comes along with the notification events data.</param>
            <returns>Whether the value has actually been set (was not cancelled by the <see cref="P:JetBrains.DataFlow.IProperty`1.BeforeChange"/> handlers).</returns>
        </member>
        <member name="M:JetBrains.DataFlow.Property`1.JetBrains#DataFlow#IUntypedProperty#GetValue(System.Object)">
            <summary>
            Gets the property value.
            </summary>
            <param name="cookie">An optional cookie that comes along with the notification events data.</param>
            <returns>The current property value, whose nullability depends on <see cref="P:JetBrains.DataFlow.IUntypedProperty.IsNullable"/>.</returns>
        </member>
        <member name="M:JetBrains.DataFlow.Property`1.JetBrains#DataFlow#IUntypedProperty#SetValue(System.Object,System.Object)">
            <summary>
            Sets the property value, validates, notifies the sinks.
            </summary>
            <param name="value">The desired value of the property, whose nullability depends on <see cref="P:JetBrains.DataFlow.IUntypedProperty.IsNullable"/>.</param>
            <param name="cookie">An optional cookie that comes along with the notification events data.</param>
            <returns>Whether the value has actually been set (was not cancelled by the <see cref="P:JetBrains.DataFlow.IProperty`1.BeforeChange"/> handlers).</returns>
        </member>
        <member name="M:JetBrains.DataFlow.Property`1.ThrowReadonlyFail(JetBrains.DataFlow.BeforePropertyChangedEventArgs{`0},System.Object)">
            <summary>
            Helper to throw an annotated exception whenever a property fails the readonly lock precondition.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Property`1.ThrowThreadAffinityFail(JetBrains.DataFlow.BeforePropertyChangedEventArgs{`0},System.Threading.Thread)">
            <summary>
            Helper to throw an annotated exception whenever a property fails the threading affinity precondition.
            </summary>
        </member>
        <member name="E:JetBrains.DataFlow.Property`1.Disposed">
            <summary>
            Fires when the property disposes.
            </summary>
        </member>
        <member name="E:JetBrains.DataFlow.Property`1.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.Property`1.BeforeChange">
            <summary>
            Gets the signal that fires when someone attempts to change the property value.
            Allows to cancel the change, either silently (by setting <see cref="P:JetBrains.DataFlow.BeforePropertyChangedEventArgs`1.Cancel"/> to <c>True</c>) or by throwing an exception from the handler.
            The handler is first called when sinking, and sinking is cancelled if the handler fails to pass the current value of the property.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.Property`1.Change">
            <summary>
            Gets the signal that fires when the sink's view on the property value changes.
            Note that the view changes from N/A to whatever value upon sinking, and back upon unsinking.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.Property`1.Id">
            <summary>
            Gets the identifier of this property.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.Property`1.IsNullable">
            <summary>
            Gets whether the property can store NULL values of reference types and zero values of value types.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.Property`1.Value">
            <summary>
            Gets or sets the value by wrapping the <see cref="M:JetBrains.DataFlow.Property`1.GetValue"/> and <see cref="M:JetBrains.DataFlow.Property`1.SetValue(`0)"/> calls.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.Property`1.JetBrains#DataFlow#IUntypedProperty#BeforeChange">
            <summary>
            Gets the signal that fires when someone attempts to change the property value.
            Allows to cancel the change, either silently (by setting <see cref="P:JetBrains.DataFlow.BeforePropertyChangedEventArgs`1.Cancel"/> to <c>True</c>) or by throwing an exception from the handler.
            The handler is first called when sinking, and sinking is cancelled if the handler fails to pass the current value of the property.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.Property`1.JetBrains#DataFlow#IUntypedProperty#Change">
            <summary>
            Gets the signal that fires when the sink's view on the property value changes.
            Note that the view changes from N/A to whatever value upon sinking, and back upon unsinking.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.Property`1.JetBrains#DataFlow#IUntypedProperty#Id">
            <summary>
            Gets the identifier of this property.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.Property`1.JetBrains#DataFlow#IUntypedProperty#PropertyType">
            <summary>
            Gets the type of the generic property.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.Property`1.PropertyBeforeChangeSignal">
            <summary>
            Handles the signals on the property events.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Property`1.PropertyBeforeChangeSignal.Acknowledge(System.Action{JetBrains.DataFlow.BeforePropertyChangedEventArgs{`0}},JetBrains.DataFlow.AddRemove)">
            <summary>
            Acknowledges the <see cref="P:JetBrains.DataFlow.Property`1.BeforeChange"/> sinks.
            Returns whether the change is allowed.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Property`1.PropertyBeforeChangeSignal.OnBeforeAdvise(System.Action{JetBrains.DataFlow.BeforePropertyChangedEventArgs{`0}})">
            <summary>
            Called before a new sink is attached.
            Returns whether the attachment is allowed.
            Throwing an exception will effectively cancel the attachment.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.Property`1.PropertyChangeSignal">
            <summary>
            Handles the signals on the property events.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Property`1.PropertyChangeSignal.Acknowledge(System.Action{JetBrains.DataFlow.PropertyChangedEventArgs{`0}},JetBrains.DataFlow.AddRemove)">
            <summary>
            Acknowledges the given handler with the property value, either on add or remove of the handler.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Property`1.PropertyChangeSignal.OnAfterAdvise(System.Action{JetBrains.DataFlow.PropertyChangedEventArgs{`0}})">
            <summary>
            Called after a new sink is attached.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.Property`1.PropertyChangeSignal.OnAfterUnadvise(System.Action{JetBrains.DataFlow.PropertyChangedEventArgs{`0}})">
            <summary>
            Called after a sink is detached.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyBag.Remove``1(JetBrains.DataFlow.PropertyId{``0})">
            <summary>
            Tries to remove an existing property from the bag, returns whether successful (ie there really was such a property in the bag).
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyBag.JetBrains#DataFlow#IUntypedPropertyBag#GetOrCreateProperty(JetBrains.DataFlow.PropertyId,System.Object,System.Boolean)">
            <summary>
            Creates a property in the bag, or picks an existing one.
            The type is inferred from the generic data constant type <see cref="T:JetBrains.DataFlow.PropertyId`1"/>.
            </summary>
            <param name="id">An identifier for the property.</param>
            <param name="defaultvalue">Default value to assign to the property initially.</param>
            <param name="nullable">Whether <c>Null</c> values are accepted by the property.</param>
            <returns>The newly-created property, or an existing one, if available.</returns>
        </member>
        <member name="T:JetBrains.DataFlow.PropertyBinding">
            <summary>
            A non-generic static class that helps creating specific property bindings.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.PropertyBinding.False">
            <summary>
            Gets a cached instance of a property that always has the same value.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.PropertyBinding.True">
            <summary>
            Gets a cached instance of a property that always has the same value.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.PropertyBinding.Zero">
            <summary>
            Gets a cached instance of a property that always has the same value.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyBinding.Create``2(JetBrains.DataFlow.IProperty{``0},JetBrains.DataFlow.IProperty{``1},System.Func{``0,``1})">
            <summary>
            Creates a one-way binding.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyBinding.Create``2(JetBrains.DataFlow.IProperty{``0},JetBrains.DataFlow.IProperty{``1},System.Func{``0,``1},System.Func{``1,``0})">
            <summary>
            Creates a two-way binding.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyBinding.Create``2(JetBrains.DataFlow.IProperty{``0},JetBrains.DataFlow.IProperty{``1},JetBrains.DataFlow.DataFlowDirection)">
            <summary>
            Creates a binding.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyBinding.Create``2(JetBrains.DataFlow.IProperty{``0},JetBrains.DataFlow.IProperty{``1},JetBrains.DataFlow.DataFlowDirection,System.Func{``0,``1},System.Func{``1,``0})">
            <summary>
            The ultimate ctor.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyBinding.Create``1(JetBrains.DataFlow.ISignal{``0},JetBrains.DataFlow.ISignal{``0})">
            <summary>
            Creates a <see cref="F:JetBrains.DataFlow.DataFlowDirection.FromSource"/>-binding for two signals.
            </summary>
            <param name="source">The originating signal.</param>
            <param name="target">The dependent signal.</param>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyBinding.Create``1(JetBrains.DataFlow.ISignal{``0},JetBrains.DataFlow.ISimpleSignal)">
            <summary>
            Creates a <see cref="F:JetBrains.DataFlow.DataFlowDirection.FromSource"/>-binding for two signals, the second one a reduced simple signal.
            </summary>
            <param name="source">The originating signal.</param>
            <param name="target">The dependent simple signal.</param>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyBinding.Create``2(JetBrains.DataFlow.ISignal{``0},JetBrains.DataFlow.ISignal{``1},System.Func{``0,``1})">
            <summary>
            Creates a <see cref="F:JetBrains.DataFlow.DataFlowDirection.FromSource"/>-binding for two signals, the second one a reduced simple signal.
            </summary>
            <param name="source">The originating signal.</param>
            <param name="target">The dependent signal.</param>
            <param name="funcConverter">Function that converts the high value of the source signal to value for the target signal.</param>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyBinding.Create2``3(JetBrains.DataFlow.IProperty{``0},JetBrains.DataFlow.IProperty{``1},JetBrains.DataFlow.IProperty{``2},System.Func{``0,``1,``2},System.Object)">
            <summary>
            Creates a simple many-to-one binding.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyBinding.Create3``4(JetBrains.DataFlow.IProperty{``0},JetBrains.DataFlow.IProperty{``1},JetBrains.DataFlow.IProperty{``2},JetBrains.DataFlow.IProperty{``3},System.Func{``0,``1,``2,``3})">
            <summary>
            Creates a simple many-to-one binding.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyBinding.Create4``5(JetBrains.DataFlow.IProperty{``0},JetBrains.DataFlow.IProperty{``1},JetBrains.DataFlow.IProperty{``2},JetBrains.DataFlow.IProperty{``3},JetBrains.DataFlow.IProperty{``4},System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Creates a simple many-to-one binding.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyBinding.CreateAnd(JetBrains.DataFlow.IProperty{System.Boolean},JetBrains.DataFlow.IProperty{System.Boolean})">
            <summary>
            ANDs two boolean properties.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyBinding.CreateAndMultibinding(JetBrains.DataFlow.IProperty{System.Boolean},JetBrains.DataFlow.IProperty{System.Boolean},JetBrains.DataFlow.IProperty{System.Boolean})">
            <summary>
            Binds two <see cref="T:System.Boolean"/> properties to a third by ANDing their values.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyBinding.CreateCascading``3(JetBrains.DataFlow.IProperty{``0},System.Func{``0,JetBrains.DataFlow.IProperty{``1}},JetBrains.DataFlow.IProperty{``1},JetBrains.DataFlow.IProperty{``2},JetBrains.DataFlow.DataFlowDirection)">
            <summary>
            Creates a cascading binding, Owner.Source ↔ Target, where Source is a property inside the Owner. Owner may change, and each time the Source is taken from the new Owner, and its changes are tracked.
            </summary>
            <param name="sourceowner">The owner object that may change with time, from which the Source for the binding is extracted by the means of the <paramref name="FGetSourceFromOwner"/> converter. Its value may become <c>Null</c>.</param>
            <param name="FGetSourceFromOwner">A function that knows how to find a source for the binding in each new <paramref name="sourceowner"/>. The owner object passed to it is always non-<c>Null</c>, because the <paramref name="propSourceWhenNoOwner"/> value is used automatically when <paramref name="sourceowner"/>'s value gets <c>Null</c>.</param>
            <param name="propSourceWhenNoOwner">When the <paramref name="sourceowner"/>'s <see cref="P:JetBrains.DataFlow.IProperty`1.Value"/> gets <c>Null</c>, this property is used for the binding source instead.</param>
            <param name="target">The target property for the binding.</param>
            <param name="direction">Binding direction.</param>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyBinding.CreateIsNotNull``1(JetBrains.DataFlow.IProperty{``0})">
            <summary>
            Creates a bool property that is bound to whether <paramref name="source"/> is not <c>Null</c>.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyBinding.CreateIsNull``1(JetBrains.DataFlow.IProperty{``0})">
            <summary>
            Creates a bool property that is bound to whether <paramref name="source"/> is <c>Null</c>.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyBinding.CreateNot(JetBrains.DataFlow.IProperty{System.Boolean},JetBrains.DataFlow.IProperty{System.Boolean})">
            <summary>
            Creates a binding that negates a value of the boolean property.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyBinding.CreateNot(JetBrains.DataFlow.IProperty{System.Boolean})">
            <summary>
            Creates a binding that negates a value of the boolean property.
            The negated property is created inplace, and returned as a result.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyBinding.CreateOr(JetBrains.DataFlow.IProperty{System.Boolean},JetBrains.DataFlow.IProperty{System.Boolean})">
            <summary>
            ORs two boolean properties.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyBinding.CreateOrMultibinding(JetBrains.DataFlow.IProperty{System.Boolean},JetBrains.DataFlow.IProperty{System.Boolean},JetBrains.DataFlow.IProperty{System.Boolean})">
            <summary>
            Binds two <see cref="T:System.Boolean"/> properties to a third by ORing their values.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyBinding.MirrorCollection``2(JetBrains.DataFlow.ICollectionEvents{``0},JetBrains.DataFlow.ICollectionEvents{``1},System.Func{``0,``1},System.Object)">
            <summary>
            Mirrors one collection into another.
            </summary>
            <typeparam name="TSource">Type of the source collection items.</typeparam>
            <typeparam name="TTarget">Type of the target collection items.</typeparam>
            <param name="source">The source collection.</param>
            <param name="target">The target collection.</param>
            <param name="funcConverter">If the collection types differ and are unrelated, a converter that produces items for the second collection from the items of the first collection. Note that for the <see cref="F:JetBrains.DataFlow.AddRemove.Remove"/> operation to be mirrored successfully, the converter product must return <see cref="M:System.Object.Equals(System.Object,System.Object)"/> for to projections of the same source item. May be <c>Null</c> if the types could be converted by a simple cast.</param>
            <param name="cookie">An optional cookie for the modifiction operation on the <paramref name="target"/> collection.</param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyBinding.MirrorCollection``2(JetBrains.DataFlow.IListEvents{``0},JetBrains.DataFlow.IListEvents{``1},System.Func{``0,``1},System.Object)">
            <summary>
            Mirrors one collection into another.
            </summary>
            <typeparam name="TSource">Type of the source collection items.</typeparam>
            <typeparam name="TTarget">Type of the target collection items.</typeparam>
            <param name="source">The source collection.</param>
            <param name="target">The target collection.</param>
            <param name="funcConverter">If the collection types differ and are unrelated, a converter that produces items for the second collection from the items of the first collection. Note that the converter is only used for the <see cref="F:JetBrains.DataFlow.AddRemove.Add"/> operation, and there are no limitations on <see cref="M:System.Object.Equals(System.Object,System.Object)"/> of the conversion products. May be <c>Null</c> if the types could be converted by a simple cast.</param>
            <param name="cookie">An optional cookie for the modifiction operation on the <paramref name="target"/> collection.</param>
        </member>
        <member name="T:JetBrains.DataFlow.PropertyBindingDeferred`1">
            <summary>
            Establishes a one-way property binding that defers application of the changes for some grace period.
            If a new change occurs within the grace period, the period is prolongated.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyBindingDeferred`1.#ctor(JetBrains.DataFlow.IProperty{`0},JetBrains.DataFlow.IProperty{`0},System.TimeSpan)">
            <summary>
            Wires up the binding. To destroy, dispose of.
            </summary>
            <param name="source">The source property.</param>
            <param name="target">The target property.</param>
            <param name="graceperiod">The grace period for the changes to be withheld and accumulated.</param>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyBindingDeferred`1.#ctor(JetBrains.DataFlow.IProperty{`0},JetBrains.DataFlow.IProperty{`0},System.TimeSpan,System.Object)">
            <summary>
            Wires up the binding. To destroy, dispose of.
            </summary>
            <param name="source">The source property.</param>
            <param name="target">The target property.</param>
            <param name="graceperiod">The grace period for the changes to be withheld and accumulated.</param>
            <param name="targetcookie">An optional cookie for the <paramref name="target"/>'s write access.</param>
        </member>
        <member name="F:JetBrains.DataFlow.PropertyBindingDeferred`1.GracePeriod">
            <summary>
            Gets or sets the grace period in which the changes to the <see cref="P:JetBrains.DataFlow.PropertyBindingDeferred`1.Source"/> are accumulated.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.PropertyBindingDeferred`1.IncomingCommit">
            <summary>
            Immediately applies the pending changes, if there are any. Otherwise, does nothing.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.PropertyBindingDeferred`1.IsPending">
            <summary>
            Gets whether there currently are any pending changes.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyBindingDeferred`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.DataFlow.PropertyBindingDeferred`1.Source">
            <summary>
            Gets the binding source.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.PropertyBindingDeferred`1.Target">
            <summary>
            Gets the binding target.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.PropertyId`1">
            <summary>
            A typed identifier for a <see cref="T:JetBrains.DataFlow.Property`1"/> that specifies the property name and sets its type.
            Works as a typesafe <see cref="T:JetBrains.DataFlow.PropertyBag"/> accessor.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.PropertyId">
            <summary>
            The untyped base class for a <see cref="T:JetBrains.DataFlow.PropertyId`1">property identifier</see>.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyId.Create``1(System.String)">
            <summary>
            Creates a new strongly-typed property ID.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.PropertyId.Id">
            <summary>
            Gets the non-empty identifier text.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyId`1.#ctor(System.String)">
            <summary>
            Creates the identifier.
            </summary>
            <param name="id">A non-empty string identifier.</param>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyId`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.DataFlow.PropertyId`1.Id">
            <summary>
            Gets the non-empty identifier text.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.PropertyValidationException">
            <summary>
            Thrown when a suggested property value fails to pass the validation.
            </summary>
        </member>
        <member name="T:JetBrains.Util.ValidationException">
            <summary>
            Thrown when a suggested value fails to pass the validation.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.PropertyValidationException.Property">
            <summary>
            The property that was attempted to be changed.
            </summary>
        </member>
        <member name="P:JetBrains.DataFlow.PropertyValidationException.Value">
            <summary>
            The attempted new value.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.PropertyValidator">
            <summary>
            Validates properties by preventing certain values from being assigned to the property.
            Note that for the validator to attach, the original value must pass validation.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyValidator.CreateEnumValidator``1(JetBrains.DataFlow.IProperty{``0})">
            <summary>
            Creates the validtor. It's held by a reference from the property ever since.
            Attaches a validator to the property whose type is an <see cref="T:System.Enum"/>.
            Ensures that the value belongs to the enum values list.
            </summary>
            <param name="property">The proeprty to validate. Must be of an enum-based type.</param>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyValidator.CreateMaximumValidator``1(JetBrains.DataFlow.IProperty{``0},``0)">
            <summary>
            Compares the suggested property values with the maximum, which is inclusive.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyValidator.CreateMinimumValidator``1(JetBrains.DataFlow.IProperty{``0},``0)">
            <summary>
            Compares the suggested property values with the minimum, which is inclusive.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyValidator.CreateNotEmptyValidator(JetBrains.DataFlow.IProperty{System.String})">
            <summary>
            Enforces non-empty values for the string property.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyValidator.CreateReadonlyValidator``1(JetBrains.DataFlow.IProperty{``0},JetBrains.DataFlow.StandardPreconditions.ReadonlyToken)">
            <summary>
            Makes a readonly property. All the legitimate setters must pass the <paramref name="token"/> as an argument.
            If the <paramref name="token"/> is invalid, an exception is thrown.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyValidator.CreateThreadAffinityValidator``1(JetBrains.DataFlow.IProperty{``0},System.Threading.Thread)">
            <summary>
            Ensures the <paramref name="property"/> is modified only on the given <paramref name="thread"/>.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyValidator.CreateThreadAffinityValidator``1(JetBrains.DataFlow.IProperty{``0},JetBrains.Threading.JetDispatcher)">
            <summary>
            Ensures the <paramref name="property"/> is modified only on the <paramref name="dispatcher"/>'s thread.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyValidator.Freeze``1(JetBrains.DataFlow.IProperty{``0})">
            <summary>
            Makes the property “Frozen”, which means its value cannot be changed from now on.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyValidator.Freeze``1(JetBrains.DataFlow.IProperty{``0},System.String)">
            <summary>
            Makes the property “Frozen”, which means its value cannot be changed from now on.
            Allows to specify a custom message.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.PropertyValidatorFluent">
            <summary>
            Fluent-Api property validators from <see cref="T:JetBrains.DataFlow.PropertyValidator"/>.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyValidatorFluent.CoerceToRange``1(JetBrains.DataFlow.Property{``0},``0,``0)">
            <summary>
            Coerces the property values so that they fall into the given range, inclusive. No exceptions are thrown. The soft version of <see cref="M:JetBrains.DataFlow.PropertyValidatorFluent.EnsureNotOutside``1(JetBrains.DataFlow.Property{``0},``0,``0)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyValidatorFluent.EnsureEnum``1(JetBrains.DataFlow.Property{``0})">
            <summary>
            <see cref="M:JetBrains.DataFlow.PropertyValidator.CreateEnumValidator``1(JetBrains.DataFlow.IProperty{``0})"/>.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyValidatorFluent.EnsureInitonly``1(JetBrains.DataFlow.Property{``0})">
            <summary>
            Ensures that only one assignment to the property is allowed.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyValidatorFluent.EnsureNotAbove``1(JetBrains.DataFlow.Property{``0},``0)">
            <summary>
            Compares the suggested property values with the maximum, which is inclusive.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyValidatorFluent.EnsureNotBelow``1(JetBrains.DataFlow.Property{``0},``0)">
            <summary>
            Compares the suggested property values with the minimum, which is inclusive.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyValidatorFluent.EnsureNotOutside``1(JetBrains.DataFlow.Property{``0},``0,``0)">
            <summary>
            Ensures that property values fall into the given range, inclusive. Throws if values out of range. The hard version of <see cref="M:JetBrains.DataFlow.PropertyValidatorFluent.CoerceToRange``1(JetBrains.DataFlow.Property{``0},``0,``0)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyValidatorFluent.EnsureReadonly``1(JetBrains.DataFlow.Property{``0},JetBrains.DataFlow.StandardPreconditions.ReadonlyToken)">
            <summary>
            Makes a readonly property. All the legitimate setters must pass the <paramref name="token"/> as an argument.
            If the <paramref name="token"/> is invalid, an exception is thrown.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyValidatorFluent.EnsureReadonly``1(JetBrains.DataFlow.Signal{``0},JetBrains.DataFlow.StandardPreconditions.ReadonlyToken)">
            <summary>
            Makes a readonly signal. All the legitimate <see cref="M:JetBrains.DataFlow.ISignal`1.Fire(`0,System.Object)"/> calls must pass the <paramref name="token"/> as an argument.
            If the <paramref name="token"/> is invalid, an exception is thrown.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyValidatorFluent.EnsureReadonly(JetBrains.DataFlow.SimpleSignal,JetBrains.DataFlow.StandardPreconditions.ReadonlyToken)">
            <summary>
            Makes a readonly signal. All the legitimate <see cref="M:JetBrains.DataFlow.ISignal`1.Fire(`0,System.Object)"/> calls must pass the <paramref name="token"/> as an argument.
            If the <paramref name="token"/> is invalid, an exception is thrown.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyValidatorFluent.EnsureReadonly``1(JetBrains.DataFlow.CollectionEvents{``0},JetBrains.DataFlow.StandardPreconditions.ReadonlyToken)">
            <summary>
            Makes a readonly collection. All the legitimate modifiers must pass the <paramref name="token"/> as an argument.
            If the <paramref name="token"/> is invalid, an exception is thrown.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyValidatorFluent.EnsureReadonly``1(JetBrains.DataFlow.ListEvents{``0},JetBrains.DataFlow.StandardPreconditions.ReadonlyToken)">
            <summary>
            Makes a readonly list. All the legitimate modifiers must pass the <paramref name="token"/> as an argument.
            If the <paramref name="token"/> is invalid, an exception is thrown.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyValidatorFluent.EnsureThisThread``1(JetBrains.DataFlow.Property{``0})">
            <summary>
            Ensures the <paramref name="property"/> is modified only on the thread this function was called on.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyValidatorFluent.EnsureThisThread``1(JetBrains.DataFlow.Signal{``0})">
            <summary>
            Ensures the <paramref name="signal"/> is fired only on the thread this function was called on.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyValidatorFluent.EnsureThisThread(JetBrains.DataFlow.SimpleSignal)">
            <summary>
            Ensures the <paramref name="signal"/> is fired only on the thread this function was called on.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyValidatorFluent.EnsureThisThread``1(JetBrains.DataFlow.CollectionEvents{``0})">
            <summary>
            Ensures the <paramref name="collection"/> is modified only on the thread this function was called on.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyValidatorFluent.EnsureThisThread``1(JetBrains.DataFlow.ListEvents{``0})">
            <summary>
            Ensures the <paramref name="list"/> is modified only on the thread this function was called on.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.PropertyValidatorFluent.EnsureThisThread``2(JetBrains.DataFlow.DictionaryEvents{``0,``1})">
            <summary>
            Ensures the <paramref name="dictionary"/> is modified only on the thread this function was called on.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.SimpleSignal">
            <summary>
            A simple <see cref="T:JetBrains.DataFlow.ISignal`1"/> that has no payload.
            Stands for the simple <see cref="T:System.EventHandler"/>-based event, but encapsulates the firing method, can take part in data flow, can be fired by an external user.
            Suitable for use in MVC's codebehind, when the event should be fireable by the views.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.SimpleSignal.Fire">
            <summary>
            Fires the signal.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.TryFinally">
            <summary>
            Serves two things: converts an <see cref="T:System.Action"/> into an <see cref="T:System.IDisposable"/>, and allows to replace a <c>try…finally</c> construct with a <c>using</c>, which keeps the opening/closing actions together.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.TryFinally.OptionCaptureStackTraces">
            <summary>
            Whether to capture stack traces, or not.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.TryFinally.CaptureStackTrace">
            <summary>
            Captures the current stack trace, based on the <see cref="F:JetBrains.DataFlow.TryFinally.OptionCaptureStackTraces"/> setting.
            When the setting is <c>False</c>, a faster shortcut method with less info is used.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.TryFinally.CaptureStackTrace(System.Boolean)">
            <summary>
            Captures the current stack trace, based on the <see cref="F:JetBrains.DataFlow.TryFinally.OptionCaptureStackTraces"/> setting.
            When the setting is <c>False</c>, a faster shortcut method with less info is used.
            If <param name="bObeyOptionCaptureStackTraces"/> is <c>False</c>, the stack trace is always fully-captured.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.TryFinally.Enter_NoFinalize(System.Action,System.Action)">
            <summary>
            <para>Enters the TryFinally bracket.</para>
            <para>The <paramref name="opening"/> action is executed immediately, the <paramref name="closing"/> one is executed when the return value is disposed of.</para>
            <para>The disposal is optional, the <paramref name="closing"/> action will not be executed unless you explicitly call <see cref="M:System.IDisposable.Dispose"/>.</para>
            <para>Exceptions in actions are trapped.</para>
            </summary>
            <param name="opening">An action that opens the two-action bracket. Executes immediately on enter.</param>
            <param name="closing">An action that closes the two-action bracket. Executes when you dispose of the return value.</param>
            <returns>A token that executes the <paramref name="closing"/> action when you dispose of it. Disposal is optional.</returns>
        </member>
        <member name="M:JetBrains.DataFlow.TryFinally.Enter_NoFinalize(System.Action)">
            <summary>
            <para>Enters the TryFinally bracket.</para>
            <para>The <paramref name="closing"/> action is executed when the return value is disposed of.</para>
            <para>The disposal is optional, the <paramref name="closing"/> action will not be executed unless you explicitly call <see cref="M:System.IDisposable.Dispose"/>.</para>
            <para>Exceptions in actions are trapped.</para>
            </summary>
            <param name="closing">An action that closes the two-action bracket. Executes when you dispose of the return value.</param>
            <returns>A token that executes the <paramref name="closing"/> action when you dispose of it. Disposal is optional.</returns>
        </member>
        <member name="M:JetBrains.DataFlow.TryFinally.EnterFinalizableFreeThreaded(System.String,System.Action)">
            <summary>
            <para>Enters the TryFinally bracket.</para>
            <para>The <paramref name="closing"/> action is executed when the return value is disposed of.</para>
            <para>The disposal is mandatory, an exception is reported if the <paramref name="closing"/> action is executed by the finalizer.</para>
            <para>Exceptions in actions are trapped.</para>
            </summary>
            <param name="id">Identifies the activity or its owner in case it fails or gets into the finalizer.</param>
            <param name="closing">An action that closes the two-action bracket. Executes when you dispose of the return value.</param>
            <returns>A token that executes the <paramref name="closing"/> action when you dispose of it. Must be disposed of.</returns>
        </member>
        <member name="M:JetBrains.DataFlow.TryFinally.EnterFinalizableFreeThreaded(System.String,System.Action,System.Action)">
            <summary>
            <para>Enters the TryFinally bracket.</para>
            <para>The <paramref name="opening"/> action is executed immediately, the <paramref name="closing"/> one is executed when the return value is disposed of, or when the finalizer for the object is called.</para>
            <para>The disposal is mandatory, an exception is reported if the <paramref name="closing"/> action is executed by the finalizer.</para>
            <para>Exceptions in actions are trapped.</para>
            </summary>
            <param name="id">Identifies the activity or its owner in case it fails or gets into the finalizer.</param>
            <param name="opening">An action that opens the two-action bracket. Executes immediately on enter.</param>
            <param name="closing">An action that closes the two-action bracket. Executes when you dispose of the return value.</param>
            <returns>A token that executes the <paramref name="closing"/> action when you dispose of it. Must be disposed of.</returns>
        </member>
        <member name="M:JetBrains.DataFlow.TryFinally.EnterFinalizableSingleThreaded(System.String,System.Action,System.Action)">
            <summary>
            <para>Enters the TryFinally bracket.</para>
            <para>The <paramref name="opening"/> action is executed immediately, the <paramref name="closing"/> one is executed when the return value is disposed of, or when the finalizer for the object is called.</para>
            <para>The disposal is mandatory, an exception is reported if the <paramref name="closing"/> action is executed by the finalizer, on the same thread as the opening action, if possible.</para>
            <para>Exceptions in actions are trapped.</para>
            </summary>
            <param name="id">Identifies the activity or its owner in case it fails or gets into the finalizer.</param>
            <param name="opening">An action that opens the two-action bracket. Executes immediately on enter.</param>
            <param name="closing">An action that closes the two-action bracket. Executes when you dispose of the return value.</param>
            <returns>A token that executes the <paramref name="closing"/> action when you dispose of it. Must be disposed of.</returns>
        </member>
        <member name="M:JetBrains.DataFlow.TryFinally.StackFramesToString(System.Diagnostics.StackFrame[])">
            <summary>
            Formats the stack frames.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.TryFinally.FinalizableDisposable">
            <summary>
            An <see cref="T:System.IDisposable"/> adapter for an <see cref="T:System.Action"/> (or a pair of actions) that supports finalization.
            Must be disposed of, otherwise, the finalizer will report an error and invoke the closing action.
            </summary>
        </member>
        <member name="T:JetBrains.DataFlow.TryFinally.NonFinalizableDisposable">
            <summary>
            An <see cref="T:System.IDisposable"/> adapter for an <see cref="T:System.Action"/> (or a pair of actions) that does not support finalization.
            Nothing happens if the object is not disposed of.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.TryFinally.NonFinalizableDisposable.myId">
            <summary>
            Identifies the owner of a finalizable object.
            For non-finalizables this is optional (reverts to the default name).
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.TryFinally.NonFinalizableDisposable.myOpeningStackTrace">
            <summary>
            Optionally, captures the originating stack trace for the debugging needs.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.TryFinally.NonFinalizableDisposable.#ctor(System.String,System.Action,System.Action,System.Boolean)">
            <summary>
            Defines the opening and closing bracket actions.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.TryFinally.NonFinalizableDisposable.Close">
            <summary>
            Exec the closing part.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.TryFinally.NonFinalizableDisposable.Open(System.Action)">
            <summary>
            Exec the opening part.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.TryFinally.NonFinalizableDisposable.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="F:JetBrains.DataFlow.TryFinally.FinalizableDisposable.myDispatcher">
            <summary>
            Non-Null if need to marshal from dtor.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.TryFinally.FinalizableDisposable.#ctor(System.String,System.Action,System.Action,System.Boolean,System.Boolean)">
            <summary>
            Defines the opening and closing bracket actions.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.TryFinally.FinalizableDisposable.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.DataFlow.TryFinally.FinallyException">
            <summary>
            An exception thrown from the <see cref="T:JetBrains.DataFlow.TryFinally"/> class.
            </summary>
        </member>
        <member name="F:JetBrains.DataFlow.TryFinally.FinallyException.Id">
            <summary>
            ID of the object that caused the exception.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.TryFinally.FinallyException.LogMissedDispose(System.String,System.String,System.String)">
            <summary>
            Logs the error of a missed or failed dispose into the <see cref="T:JetBrains.Util.Logger"/> with <see cref="M:JetBrains.Util.Logger.LogException(System.Exception)"/>.
            </summary>
            <param name="id">The failed object identity.</param>
            <param name="message">The failure explanation message.</param>
            <param name="sOriginatingStackTrace">The stack trace where the object were created, if available.</param>
        </member>
        <member name="M:JetBrains.DataFlow.TryFinally.FinallyException.LogMissedDispose(System.String)">
            <summary>
            Logs the error of a missed or failed dispose into the <see cref="T:JetBrains.Util.Logger"/> with <see cref="M:JetBrains.Util.Logger.LogException(System.Exception)"/>.
            </summary>
            <param name="id">The failed object identity.</param>
        </member>
        <member name="P:JetBrains.DataFlow.TryFinally.FinallyException.StackTrace">
            <summary>
            Gets a string representation of the frames on the call stack at the time the current exception was thrown.
            </summary>
            
            <returns>
            A string that describes the contents of the call stack, with the most recent method call appearing first.
            </returns>
            <filterpriority>2</filterpriority><PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" /></PermissionSet>
        </member>
        <member name="T:JetBrains.DataFlow.WinFormsProperty">
            <summary>
            Wraps a property with an event into an <see cref="T:JetBrains.DataFlow.IProperty`1"/>.
            </summary>
        </member>
        <member name="M:JetBrains.DataFlow.WinFormsProperty.Create``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean)">
            <summary>
            Returns a data flow property bound to a WinForms standard property (one usually coupled with an event).
            </summary>
            <typeparam name="TSource">Source object type.</typeparam>
            <typeparam name="TValue">Property value type.</typeparam>
            <param name="source">The source winforms property owner.</param>
            <param name="propertyExpression">Expression to retrieve property</param>
            <param name="sinkEvents">Whether to sink the events from the WinForms property about its updates. Looks for an event with the {PropertyName}+“Changed” name.</param>
        </member>
        <member name="M:JetBrains.DataFlow.WinFormsProperty.Create``1(System.Object,System.String,System.Boolean)">
            <summary>
            Returns a data flow property bound to a WinForms standard property (one usually coupled with an event).
            </summary>
            <typeparam name="TValue">Property value type.</typeparam>
            <param name="source">The source winforms property owner.</param>
            <param name="propertyName">The source winforms property name.</param>
            <param name="sinkEvents">Whether to sink the events from the WinForms property about its updates. Looks for an event with the {PropertyName}+“Changed” name.</param>
        </member>
        <member name="T:JetBrains.Text.IBuffer">
            <summary>
            Buffer that allows retrieval of contents by position
            </summary>
        </member>
        <member name="M:JetBrains.Util.DataStructures.RegistrySettingsTable.Load">
            <summary>
            Returns false if the expected key does not exist in the registry
            or exceprion is thrown
            </summary>
        </member>
        <member name="T:JetBrains.Util.EnumEx">
            <summary>
            Extension methods for enums.
            </summary>
        </member>
        <member name="F:JetBrains.Util.EnumEx.myMapEnumValueToName">
            <summary>
            Caches the <see cref="M:JetBrains.Util.EnumEx.GetNamesOfValue(System.Type,System.Object)"/> results, as they use reflection and are thus very slow.
            Copy-on-write, non-locked (the values are expendable and can be regenerated in case of a race).
            </summary>
        </member>
        <member name="M:JetBrains.Util.EnumEx.CoerceEnumValueSlow``1(``0)">
            <summary>
            If the enum value does not fall into the list of valid enum values, coerce it to be the first available enum value.
            This is silent, no exception is thrown.
            Note: this operation is slow, do not use often.
            </summary>
        </member>
        <member name="M:JetBrains.Util.EnumEx.GetNamesOfValue(System.Type,System.Object)">
            <summary>
            Gets all of the alternative names for the value of an enum.
            The value is not required to be coerced to the enum type, it must be of any integral type.
            </summary>
            <param name="type">Enum type.</param>
            <param name="value">Enum value to be named, must be of an integral type.</param>
        </member>
        <member name="M:JetBrains.Util.EnumEx.UnboxQWord(System.Object)">
            <summary>
            Unboxes an object of an integral type (intXXX, bool, byte, char, enum, etc) as a QWORD integer value.
            </summary>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.IP6Address">
            <summary>
            Represents an IPv6 IP Address
            </summary>
            <remarks>
            This struct is used by various classes in
            the <see cref="!:Dns.Records"/> namespace to represent
            IPv6 addresses.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.IP6Address.IPFrag1">
            <summary>
            IP fragment 1
            </summary>
            <remarks>
            IP fragment 1
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.IP6Address.IPFrag2">
            <summary>
            IP fragment 2
            </summary>
            <remarks>
            IP fragment 2
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.IP6Address.IPFrag3">
            <summary>
            IP fragment 3
            </summary>
            <remarks>
            IP fragment 3
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.IP6Address.IPFrag4">
            <summary>
            IP fragment 4
            </summary>
            <remarks>
            IP fragment 4
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.IP6Address.IPFrag5">
            <summary>
            IP fragment 5
            </summary>
            <remarks>
            IP fragment 5
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.IP6Address.IPFrag6">
            <summary>
            IP fragment 6
            </summary>
            <remarks>
            IP fragment 6
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.IP6Address.IPFrag7">
            <summary>
            IP fragment 7
            </summary>
            <remarks>
            IP fragment 7
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.IP6Address.IPFrag8">
            <summary>
            IP fragment 8
            </summary>
            <remarks>
            IP fragment 8
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.IP6Address.ToString">
            <summary>
            returns a string representation of the IP address v6
            </summary>
            <returns>a human readable ipv6 address</returns>
            <remarks>
            Used to display a human readable IPv6 address.
            </remarks>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.IP4_Array">
            <summary>
            Represents an array of IP addresses
            </summary>
            <remarks>
            This struct is used by the DnsQuery API to hold the selected
            DNS servers to query.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.IP4_Array.AddrCount">
            <summary>
            Gets or sets the number of element in the 
            <see cref="F:JetBrains.Util.DnsAPI.IP4_Array.AddrArray"/> array.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.IP4_Array.AddrArray">
            <summary>
            Gets or sets the array of IP addresses
            </summary>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.DnsRecord">
            <summary>
            Represents a complete DNS record (DNS_RECORD)
            </summary>
            <remarks>
            This structure is used to hold a complete DNS record
            as returned from the DnsQuery API.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecord.Next">
            <summary>
            Gets or sets the next record.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecord.Name">
            <summary>
            Gets or sets the name of the record.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecord.RecordType">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecord.DataLength">
            <summary>
            Gets or sets the data length.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecord.Flags">
            <summary>
            Gets or sets the flags.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecord.Ttl">
            <summary>
            Gets or sets the TTL count
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecord.Reserved">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.DnsRecord.DnsRecordFlags">
            <summary>
            Represents the flags of a <see cref="T:JetBrains.Util.DnsAPI.DnsRecord"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecord.DnsRecordFlags.DW">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecord.DnsRecordFlags.S">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.DnsQueryType">
            <summary>
            DNS query types
            </summary>
            <remarks>
            This enum is used by the DnsQuery API call to describe the
            options to be given to a DNS server along with a query.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryType.STANDARD">
            <summary>
            Standard
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryType.ACCEPT_TRUNCATED_RESPONSE">
            <summary>
            Accept truncated response
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryType.USE_TCP_ONLY">
            <summary>
            Use TCP only
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryType.NO_RECURSION">
            <summary>
            No recursion
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryType.BYPASS_CACHE">
            <summary>
            Bypass cache
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryType.NO_WIRE_QUERY">
            <summary>
            Cache only
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryType.NO_LOCAL_NAME">
            <summary>
            Directs DNS to ignore the local name.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryType.NO_HOSTS_FILE">
            <summary>
            Prevents the DNS query from consulting the HOSTS file.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryType.NO_NETBT">
            <summary>
            Prevents the DNS query from using NetBT for resolution.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryType.WIRE_ONLY">
            <summary>
            Directs DNS to perform a query using the network only, 
            bypassing local information.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryType.TREAT_AS_FQDN">
            <summary>
            Treat as FQDN
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryType.ALLOW_EMPTY_AUTH_RESP">
            <summary>
            Allow empty auth response
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryType.DONT_RESET_TTL_VALUES">
            <summary>
            Don't reset TTL values
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryType.RESERVED">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryType.CACHE_ONLY">
            <summary>
            obsolete.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryType.RETURN_MESSAGE">
            <summary>
            Directs DNS to return the entire DNS response message.
            </summary>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.DnsQueryReturnCode">
            <summary>
            The possible return codes of the DNS API call. This enum can
            be used to decypher the <see cref="P:JetBrains.Util.DnsAPI.DnsException.ErrorCode"/>
            property's return value.
            </summary>
            <remarks>
            This enum is used to describe a failed return code by the
            DnsQuery API used in the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> class.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.SUCCESS">
            <summary>
            Successful query
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.UNSPECIFIED_ERROR">
            <summary>
            Base DNS error code
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.MASK">
            <summary>
            Base DNS error code
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.FORMAT_ERROR">
            <summary>
            DNS server unable to interpret format.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.SERVER_FAILURE">
            <summary>
            DNS server failure.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.NAME_ERROR">
            <summary>
            DNS name does not exist.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.NOT_IMPLEMENTED">
            <summary>
            DNS request not supported by name server.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.REFUSED">
            <summary>
            DNS operation refused.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.YXDOMAIN">
            <summary>
            DNS name that ought not exist, does exist.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.YXRRSET">
            <summary>
            DNS RR set that ought not exist, does exist.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.NXRRSET">
            <summary>
            DNS RR set that ought to exist, does not exist.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.NOTAUTH">
            <summary>
            DNS server not authoritative for zone.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.NOTZONE">
            <summary>
            DNS name in update or prereq is not in zone.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.BADSIG">
            <summary>
            DNS signature failed to verify.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.BADKEY">
            <summary>
            DNS bad key.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.BADTIME">
            <summary>
            DNS signature validity expired.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.PACKET_FMT_BASE">
            <summary>
            Packet format
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.NO_RECORDS">
            <summary>
            No records found for given DNS query.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.BAD_PACKET">
            <summary>
            Bad DNS packet.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.NO_PACKET">
            <summary>
            No DNS packet.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.RCODE">
            <summary>
            DNS error, check rcode.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsQueryReturnCode.UNSECURE_PACKET">
            <summary>
            Unsecured DNS packet.
            </summary>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.DnsFreeType">
            <summary>
            Possible arguments for the DnsRecordListFree api
            </summary>
            <remarks>
            This enum is used by the DnsRecordListFree API.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsFreeType.FreeFlat">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsFreeType.FreeRecordList">
            <summary>
            Frees the record list returned by the DnsQuery API
            </summary>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.DnsException">
            <summary>
            Represents the exception that occurs when a <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/>
            fails.
            </summary>
            <remarks>
            <para>
            The exception that occurs when a DNS request fails at any level.
            </para>
            <para>
            This class is used to represent two broad types of exceptions:
            <list type="bullet">
            	<item>Win32 API Exceptions that occurred when calling the DnsQuery API</item>
            	<item>Exceptions of other types that occurred when working with
            	the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> 
            	classes.</item>
            </list>
            </para>
            <para>
            Win32 errors that are DNS specific are specified in the
            <see cref="T:JetBrains.Util.DnsAPI.DnsQueryReturnCode"/> enumeration but if the 
            <see cref="P:JetBrains.Util.DnsAPI.DnsException.ErrorCode"/> returned is not defined in that 
            enum then the number returned will be defined in WinError.h.
            </para>
            <para>
            Exceptions of other types are available through the 
            InnerException property.
            </para>
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.DnsException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:JetBrains.Util.DnsAPI.DnsException"/>
            </summary>
            <remarks>
            Used to raise a <see cref="T:JetBrains.Util.DnsAPI.DnsException"/> with all the default
            properties. The message property will return: Unspecified
            DNS exception.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.DnsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:JetBrains.Util.DnsAPI.DnsException"/>
            </summary>
            <param name="message">the human readable description of the problem</param>
            <remarks>
            Used to raise a <see cref="T:JetBrains.Util.DnsAPI.DnsException"/> where the only important
            information is a description about the error. The <see cref="P:JetBrains.Util.DnsAPI.DnsException.ErrorCode"/>
            property will return 0 or SUCCESS indicating that the DNS API calls
            succeeded, regardless of whether they did or did not.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.DnsException.#ctor(System.String,System.UInt32)">
            <summary>
            Initializes a new instance of <see cref="T:JetBrains.Util.DnsAPI.DnsException"/>
            </summary>
            <param name="message">the human readable description of the problem</param>
            <param name="errcode">the error code (<see cref="T:JetBrains.Util.DnsAPI.DnsQueryReturnCode"/>)
            if the DnsQuery api failed</param>
            <remarks>
            Used to raise a <see cref="T:JetBrains.Util.DnsAPI.DnsException"/> where the underlying DNS
            API call fails. In this case, the <see cref="P:JetBrains.Util.DnsAPI.DnsException.ErrorCode"/> property
            is the most important information about the exception. In most cases,
            the number returned is a value in the <see cref="T:JetBrains.Util.DnsAPI.DnsQueryReturnCode"/>
            enum however, if it is not, the error is defined in WinError.h.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.DnsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:JetBrains.Util.DnsAPI.DnsException"/>
            </summary>
            <param name="message">the human readable description of the 
            problem</param>
            <param name="innerException">the exception that caused the 
            underlying error</param>
            <remarks>
            Used to raise a <see cref="T:JetBrains.Util.DnsAPI.DnsException"/> where the exception is
            some other type but a typeof(DnsException) is desired to be raised
            instead. In this case, the <see cref="P:JetBrains.Util.DnsAPI.DnsException.ErrorCode"/> property
            always returns 0 or SUCCESS and is a useless property.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.DnsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of <see cref="T:JetBrains.Util.DnsAPI.DnsException"/> for <see cref="T:System.Runtime.Serialization.ISerializable"/>
            </summary>
            <param name="info">the serialization information</param>
            <param name="context">the context</param>
            <remarks>
            Used by the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface.
            </remarks>
        </member>
        <member name="P:JetBrains.Util.DnsAPI.DnsException.ErrorCode">
            <summary>
            Gets the error code (<see cref="T:JetBrains.Util.DnsAPI.DnsQueryReturnCode"/>)
            if the DnsQuery api failed. Will be set to success (0) if the API
            didn't fail but another part of the code did.
            </summary>
            <remarks>
            Win32 errors that are DNS specific are specified in the
            <see cref="T:JetBrains.Util.DnsAPI.DnsQueryReturnCode"/> enumeration but if the 
            <see cref="P:JetBrains.Util.DnsAPI.DnsException.ErrorCode"/> returned is not defined in that 
            enum then the number returned will be defined in WinError.h.
            </remarks>
            <value>Value will be defined in WinError.h if not defined in the
            <see cref="T:JetBrains.Util.DnsAPI.DnsQueryReturnCode"/> enum.</value>
            <example>
            This example shows how to decypher the return of the
            ErrorCode property.
            <code>
            try
            {
            	...
            }
            catch(DnsException dnsEx)
            {
            	int errcode = dnsEx.ErrorCode;
            	if (! Enum.IsDefined(typeof(DnsQueryReturnCode), errcode))
            	{
            		//defined in winerror.h
            		Console.WriteLine("WIN32 Error: {0}", errcode);
            		return;
            	}
            	
            	DnsQueryReturnCode errretcode = (DnsQueryReturnCode) errcode;
            	if (errretcode == DnsQueryReturnCode.SUCCESS)
            	{
            		//inner exception contains the goodies
            		Console.WriteLine(dnsEx.InnerException.ToString());
            		return;
            	}
            	
            	//dns error
            	Console.WriteLine("DNS Error: {0}", errretcode.ToString("g"));
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.DnsRecordType">
            <summary>
            DNS record types
            </summary>
            <remarks>
            This enum represents all possible DNS record types that
            could be returned by the DnsQuery API.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.A">
            <summary>
            Address record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.NS">
            <summary>
            Name Server record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.MD">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.MF">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.CNAME">
            <summary>
            Canonical Name record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.SOA">
            <summary>
            Start Of Authority record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.MB">
            <summary>
            Mailbox record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.MG">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.MR">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.NULL">
            <summary>
            NULL data for a DNS resource record.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.WKS">
            <summary>
            Well-Known Service record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.PTR">
            <summary>
            Pointer record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.HINFO">
            <summary>
            Host Information record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.MINFO">
            <summary>
            mail information (MINFO) record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.MX">
            <summary>
            Mail Exchange record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.TEXT">
            <summary> 
            Text record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.RP">
            <summary>
            Responsible Person record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.AFSDB">
            <summary>
            AFS Data Base location record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.X25">
            <summary>
            X25
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.ISDN">
            <summary>
            ISDN
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.RT">
            <summary>
            Route Through
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.NSAP">
            <summary>
            Network service access point address record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.NSAPPTR">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.SIG">
            <summary>
            Cryptographic signature record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.KEY">
            <summary>
            Public key record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.PX">
            <summary>
            Pointer to X.400/RFC822 information record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.GPOS">
            <summary>
            Geographical position record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.AAAA">
            <summary>
            IPv6 address record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.LOC">
            <summary>
            Location record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.NXT">
            <summary>
            Next record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.SRV">
            <summary>
            Server record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.ATMA">
            <summary>
            ATM address (ATMA) record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.TKEY">
            <summary>
            TKEY resource record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.TSIG">
            <summary>
            secret key transaction authentication (TSIG) record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.IXFR">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.AXFR">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.MAILB">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.MAILA">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.ALL">
            <summary>
            All records
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.ANY">
            <summary>
            Any records
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.WINS">
            <summary>
            WINS record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.WINSR">
            <summary>
            Windows Internet Name Service reverse-lookup record
            </summary>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsRecordType.NBSTAT">
            <summary>
            Windows Internet Name Service reverse-lookup record
            </summary>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.DnsServerCollection">
            <summary>
            Represents a collection of servers by hostname or ip address.
            </summary>
            <remarks>
            Represents a collection of DNS servers that were specified as
            hostnames or ip addresses. Regardless of the way the server
            was entered, it is resolved to an <see cref="T:System.Net.IPAddress"/> object
            internally.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.DnsServerCollection.#ctor">
            <summary>
            Creates a new instance of the collection.
            </summary>
            <remarks>
            This initializer creates an instance of the collection.
            The collection will be empty and contain 0 items.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.DnsServerCollection.Add(System.String)">
            <summary>
            Adds a new hostname or ip address representing a DNS server
            to the collection.
            </summary>
            <param name="host">The ip address or hostname of a DNS server
            to add to the collection</param>
            <remarks>
            Adds a DNS server to the collection. The hostname or ip address
            is first resolved to one or more <see cref="T:System.Net.IPAddress"/> instances
            and then added to the collection. If a given hostname resolves
            to 10 ip addresses, those 10 addresses will be added to the collection.
            </remarks>
        </member>
        <member name="P:JetBrains.Util.DnsAPI.DnsServerCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Net.IPAddress"/> instance found at the current
            index of the collection.
            </summary>
            <remarks>
            Gets the <see cref="T:System.Net.IPAddress"/> at the specified index of the
            collection.
            </remarks>
            <param name="idx">The index of the <see cref="T:System.Net.IPAddress"/> to 
            retrieve from the collection.</param>
            <value>The <see cref="T:System.Net.IPAddress"/> at the specified index.</value>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.DnsWrapper">
            <summary>
            Represents a container for a DNS record of any type
            </summary>
            <remarks>
            The <see cref="F:JetBrains.Util.DnsAPI.DnsWrapper.RecordType"/> property's value
            helps determine what type real type of the 
            <see cref="F:JetBrains.Util.DnsAPI.DnsWrapper.RecordData"/> property returns as
            noted in this chart:
            <list type="table">
            	<listheader>
            		<term>RecordType</term>
            		<term>RecordData</term>
            	</listheader>
            	<item>
            		<term>A</term>
            		<description><see cref="!:Dns.Records.ARecord"/></description>
            	</item>
            	<item>
            		<term>CNAME</term>
            		<description><see cref="!:Dns.Records.PTRRecord"/></description>
            	</item>
            	<item>
            		<term>MB</term>
            		<description><see cref="!:Dns.Records.PTRRecord"/></description>
            	</item>
            	<item>
            		<term>MD</term>
            		<description><see cref="!:Dns.Records.PTRRecord"/></description>
            	</item>
            	<item>
            		<term>MF</term>
            		<description><see cref="!:Dns.Records.PTRRecord"/></description>
            	</item>
            	<item>
            		<term>MG</term>
            		<description><see cref="!:Dns.Records.PTRRecord"/></description>
            	</item>
            	<item>
            		<term>MR</term>
            		<description><see cref="!:Dns.Records.PTRRecord"/></description>
            	</item>
            	<item>
            		<term>NS</term>
            		<description><see cref="!:Dns.Records.PTRRecord"/></description>
            	</item>
            	<item>
            		<term>PTR</term>
            		<description><see cref="!:Dns.Records.PTRRecord"/></description>
            	</item>
            	<item>
            		<term>HINFO</term>
            		<description><see cref="!:Dns.Records.TXTRecord"/></description>
            	</item>
            	<item>
            		<term>ISDN</term>
            		<description><see cref="!:Dns.Records.TXTRecord"/></description>
            	</item>
            	<item>
            		<term>X25</term>
            		<description><see cref="!:Dns.Records.TXTRecord"/></description>
            	</item>
            	<item>
            		<term>MINFO</term>
            		<description><see cref="!:Dns.Records.MINFORecord"/></description>
            	</item>
            	<item>
            		<term>RP</term>
            		<description><see cref="!:Dns.Records.MINFORecord"/></description>
            	</item>
            	<item>
            		<term>MX</term>
            		<description><see cref="!:Dns.Records.MXRecord"/></description>
            	</item>
            	<item>
            		<term>AFSDB</term>
            		<description><see cref="!:Dns.Records.MXRecord"/></description>
            	</item>
            	<item>
            		<term>RT</term>
            		<description><see cref="!:Dns.Records.MXRecord"/></description>
            	</item>
            	<item>
            		<term>NULL</term>
            		<description><see cref="!:Dns.Records.NULLRecord"/></description>
            	</item>
            	<item>
            		<term>SOA</term>
            		<description><see cref="!:Dns.Records.SOARecord"/></description>
            	</item>
            	<item>
            		<term>WKS</term>
            		<description><see cref="!:Dns.Records.WKSRecord"/></description>
            	</item>
            	<item>
            		<term>AAAA</term>
            		<description><see cref="!:Dns.Records.AAAARecord"/></description>
            	</item>
            	<item>
            		<term>ATMA</term>
            		<description><see cref="!:Dns.Records.ATMARecord"/></description>
            	</item>
            	<item>
            		<term>NBSTAT</term>
            		<description><see cref="!:Dns.Records.WINSRRecord"/></description>
            	</item>
            	<item>
            		<term>SRV</term>
            		<description><see cref="!:Dns.Records.SRVRecord"/></description>
            	</item>
            	<item>
            		<term>TKEY</term>
            		<description><see cref="!:Dns.Records.TKEYRecord"/></description>
            	</item>
            	<item>
            		<term>TSIG</term>
            		<description><see cref="!:Dns.Records.TSIGRecord"/></description>
            	</item>
            	<item>
            		<term>WINS</term>
            		<description><see cref="!:Dns.Records.WINSRecord"/></description>
            	</item>
            	<item>
            		<term>LOC</term>
            		<description><see cref="!:Dns.Records.LOCRecord"/></description>
            	</item>
            	<item>
            		<term>AXFR</term>
            		<description>null</description>
            	</item>
            	<item>
            		<term>GPOS</term>
            		<description>null</description>
            	</item>
            	<item>
            		<term>IXFR</term>
            		<description>null</description>
            	</item>
            	<item>
            		<term>KEY</term>
            		<description>null</description>
            	</item>
            	<item>
            		<term>MAILA</term>
            		<description>null</description>
            	</item>
            	<item>
            		<term>MAILB</term>
            		<description>null</description>
            	</item>
            	<item>
            		<term>NSAP</term>
            		<description>null</description>
            	</item>
            	<item>
            		<term>NSAPPTR</term>
            		<description>null</description>
            	</item>
            	<item>
            		<term>NXT</term>
            		<description>null</description>
            	</item>
            	<item>
            		<term>PX</term>
            		<description>null</description>
            	</item>
            	<item>
            		<term>SIG</term>
            		<description>null</description>
            	</item>
            	<item>
            		<term>TEXT</term>
            		<description>null</description>
            	</item>
            </list>
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsWrapper.RecordType">
            <summary>
            Gets or sets the type of DNS record contained in the 
            <see cref="F:JetBrains.Util.DnsAPI.DnsWrapper.RecordData"/> property.
            </summary>
            <remarks>
            This property indicates the type of DNS record
            that the <see cref="F:JetBrains.Util.DnsAPI.DnsWrapper.RecordData"/> property is
            holding.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.DnsWrapper.RecordData">
            <summary>
            Gets or sets the DNS record object as denoted in the 
            <see cref="F:JetBrains.Util.DnsAPI.DnsWrapper.RecordType"/> field.
            </summary>
            <remarks>
            This property holds the actual DNS record.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.DnsWrapper.Equals(JetBrains.Util.DnsAPI.DnsRecordType)">
            <summary>
            Determines whether or not this <see cref="T:JetBrains.Util.DnsAPI.DnsWrapper"/>
            instance is equal to a specific <see cref="T:JetBrains.Util.DnsAPI.DnsRecordType"/>
            by comparing the <see cref="F:JetBrains.Util.DnsAPI.DnsWrapper.RecordType"/> property of the
            current <see cref="T:JetBrains.Util.DnsAPI.DnsWrapper"/> against the 
            <see cref="T:JetBrains.Util.DnsAPI.DnsRecordType"/> argument.
            </summary>
            <param name="type">The <see cref="T:JetBrains.Util.DnsAPI.DnsRecordType"/> to compare to.</param>
            <returns>A boolean indicating whether or not this <see cref="T:JetBrains.Util.DnsAPI.DnsWrapper"/>
            object contains a DNS record matching the entered type.</returns>
            <remarks>
            Determines if this <see cref="T:JetBrains.Util.DnsAPI.DnsWrapper"/> is of a specific
            <see cref="T:JetBrains.Util.DnsAPI.DnsRecordType"/>. The comparison does not test the
            <see cref="F:JetBrains.Util.DnsAPI.DnsWrapper.RecordData"/> field.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.DnsWrapper.Equals(System.Object)">
            <summary>
            Determines whether or not this <see cref="T:JetBrains.Util.DnsAPI.DnsWrapper"/> instance
            is equal to another <see cref="T:JetBrains.Util.DnsAPI.DnsWrapper"/> or to a 
            <see cref="T:JetBrains.Util.DnsAPI.DnsRecordType"/> instance.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns>A boolean indicating whether or not this <see cref="T:JetBrains.Util.DnsAPI.DnsWrapper"/>
            object equals the entered object.</returns>
            <remarks>
            Determines if this <see cref="T:JetBrains.Util.DnsAPI.DnsWrapper"/> instance is equal to
            an object. If the object is a <see cref="T:JetBrains.Util.DnsAPI.DnsRecordType"/>, the
            <see cref="M:JetBrains.Util.DnsAPI.DnsWrapper.Equals(JetBrains.Util.DnsAPI.DnsRecordType)"/> method is used to determine
            equality based on the record type. If the object is a <see cref="T:JetBrains.Util.DnsAPI.DnsWrapper"/>
            object, the <see cref="M:JetBrains.Util.DnsAPI.DnsWrapper.CompareTo(System.Object)"/> method is used to determine
            equality. If the object is any other type, the <see cref="T:System.Object"/>
            class's Equal method is used for comparison.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.DnsWrapper.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable 
            for use in hashing algorithms and data structures like a 
            hash table.
            </summary>
            <returns>Integer value representing the hashcode of this 
            instance of <see cref="T:JetBrains.Util.DnsAPI.DnsWrapper"/>.</returns>
            <remarks>
            The GetHashCode method uses the hash codes of the <see cref="F:JetBrains.Util.DnsAPI.DnsWrapper.RecordData"/>
            and <see cref="F:JetBrains.Util.DnsAPI.DnsWrapper.RecordType"/> properties to generate a unique code
            for this particular record type/data combination.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.DnsWrapper.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the 
            comparands. The return value has these meanings:
            <list type="table">
            	<listheader>
            		<term>Value</term>
            		<term>Meaning</term>
            	</listheader>
            	<item>
            		<term>Less than zero</term>
            		<description>This instance is less than obj. The <see cref="F:JetBrains.Util.DnsAPI.DnsWrapper.RecordData"/>
            		types do not match.</description>
            	</item>
            	<item>
            		<term>Zero</term>
            		<description>This instance is equal to obj. </description>
            	</item>
            	<item>
            		<term>Greater than zero</term>
            		<description>This instance is greater than obj. The <see cref="F:JetBrains.Util.DnsAPI.DnsWrapper.RecordType"/>
            		do not match.</description>
            	</item>
            </list>
            </returns>
            <remarks>
            Compares a <see cref="T:JetBrains.Util.DnsAPI.DnsWrapper"/> to this instance by its
            <see cref="F:JetBrains.Util.DnsAPI.DnsWrapper.RecordType"/> and <see cref="F:JetBrains.Util.DnsAPI.DnsWrapper.RecordData"/> properties.
            </remarks>
            <exception cref="T:System.ArgumentException">
            obj is not the same type as this instance.
            </exception>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.DnsWrapperCollection">
            <summary>
            Represents a collection of <see cref="T:JetBrains.Util.DnsAPI.DnsWrapper"/> objects.
            </summary>
            <remarks>
            The DnsWrapperCollection is a collection of <see cref="T:JetBrains.Util.DnsAPI.DnsWrapper"/>
            objects. The resultant collection represents all of the DNS records
            for the given domain that was looked up. This class cannot be directly
            created - it is created by the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and
            <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> classes to hold the returned DNS
            records for the given domain.
            </remarks>
        </member>
        <member name="P:JetBrains.Util.DnsAPI.DnsWrapperCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:JetBrains.Util.DnsAPI.DnsWrapper"/> at the specified
            ordinal in the collection
            </summary>
            <remarks>
            Gets the <see cref="T:JetBrains.Util.DnsAPI.DnsWrapper"/> at the specified
            index of the collection.
            </remarks>
            <param name="i">The index to retrieve from the collection.</param>
            <value>The <see cref="T:JetBrains.Util.DnsAPI.DnsWrapper"/> at the specified index of
            the collection.</value>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.DnsRequest">
            <summary>
            Represents one DNS request. Allows for a complete DNS record lookup 
            on a given domain using the Windows API.
            </summary>
            <remarks>
            <para>
            The DnsRequest class represents a complete DNS request for a given
            domain on a specified DNS server, including all options. The
            DnsRequest class uses the Windows API to do the query and the dlls
            used are only found on Windows 2000 or higher machines. The class
            will throw a <see cref="T:System.NotSupportedException"/> exception if run
            on an machine not capable of using the APIs that are required.
            </para>
            <para>
            Version Information
            </para>
            <para>
            		3/8/2003 v1.1 (C#) - Released on 5/31/2003
            </para>
            <para>
            Created by: Bill Gearhart. Based on code by Patrik Lundin. 
            See version 1.0 remarks below. Specific attention was given
            to the exposed interface which got a 110% overhaul.
            </para>
            <para>
            Notable changes from the previous version:
            <list type="bullet">
            	<item>
            		<description>
            			structs filled with constants were changed to enums
            		</description>
            	</item>
            	<item>
            		<description>
            			.net datatypes were changed to c# datatypes
            		</description>
            	</item>
            	<item>
            		<description>
            			every object is now in it's own *.cs file 
            		</description>
            	</item>
            	<item>
            		<description>
            			custom collections and exceptions added 
            		</description>
            	</item>
            	<item>
            		<description>
            			better object orientation - request and response classes 
            			created for the dns query request/response session so that 
            			it follows the .NET model
            		</description>
            	</item>
            	<item>
            		<description>
            			eliminated duplicate recs returned by an ALL query
            		</description>
            	</item>
            	<item>
            		<description>
            			bad api return code enumeration added
            		</description>
            	</item>
            	<item>
            		<description>
            			ToString() overridden to provide meaningful info for many 
            			of the dns data structs
            		</description>
            	</item>
            	<item>
            		<description>
            			documentation and notes were created for all classes
            		</description>
            	</item>
            	<item>
            		<description>
            			added check to ensure code only runs on w2k or better
            		</description>
            	</item>
            	<item>
            		<description>
            			obsolete DNS record types are now marked as such
            		</description>
            	</item>
            	<item>
            		<description>
            			newer enum values added to DnsQueryType enum
            		</description>
            	</item>
            	<item>
            		<description>
            			compiled html documentation was written which always takes
            			20 times longer than writing the code does.
            		</description>
            	</item>
            	<item>
            		<description>
            			this list of changes was compiled by your's truly...
            		</description>
            	</item>
            	<item>
            		<description>
            			smoothed out object and member names so they were more 
            			intuitive - for instance: DNS_MX_DATA became MXRecord
            		</description>
            	</item>
            	<item>
            		<description>
            			added call to DnsRecordListFree API to free resources after 
            			DnsQuery call
            		</description>
            	</item>
            	<item>
            		<description>
            			altered DnsQuery API call to allow for servers other than the 
            			local DNS server from being queried
            		</description>
            	</item>
            </list>
            </para>
            <para>
            	4/15/2002 v1.0 (C#)
            </para>
            <para>
            Created by: Patrik Lundin
            </para>
            <para>
            Based on code found at: 
            <a href="http://www.c-sharpcorner.com/Code/2002/April/DnsResolver.asp">http://www.c-sharpcorner.com/Code/2002/April/DnsResolver.asp</a>
            		
            <list type="bullet">
            	<item>
            		<description>
            			Initial implementation.
            		</description>
            	</item>
            </list>
            </para>
            </remarks>
            <example>
            Use the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> objects
            together to get DNS information for aspemporium.com from the nameserver
            where the site is hosted.
            <code>
            using System;
            using netlib.Dns;
            using netlib.Dns.Records;
            
            namespace ClassLibrary1
            {
            	class __loader
            	{
            		static void Main()
            		{
            			try
            			{
            				DnsRequest request = new DnsRequest();
            				request.TreatAsFQDN=true;
            				request.BypassCache=true;
            				request.Servers.Add("dns.compresolve.com");
            				request.Domain = "aspemporium.com";
            				DnsResponse response = request.GetResponse();
            
            				Console.WriteLine("Addresses");
            				Console.WriteLine("--------------------------");
            				foreach(ARecord addr in response.ARecords)
            					Console.WriteLine("\t{0}", addr.ToString());
            				Console.WriteLine();
            
            				Console.WriteLine("Name Servers");
            				Console.WriteLine("--------------------------");
            				foreach(PTRRecord ns in response.NSRecords)
            					Console.WriteLine("\t{0}", ns.ToString());
            				Console.WriteLine();
            
            				Console.WriteLine("Mail Exchanges");
            				Console.WriteLine("--------------------------");
            				foreach(MXRecord exchange in response.MXRecords)
            					Console.WriteLine("\t{0}", exchange.ToString());
            				Console.WriteLine();
            
            				Console.WriteLine("Canonical Names");
            				Console.WriteLine("--------------------------");
            				foreach(PTRRecord cname in response.GetRecords(DnsRecordType.CNAME))
            					Console.WriteLine("\t{0}", cname.ToString());
            				Console.WriteLine();
            
            				Console.WriteLine("Start of Authority Records");
            				Console.WriteLine("--------------------------");
            				foreach(SOARecord soa in response.GetRecords(DnsRecordType.SOA))
            					Console.WriteLine("\t{0}", soa.ToString());
            				Console.WriteLine();
            
            				//foreach(DnsWrapper wrap in response.RawRecords)
            				//{
            				//	Console.WriteLine(wrap.RecordType);
            				//}
            
            				response = null;
            				request = null;
            			}
            			catch(DnsException ex)
            			{
            				Console.WriteLine("EXCEPTION DOING DNS QUERY:");
            				Console.WriteLine("\t{0}", ((DnsQueryReturnCode) ex.ErrorCode).ToString("g"));
            
            				if (ex.InnerException != null)
            					Console.WriteLine(ex.InnerException.ToString());
            			}
            		}
            	}
            }
            
            </code>
            </example>
            
        </member>
        <member name="M:JetBrains.Util.DnsAPI.DnsRequest.DnsQuery(System.String,JetBrains.Util.DnsAPI.DnsRecordType,JetBrains.Util.DnsAPI.DnsQueryType,System.IntPtr,System.IntPtr@,System.IntPtr)">
            <summary>
            http://msdn.microsoft.com/library/en-us/dns/dns/dnsquery.asp
            </summary>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.DnsRequest.DnsRecordListFree(System.IntPtr,JetBrains.Util.DnsAPI.DnsFreeType)">
            <summary>
            http://msdn.microsoft.com/library/en-us/dns/dns/dnsrecordlistfree.asp
            </summary>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.DnsRequest.#ctor">
            <summary>
            Creates a new instance of <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/>
            </summary>
            <remarks>
            The <see cref="P:JetBrains.Util.DnsAPI.DnsRequest.Domain"/> property is set to null
            and all other properties have their default value
            of false, except for <see cref="P:JetBrains.Util.DnsAPI.DnsRequest.TreatAsFQDN"/> which has a value
            of true. The system is set to use the local DNS
            server for all queries.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.DnsRequest.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/>
            </summary>
            <remarks>
            The <see cref="P:JetBrains.Util.DnsAPI.DnsRequest.Domain"/> property is set to the domain
            argument and all other properties have their default value
            of false, except for <see cref="P:JetBrains.Util.DnsAPI.DnsRequest.TreatAsFQDN"/> which has a value
            of true. The system is set to use the local DNS
            server for all queries.
            </remarks>
            <param name="domain">The hostname that DNS information is desired for.
            This should not be an ip address. For example: yahoo.com</param>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.DnsRequest.GetResponse">
            <summary>
            Queries the local DNS server for information about 
            this instance of <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and returns
            the response as a <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/>
            </summary>
            <returns>A <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> object containing the response 
            from the DNS server.</returns>
            <exception cref="T:System.NotSupportedException">
            The code is running on a machine lesser than Windows 2000
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="P:JetBrains.Util.DnsAPI.DnsRequest.Domain"/> property is null
            </exception>
            <exception cref="T:JetBrains.Util.DnsAPI.DnsException">
            The DNS query itself failed or parsing of the returned 
            response failed
            </exception>
            <remarks>
            Returns a <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> representing the response
            from the DNS server or one of the exceptions noted in the
            exceptions area, the most common of which is the
            <see cref="T:JetBrains.Util.DnsAPI.DnsException"/>.
            </remarks>
        </member>
        <member name="P:JetBrains.Util.DnsAPI.DnsRequest.Servers">
            <summary>
            Gets a collection of DNS servers to use for the current request.
            If the collection contains no items, the local DNS servers are used.
            </summary>
            <remarks>
            If the collection contains 0 <see cref="T:System.Net.IPAddress"/> references,
            the default DNS servers are used. Otherwise, servers are used in a 
            decending order from their ordinal position in the collection.
            You can add as many DNS Servers as you need to the collection by
            host name or IP address.
            </remarks>
            <value>A <see cref="T:JetBrains.Util.DnsAPI.DnsServerCollection"/> that can be used to 
            manage the DNS servers that will be used for the query.</value>
        </member>
        <member name="P:JetBrains.Util.DnsAPI.DnsRequest.UseTCPOnly">
            <summary>
            Gets or sets whether or not to use TCP only for the query.
            </summary>
            <value>Boolean indicating whether or not to use TCP instead of UDP for the query</value>
            <remarks>
            If set to true, the DNS query will be done via TCP rather than UDP. This
            is useful if the DNS service you are trying to reach is running on
            TCP but not on UDP.
            </remarks>
        </member>
        <member name="P:JetBrains.Util.DnsAPI.DnsRequest.AcceptTruncatedResponse">
            <summary>
            Gets or sets whether or not to accept truncated results — 
            does not retry under TCP.
            </summary>
            <value>Boolean indicating whether or not to accept truncated results.</value>
            <remarks>
            Determines wherher or not the server will be re-queried in the event
            that a response was truncated.
            </remarks>
        </member>
        <member name="P:JetBrains.Util.DnsAPI.DnsRequest.NoRecursion">
            <summary>
            Gets or sets whether or not to perform an iterative query
            </summary>
            <value>Boolean indicating whether or not to use recursion
            to resolve the query.</value>
            <remarks>
            Specifically directs the DNS server not to perform 
            recursive resolution to resolve the query.
            </remarks>
        </member>
        <member name="P:JetBrains.Util.DnsAPI.DnsRequest.BypassCache">
            <summary>
            Gets or sets whether or not to bypass the resolver cache 
            on the lookup. This must be set to true if you specified
            a server in the <see cref="P:JetBrains.Util.DnsAPI.DnsRequest.Servers"/> collection.
            </summary>
            <value>Boolean indicating whether or not to bypass the cache
            and use the list of servers in the <see cref="P:JetBrains.Util.DnsAPI.DnsRequest.Servers"/>
            collection.
            </value>
            <remarks>
            Setting this to true allows you to specify one or more DNS servers
            to query instead of querying the local DNS cache and server.
            If false is set, the list of servers is ignored and the local DNS
            cache and server is used to resolve the query.
            </remarks>
        </member>
        <member name="P:JetBrains.Util.DnsAPI.DnsRequest.QueryCacheOnly">
            <summary>
            Gets or sets whether or not to direct DNS to perform a 
            query on the local cache only
            </summary>
            <value>Boolean indicating whether or not to only use the
            DNS cache to resolve a query.</value>
            <remarks>
            This option allows you to query the local DNS cache only instead
            of making a DNS request over either UDP or TCP.
            This property represents the logical opposite of the
            <see cref="P:JetBrains.Util.DnsAPI.DnsRequest.WireOnly"/> property.
            </remarks>
        </member>
        <member name="P:JetBrains.Util.DnsAPI.DnsRequest.WireOnly">
            <summary>
            Gets or sets whether or not to direct DNS to perform a 
            query using the network only, bypassing local information.
            </summary>
            <value>Boolean indicating whether or not to use the
            network only instead of local information.</value>
            <remarks>
            This property represents the logical opposite of the
            <see cref="P:JetBrains.Util.DnsAPI.DnsRequest.QueryCacheOnly"/> property.
            </remarks>
        </member>
        <member name="P:JetBrains.Util.DnsAPI.DnsRequest.NoLocalName">
            <summary>
            Gets or sets whether or not to direct DNS to ignore the 
            local name.
            </summary>
            <value>Boolean indicating whether or not to ignore the local name.</value>
            <remarks>
            Determines how the DNS query handles local names.
            </remarks>
        </member>
        <member name="P:JetBrains.Util.DnsAPI.DnsRequest.NoHostsFile">
            <summary>
            Gets or sets whether or not to prevent the DNS query from 
            consulting the HOSTS file.
            </summary>
            <value>Boolean indicating whether or not to deny access to
            the HOSTS file when querying.</value>
            <remarks>
            Determines how the DNS query handles accessing the HOSTS file when
            querying for DNS information.
            </remarks>
        </member>
        <member name="P:JetBrains.Util.DnsAPI.DnsRequest.NoNetbt">
            <summary>
            Gets or sets whether or not to prevent the DNS query from 
            using NetBT for resolution.
            </summary>
            <value>Boolean indicating whether or not to deny access to
            NetBT during the query.</value>
            <remarks>
            Determines how the DNS query handles accessing NetBT when
            querying for DNS information.
            </remarks>
        </member>
        <member name="P:JetBrains.Util.DnsAPI.DnsRequest.QueryReturnMessage">
            <summary>
            Gets or sets whether or not to direct DNS to return 
            the entire DNS response message.
            </summary>
            <value>Boolean indicating whether or not to return the entire
            response.</value>
            <remarks>
            Determines how the DNS query expects the response to be
            received from the server.
            </remarks>
        </member>
        <member name="P:JetBrains.Util.DnsAPI.DnsRequest.TreatAsFQDN">
            <summary>
            Gets or sets whether or not to prevent the DNS 
            response from attaching suffixes to the submitted 
            name in a name resolution process.
            </summary>
            <value>Boolean indicating whether or not to allow
            suffix attachment during resolution.</value>
            <remarks>
            Determines how the DNS server handles suffix appending
            to the submitted name during name resolution.
            </remarks>
        </member>
        <member name="P:JetBrains.Util.DnsAPI.DnsRequest.DontResetTTLValues">
            <summary>
            Gets or sets whether or not to store records 
            with the TTL corresponding to the minimum value 
            TTL from among all records
            </summary>
            <value>Boolean indicating whether or not to
            use TTL values from all records.</value>
            <remarks>
            Determines how the DNS query handles TTL values.
            </remarks>
        </member>
        <member name="P:JetBrains.Util.DnsAPI.DnsRequest.Domain">
            <summary>
            Gets or sets the domain to query. The domain must be a hostname,
            not an IP address.
            </summary>
            <remarks>
            This method is expecting a hostname, not an IP address. The
            system will fail with a <see cref="T:JetBrains.Util.DnsAPI.DnsException"/> when
            <see cref="M:JetBrains.Util.DnsAPI.DnsRequest.GetResponse"/> is called if Domain is an IP address.
            </remarks>
            <value>String representing the domain that DNS information
            is desired for. This should be set to a hostname and not an
            IP Address.</value>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.DnsResponse">
            <summary>
            Represents one DNS response. This class cannot be directly created - 
            it is returned by the <see cref="M:JetBrains.Util.DnsAPI.DnsRequest.GetResponse"/> method.
            </summary>
            <remarks>
            The DnsResponse class represents the information returned by a DNS 
            server in response to a <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/>. The DnsResponse
            class offers easy access to all of the returned DNS records for a given
            domain.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.DnsResponse.GetRecords(JetBrains.Util.DnsAPI.DnsRecordType)">
            <summary>
            Returns a collection of DNS records of a specified
            <see cref="T:JetBrains.Util.DnsAPI.DnsRecordType"/>. The collection's data type
            is determined by the type of record being sought in the
            type argument.
            </summary>
            <param name="type">A <see cref="T:JetBrains.Util.DnsAPI.DnsRecordType"/> enumeration
            value indicating the type of DNS record to get from the list of
            all DNS records (available in the <see cref="P:JetBrains.Util.DnsAPI.DnsResponse.RawRecords"/>
            property.</param>
            <returns>an <see cref="T:System.Collections.ArrayList"/> of one of the types
            specified in the <see cref="!:Dns.Records"/> namespace based
            on the <see cref="T:JetBrains.Util.DnsAPI.DnsRecordType"/> argument representing the
            type of DNS record desired.
            </returns>
            <remarks>
            It is recommended that you loop through the results of this
            method as follows for maximum convenience:
            <code>
            foreach (<see cref="!:Dns.Records"/> record in obj.GetRecords(<see cref="T:JetBrains.Util.DnsAPI.DnsRecordType"/>))
            {
            	string s = record.ToString();
            }
            </code>
            The following table indicates the DNS record type you can expect to get
            back based on the <see cref="T:JetBrains.Util.DnsAPI.DnsRecordType"/> requested. Any items returning
            null are not currently supported.
            <list type="table">
            	<listheader>
            		<term>DnsRecordType enumeration value</term>
            		<term>GetRecords() returns</term>
            	</listheader>
            	<item>
            		<term>A</term>
            		<description><see cref="!:Dns.Records.ARecord"/></description>
            	</item>
            	<item>
            		<term>CNAME</term>
            		<description><see cref="!:Dns.Records.PTRRecord"/></description>
            	</item>
            	<item>
            		<term>MB</term>
            		<description><see cref="!:Dns.Records.PTRRecord"/></description>
            	</item>
            	<item>
            		<term>MD</term>
            		<description><see cref="!:Dns.Records.PTRRecord"/></description>
            	</item>
            	<item>
            		<term>MF</term>
            		<description><see cref="!:Dns.Records.PTRRecord"/></description>
            	</item>
            	<item>
            		<term>MG</term>
            		<description><see cref="!:Dns.Records.PTRRecord"/></description>
            	</item>
            	<item>
            		<term>MR</term>
            		<description><see cref="!:Dns.Records.PTRRecord"/></description>
            	</item>
            	<item>
            		<term>NS</term>
            		<description><see cref="!:Dns.Records.PTRRecord"/></description>
            	</item>
            	<item>
            		<term>PTR</term>
            		<description><see cref="!:Dns.Records.PTRRecord"/></description>
            	</item>
            	<item>
            		<term>HINFO</term>
            		<description><see cref="!:Dns.Records.TXTRecord"/></description>
            	</item>
            	<item>
            		<term>ISDN</term>
            		<description><see cref="!:Dns.Records.TXTRecord"/></description>
            	</item>
            	<item>
            		<term>X25</term>
            		<description><see cref="!:Dns.Records.TXTRecord"/></description>
            	</item>
            	<item>
            		<term>MINFO</term>
            		<description><see cref="!:Dns.Records.MINFORecord"/></description>
            	</item>
            	<item>
            		<term>RP</term>
            		<description><see cref="!:Dns.Records.MINFORecord"/></description>
            	</item>
            	<item>
            		<term>MX</term>
            		<description><see cref="!:Dns.Records.MXRecord"/></description>
            	</item>
            	<item>
            		<term>AFSDB</term>
            		<description><see cref="!:Dns.Records.MXRecord"/></description>
            	</item>
            	<item>
            		<term>RT</term>
            		<description><see cref="!:Dns.Records.MXRecord"/></description>
            	</item>
            	<item>
            		<term>NULL</term>
            		<description><see cref="!:Dns.Records.NULLRecord"/></description>
            	</item>
            	<item>
            		<term>SOA</term>
            		<description><see cref="!:Dns.Records.SOARecord"/></description>
            	</item>
            	<item>
            		<term>WKS</term>
            		<description><see cref="!:Dns.Records.WKSRecord"/></description>
            	</item>
            	<item>
            		<term>AAAA</term>
            		<description><see cref="!:Dns.Records.AAAARecord"/></description>
            	</item>
            	<item>
            		<term>ATMA</term>
            		<description><see cref="!:Dns.Records.ATMARecord"/></description>
            	</item>
            	<item>
            		<term>NBSTAT</term>
            		<description><see cref="!:Dns.Records.WINSRRecord"/></description>
            	</item>
            	<item>
            		<term>SRV</term>
            		<description><see cref="!:Dns.Records.SRVRecord"/></description>
            	</item>
            	<item>
            		<term>TKEY</term>
            		<description><see cref="!:Dns.Records.TKEYRecord"/></description>
            	</item>
            	<item>
            		<term>TSIG</term>
            		<description><see cref="!:Dns.Records.TSIGRecord"/></description>
            	</item>
            	<item>
            		<term>WINS</term>
            		<description><see cref="!:Dns.Records.WINSRecord"/></description>
            	</item>
            	<item>
            		<term>LOC</term>
            		<description><see cref="!:Dns.Records.LOCRecord"/></description>
            	</item>
            	<item>
            		<term>AXFR</term>
            		<description>null</description>
            	</item>
            	<item>
            		<term>GPOS</term>
            		<description>null</description>
            	</item>
            	<item>
            		<term>IXFR</term>
            		<description>null</description>
            	</item>
            	<item>
            		<term>KEY</term>
            		<description>null</description>
            	</item>
            	<item>
            		<term>MAILA</term>
            		<description>null</description>
            	</item>
            	<item>
            		<term>MAILB</term>
            		<description>null</description>
            	</item>
            	<item>
            		<term>NSAP</term>
            		<description>null</description>
            	</item>
            	<item>
            		<term>NSAPPTR</term>
            		<description>null</description>
            	</item>
            	<item>
            		<term>NXT</term>
            		<description>null</description>
            	</item>
            	<item>
            		<term>PX</term>
            		<description>null</description>
            	</item>
            	<item>
            		<term>SIG</term>
            		<description>null</description>
            	</item>
            	<item>
            		<term>TEXT</term>
            		<description>null</description>
            	</item>
            </list>
            </remarks>
        </member>
        <member name="P:JetBrains.Util.DnsAPI.DnsResponse.RawRecords">
            <summary>
            Gets a <see cref="T:JetBrains.Util.DnsAPI.DnsWrapperCollection"/> containing
            all of the DNS information that the server returned about
            the queried domain.
            </summary>
            <remarks>
            Returns all of the DNS records retrieved about the domain
            as a <see cref="T:JetBrains.Util.DnsAPI.DnsWrapperCollection"/>. This property
            is wrapped by the <see cref="M:JetBrains.Util.DnsAPI.DnsResponse.GetRecords(JetBrains.Util.DnsAPI.DnsRecordType)"/> method, the
            <see cref="P:JetBrains.Util.DnsAPI.DnsResponse.ARecords"/>, <see cref="P:JetBrains.Util.DnsAPI.DnsResponse.MXRecords"/>, and
            <see cref="P:JetBrains.Util.DnsAPI.DnsResponse.NSRecords"/> properties.
            </remarks>
            <value>Gets a collection of <see cref="T:JetBrains.Util.DnsAPI.DnsWrapper"/> objects.</value>
        </member>
        <member name="P:JetBrains.Util.DnsAPI.DnsResponse.ARecords">
            <summary>
            Gets all the <see cref="T:JetBrains.Util.DnsAPI.ARecord"/> for the queried domain.
            </summary>
            <remarks>
            Uses the <see cref="M:JetBrains.Util.DnsAPI.DnsResponse.GetRecords(JetBrains.Util.DnsAPI.DnsRecordType)"/> method to retrieve an
            array of <see cref="T:JetBrains.Util.DnsAPI.ARecord"/>s representing all the Address
            records for the domain.
            </remarks>
            <value>An array of <see cref="T:JetBrains.Util.DnsAPI.ARecord"/> objects.</value>
        </member>
        <member name="P:JetBrains.Util.DnsAPI.DnsResponse.MXRecords">
            <summary>
            Gets all the <see cref="T:JetBrains.Util.DnsAPI.MXRecord"/> for the queried domain.
            </summary>
            <remarks>
            Uses the <see cref="M:JetBrains.Util.DnsAPI.DnsResponse.GetRecords(JetBrains.Util.DnsAPI.DnsRecordType)"/> method to retrieve an
            array of <see cref="T:JetBrains.Util.DnsAPI.MXRecord"/>s representing all the Mail Exchanger
            records for the domain.
            </remarks>
            <value>An array of <see cref="T:JetBrains.Util.DnsAPI.MXRecord"/> objects.</value>
        </member>
        <member name="P:JetBrains.Util.DnsAPI.DnsResponse.NSRecords">
            <summary>
            Gets all the DNS name servers for the queried domain as an
            array of <see cref="T:JetBrains.Util.DnsAPI.PTRRecord"/>s.
            </summary>
            <remarks>
            Uses the <see cref="M:JetBrains.Util.DnsAPI.DnsResponse.GetRecords(JetBrains.Util.DnsAPI.DnsRecordType)"/> method to retrieve an
            array of <see cref="T:JetBrains.Util.DnsAPI.PTRRecord"/>s representing all the Name Server
            records for the domain.
            </remarks>
            <value>An array of <see cref="T:JetBrains.Util.DnsAPI.PTRRecord"/> objects.</value>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.WKSRecord">
            <summary>
            Represents a DNS Well Known Service record (DNS_WKS_DATA)
            </summary>
            <remarks>
            The WKSRecord structure is used in conjunction with 
            the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> 
            classes to programmatically manage DNS entries.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.WKSRecord.IpAddress">
            <summary>
            Gets or sets the IP address
            </summary>
            <remarks>
            IP address, in the form of an IP4_ADDRESS structure. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.WKSRecord.Protocol">
            <summary>
            Gets or sets the protocol
            </summary>
            <remarks>
            IP protocol for this record. Valid values are UDP or TCP. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.WKSRecord.BitMask">
            <summary>
            Gets or sets the bitmask
            </summary>
            <remarks>
            Mask representing well known service being represented in the RR. 
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.WKSRecord.ToString">
            <summary>
            Returns a string representation of the service record
            </summary>
            <returns></returns>
            <remarks>
            The string returned looks like:
            <code>
            IP Address: [IPADDR] Protocol: [PROTO] BitMask: [BITMASK]
            where [IPADDR] = string representation of <see cref="F:JetBrains.Util.DnsAPI.WKSRecord.IpAddress"/> as specified here <see cref="M:System.Net.IPAddress.ToString"/>
            and   [PROTO] = string representation of <see cref="F:JetBrains.Util.DnsAPI.WKSRecord.Protocol"/>
            and   [BITMASK] = hexadecimal representation of <see cref="F:JetBrains.Util.DnsAPI.WKSRecord.BitMask"/>
            </code>
            </remarks>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.WINSRRecord">
            <summary>
            Represents a DNS Windows Internet Name Service reverse-lookup 
            (WINSR) record (DNS_WINSR_DATA)
            </summary>
            <remarks>
            The WINSRRecord structure is used in conjunction with 
            the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> 
            classes to programmatically manage DNS entries.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.WINSRRecord.MappingFlag">
            <summary>
            Gets or sets the mapping flag
            </summary>
            <remarks>
            WINS mapping flag that specifies whether the record must be included 
            into the zone replication. It may have only two values: 0x80000000 
            and 0x00010000 corresponding to the replication and no-replication 
            (local record) flags, respectively. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.WINSRRecord.LookupTimeout">
            <summary>
            Gets or sets the lookup timeout
            </summary>
            <remarks>
            Time, in seconds, that a DNS Server attempts resolution using WINS 
            lookup. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.WINSRRecord.CacheTimeout">
            <summary>
            Gets or sets the cache timeout
            </summary>
            <remarks>
            Time, in seconds, that a DNS Server using WINS lookup may cache the 
            WINS Server's response. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.WINSRRecord.ResultDomain">
            <summary>
            Gets or sets the result domain name
            </summary>
            <remarks>
            Pointer to a string representing the domain name to append to the 
            returned NetBIOS name. 
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.WINSRRecord.ToString">
            <summary>
            Returns a string representation of this record.
            </summary>
            <returns></returns>
            <remarks>
            The string returned looks like:
            <code>
            mapping flag: [FLAG] lookup timeout: [LOOKUP] cache timeout: [CACHE] result domain: [DOMAIN]
            where [FLAG] = string representation of <see cref="F:JetBrains.Util.DnsAPI.WINSRRecord.MappingFlag"/>
            and   [LOOKUP] = string representation of <see cref="F:JetBrains.Util.DnsAPI.WINSRRecord.LookupTimeout"/>
            and   [CACHE] = string representation of <see cref="F:JetBrains.Util.DnsAPI.WINSRRecord.CacheTimeout"/>
            and   [DOMAIN] = hexadecimal representation of <see cref="F:JetBrains.Util.DnsAPI.WINSRRecord.ResultDomain"/>
            </code>
            </remarks>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.WINSRecord">
            <summary>
            Represents a DNS Windows Internet Name Service (WINS) record (DNS_WINS_DATA)
            </summary>
            <remarks>
            The WINSRecord structure is used in conjunction with 
            the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> 
            classes to programmatically manage DNS entries.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.WINSRecord.MappingFlag">
            <summary>
            Gets or sets the mapping flag
            </summary>
            <remarks>
            WINS mapping flag that specifies whether the record must be 
            included into the zone replication. It may have only two values: 
            0x80000000 and 0x00010000 corresponding to the replication and 
            no-replication (local record) flags, respectively. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.WINSRecord.LookupTimeout">
            <summary>
            Gets or sets the lookup timeout
            </summary>
            <remarks>
            Time, in seconds, that a DNS Server attempts resolution using 
            WINS lookup. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.WINSRecord.CacheTimeout">
            <summary>
            Gets or sets the cache timeout
            </summary>
            <remarks>
            Time, in seconds, that a DNS Server using WINS lookup may cache 
            the WINS Server's response. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.WINSRecord.ServerCount">
            <summary>
            Gets or sets the count of WINS servers
            </summary>
            <remarks>
            Number of WINS Servers listed in the WinsServers member. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.WINSRecord.WinsServers">
            <summary>
            Gets or sets the WINS server array pointer
            </summary>
            <remarks>
            Array of WINS Servers, each of type int . 
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.WINSRecord.ToString">
            <summary>
            Returns a string representation of this record.
            </summary>
            <returns></returns>
            <remarks>
            The string returned looks like:
            <code>
            mapping flag: [FLAG] lookup timeout: [LOOKUP] cache timeout: [CACHE] server count: [SERVERCT] server ptr: [SERVERS]
            where [FLAG] = string representation of <see cref="F:JetBrains.Util.DnsAPI.WINSRecord.MappingFlag"/>
            and   [LOOKUP] = string representation of <see cref="F:JetBrains.Util.DnsAPI.WINSRecord.LookupTimeout"/>
            and   [CACHE] = string representation of <see cref="F:JetBrains.Util.DnsAPI.WINSRecord.CacheTimeout"/>
            and   [SERVERCT] = string representation of <see cref="F:JetBrains.Util.DnsAPI.WINSRecord.ServerCount"/>
            and   [SERVERS] = string representation of <see cref="F:JetBrains.Util.DnsAPI.WINSRecord.WinsServers"/>
            </code>
            </remarks>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.TXTRecord">
            <summary>
            Represents a DNS Text record (DNS_TXT_DATA)
            </summary>
            <remarks>
            The TXTRecord structure is used in conjunction with 
            the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> 
            classes to programmatically manage DNS entries.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TXTRecord.StringCount">
            <summary>
            Gets or sets the string count
            </summary>
            <remarks>
            Number of strings represented in pStringArray. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TXTRecord.StringArray">
            <summary>
            Gets or sets the string array
            </summary>
            <remarks>
            Array of strings representing the descriptive text of the 
            TXT resource record. 
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.TXTRecord.ToString">
            <summary>
            Returns a string representation of this record.
            </summary>
            <returns></returns>
            <remarks>
            The string returned looks like:
            <code>
            string count: [COUNT] string array: [ARR]
            where [COUNT] = string representation of <see cref="F:JetBrains.Util.DnsAPI.TXTRecord.StringCount"/>
            and   [ARR] = string representation of <see cref="F:JetBrains.Util.DnsAPI.TXTRecord.StringArray"/>
            </code>
            </remarks>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.TSIGRecord">
            <summary>
            represents a secret key transaction authentication (TSIG) record (DNS_TSIG_DATA)
            </summary>
            <remarks>
            The TSIGRecord structure is used in conjunction with 
            the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> 
            classes to programmatically manage DNS entries.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TSIGRecord.Algorithm">
            <summary>
            Gets or sets the name algorithm
            </summary>
            <remarks>
            Name of the key used in the domain name syntax. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TSIGRecord.AlgorithmPacket">
            <summary>
            Gets or sets the algorithm packet
            </summary>
            <remarks>
            Pointer to the packet containing the algorithm. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TSIGRecord.Key">
            <summary>
            Gets or sets the key
            </summary>
            <remarks>
            Pointer to the signature. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TSIGRecord.OtherData">
            <summary>
            Gets or sets the other data
            </summary>
            <remarks>
            Pointer to other data. This member is empty unless a BADTIME error is returned.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TSIGRecord.CreateTime">
            <summary>
            Gets or sets the create time
            </summary>
            <remarks>
            Time the key transaction authentication was created, expressed in seconds since the beginning of January 1, 1970, Greenwich Mean Time (GMT), excluding leap seconds. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TSIGRecord.FudgeTime">
            <summary>
            Gets or sets the fudge time
            </summary>
            <remarks>
            Time, in seconds, from which the i64CreateTime may be in error. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TSIGRecord.OriginalXid">
            <summary>
            Gets or sets the original XID
            </summary>
            <remarks>
            Original message identifier. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TSIGRecord.Error">
            <summary>
            Gets or sets the error
            </summary>
            <remarks>
            Error, expressed in expanded RCODE that covers TSIG processing. See Remarks for more information about the TSIG resource record. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TSIGRecord.KeyLength">
            <summary>
            Gets or sets the key length
            </summary>
            <remarks>
            Length, in bytes, of the pSignature member. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TSIGRecord.OtherLength">
            <summary>
            Gets or sets the other length
            </summary>
            <remarks>
            Length, in bytes, of the pOtherData member. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TSIGRecord.AlgNameLength">
            <summary>
            Gets or sets the algorithm length
            </summary>
            <remarks>
            Length, in bytes, of the pNameAlgorithm member. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TSIGRecord.PacketPointers">
            <summary>
            Gets or sets whether or not to use packet pointers
            </summary>
            <remarks>
            Reserved for future use. 
            </remarks>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.TKEYRecord">
            <summary>
             Represents a DNS TKEY resource record, used to 
             establish and delete shared-secret keys between 
             a DNS resolver and server. (DNS_TKEY_DATA)
            </summary>
            <remarks>
            The TKEYRecord structure is used in conjunction with 
            the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> 
            classes to programmatically manage DNS entries.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TKEYRecord.Algorithm">
            <summary>
            Gets or sets the name algorithm
            </summary>
            <remarks>
            Pointer to a string representing the name of the algorithm 
            used with the key. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TKEYRecord.AlgorithmPacket">
            <summary>
            Gets or sets the algorithm packet.
            </summary>
            <remarks>
            Pointer to the packet containing the algorithm. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TKEYRecord.Key">
            <summary>
            Gets or sets the key
            </summary>
            <remarks>
            Pointer to the key. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TKEYRecord.OtherData">
            <summary>
            Gets or sets the other data
            </summary>
            <remarks>
            Reserved for future use. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TKEYRecord.CreateTime">
            <summary>
            Gets or sets the create time
            </summary>
            <remarks>
            Date and time at which the key was created, expressed in seconds 
            since the beginning of January 1, 1970, Greenwich Mean Time (GMT), 
            excluding leap seconds. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TKEYRecord.ExpireTime">
            <summary>
            Gets or sets the expire time
            </summary>
            <remarks>
            Expiration date of the key, expressed in seconds since the beginning 
            of January 1, 1970, Greenwich Mean Time (GMT), excluding leap seconds. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TKEYRecord.Mode">
            <summary>
            Gets or sets the mode
            </summary>
            <remarks>
            Scheme used for key agreement or the purpose of the TKEY DNS Message. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TKEYRecord.Error">
            <summary>
            Gets or sets the error
            </summary>
            <remarks>
            Error, expressed in expanded RCODE that covers TSIG processing and 
            TKEY processing. See Remarks. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TKEYRecord.KeyLength">
            <summary>
            Gets or sets the key length
            </summary>
            <remarks>
            Length, in bytes, of the pSignature member. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TKEYRecord.OtherLength">
            <summary>
            Gets or sets the other length
            </summary>
            <remarks>
            Length, in bytes, of the pOtherData member. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TKEYRecord.AlgNameLength">
            <summary>
            Gets or sets the name algorithm's length
            </summary>
            <remarks>
            Length, in bytes, of the pNameAlgorithm member. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.TKEYRecord.PacketPointers">
            <summary>
            Gets or sets whether or not to use packet pointers
            </summary>
            <remarks>
            Reserved for future use. 
            </remarks>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.SRVRecord">
            <summary>
            Represents a DNS Server record. (DNS_SRV_DATA)
            </summary>
            <remarks>
            The SRVRecord structure is used in conjunction with 
            the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> 
            classes to programmatically manage DNS entries.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SRVRecord.NameNext">
            <summary>
            Gets or sets the name
            </summary>
            <remarks>
            Pointer to a string representing the target host. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SRVRecord.Priority">
            <summary>
            Gets or sets the priority
            </summary>
            <remarks>
            Priority of the target host specified in the owner name. Lower numbers imply higher priority. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SRVRecord.Weight">
            <summary>
            Gets or sets the weight
            </summary>
            <remarks>
            Weight of the target host. Useful when selecting among hosts with the same priority. The chances of using this host should be proportional to its weight. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SRVRecord.Port">
            <summary>
            Gets or sets the port
            </summary>
            <remarks>
            Port used on the terget host for the service. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SRVRecord.Pad">
            <summary>
            Reserved.
            </summary>
            <remarks>
            Reserved. Used to keep pointers DWORD aligned. 
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.SRVRecord.ToString">
            <summary>
            Returns a string representation of this record.
            </summary>
            <returns></returns>
            <remarks>
            The string returned looks like:
            <code>
            name next: [SERVER] priority: [PRIOR] weight: [WEIGHT] port: [PORT]
            where [SERVER] = string representation of <see cref="F:JetBrains.Util.DnsAPI.SRVRecord.NameNext"/>
            and   [PRIOR] = string representation of <see cref="F:JetBrains.Util.DnsAPI.SRVRecord.Priority"/>
            and   [WEIGHT] = string representation of <see cref="F:JetBrains.Util.DnsAPI.SRVRecord.Weight"/>
            and   [PORT] = string representation of <see cref="F:JetBrains.Util.DnsAPI.SRVRecord.Port"/>
            </code>
            </remarks>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.SOARecord">
            <summary>
            Represents a DNS Start Of Authority record (DNS_SOA_DATA)
            </summary>
            <remarks>
            The SOARecord structure is used in conjunction with 
            the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> 
            classes to programmatically manage DNS entries.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SOARecord.PrimaryServer">
            <summary>
            Gets or sets the primary server
            </summary>
            <remarks>
            Pointer to a string representing the name of the authoritative 
            DNS server for the zone to which the record belongs. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SOARecord.Administrator">
            <summary>
            Gets or sets the name of the administrator
            </summary>
            <remarks>
            Pointer to a string representing the name of the responsible party 
            for the zone to which the record belongs. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SOARecord.SerialNo">
            <summary>
            Gets or sets the serial number
            </summary>
            <remarks>
            Serial number of the SOA record. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SOARecord.Refresh">
            <summary>
            Gets or sets the refresh
            </summary>
            <remarks>
            Time, in seconds, before the zone containing this record should be 
            refreshed. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SOARecord.Retry">
            <summary>
            Gets or sets the retry count
            </summary>
            <remarks>
            Time, in seconds, before retrying a failed refresh of the zone to 
            which this record belongs 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SOARecord.Expire">
            <summary>
            Gets or sets the expiration
            </summary>
            <remarks>
            Time, in seconds, before an unresponsive zone is no longer authoritative. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SOARecord.DefaultTtl">
            <summary>
            Gets or sets the default ttl
            </summary>
            <remarks>
            Lower limit on the time, in seconds, that a DNS server or caching 
            resolver are allowed to cache any RRs from the zone to which this 
            record belongs. 
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.SOARecord.ToString">
            <summary>
            Returns a string representation of the Start Of Authority record.
            </summary>
            <returns></returns>
            <remarks>
            The string returned looks like:
            <code>
            administrator: [ADMIN] TTL: [TTL] primary server: [SERVER] refresh: [REFRESH] retry: [RETRY] serial number: [SERIAL]
            where [ADMIN] = string representation of <see cref="F:JetBrains.Util.DnsAPI.SOARecord.Administrator"/>
            and   [TTL] = string representation of <see cref="F:JetBrains.Util.DnsAPI.SOARecord.DefaultTtl"/>
            and   [SERVER] = string representation of <see cref="F:JetBrains.Util.DnsAPI.SOARecord.PrimaryServer"/>
            and   [REFRESH] = string representation of <see cref="F:JetBrains.Util.DnsAPI.SOARecord.Refresh"/>
            and   [RETRY] = string representation of <see cref="F:JetBrains.Util.DnsAPI.SOARecord.Retry"/>
            and   [SERIAL] = string representation of <see cref="F:JetBrains.Util.DnsAPI.SOARecord.SerialNo"/>
            </code>
            </remarks>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.SIGRecord">
            <summary>
            Represents a DNS Cryptographic signature record. (DNS_SIG_DATA)
            </summary>
            <remarks>
            The SIGRecord structure is used in conjunction with 
            the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> 
            classes to programmatically manage DNS entries.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SIGRecord.Signer">
            <summary>
            Gets or sets the signer.
            </summary>
            <remarks>
            Pointer to a string representing the name of the signer that 
            generated the record 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SIGRecord.TypeCovered">
            <summary>
            Gets or sets the type covered
            </summary>
            <remarks>
            Type of RR covered by the signature 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SIGRecord.Algorithm">
            <summary>
            Gets or sets the algorithm
            </summary>
            <remarks>
            Algorithm used with the key specified in the RR. The assigned values are shown in the following table. 
            
            <list type="table">
            	<listheader>
            		<term>Value</term>
            		<term>Meaning</term>
            	</listheader>
            	<item>
            		<term>1</term>
            		<description>RSA/MD5 (RFC 2537)</description>
            	</item>
            	<item>
            		<term>2</term>
            		<description>Diffie-Hellman (RFC 2539)</description>
            	</item>
            	<item>
            		<term>3</term>
            		<description>DSA (RFC 2536)</description>
            	</item>
            	<item>
            		<term>4</term>
            		<description>Elliptic curve cryptography</description>
            	</item>
            </list>
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SIGRecord.LabelCount">
            <summary>
            Gets or sets the label count
            </summary>
            <remarks>
            Number of labels in the original signature RR owner name. The count does not include the NULL label for the root, nor any initial wildcards. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SIGRecord.OriginalTtl">
            <summary>
            Gets or sets the original ttl
            </summary>
            <remarks>
            TTL value of the RR set signed by the signature RR. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SIGRecord.Expiration">
            <summary>
            Gets or sets the expiration
            </summary>
            <remarks>
            Expiration date, expressed in seconds since the beginning of January 1, 1970, Greenwich Mean Time (GMT), excluding leap seconds. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SIGRecord.TimeSigned">
            <summary>
            Gets or sets the time signed
            </summary>
            <remarks>
            Date and time at which the signature becomes valid, expressed in seconds since the beginning of January 1, 1970, Greenwich Mean Time (GMT), excluding leap seconds. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SIGRecord.KeyTag">
            <summary>
            Gets or sets the key tag
            </summary>
            <remarks>
            Method used to choose a key that verifies a signature. See RFC 2535, Appendix C for the method used to calculate a KeyTag.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SIGRecord.Pad">
            <summary>
            Reserved.
            </summary>
            <remarks>
            Reserved. Used to keep byte field aligned. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.SIGRecord.Signature">
            <summary>
            Gets or sets the signature
            </summary>
            <remarks>
            Signature, represented in base 64, formatted as defined in RFC 2535, Appendix A. 
            </remarks>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.PTRRecord">
            <summary>
            Represents the DNS pointer record (DNS_PTR_DATA)
            </summary>
            <remarks>
            The PTRRecord structure is used in conjunction with 
            the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> 
            classes to programmatically manage DNS entries.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.PTRRecord.HostName">
            <summary>
            Gets or sets the hostname of the record.
            </summary>
            <remarks>
            Pointer to a string representing the pointer (PTR) record data.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.PTRRecord.ToString">
            <summary>
            Returns a string representation of the pointer record.
            </summary>
            <returns></returns>
            <remarks>
            The string returned looks like:
            <code>
            Hostname: [HOST]
            where [HOST] = string representation of <see cref="F:JetBrains.Util.DnsAPI.PTRRecord.HostName"/>
            </code>
            </remarks>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.NXTRecord">
            <summary>
            Represents the DNS Next record. (DNS_NXT_DATA)
            </summary>
            <remarks>
            The NXTRecord structure is used in conjunction with 
            the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> 
            classes to programmatically manage DNS entries.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.NXTRecord.NameNext">
            <summary>
            Gets or sets the name.
            </summary>
            <remarks>
            Pointer to a string representing the name of the next domain. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.NXTRecord.TypeBitMap">
            <summary>
            Gets or sets the type bit map
            </summary>
            <remarks>
            Number of elements in the wTypes array. 
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.NXTRecord.ToString">
            <summary>
            Returns a string representation of this record.
            </summary>
            <returns></returns>
            <remarks>
            The string returned looks like:
            <code>
            next: [NAME] type bitmap: [BITMAP]
            where [NAME] = string representation of <see cref="F:JetBrains.Util.DnsAPI.NXTRecord.NameNext"/>
            and   [BITMAP] = hexadecimal representation of <see cref="F:JetBrains.Util.DnsAPI.NXTRecord.TypeBitMap"/>
            </code>
            </remarks>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.NULLRecord">
            <summary>
            Represents NULL data for a DNS resource record. (DNS_NULL_DATA)
            </summary>
            <remarks>
            The NULLRecord structure is used in conjunction with 
            the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> 
            classes to programmatically manage DNS entries.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.NULLRecord.ByteCount">
            <summary>
            Gets or sets the byte count.
            </summary>
            <remarks>
            Number of bytes represented in Data. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.NULLRecord.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <remarks>
            Null data.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.NULLRecord.ToString">
            <summary>
            Returns a string representation of this record.
            </summary>
            <returns></returns>
            <remarks>
            The string returned looks like:
            <code>
            byte count: [BYTECT] data: [DATA]
            where [BYTECT] = string representation of <see cref="F:JetBrains.Util.DnsAPI.NULLRecord.ByteCount"/>
            and   [DATA] = hexadecimal representation of <see cref="F:JetBrains.Util.DnsAPI.NULLRecord.Data"/>
            </code>
            </remarks>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.MXRecord">
            <summary>
            Represents a DNS Mail Exchange record (DNS_MX_DATA).
            </summary>
            <remarks>
            The MXRecord structure is used in conjunction with 
            the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> 
            classes to programmatically manage DNS entries.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.MXRecord.Exchange">
            <summary>
            Gets or sets the exchange's host name
            </summary>
            <remarks>
            Pointer to a string representing the fully qualified domain name 
            (FQDN) of the host willing to act as a mail exchange. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.MXRecord.Preference">
            <summary>
            Gets or sets the preference of the exchange.
            </summary>
            <remarks>
            Preference given to this resource record among others at the same 
            owner. Lower values are preferred. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.MXRecord.Pad">
            <summary>
            Reserved.
            </summary>
            <remarks>
            Reserved. Used to keep pointers DWORD aligned. 
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.MXRecord.ToString">
            <summary>
            Returns a string representation of this mail exchange.
            </summary>
            <returns></returns>
            <remarks>
            The string returned looks like:
            <code>
            exchange (preference): [EXCH] ([PREF])
            where [EXCH] = string representation of <see cref="F:JetBrains.Util.DnsAPI.MXRecord.Exchange"/>
            and   [PREF] = hexadecimal representation of <see cref="F:JetBrains.Util.DnsAPI.MXRecord.Preference"/>
            </code>
            </remarks>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.MINFORecord">
            <summary>
            Represents a DNS mail information (MINFO) record (DNS_MINFO_DATA)
            </summary>
            <remarks>
            The MINFORecord structure is used in conjunction with 
            the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> 
            classes to programmatically manage DNS entries.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.MINFORecord.Mailbox">
            <summary>
            Gets or sets the mailbox name
            </summary>
            <remarks>
            Pointer to a string representing the fully qualified domain name 
            (FQDN) of the mailbox responsible for the mailing list or mailbox 
            specified in the record's owner name. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.MINFORecord.ErrorsMailbox">
            <summary>
            Gets or sets the error mailbox name
            </summary>
            <remarks>
            Pointer to a string representing the FQDN of the mailbox to receive 
            error messages related to the mailing list. 
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.MINFORecord.ToString">
            <summary>
            Returns a string representation of this record.
            </summary>
            <returns></returns>
            <remarks>
            The string returned looks like:
            <code>
            mailbox: [MAILBOX] error mailbox: [ERRMAILBOX]
            where [MAILBOX] = string representation of <see cref="F:JetBrains.Util.DnsAPI.MINFORecord.Mailbox"/>
            and   [ERRMAILBOX] = hexadecimal representation of <see cref="F:JetBrains.Util.DnsAPI.MINFORecord.ErrorsMailbox"/>
            </code>
            </remarks>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.LOCRecord">
            <summary>
            Represents a DNS Location record (DNS_LOC_DATA)
            </summary>
            <remarks>
            <para>
            The LOCRecord structure is used in conjunction with 
            the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> 
            classes to programmatically manage DNS entries.
            </para>
            <para>
            For <see cref="F:JetBrains.Util.DnsAPI.LOCRecord.Altitude"/>, altitude above or 
            below sea level may be used as an approximation of altitude 
            relative to the [WGS 84] spheroid, however, there will be 
            differences due to the Earth's surface not being a perfect 
            spheroid. For example, the geoid (which sea level approximates) 
            for the continental US ranges from 10 meters to 50 meters below 
            the [WGS 84] spheroid. Adjustments to <see cref="F:JetBrains.Util.DnsAPI.LOCRecord.Altitude"/> 
            and/or <see cref="F:JetBrains.Util.DnsAPI.LOCRecord.VerPrec"/> will be necessary in most cases. 
            The Defense Mapping Agency publishes geoid height values relative 
            to the [WGS 84] ellipsoid.
            </para>
            <para>
            For more information about the LOC RR, see RFC 1876.
            </para>
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.LOCRecord.Version">
            <summary>
            Gets or sets the version
            </summary>
            <remarks>
            Version number of the representation. Must be zero. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.LOCRecord.Size">
            <summary>
            Gets or sets the size
            </summary>
            <remarks>
            Diameter of a sphere enclosing the described entity, in centimeters, 
            expressed as a pair of four-bit unsigned integers, each ranging from 
            zero to nine, with the most significant four bits representing the base 
            and the second number representing the power of ten by which to multiply 
            the base. This format allows sizes from 0e0 (&lt;1cm) to 9e9 (90,000km) 
            to be expressed. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.LOCRecord.HorPrec">
            <summary>
            Gets or sets the horizontal precision
            </summary>
            <remarks>
            Horizontal precision of the data, in centimeters, expressed using the 
            same representation as wSize. This is the diameter of the horizontal 
            circle of error, rather than a plus or minus value. Matches the 
            interpretation of wSize; to get a plus or minus value, divide by 2. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.LOCRecord.VerPrec">
            <summary>
            Gets or sets the vertical precision
            </summary>
            <remarks>
            Vertical precision of the data, in centimeters, expressed using the 
            same representation as wSize. This value represents the total potential 
            vertical error, rather than a plus or minus value. Matches the 
            interpretation of wSize; to get a plus or minus value, divide by 2. 
            If altitude above or below sea level is used as an approximation for 
            altitude relative to the [WGS 84] ellipsoid, the precision value should 
            be adjusted.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.LOCRecord.Latitude">
            <summary>
            Gets or sets the latitude of the location
            </summary>
            <remarks>
            Latitude of the center of the sphere described by wSize, expressed as a 
            32-bit integer, with the most significant octet first (network standard 
            byte order), in thousandths of a second of arc. 2^31 represents the 
            equator, larger numbers are north latitude. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.LOCRecord.Longitude">
            <summary>
            Gets or sets the longitude of the location
            </summary>
            <remarks>
            Longitude of the center of the sphere described by wSize, expressed as a 
            32-bit integer, most significant octet first (network standard byte order),
            in thousandths of a second of arc, rounded away from the prime meridian. 
            2^31 represents the prime meridian, larger numbers are east longitude.. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.LOCRecord.Altitude">
            <summary>
            Gets or sets the altitude of the location
            </summary>
            <remarks>
            Altitude of the center of the sphere described by wSize, expressed as a 
            32-bit integer, most significant octet first (network standard byte order),
            in centimeters, from a base of 100,000m below the [WGS 84] reference 
            spheroid used by GPS (semimajor axis a=6378137.0, reciprocal flattening 
            rf=298.257223563). See Remarks for more information. 
            </remarks>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.KEYRecord">
            <summary>
            Represents a Public key DNS record (DNS_KEY_DATA)
            </summary>
            <remarks>
            The KEYRecord structure is used in conjunction with 
            the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> 
            classes to programmatically manage DNS entries.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.KEYRecord.Flags">
            <summary>
            Gets or sets the flags
            </summary>
            <remarks>
            Flags used to specify mapping, as described in IETF RFC 2535. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.KEYRecord.Protocol">
            <summary>
            Gets or sets the protocol
            </summary>
            <remarks>
            Protocol for which the key specified in the resource record can be used. The assigned values are shown in the following table. 
            
            <list type="table">
            	<listheader>
            		<term>Value</term>
            		<term>Meaning</term>
            	</listheader>
            	<item>
            		<term>1</term>
            		<description>TLS</description>
            	</item>
            	<item>
            		<term>2</term>
            		<description>E-Mail</description>
            	</item>
            	<item>
            		<term>3</term>
            		<description>DNSSEC</description>
            	</item>
            	<item>
            		<term>4</term>
            		<description>IPSec</description>
            	</item>
            	<item>
            		<term>255</term>
            		<description>All protocols</description>
            	</item>
            </list>
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.KEYRecord.Algorithm">
            <summary>
            Gets or sets the algorithm
            </summary>
            <remarks>
            Algorithm used with the key specified in the resource record. The assigned values are shown in the following table. 
            
            <list type="table">
            	<listheader>
            		<term>Value</term>
            		<term>Meaning</term>
            	</listheader>
            	<item>
            		<term>1</term>
            		<description>RSA/MD5 (RFC 2537)</description>
            	</item>
            	<item>
            		<term>2</term>
            		<description>Diffie-Hellman (RFC 2539)</description>
            	</item>
            	<item>
            		<term>3</term>
            		<description>DSA (RFC 2536)</description>
            	</item>
            	<item>
            		<term>4</term>
            		<description>Elliptic curve cryptography</description>
            	</item>
            </list>
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.KEYRecord.Key">
            <summary>
            Gets or sets the key
            </summary>
            <remarks>
            Public key, represented in base 64 as described in Appendix A of RFC 2535.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.KEYRecord.ToString">
            <summary>
            Returns a string representation of this record.
            </summary>
            <returns></returns>
            <remarks>
            The string returned looks like:
            <code>
            flags: [FLAGS] protocol: [PROTO] algorithm: [ALGOR] key: [KEY]
            where [FLAGS] = string representation of <see cref="F:JetBrains.Util.DnsAPI.KEYRecord.Flags"/>
            and   [PROTO] = hexadecimal representation of <see cref="F:JetBrains.Util.DnsAPI.KEYRecord.Protocol"/>
            and   [ALGOR] = string representation of <see cref="F:JetBrains.Util.DnsAPI.KEYRecord.Algorithm"/>
            and   [KEY] = hexadecimal representation of <see cref="F:JetBrains.Util.DnsAPI.KEYRecord.Key"/>
            </code>
            </remarks>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.ARecord">
            <summary>
            Represents a DNS Address record (DNS_A_DATA)
            </summary>
            <remarks>
            The ARecord structure is used in conjunction with 
            the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> 
            classes to programmatically manage DNS entries.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.ARecord.Address">
            <summary>
            Gets or sets the ip address.
            </summary>
            <remarks>
            IPv4 address, in the form of an uint datatype. 
            <see cref="P:System.Net.IPAddress.Address"/> could be 
            used to fill this property.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.ARecord.ToString">
            <summary>
            Returns a string representation of the A Record
            </summary>
            <returns></returns>
            <remarks>
            The string returned looks like:
            <code>
            ip address: [ADDRESS]
            where [ADDRESS] = <see cref="M:System.Net.IPAddress.ToString"/>
            </code>
            </remarks>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.AAAARecord">
            <summary>
            Represents a IPv6 Address record (DNS_AAAA_DATA)
            </summary>
            <remarks>
            The AAAARecord structure is used in conjunction with 
            the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> 
            classes to programmatically manage DNS entries.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.AAAARecord.Address">
            <summary>
            Gets or sets the ip6 address
            </summary>
            <remarks>
            IPv6 address, in the form of an <see cref="T:JetBrains.Util.DnsAPI.IP6Address"/> structure. 
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.AAAARecord.ToString">
            <summary>
            returns a string representation of this AAAA record.
            </summary>
            <returns></returns>
            <remarks>
            The string returned looks like:
            <code>
            Address: [ADDRESS]
            where [ADDRESS] = <see cref="M:JetBrains.Util.DnsAPI.IP6Address.ToString"/>
            </code>
            </remarks>
        </member>
        <member name="T:JetBrains.Util.DnsAPI.ATMARecord">
            <summary>
            Represents a DNS ATM address (ATMA) record (DNS_ATMA_DATA)
            </summary>
            <remarks>
            The ATMARecord structure is used in conjunction with 
            the <see cref="T:JetBrains.Util.DnsAPI.DnsRequest"/> and <see cref="T:JetBrains.Util.DnsAPI.DnsResponse"/> 
            classes to programmatically manage DNS entries.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.ATMARecord.AddressType">
            <summary>
            Gets or sets the address type
            </summary>
            <remarks>
            ATM address format. Two possible values are DNS_ATMA_FORMAT_E164 or DNS_ATMA_FORMAT_AESA. 
            </remarks>
        </member>
        <member name="F:JetBrains.Util.DnsAPI.ATMARecord.Address">
            <summary>
            Gets or sets the address
            </summary>
            <remarks>
            ATM address. For E164, represents a NULL-terminated string of less than DNS_ATMA_MAX_ADDR_LENGTH. For AESA, its length is exactly DNS_ATMA_AESA_ADDR_LENGTH. 
            </remarks>
        </member>
        <member name="M:JetBrains.Util.DnsAPI.ATMARecord.ToString">
            <summary>
            Returns a string representation of this record.
            </summary>
            <returns></returns>
            <remarks>
            The string returned looks like:
            <code>
            address type: [TYPE] address: [ADDRESS]
            where [TYPE] = hexadecimal representation of <see cref="F:JetBrains.Util.DnsAPI.ATMARecord.AddressType"/>
            and   [ADDRESS] = string representation of <see cref="F:JetBrains.Util.DnsAPI.ATMARecord.Address"/>
            </code>
            </remarks>
        </member>
        <member name="M:JetBrains.Util.Special.GeneralUtil.QuoteIfNeeded(System.Object)">
            <summary>
            If the string contains spaces, surrounds it with quotes.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Special.GeneralUtil.WithNotNull``1(``0,System.Action{``0})">
            <summary>
            Executes <paramref name="F"/> on the <paramref name="item"/>, if the <paramref name="item"/> is not <c>Null</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Util.WeakHolder`1">
            <summary>
            Represents a typed weak reference which can be compared by target
            </summary>
        </member>
        <member name="T:JetBrains.Text.IEditableBuffer">
            <summary>
            Interface for a buffer supporting efficient editing of content in arbitrary positions
            </summary>
        </member>
        <member name="M:JetBrains.Util.WeakHashSet`1.#ctor(System.Collections.Generic.ICollection{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="F:JetBrains.Util.WeakHashSet`1.Entry.HashCode">
            <summary>
            Cached hash code of the key, -1 means entry is free
            </summary>
        </member>
        <member name="F:JetBrains.Util.WeakHashSet`1.Entry.NextEntryIndex">
            <summary>
            Index of next entry in the chain of keys with the same hashcodes (modulo size), -1 means last
            </summary>
        </member>
        <member name="F:JetBrains.Util.WeakHashSet`1.Entry.PrevEntryIndex">
            <summary>
            Index of previous entry in the chain of keys with the same hashcodes (modulo size), -1 means first
            </summary>
        </member>
        <member name="T:JetBrains.Util.Interop.FixedBuffer">
            <summary>
            Manages an unmanaged buffer with a fixed address in the memory.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Interop.FixedBuffer.bInFinalizationQueue">
            <summary>
            GC can add to final-queue more than once, so track the state. 
            </summary>
        </member>
        <member name="M:JetBrains.Util.Interop.FixedBuffer.#ctor">
            <summary>
            Constructs the object without any allocated memory.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Interop.FixedBuffer.#ctor(System.Int32)">
            <summary>
            Constructs the object and allocates the desired length.
            The object must then be disposed of, to free the memory.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Interop.FixedBuffer.Allocate(System.Int32)">
            <summary>
            Allocates or reallocates the buffer to fit the length specified.
            No attempts are currently made to minimize the number of resizes.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Interop.FixedBuffer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.Util.Interop.FixedBuffer.Address">
            <summary>
            Gets the fixed address of the allocated buffer (safe for passing into unmanaged funcs), throws if not allocated yet.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Interop.FixedBuffer.IsAllocated">
            <summary>
            Gets whether the buffer has been allocated, and its <see cref="P:JetBrains.Util.Interop.FixedBuffer.Length"/> and <see cref="P:JetBrains.Util.Interop.FixedBuffer.Address"/> properties can be accessed.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Interop.FixedBuffer.Length">
            <summary>
            Gets the length of the allocated buffer, throws if not allocated yet.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Interop.ImportAddressTableHook">
            <summary>
            Provides for hooking into the Import Address Table (IAT) of a DLL.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Interop.ImportAddressTableHook.IterationLimit">
            <summary>
            Limits the number or items in the list to guard off infinite loops.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Interop.ImportAddressTableHook.Install(System.String,System.String,System.String,System.Delegate)">
            <summary>
            Installs an Import Address Table (IAT) hook.
            You choose a function (<paramref name="sFuncMod"/>, <paramref name="sFuncName"/>) whose entry will be replaced in the IAT of the specified module (<paramref name="sCallingMod"/>) to point to your own implementation (<see cref="!:pNewFunction"/>) instead.
            </summary>
            <param name="sFuncMod">Name of the module in which the function-to-be-hooked is defined. Example: <c>USER32.DLL</c>.</param>
            <param name="sFuncName">Name of the function to be hooked. Example: <c>SystemParametersInfoW</c>. Note that for the functions that have separate ANSI and Wide versions you must include a suffix in the function name. Must have the <c>stdcall</c> (<c>WINAPI</c>, <c>PASCAL</c>) calling convention.</param>
            <param name="sCallingMod">The module whose IAT is to be patched. Its calls to the Function will be intercepted. Must be loadable with <c>LoadLibrary</c> (or already loaded).</param>
            <param name="pNewFunction">The new implementation to replace the Function, in view of <paramref name="sCallingMod"/>. The hook will hold a reference on the delegate. Note that it's up to you to provide the appropriate signature of the delegate, which must match the one of the Function. Pay attention to the charset and bitness issues.</param>
        </member>
        <member name="M:JetBrains.Util.Interop.ImportAddressTableHook.AssertNoWin32Error">
            <summary>
            Throw on GetLastError.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Interop.ImportAddressTableHook.DelegateAddRef(System.Delegate)">
            <summary>
            Ensures the delegate would not be ever collected.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Interop.ImportAddressTableHook.UnsafeNativeMethods">
            <summary>
            Personal declarations for the WinAPI calls.
            Not shared with WinAPI.Interop, as there're pointers where applicable instead of intptrs.
            Was written to be compatible with ANSI/Wide charsets and 32/64 bit systems.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Interop.ImportAddressTableHook.UnsafeNativeMethods.IMAGE_THUNK_DATA">
            <summary>
            It's DWORD in 32bit and ULONGLONG in 64bit, so use void* for both.
            Yes, there's only one field unioned in there.
            </summary>
        </member>
        <member name="T:JetBrains.Interop.Modules.ControlPaint">
            <summary>
            Encapsulates the utility classes for painting the controls.
            </summary>
        </member>
        <member name="T:JetBrains.Util.IXmlUpgradable">
            <summary>
            If a previous User Settings version is found, and the component implements this interface, it's called with this interface instead of the regular Externalizable.
            Otherwise, the old settings will be passed into the regular interface.
            </summary>
        </member>
        <member name="M:JetBrains.Util.IXmlUpgradable.UpgradeFromXml(System.Xml.XmlElement,System.Version)">
            <summary>
            <para>Called with component's settings taken from the older version of the settings file, for each of the <see cref="P:JetBrains.Util.IXmlUpgradable.LegacyTagNames"/> (even if some of the handlers return <c>True</c>).</para>
            <para><see cref="M:JetBrains.Util.IXmlExternalizable.ReadFromXml(System.Xml.XmlElement)"/> will not be called if any of the calls returns <c>True</c>.</para>
            <para>The settings-reading protocol might be executed more than once thru the component lifetime.</para>
            </summary>
            <param name="element">An XML element with component settings, taken from the settings file.</param>
            <param name="version">Version of the product that supposedly produced the legacy settings file we're upgrading from, or an empty <see cref="T:System.Version"/> instance if those are not known.</param>
            <returns>Whether the component has upgraded. Its normal <see cref="M:JetBrains.Util.IXmlExternalizable.ReadFromXml(System.Xml.XmlElement)"/> will not be called if that is the case.</returns>
        </member>
        <member name="P:JetBrains.Util.IXmlUpgradable.LegacyTagNames">
            <summary>
            Element names for the component under which it used to be known in the old settings files.
            </summary>
        </member>
        <member name="T:JetBrains.Util.DebugOutputLogEventListener">
            <summary>
            Listens for the <see cref="T:JetBrains.Util.Logger"/> events and reports them into the Debug stream.
            </summary>
        </member>
        <member name="M:JetBrains.Util.DebugOutputLogEventListener.#ctor(System.String)">
            <summary>
            Constructs the listener.
            </summary>
            <param name="prefix">A prefix that will be prepended to each of the output lines.</param>
        </member>
        <member name="F:JetBrains.Util.DebugOutputLogEventListener.OptionDontWriteDebugStream">
            <summary>
            Helper flag to prevent the logger messages from being emitted as traces when it's known that the message will get into the traces with some other means.
            Eg when capturing Trace::WriteLine into the Logger, the logger should be prevented from emitting it to the Debug stream, as it will be a duplicate.
            </summary>
        </member>
        <member name="M:JetBrains.Util.DebugOutputLogEventListener.WriteDebugStream(System.String,System.String)">
            <summary>
            Writes a <paramref name="body"/> string to the Debug output stream.
            Appends the <paramref name="prefix"/> to the beginning of each line for the filtering needs.
            </summary>
        </member>
        <member name="M:JetBrains.Util.DebugOutputLogEventListener.ExtractPrefix(System.String@,System.String@)">
            <summary>
            Attempts to extract the prefix out of the message string, so that it could be appended to each of the message lines, and each of the lines were filterable by the prefix.
            The message is considered to contain the prefix if it starts with a “[” and has a “]” after that.
            If the default prefix <see cref="F:JetBrains.Util.DebugOutputLogEventListener.myPrefix"/> is not empty, it's prepended to the message prefix, separated by a space.
            </summary>
        </member>
        <member name="M:JetBrains.Util.DebugOutputLogEventListener.CombinePrefices(System.String)">
            <summary>
            Combines the predefined object prefix with the given prefix. Both might be empty.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Logger.ourLogListenersWriteLock">
            <summary>
            Writer lock for <see cref="F:JetBrains.Util.Logger.ourLogListeners"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Logger.ourLogListeners">
            <summary>
            Listeners added with <see cref="M:JetBrains.Util.Logger.AppendListener(JetBrains.Util.ILogEventListener)"/>.
            Copy-on-write, lock when modifying only. Calls are fast, (un)advising is slow (could be rewritten with array ops instead of LINQ), but the latter ops are rare, not worth bothering.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Logger.LogFileNamePrefix">
            <summary>
            Prefix of the log file name, in case it's generated automatically.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Logger.LogsSubfolderName">
            <summary>
            Subfolder inside the user's temp where the log files are stored.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Logger.Annotate(System.Action,System.Action{System.Exception})">
            <summary>
            <para>Executes the <paramref name="F">nested action</paramref>.</para>
            <para>If the action fails with an exception, allows to annotate the exception with additional context info in <paramref name="FCommentException"/>.</para>
            <para>The choices for the annotation are:</para>
            <list type="numbered">
            <item>To refine the context information, call the <see cref="M:JetBrains.Util.ExceptionEx.AddData``1(``0,System.String,System.Func{System.Object})"/> fluent method on the exception object you're given.</item>
            <item>To add one more level of context, throw a new exception nesting the orignial one as an <see cref="P:System.Exception.InnerException"/>.</item>
            </list>
            </summary>
            <param name="F">The worker code whose exceptions will be annotated.</param>
            <param name="FCommentException">Called only when the <paramref name="F">worker code</paramref> throws an exception. Allows to add context-related information to the exception.</param>
        </member>
        <member name="M:JetBrains.Util.Logger.AppendListener(JetBrains.Util.ILogEventListener)">
            <summary>
            Adds a listener. Checks for duplicates automatically.
            </summary>
            <returns>A token for removing the listener.</returns>
        </member>
        <member name="M:JetBrains.Util.Logger.Assert(System.Boolean,System.String)">
            <summary>
            Invokes <see cref="M:JetBrains.Util.Logger.Fail(System.String)"/> if the <paramref name="condition"/> is <c>False</c>.
            Without <see cref="P:JetBrains.Util.Logger.AllowExceptions"/> is guaranteed to return.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Logger.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            Invokes <see cref="M:JetBrains.Util.Logger.Fail(System.String)"/> if the <paramref name="condition"/> is <c>False</c>.
            Without <see cref="P:JetBrains.Util.Logger.AllowExceptions"/> is guaranteed to return.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Logger.Catch(System.Action)">
            <summary>
            Executes the <paramref name="action"/>. Catches all of the exceptions, reports them, and ensures guaranteed return (unless <see cref="P:JetBrains.Util.Logger.AllowExceptions"/>).
            </summary>
        </member>
        <member name="M:JetBrains.Util.Logger.Catch(System.String,System.Action)">
            <summary>
            Executes the <paramref name="action"/>. Catches all of the exceptions, reports them, and ensures guaranteed return (unless <see cref="P:JetBrains.Util.Logger.AllowExceptions"/>).
            </summary>
        </member>
        <member name="M:JetBrains.Util.Logger.CatchIgnore(System.Action)">
            <summary>
            Executes the <paramref name="action"/>. Catches all of the exceptions, suppresses them without logging, and ensures guaranteed return.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Logger.CatchSilent(System.Action)">
            <summary>
            Executes the <paramref name="action"/>. Catches all of the exceptions, suppresses them (logs silently), and ensures guaranteed return.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Logger.CleanupOldLogFiles">
            <summary>
            Logs are stored for a week. Old log files are deleted by this function.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Logger.DropException(System.Exception)">
            <summary>
            Drops the exception by doing nothing with it, not even logging it silently (unlike <see cref="M:JetBrains.Util.Logger.LogExceptionSilently(System.Exception)"/>).
            Use it to:
            (1) Stub catch-alls to avoid "empty general catch clause" warnings.
            (2) Explicitly mark such exception-hiding places for the later reviewing.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Logger.Fail(System.String)">
            <summary>
            Logs the exception made from <paramref name="messageText"/>, as <see cref="M:JetBrains.Util.Logger.LogExceptionEx(System.Exception,System.String,System.Boolean)"/> would do.
            Without <see cref="P:JetBrains.Util.Logger.AllowExceptions"/> is guaranteed to return.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Logger.Fail(System.String,System.Object[])">
            <summary>
            Logs the exception made from <paramref name="format"/>, as <see cref="M:JetBrains.Util.Logger.LogExceptionEx(System.Exception,System.String,System.Boolean)"/> would do.
            Without <see cref="P:JetBrains.Util.Logger.AllowExceptions"/> is guaranteed to return.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Logger.Flush">
            <summary>
            Flushes the toilet to reduce the scent.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Logger.FormatStringSafe(System.String,System.Object[])">
            <summary>
            Invokes <see cref="M:System.String.Format(System.String,System.Object[])"/>, if it throws, falls back to appending the args as strings.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Logger.LogError(System.String)">
            <summary>
            Invokes all the listeners for logging the message as an error.
            Then constructs an exception and logs it (again invoking the listeners, but for logging an exception this time).
            </summary>
        </member>
        <member name="M:JetBrains.Util.Logger.LogError(System.String,System.Object[])">
            <summary>
            Invokes all the listeners for logging the message as an error.
            Then constructs an exception and logs it (again invoking the listeners, but for logging an exception this time).
            </summary>
        </member>
        <member name="M:JetBrains.Util.Logger.LogException(System.Exception)">
            <summary>
            Writes the exception to the log and notifies the listeners about it.
            The executing stack trace is also written (see <see cref="M:JetBrains.Util.Logger.LogExceptionEx(System.Exception,System.String,System.Boolean)"/> for suppressing).
            </summary>
        </member>
        <member name="M:JetBrains.Util.Logger.LogException(System.String,System.Exception)">
            <summary>
            Writes the exception to the log and notifies the listeners about it.
            The executing stack trace is also written (see <see cref="M:JetBrains.Util.Logger.LogExceptionEx(System.Exception,System.String,System.Boolean)"/> for suppressing).
            </summary>
        </member>
        <member name="M:JetBrains.Util.Logger.LogExceptionEx(System.Exception,System.String,System.Boolean)">
            <summary>
            Logs an exception together with a comment, optionally dumping the current stack.
            </summary>
            <param name="ex">The exception to log.</param>
            <param name="comment">A comment to the exception; ignored if <paramref name="bDumpCurrentStack"/> is <c>False</c>.</param>
            <param name="bDumpCurrentStack">Whether to dump the current executing stack in addition to the exception's stack.
             This is done by constructing a new exception and supplying <paramref name="ex"/> as its inner.</param>
        </member>
        <member name="M:JetBrains.Util.Logger.LogExceptionSilently(System.Exception)">
            <summary>
            Logs the exception without notifying the registered listeners about it.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Logger.LogMessage(JetBrains.Util.LoggingLevel,System.String)">
            <summary>
            Logs a message if it is not too verbose.
            The message is prepended with a timestamp and written to the log. The listeners are notified.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Logger.LogMessage(JetBrains.Util.LoggingLevel,System.String,System.Object[])">
            <summary>
            Logs a message if it is not too verbose.
            The message is prepended with a timestamp and written to the log. The listeners are notified.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Logger.LogMessage(System.String)">
            <summary>
            Logs a message if it is not <see cref="F:JetBrains.Util.LoggingLevel.VERBOSE"/>.
            The message is prepended with a timestamp and written to the log. The listeners are notified.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Logger.LogMessage(System.String,System.Object[])">
            <summary>
            Logs a message if it is not <see cref="F:JetBrains.Util.LoggingLevel.NORMAL"/>.
            The message is prepended with a timestamp and written to the log. The listeners are notified.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Logger.Log(System.Object,System.IO.TextWriter)">
            <summary>
            The logging implementation. Logs the object's string representation.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Logger.Log(System.String)">
            <summary>
            A simpler function for logging non-formatted strings that does not create an array.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Logger.LogExceptionCore(System.Exception,JetBrains.Util.Logger.LogExceptionCoreFlags)">
            <summary>
            Implements full logging of a single exception by first doing <see cref="M:JetBrains.Util.Logger.LogExceptionSilently(System.Exception)"/> to it and then invoking the listeners.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Logger.LogExceptionCore_WriteLog(System.Exception,JetBrains.Util.Logger.LogExceptionCoreFlags)">
            <summary>
            Subroutine to write each exception to the log output.
            Renders the exception message and text.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Logger.AllowExceptions">
            <summary>
            Gets or sets whether the exceptions raised by the exception and log listeners will be allowed out of the logger methods marked as safe for exceptions.
            Needed for running tests.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Logger.FileLoggingLevel">
            <summary>
            Defines the minimum level for the messages from <see cref="M:JetBrains.Util.Logger.LogMessage(System.String)"/>-family to be logged into the log file.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Logger.LogExceptionCoreFlags.WriteLog">
            <summary>
            The exception will be written to the log file.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Logger.LogExceptionCoreFlags.NotifyListeners">
            <summary>
            <see cref="T:JetBrains.Util.ILogEventListener"/>s are notified of the exception.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Logger.LogExceptionCoreFlags.RenderExceptionData">
            <summary>
            <see cref="T:JetBrains.Util.ExceptionRenderer"/> is used for extracting exception data instead of just ToString(), which is slower but gives much more details.
            </summary>
        </member>
        <member name="T:JetBrains.Util.TextWriterLogEventListener">
            <summary>
            Listens to the Logger events and writes them down into a <see cref="T:System.IO.TextWriter"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Util.TextWriterLogEventListener.CreateFileLogger(System.String)">
            <summary>
            Creates a logger that logs to a file. Starts listening to the events immediately, dispose of to stop.
            </summary>
            <param name="identity">Helps distinguish the file name. Should be filename-friendly.</param>
        </member>
        <member name="M:JetBrains.Util.TextWriterLogEventListener.PushToLogger">
            <summary>
            Adds self to the logger, removes when retval or this object is disposed of.
            </summary>
        </member>
        <member name="M:JetBrains.Util.TextWriterLogEventListener.Log(System.Object)">
            <summary>
            The logging implementation. Logs the object's string representation.
            </summary>
        </member>
        <member name="M:JetBrains.Util.TextWriterLogEventListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.Threading.JetDispatcher">
            <summary>
            Emulates the <c>System.Windows.Threading.Dispatcher</c> class on top of netfx20.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.JetDispatcher.RunThreadWaitTimeout">
            <summary>
            Timeout for <see cref="M:JetBrains.Threading.JetDispatcher.Run"/> method's waiting for messages.
            If non-infinite, wakes the thread from time to time, which is nice for the tests (but not essential).
            </summary>
        </member>
        <member name="F:JetBrains.Threading.JetDispatcher.myControlInstanceForStaticMethods">
            <summary>
            There're static methods that require a control this.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.JetDispatcher.myDispatchers">
            <summary>
            Dispatchers by their owning threads.
            Copy-on-write: instances are readonly, reads are lock-free, writes are lock-and-replace (<see cref="F:JetBrains.Threading.JetDispatcher.myDispatchersWriterLock"/>).
            </summary>
        </member>
        <member name="F:JetBrains.Threading.JetDispatcher.myDispatchersWriterLock">
            <summary>
            Syncs write access to <see cref="F:JetBrains.Threading.JetDispatcher.myDispatchers"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.JetDispatcher.myDontRun">
            <summary>
            Means the <see cref="M:JetBrains.Threading.JetDispatcher.Run"/> method should abort.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.JetDispatcher.#ctor">
            <summary>
            Creates an instance, for use only from <see cref="P:JetBrains.Threading.JetDispatcher.CurrentDispatcher"/>.
            Must be called under the <see cref="F:JetBrains.Threading.JetDispatcher.myDispatchersWriterLock"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Threading.JetDispatcher.Thread">
            <summary>
            Gets the thread the dispatcher is running on.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.JetDispatcher.AssertFreeThreaded">
            <summary>
            Asserts that the calling method is free-threaded. A marker function that does not do anything.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.JetDispatcher.CreateDispatcherThread(System.String)">
            <summary>
            Creates a new <see cref="F:System.Threading.ApartmentState.STA"/> <see cref="T:System.Threading.Thread"/> that is controlled by a <see cref="T:JetBrains.Threading.JetDispatcher"/>.
            To stop the thread, use <see cref="M:JetBrains.Threading.JetDispatcher.BeginInvokeShutdown"/>.
            </summary>
            <param name="name">Arbitrary name for the new thread.</param>
        </member>
        <member name="M:JetBrains.Threading.JetDispatcher.FromThread(System.Threading.Thread)">
            <summary>
            Tries to get a dispatcher for the specified <paramref name="thread"/>, if already created.
            Returns <c>Null</c> if no dispatcher is running on that thread. To create a new dispatcher, use the <see cref="P:JetBrains.Threading.JetDispatcher.CurrentDispatcher"/> property on the desired thread.
            </summary>
            <param name="thread">The thread to get a dispatcher for.</param>
            <returns>The existing dispatcher for that thread, or <c>Null</c>.</returns>
        </member>
        <member name="M:JetBrains.Threading.JetDispatcher.PumpMessagesOnce">
            <summary>
            Pumps all the Windows messages (and async actions) currently on the queue, and terminates.
            </summary>
            <returns>The number of messages actually pumped.</returns>
        </member>
        <member name="M:JetBrains.Threading.JetDispatcher.Run(JetBrains.DataFlow.IProperty{System.Boolean},System.TimeSpan,System.Boolean)">
            <summary>
            Pumps the Windows messages on the current thread (which includes all of the async operations and marshallings) while the given <paramref name="condition"/> is true, but for at most <paramref name="timeout"/> period of time.
            Returns whether the wait succeeded (timeout was not reached), unless <paramref name="bThrowOnTimeout"/> is <c>True</c>, in which case an exception is thrown.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.JetDispatcher.Run(System.Func{System.Boolean},System.TimeSpan,System.Boolean)">
            <summary>
            Pumps the Windows messages on the current thread (which includes all of the async operations and marshallings) while the given <paramref name="condition"/> is true, but for at most <paramref name="timeout"/> period of time.
            Returns whether the wait succeeded (timeout was not reached), unless <paramref name="bThrowOnTimeout"/> is <c>True</c>, in which case an exception is thrown.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.JetDispatcher.Run(System.TimeSpan)">
            <summary>
            Pumps the Windows messages on the current thread (which includes all of the async operations and marshallings) for the <paramref name="timeout"/> period of time.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.JetDispatcher.Run">
            <summary>
            Employs the current thread.
            Pumps the Windows messages on the current thread (which includes all of the async operations and marshallings) until <see cref="M:JetBrains.Threading.JetDispatcher.BeginInvokeShutdown"/> is invoked for this dispatcher.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.JetDispatcher.AssertAccess">
            <summary>
            Throws if the current thread is not the thread associated with this dispatcher.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.JetDispatcher.AssertAsyncBehaviorSupported">
            <summary>
            Throws if asynchronous operations are not supported on the dispatcher thread.
            </summary>
            <seealso cref="P:JetBrains.Threading.JetDispatcher.IsAsyncBehaviorProhibited"/>
        </member>
        <member name="M:JetBrains.Threading.JetDispatcher.BeginInvoke(System.String,System.Action)">
            <summary>
            Invokes an action on the dispatcher thread, asynchronously.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.JetDispatcher.BeginInvokeShutdown">
            <summary>
            Shuts down a dispatcher on its thread, asynchronously.
            Breaks the <see cref="M:JetBrains.Threading.JetDispatcher.Run"/>, if any.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.JetDispatcher.BeginOrInvoke(System.String,System.Action)">
            <summary>
            Invokes an action on the dispatcher thread, synchronously, if called on the same thread, or asynchronously, if called on another thread.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.JetDispatcher.CheckAccess">
            <summary>
            Returns whether the calling thread is the thread associated with this dispatcher.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.JetDispatcher.Invoke(System.String,System.Action)">
            <summary>
            Invokes an action on the dispatcher thread, synchronously.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.JetDispatcher.InternalPumpMessagesOnce">
            <summary>
            Implements a custom message pump for pumping all of the messages currently in the queue.
            </summary>
            <returns>The number of messages pumped.</returns>
        </member>
        <member name="M:JetBrains.Threading.JetDispatcher.InternalWaitForMessages(System.Int32)">
            <summary>
            Waits until there are messages in the queue, for the <paramref name="timeout"/> milliseconds at most (-1 to wait infinitely).
            </summary>
        </member>
        <member name="M:JetBrains.Threading.JetDispatcher.Init">
            <summary>
            Init the instance (activities not related to the registration of this instance).
            </summary>
        </member>
        <member name="M:JetBrains.Threading.JetDispatcher.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.Threading.JetDispatcher.CurrentDispatcher">
            <summary>
            Gets or creates a dispatcher for the current thread.
            </summary>
        </member>
        <member name="P:JetBrains.Threading.JetDispatcher.IsAsyncBehaviorProhibited">
            <summary>
            <para>Gets or sets whether posting messages to the dispatcher thread is allowed or not.</para>
            <para>If the thread has no message pump, or is not pumping currently, you can prohibit queueing the deferred actions thru this dispatcher by raising this flag.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Threading.JetDispatcher.IsShutDown">
            <summary>
            Gets whether this dispatcher has been shut down and will not <see cref="M:JetBrains.Threading.JetDispatcher.Run"/> any more requests.
            </summary>
        </member>
        <member name="T:JetBrains.Threading.JetDispatcher.Closure">
            <summary>
            Implements a method that runs on another thread.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.JetDispatcher.Closure.Execute(System.Object)">
            <summary>
            Executes the marshalled action.
            </summary>
            <param name="dummy">The dummy param to match the delegate signature.</param>
        </member>
        <member name="T:JetBrains.Threading.JetDispatcherActionException">
            <summary>
            An exception that reports a failure in the inner (deferred) task.
            </summary>
        </member>
        <member name="M:JetBrains.Threading.JetDispatcherActionException.#ctor(JetBrains.Threading.JetDispatcher,System.String,System.Exception)">
            <summary>
            Ctor.
            </summary>
            <param name="dispatcher">The dispatcher that tried to execute the faulty action.</param>
            <param name="name">Dispatcher action name, included in the exception message.</param>
            <param name="ex">Original exception message, included in the exception message, passed to the base.</param>
        </member>
        <member name="P:JetBrains.Threading.JetDispatcherActionException.Dispatcher">
            <summary>
            Gets the dispatcher that tried to execute the faulty action.
            </summary>
        </member>
        <member name="P:JetBrains.Threading.JetDispatcherActionException.Name">
            <summary>
            Gets the name of the action that failed.
            </summary>
        </member>
        <member name="T:JetBrains.Util.MessageBox">
            <summary>
            Shows a system Message Box.
            Supplies it automatically with icons, main window ownership, and product name in the title.
            Note: you should be using this class wherever possible instead of the system one, as it provides for consistent look.
            </summary>
        </member>
        <member name="F:JetBrains.Util.MessageBox.MessageBoxHandlers">
            <summary>
            Holds the stack of the message box handlers, the last one is executed when a message box is attempted to be shown.
            A handler has the same prototype as <see cref="M:JetBrains.Util.MessageBox.ShowCore(System.IntPtr,System.String,System.String,JetBrains.Interop.WinApi.MessageBoxFlags)"/>, but returns <c>Null</c> if it does not want to handle the message.
            By default, the message is displayed in a system message box.
            Should be modified in the Primary thread only.
            </summary>
        </member>
        <member name="M:JetBrains.Util.MessageBox.ShowCore(System.IntPtr,System.String,System.String,JetBrains.Interop.WinApi.MessageBoxFlags)">
            <summary>
            Shows a message box, owned by the specific window.
            </summary>
            <param name="window">Handle to the message box owner window, or <c>Null</c> to use the main window of the current application, if available.</param>
            <param name="text">Body text.</param>
            <param name="caption">Optional message box caption, an empty string to use the product name by default. Otherwise, the product name will be prepended to the provided caption text.</param>
            <param name="flags">Flags.</param>
        </member>
        <member name="M:JetBrains.Util.MessageBox.ShowError(System.String)">
            <summary>
            Shows a message box with an error message.
            Product name is used for the title.
            </summary>
        </member>
        <member name="M:JetBrains.Util.MessageBox.ShowError(System.String,System.String)">
            <summary>
            Shows a message box with an error message.
            </summary>
            <param name="text">Message body text.</param>
            <param name="caption">Not recommended. Text to append to the default caption, which is the product name. In most cases, keep empty to have just the product name.</param>
        </member>
        <member name="M:JetBrains.Util.MessageBox.ShowError(System.String,System.String,System.IntPtr)">
            <summary>
            Shows a message box with an error message.
            </summary>
            <param name="text">Message body text.</param>
            <param name="caption">Not recommended. Text to append to the default caption, which is the product name. In most cases, keep empty to have just the product name.</param>
            <param name="window">Not recommended. Owner window for the message box. Use only in dialogs when the default (app main window) couldis inappropriate.</param>
        </member>
        <member name="M:JetBrains.Util.MessageBox.ShowExclamation(System.String)">
            <summary>
            Shows a message box with an exclamation message.
            Product name is used for the title.
            </summary>
        </member>
        <member name="M:JetBrains.Util.MessageBox.ShowExclamation(System.String,System.String)">
            <summary>
            Shows a message box with an exclamation message.
            </summary>
            <param name="text">Message body text.</param>
            <param name="caption">Not recommended. Text to append to the default caption, which is the product name. In most cases, keep empty to have just the product name.</param>
        </member>
        <member name="M:JetBrains.Util.MessageBox.ShowInfo(System.String)">
            <summary>
            Shows an information message.
            </summary>
        </member>
        <member name="M:JetBrains.Util.MessageBox.ShowInfo(System.String,System.String)">
            <summary>
            Shows a message box with an information message.
            </summary>
            <param name="text">Message body text.</param>
            <param name="caption">Not recommended. Text to append to the default caption, which is the product name. In most cases, keep empty to have just the product name.</param>
        </member>
        <member name="M:JetBrains.Util.MessageBox.ShowInfo(System.String,System.String,System.IntPtr)">
            <summary>
            Shows a message box with an information message.
            </summary>
            <param name="text">Message body text.</param>
            <param name="caption">Not recommended. Text to append to the default caption, which is the product name. In most cases, keep empty to have just the product name.</param>
            <param name="window">Not recommended. Owner window for the message box. Use only in dialogs when the default (app main window) couldis inappropriate.</param>
        </member>
        <member name="M:JetBrains.Util.MessageBox.ShowMessageBox(System.IntPtr,System.String,System.String,JetBrains.Util.MbButton,JetBrains.Util.MbIcon)">
            <summary>
            Shows a message box, owned by the main window.
            </summary>
            <param name="window">Not recommended. Owner window for the message box. Use only in dialogs when the default (app main window) couldis inappropriate.</param>
            <param name="text">Message body text.</param>
            <param name="caption">Not recommended. Text to append to the default caption, which is the product name. In most cases, keep empty to have just the product name.</param>
            <param name="button">Buttons to use.</param>
            <param name="icon">Icon to use.</param>
        </member>
        <member name="M:JetBrains.Util.MessageBox.ShowMessageBox(System.String,System.String,JetBrains.Util.MbButton,JetBrains.Util.MbIcon)">
            <summary>
            Shows a message box, owned by the main window.
            </summary>
            <param name="text">Message body text.</param>
            <param name="caption">Not recommended. Text to append to the default caption, which is the product name. In most cases, keep empty to have just the product name.</param>
            <param name="button">Buttons to use.</param>
            <param name="icon">Icon to use.</param>
        </member>
        <member name="M:JetBrains.Util.MessageBox.ShowMessageBox(System.String,JetBrains.Util.MbButton,JetBrains.Util.MbIcon)">
            <summary>
            Shows a message box, owned by the main window.
            Product name is used for the title.
            </summary>
            <param name="text">Message body text.</param>
            <param name="button">Buttons to use.</param>
            <param name="icon">Icon to use.</param>
        </member>
        <member name="M:JetBrains.Util.MessageBox.ShowYesNo(System.String)">
            <summary>
            Shows a Yes/No question message box. Returns whether the answer was Yes.
            Product name is used for the title.
            </summary>
        </member>
        <member name="M:JetBrains.Util.MessageBox.ShowYesNo(System.String,System.String)">
            <summary>
            Shows a Yes/No question message box. Returns whether the answer was Yes.
            </summary>
            <param name="text">Message body text.</param>
            <param name="caption">Not recommended. Text to append to the default caption, which is the product name. In most cases, keep empty to have just the product name.</param>
        </member>
        <member name="M:JetBrains.Util.MessageBox.ShowYesNo(System.String,System.String,System.IntPtr)">
            <summary>
            Shows a Yes/No question message box. Returns whether the answer was Yes.
            </summary>
            <param name="text">Message body text.</param>
            <param name="caption">Not recommended. Text to append to the default caption, which is the product name. In most cases, keep empty to have just the product name.</param>
            <param name="window">Not recommended. Owner window for the message box. Use only in dialogs when the default (app main window) couldis inappropriate.</param>
        </member>
        <member name="M:JetBrains.Util.MessageBox.ShowYesNoCancel(System.String)">
            <summary>
            Shows a Yes/No/Cancel question message box. Returns whether the answer was Yes or No, <c>Null</c> for Cancel.
            Product name is used for the title.
            </summary>
            <param name="text">Message body text.</param>
        </member>
        <member name="M:JetBrains.Util.MessageBox.ShowYesNoCancel(System.String,System.String)">
            <summary>
            Shows a Yes/No/Cancel question message box. Returns whether the answer was Yes or No, <c>Null</c> for Cancel.
            </summary>
            <param name="text">Message body text.</param>
            <param name="caption">Not recommended. Text to append to the default caption, which is the product name. In most cases, keep empty to have just the product name.</param>
        </member>
        <member name="M:JetBrains.Util.MessageBox.ShowYesNoCancel(System.String,System.Action,System.Action)">
            <summary>
            Shows a Yes/No/Cancel question message box. Returns whether the answer was Yes or No, <c>Null</c> for Cancel.
            Product name is used for the title.
            </summary>
            <param name="text">Message body text.</param>
            <param name="funcYes">Action to perform if the user select Yes.</param>
            <param name="funcNo">Action to perform if the user select No.</param>
        </member>
        <member name="M:JetBrains.Util.MessageBox.ShowYesNoCancel(System.String,System.String,System.Action,System.Action)">
            <summary>
            Shows a Yes/No/Cancel question message box. Returns whether the answer was Yes or No, <c>Null</c> for Cancel.
            </summary>
            <param name="text">Message body text.</param>
            <param name="caption">Not recommended. Text to append to the default caption, which is the product name. In most cases, keep empty to have just the product name.</param>
            <param name="funcYes">Action to perform if the user select Yes.</param>
            <param name="funcNo">Action to perform if the user select No.</param>
        </member>
        <member name="M:JetBrains.Util.MessageBox.SimpleSystemMessageBoxHandler(System.IntPtr,System.String,System.String,JetBrains.Interop.WinApi.MessageBoxFlags)">
            <summary>
            Default implementation.
            Displays the system MessageBox, cannot provide main window ownership and product name.
            </summary>
        </member>
        <member name="T:JetBrains.Util.MbButton">
            <summary>
            Buttons layout selection for the message box.
            </summary>
            <remarks>
            Note: we're not using either WinForms or Avalon constants for this thing, because they're causing conflicting namespace imports into the code that calls the message box. For instance, importing the <c>System.Windows.Forms</c> namespace in an Avalon component brings much of similarly-named constants into visibility, with the need to qualify names.
            </remarks>
        </member>
        <member name="T:JetBrains.Util.MbIcon">
            <summary>
            Icon selection for the message box.
            </summary>
            <remarks>
            Note: we're not using either WinForms or Avalon constants for this thing, because they're causing conflicting namespace imports into the code that calls the message box. For instance, importing the <c>System.Windows.Forms</c> namespace in an Avalon component brings much of similarly-named constants into visibility, with the need to qualify names.
            </remarks>
        </member>
        <member name="M:JetBrains.NumberUtil.FloatingToStringRoundtrip``1(``0)">
            <summary>
            Converts the value to a string.
            If it's of a floating-point format, applies round-trip conversion to avoid losing precision.
            </summary>
        </member>
        <member name="M:JetBrains.Util.ProcessUtil.GetChildren(System.Diagnostics.Process)">
            <summary>
            Tries to get all of the child processes for a given process.
            Might accidentally mix processes up if the parent process terminates and its ID is reused.
            </summary>
        </member>
        <member name="M:JetBrains.Util.ProcessUtil.GetParent(System.Diagnostics.Process)">
            <summary>
            Tries to get the parent process for a given process.
            Might accidentally mix processes up if the parent process terminates and its ID is reused.
            </summary>
        </member>
        <member name="M:JetBrains.Util.ProcessUtil.ShutdownGracefully(System.Diagnostics.Process,JetBrains.Util.ProcessUtil.ShutdownFlags,System.TimeSpan)">
            <summary>
            Initiates the process graceful shutdown by closing its main window.
            Optionally, kills the process abruptly if the shutdown fails to complete as the timeout expires.
            </summary>
            <param name="process">The process to kill. Could be own process.</param>
            <param name="flags">Behavior flags.</param>
            <param name="timeout">The timeout to wait for the process to shutdown gracefully (before exiting or killing the process). Ignored in some <paramref name="flags"/> combinations.</param>
            <returns>Whether the process has exited.</returns>
        </member>
        <member name="T:JetBrains.Util.ProcessUtil.ShutdownFlags">
            <summary>
            <see cref="M:JetBrains.Util.ProcessUtil.ShutdownGracefully(System.Diagnostics.Process,JetBrains.Util.ProcessUtil.ShutdownFlags,System.TimeSpan)"/> flags.
            </summary>
        </member>
        <member name="F:JetBrains.Util.ProcessUtil.ShutdownFlags.WaitSynchronously">
            <summary>
            After sending the shutdown control, does not return from the method until either the timeout expires or the process exits.
            </summary>
        </member>
        <member name="F:JetBrains.Util.ProcessUtil.ShutdownFlags.KillAfterTimeout">
            <summary>
            If the process fails to exit within the timeout, the process is killed.
            If <see cref="F:JetBrains.Util.ProcessUtil.ShutdownFlags.WaitSynchronously"/>, this method performs a non-pumping wait; otherwise, a timer is used to wait async.
            </summary>
        </member>
        <member name="T:JetBrains.Util.NoReorder">
            <summary>
            Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
            <remarks>
            The attribute must be mentioned in your member reordering patterns.
            </remarks>
        </member>
        <member name="T:JetBrains.UI.ColorManagement">
            <summary>
            Color Management routines.
            Contains a few simple static functions for working with RGB, BGR and HLS colors.
            Based in parts on ancient MSDN C++ samples (HLS-RGB conversion).
            </summary>
        </member>
        <member name="F:JetBrains.UI.ColorManagement.c_nMaxHLS">
            <summary>
            Background for MaxHLS.
            </summary>
        </member>
        <member name="F:JetBrains.UI.ColorManagement.c_nMaxRGB">
            <summary>
            Background for MaxRGB.
            </summary>
        </member>
        <member name="F:JetBrains.UI.ColorManagement.c_nUndefinedHue">
            <summary>
            Background for UndefinedHue.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ColorManagement.RGBtoHLS(System.UInt32,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            RGBtoHLS() takes a DWORD RGB value and translates it to HLS BYTEs.
            
            A point of reference for the algorithms is Foley and Van Dam, "Fundamentals of Interactive Computer Graphics," Pages 618-19. Their algorithm is in floating point. CHART implements a less general (hardwired ranges) integral algorithm.
            
            There are potential round-off errors throughout this sample. ((0.5 + x)/y) without floating point is phrased ((x + (y/2))/y), yielding a very small round-off error. This makes many of the following divisions look strange. 
            </summary>
            <param name="lRGBColor">The source RGB color.</param>
            <param name="H">Resulting Hue value.</param>
            <param name="L">Resulting Luminance value.</param>
            <param name="S">Resulting Saturation value.</param>
        </member>
        <member name="M:JetBrains.UI.ColorManagement.HueToRGB(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Utility routine for HLStoRGB.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ColorManagement.HLStoRGB(System.UInt16,System.UInt16,System.UInt16,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Converts an HLS color to an RGB color and returns three byte components.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ColorManagement.HLStoRGB(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Converts HLS to a <see cref="T:System.Drawing.Color"/> object.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ColorManagement.HLStoBGR(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Works just like HLStoRGB, but reverses the return value (BGR DWORD instead of an RGB one).
            This is useful in case of Windows bitmaps which use BGR colors.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ColorManagement.Mix(System.UInt32,System.UInt32,System.Double)">
            <summary>
            Mixes two colors together in the proportion specified.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ColorManagement.Mix(System.Drawing.Color,System.Drawing.Color,System.Double)">
            <summary>
            Mixes two colors together in the proportion specified.
            </summary>
            <param name="colorA">First color.</param>
            <param name="colorB">Second color.</param>
            <param name="proportion">A number in between <c>0.0</c> and <c>1.0</c>.</param>
            <returns>The new color.</returns>
        </member>
        <member name="M:JetBrains.UI.ColorManagement.RGB2BGR(System.UInt32)">
            <summary>
            Converts a DWORD RGB color to BGR, or vice versa as it's symmetrical.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ColorManagement.BlendTwo(System.UInt32,System.UInt32)">
            <summary>
            Mixes two colors
            Does the same as Mix but for a fixed 1:1 proportion.
            </summary>
            <param name="rgbA"></param>
            <param name="rgbB"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.ColorManagement.GetRValue(System.UInt32)">
            <summary>
            Extracts the R value from the RGB color (R is less significant).
            </summary>
        </member>
        <member name="M:JetBrains.UI.ColorManagement.GetGValue(System.UInt32)">
            <summary>
            Extracts the G value from the RGB color (R is less significant).
            </summary>
        </member>
        <member name="M:JetBrains.UI.ColorManagement.GetBValue(System.UInt32)">
            <summary>
            Extracts the B value from the RGB color (R is less significant).
            </summary>
        </member>
        <member name="M:JetBrains.UI.ColorManagement.RGB(System.Byte,System.Byte,System.Byte)">
            <summary>
            Produces an RGB color out of R, G and B values (R is less significant).
            </summary>
        </member>
        <member name="M:JetBrains.UI.ColorManagement.RGB(System.Drawing.Color)">
            <summary>
            Produces an RGB color out of R, G and B values (R is less significant).
            </summary>
        </member>
        <member name="M:JetBrains.UI.ColorManagement.Hex(System.Drawing.Color)">
            <summary>
            Converts a color value into an HTML-compatible hex-string.
            </summary>
        </member>
        <member name="P:JetBrains.UI.ColorManagement.MaxHLS">
            <summary>
            H, L, and S vary over 0-c_nMaxHLS.
            Best if divisible by 6.
            Must fit in a System.Byte.
            </summary>
        </member>
        <member name="P:JetBrains.UI.ColorManagement.MaxRGB">
            <summary>
            R, G, and B vary over 0-c_nMaxRGB.
            Must fit in a <see cref="T:System.Byte"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.ColorManagement.UndefinedHue">
            <summary>
            Hue is undefined if Saturation is 0 (grey-scale). This value determines where the Hue scrollbar is initially set for achromatic colors.
            Set tot 2/3 of MaxHLS by default.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Util.Src.Concurrency.ConcurrentFlag.#ctor">
            <summary>
            Creates a closed flag.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Console.ConsoleFlashMode">
            <summary>
            Summary description for ConsoleWriter.
            </summary>
            
        </member>
        <member name="M:JetBrains.Util.DataStructures.ChunkList`1.#ctor(System.Int32)">
            <summary>
            Create chunk array with pre-allocated given size
            </summary>
            <param name="initialSize"></param>
        </member>
        <member name="M:JetBrains.Util.DataStructures.ChunkList`1.Compact">
            <summary>
            Resize last chunk to fit exact element number
            </summary>
        </member>
        <member name="M:JetBrains.Util.DataStructures.ChunkList`1.BinarySearch(System.Func{`0,System.Int32})">
            <returns>found index. Less than 0 if not found</returns>
        </member>
        <member name="T:JetBrains.Util.Locator`1">
            <summary>
            A delegate for a <see cref="M:System.Collections.Generic.IComparer`1.Compare(`0,`0)"/>-like method, but with the first argument constant assumed to be already known by the method.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Comparator`1">
            <summary>
            A delegate for a <see cref="M:System.Collections.Generic.IComparer`1.Compare(`0,`0)"/>-like method.
            </summary>
        </member>
        <member name="M:JetBrains.Util.ListUtil.BinarySearch``1(System.Collections.Generic.IList{``0},JetBrains.Util.Locator{``0})">
            <summary>
            Searches an entire one-dimensional sorted <see cref="T:System.Collections.Generic.IList`1"/> for a value using the specified <paramref name="locator">comparer</paramref>.
            </summary>
            <typeparam name="T">The type of the elements of the list.</typeparam>
            <param name="list">The sorted list to search.</param>
            <param name="locator">The comparer to use when comparing elements.</param>
            <returns>The index of the specified value in the specified array, if value is found. If value is not found and value is less than one or more elements in array, a negative number which is the bitwise complement of the index of the first element that is larger than value. If value is not found and value is greater than any of the elements in array, a negative number which is the bitwise complement of (the index of the last element plus 1). </returns>
        </member>
        <member name="M:JetBrains.Util.ListUtil.BinarySearch``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,JetBrains.Util.Locator{``0})">
            <summary>
            Searches an entire one-dimensional sorted <see cref="T:System.Collections.Generic.IList`1"/> for a value using the specified <paramref name="locator">comparer</paramref>.
            </summary>
            <typeparam name="T">The type of the elements of the list.</typeparam>
            <param name="list">The sorted list to search.</param>
            <param name="index"></param>
            <param name="length"></param>
            <param name="locator">The comparer to use when comparing elements.</param>
            <returns>The index of the specified value in the specified array, if value is found. If value is not found and value is less than one or more elements in array, a negative number which is the bitwise complement of the index of the first element that is larger than value. If value is not found and value is greater than any of the elements in array, a negative number which is the bitwise complement of (the index of the last element plus 1). </returns>
        </member>
        <member name="M:JetBrains.Util.ListUtil.SubtractSortedInplace``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0})">
            <summary>
            Subtracts the <paramref name="subtrahend"/> from the <paramref name="minuend"/>, the difference is written into the <see cref="!:minuend"/>, inplace, so that the original list is destoryed.
            </summary>
            <returns>The difference, in the <paramref name="minuend"/> instance.</returns>
        </member>
        <member name="T:JetBrains.Util.MultiTypeComparer.ComparerInvoker`1">
            <summary>
            Typed wrapper for delegate
            </summary>
            <typeparam name="T">Type of item to present</typeparam>
        </member>
        <member name="P:JetBrains.Util.OneToSetMap`2.Values">
            <summary>
            Gets the collection of values contained in all of the keys.
            Duplicates are preserved.
            All the operations are slow on this collection, especially including the <see cref="P:JetBrains.Util.OneToSetMap`2.ValuesCollection.Count"/> property.
            </summary>
        </member>
        <member name="T:JetBrains.Util.OneToSetMap`2.ValuesCollection">
            <summary>
            Exposes all of the values as a single collection.
            If some value is held by more than one key, it's returned twice.
            </summary>
        </member>
        <member name="M:JetBrains.Util.OneToSetMap`2.ValuesCollection.Add(`1)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:JetBrains.Util.OneToSetMap`2.ValuesCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:JetBrains.Util.OneToSetMap`2.ValuesCollection.Contains(`1)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
            
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
        </member>
        <member name="M:JetBrains.Util.OneToSetMap`2.ValuesCollection.CopyTo(`1[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:JetBrains.Util.OneToSetMap`2.ValuesCollection.Remove(`1)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:JetBrains.Util.OneToSetMap`2.ValuesCollection.System#Collections#Generic#IEnumerable{TValue}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:JetBrains.Util.OneToSetMap`2.ValuesCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.Util.OneToSetMap`2.ValuesCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            
        </member>
        <member name="P:JetBrains.Util.OneToSetMap`2.ValuesCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.
            </returns>
            
        </member>
        <member name="M:JetBrains.Util.DataStructures.PrimeFinder.NextPrime(System.Int32)">
             Returns a prime number which is <code>&gt;= desiredCapacity</code>
             and very close to <code>desiredCapacity</code> (within 11% if
             <code>desiredCapacity &gt;= 1000</code>).
            
             @param desiredCapacity the capacity desired by the user.
             @return the capacity which should be used for a hashtable.
        </member>
        <member name="F:JetBrains.Util.DataStructures.PrimeFinder.Table">
            <summary>
            Table of prime numbers from 2 to 10000
            </summary>
        </member>
        <member name="M:JetBrains.Reflection.ReflectionExtensions.ParseInvariantString(System.String,System.Type)">
            <summary>
            Wraps the <see cref="T:System.ComponentModel.TypeConverter"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Reflection.ReflectionExtensions.ParseInvariantString``1(System.String)">
            <summary>
            Wraps the <see cref="T:System.ComponentModel.TypeConverter"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Reflection.ReflectionExtensions.ToInvariantString(System.Object)">
            <summary>
            Wraps the <see cref="T:System.ComponentModel.TypeConverter"/>.
            </summary>
        </member>
        <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IList{``0})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Linq.Enumerable.First(System.String)">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IList{``0})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Linq.Enumerable.FirstOrDefault(System.String)">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IList{``0})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Linq.Enumerable.Last(System.String)">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IList{``0})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Linq.Enumerable.LastOrDefault(System.String)">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Linq.Enumerable.ElementAt(System.String,System.Int32)">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Linq.Enumerable.All``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Linq.Enumerable.Any(System.String,System.Func{System.Char,System.Boolean})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Linq.Enumerable.Count(System.String,System.Func{System.Char,System.Boolean})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Linq.Enumerable.Count(System.Collections.ICollection)">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Linq.Enumerable.Count(System.String)">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Linq.Enumerable.LongCount``1(``0[])">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Linq.Enumerable.Any``1(JetBrains.Util.LocalList{``0})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.Queue{``0})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.Stack{``0})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Linq.Enumerable.Any(System.String)">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Linq.Enumerable.Distinct(System.String)">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Linq.Enumerable.Distinct(System.String,System.Collections.Generic.IEqualityComparer{System.Char})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.HashSet{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.HashSet{``0})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.ICollection{``0},System.Int32)">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.ICollection{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.HashSet{`0})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.ICollection{`0})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.HashSet{`0})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.HashSet`1.Entry.HashCode">
            <summary>
            Cached hash code of the key, -1 means entry is free
            </summary>
        </member>
        <member name="F:System.Collections.Generic.HashSet`1.Entry.NextEntryIndex">
            <summary>
            Index of next entry in the chain of keys with the same hashcodes (modulo size), -1 means last
            </summary>
        </member>
        <member name="F:System.Collections.Generic.HashSet`1.Entry.Element">
            <summary>
            Element of set
            </summary>
        </member>
        <member name="T:JetBrains.TreeModels.CascadeGroup">
            <summary>
            Holds list of groups for cascading grouping
            </summary>
        </member>
        <member name="M:JetBrains.TreeModels.CascadeGroup.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes new instance of CascadeGroup
            </summary>
            <param name="groups">Collection of groups</param>
        </member>
        <member name="P:JetBrains.TreeModels.CascadeGroup.Groups">
            <summary>
            Gets instance of <see cref="T:System.Collections.ICollection"/> with groups
            </summary>
        </member>
        <member name="T:JetBrains.TreeModels.ITreeGroupProvider`1">
            <summary>
            Provides grouping objects for items
            </summary>
            <typeparam name="TItem">Type of item for which groups are provided</typeparam>
        </member>
        <member name="M:JetBrains.TreeModels.ITreeGroupProvider`1.ExtractGroupObject(`0)">
            <summary>
            Extracts group information from specified item
            </summary>
            <param name="item">Item to extract group from</param>
            <returns>Group for specified item</returns>
            <remarks>Implementations can return CascadeGroup object if it wishes to return multiply nested groups, 
            e.g. list of containing folders for a file</remarks>
        </member>
        <member name="T:JetBrains.TreeModels.RecursionPreventionStyle">
            <summary>
            Specifies recursion prevention strategy
            </summary>
        </member>
        <member name="F:JetBrains.TreeModels.RecursionPreventionStyle.None">
            <summary>
            Do not prevent recursion
            </summary>
        </member>
        <member name="F:JetBrains.TreeModels.RecursionPreventionStyle.StopOnOccurence">
            <summary>
            Stop expanding children if data value already present in one of the parent nodes
            </summary>
            <remarks>For example, stops at second "A" in the following chain "A,B,C,A"</remarks>
        </member>
        <member name="F:JetBrains.TreeModels.RecursionPreventionStyle.StopOnChain">
            <summary>
            Stop expanding children if some chain repeates in a whole
            </summary>
            <remarks>For example, stops at second "C" in the following chain "A,B,C,A,B,C"</remarks>
        </member>
        <member name="T:JetBrains.TreeModels.TreeDemandModel">
            <summary>
            Describes model which is built on demand
            </summary>
            <remarks>Note, that default implementation of HasChildren retrieves children and checks count</remarks>
        </member>
        <member name="T:JetBrains.TreeModels.TreeModel">
            <summary>
            Provides base for all tree models
            </summary>
        </member>
        <member name="M:JetBrains.TreeModels.TreeModel.Update">
            <summary>
            Executes update forcibly on the tree model
            </summary>
        </member>
        <member name="M:JetBrains.TreeModels.TreeModel.UpdateCookie">
            <summary>
            Gets update cookie for "using" clause
            </summary>
            <returns>Instance of <see cref="T:System.IDisposable"/> object</returns>
            <remarks>Updates are not executed while cookie is held. When cookie is disposed all updates are run.</remarks>
        </member>
        <member name="M:JetBrains.TreeModels.TreeModel.BeginUpdate">
            <summary>
            Increments internal counter, which prevents updates if greater then zero
            </summary>
        </member>
        <member name="M:JetBrains.TreeModels.TreeModel.EndUpdate">
            <summary>
            Decrements internal counter, which prevents updates if greater then zero. 
            When counter reaches zero and update is needed, it is executed
            </summary>
        </member>
        <member name="M:JetBrains.TreeModels.TreeModel.NeedUpdate">
            <summary>
            Requests update. Update is executed immediately if not suspended by update counter, otherwise request for pending update is formed
            </summary>
        </member>
        <member name="M:JetBrains.TreeModels.TreeModel.OnUpdating">
            <summary>
            Raises <see cref="E:JetBrains.TreeModels.TreeModel.Updating"/> event
            </summary>
        </member>
        <member name="M:JetBrains.TreeModels.TreeModel.OnUpdated">
            <summary>
            Raises <see cref="E:JetBrains.TreeModels.TreeModel.Updated"/> event
            </summary>
        </member>
        <member name="M:JetBrains.TreeModels.TreeModel.PerformUpdate">
            <summary>
            When implemented by derived type, performs actions required to update model
            </summary>
        </member>
        <member name="M:JetBrains.TreeModels.TreeModel.CreateNode(JetBrains.TreeModels.TreeModelNode,System.Object)">
            <summary>
            When implemented in the derived type, creates model node for the specified value in the specified parent node
            </summary>
            <param name="parent">Parent node</param>
            <param name="value">Data value</param>
            <returns>New instance of <see cref="T:JetBrains.TreeModels.TreeModelNode"/></returns>
        </member>
        <member name="M:JetBrains.TreeModels.TreeModel.Insert(JetBrains.TreeModels.TreeModelNode,System.Object)">
            <summary>
            Creates and inserts new node for dataValue into the model
            </summary>
            <param name="parent">Parent node</param>
            <param name="dataValue">Data value</param>
            <returns>New instance of <see cref="T:JetBrains.TreeModels.TreeModelNode"/></returns>
        </member>
        <member name="M:JetBrains.TreeModels.TreeModel.Remove(JetBrains.TreeModels.TreeModelNode)">
            <summary>
            Removes node from the model
            </summary>
            <param name="modelNode">Node to remove</param>
        </member>
        <member name="M:JetBrains.TreeModels.TreeModel.Remove(System.Object)">
            <summary>
            Removes all nodes associated with specified dataValue from the model
            </summary>
            <param name="dataValue">Data value</param>
        </member>
        <member name="M:JetBrains.TreeModels.TreeModel.GetNodeContainer(JetBrains.TreeModels.TreeModelNode)">
            <summary>
            Gets node which is container of the specified node
            </summary>
            <param name="node">Child node</param>
            <returns>Instance of <see cref="T:JetBrains.TreeModels.TreeModelNode"/> which contains specified node</returns>
            <remarks>This is not the same as getting Parent in the multi-model scenario. In simple models it just returns Parent.</remarks>
        </member>
        <member name="M:JetBrains.TreeModels.TreeModel.GetNodes(System.Object)">
            <summary>
            Gets collection of nodes associated with the specified dataValue
            </summary>
            <param name="dataValue">Data value</param>
            <returns>Collection of associated nodes</returns>
        </member>
        <member name="M:JetBrains.TreeModels.TreeModel.Clear">
            <summary>
            Clears the model, essentialy making it empty
            </summary>
        </member>
        <member name="P:JetBrains.TreeModels.TreeModel.Roots">
            <summary>
            Gets read-only collection of model roots
            </summary>
        </member>
        <member name="P:JetBrains.TreeModels.TreeModel.RootsUnsorted">
            <summary>
            Gets unsorted read-only collection of model roots
            </summary>
        </member>
        <member name="P:JetBrains.TreeModels.TreeModel.InUpdate">
            <summary>
            Gets value indicating if update is currently running
            </summary>
        </member>
        <member name="P:JetBrains.TreeModels.TreeModel.Comparer">
            <summary>
            Gets or sets comparer for model nodes, which is used to setup order in the model
            </summary>
        </member>
        <member name="E:JetBrains.TreeModels.TreeModel.Updating">
            <summary>
            Raised when update is about to happen
            </summary>
        </member>
        <member name="E:JetBrains.TreeModels.TreeModel.Updated">
            <summary>
            Raised when update has been finished
            </summary>
        </member>
        <member name="T:JetBrains.TreeModels.TreeModel.TreeModelUpdateCookie">
            <summary>
            Helps managing updates on the model via "using" clause
            </summary>
        </member>
        <member name="T:JetBrains.TreeModels.TreeDemandModel2">
            <summary>
            A non-abstract tree demand model that has an event that asks you of the children for each of the nodes in the tree. The root elements are asked as children of <c>Null</c>.
            </summary>
        </member>
        <member name="M:JetBrains.TreeModels.TreeDemandModel2.#ctor">
            <summary>
            Constructs an empty model. Advise the <see cref="E:JetBrains.TreeModels.TreeDemandModel2.ChildrenWanted"/> event to proceed.
            </summary>
        </member>
        <member name="M:JetBrains.TreeModels.TreeDemandModel2.#ctor(System.Func{System.Object,System.Collections.IEnumerable})">
            <summary>
            Subscribes a handler to the <see cref="E:JetBrains.TreeModels.TreeDemandModel2.ChildrenWanted"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.TreeModels.TreeDemandModel2.#ctor(System.Func{System.Object,System.Collections.IEnumerable},System.Int32)">
            <summary>
            Subscribes a handler to the <see cref="E:JetBrains.TreeModels.TreeDemandModel2.ChildrenWanted"/> event. Expands the <paramref name="expandToLevel"/> levels of the model initially.
            </summary>
        </member>
        <member name="M:JetBrains.TreeModels.TreeDemandModel2.Expand(System.Int32)">
            <summary>
            Expands the given number of the model levels. The “virtual root” is the zeroth level, the top-level nodes are the first level.
            </summary>
        </member>
        <member name="M:JetBrains.TreeModels.TreeDemandModel2.GetAllNodes(System.Int32)">
            <summary>
            BFS-walks all the nodes in the model down to the <see cref="!:levels"/> level.
            The demand items are retrieved if needed.
            </summary>
        </member>
        <member name="E:JetBrains.TreeModels.TreeDemandModel2.ChildrenWanted">
            <summary>
            The model requests its children for a specific node, root is the <c>Null</c> datavalue.
            </summary>
        </member>
        <member name="P:JetBrains.TreeModels.TreeDemandModel2.ChildrenWantedEventArgs.Children">
            <summary>
            Children collection for this data value.
            </summary>
        </member>
        <member name="P:JetBrains.TreeModels.TreeDemandModel2.ChildrenWantedEventArgs.DataValue">
            <summary>
            Data value for which the children should be retrieved.
            </summary>
        </member>
        <member name="T:JetBrains.TreeModels.TreeModelGrouping`1">
            <summary>
            Holds information about a particular grouping style
            </summary>
            <typeparam name="T">Type of items to process</typeparam>
        </member>
        <member name="M:JetBrains.TreeModels.TreeModelGrouping`1.#ctor(System.String,System.Collections.Generic.IList{JetBrains.TreeModels.ITreeGroupProvider{`0}})">
            <summary>
            Initializes new instance of TreeModelGrouping with specified name and group providers
            </summary>
            <param name="name">Name of grouping style</param>
            <param name="groups">List of <see cref="T:JetBrains.TreeModels.ITreeGroupProvider`1"/> instances</param>
        </member>
        <member name="P:JetBrains.TreeModels.TreeModelGrouping`1.Name">
            <summary>
            Gets name of the grouping style
            </summary>
        </member>
        <member name="P:JetBrains.TreeModels.TreeModelGrouping`1.Groups">
            <summary>
            Gets list of <see cref="T:JetBrains.TreeModels.ITreeGroupProvider`1"/> instances
            </summary>
        </member>
        <member name="T:JetBrains.Util.WeakCollection`1">
            <summary>
            Represents collection of items that doesn't strongly hold items
            </summary>
        </member>
        <member name="M:JetBrains.Util.WeakCollection`1.Add(`0)">
            <summary>
            Adds an weak reference to item to the <see cref="T:JetBrains.Util.WeakCollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:JetBrains.Util.WeakCollection`1"></see>.</param>
        </member>
        <member name="M:JetBrains.Util.WeakCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:JetBrains.Util.WeakCollection`1"></see>.
            </summary>
            <returns>
            true if item was successfully removed from the <see cref="T:JetBrains.Util.WeakCollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:JetBrains.Util.WeakCollection`1"></see>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:JetBrains.Util.WeakCollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:JetBrains.Util.WeakCollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:JetBrains.Util.WeakCollection`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:JetBrains.Util.WeakCollection`1"></see> contains a specific value.
            </summary>
            <returns>
            true if item is found in the <see cref="T:JetBrains.Util.WeakCollection`1"></see>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:JetBrains.Util.WeakCollection`1"></see>.</param>
        </member>
        <member name="M:JetBrains.Util.WeakCollection`1.First">
            <summary>
            Returns the first live element from collection
            </summary>
            <returns>The first live element from collection</returns>
        </member>
        <member name="M:JetBrains.Util.WeakCollection`1.First(System.Func{`0,System.Boolean})">
            <summary>
            Returns the first live element from collection that satisfies a specified condition
            </summary>
            <returns>The first live element from collection that satisfies a specified condition</returns>
        </member>
        <member name="M:JetBrains.Util.WeakCollection`1.Last">
            <summary>
            Returns the last live element from collection
            </summary>
            <returns>The last live element from collection</returns>
        </member>
        <member name="M:JetBrains.Util.WeakCollection`1.Last(System.Func{`0,System.Boolean})">
            <summary>
            Returns the last live element from collection that satisfies a specified condition
            </summary>
            <returns>The last live element from collection that satisfies a specified condition</returns>
        </member>
        <member name="M:JetBrains.Util.WeakCollection`1.Sweep">
            <summary>
            Removes garbage from the list
            </summary>
        </member>
        <member name="P:JetBrains.Util.WeakCollection`1.Capacity">
            <summary>
            Gets the approximate number of elements contained in the <see cref="T:JetBrains.Util.WeakCollection`1"></see>.
            </summary>
        </member>
        <member name="T:JetBrains.Util.WeakReference`1">
            <summary>
            Represents a typed weak reference which can be compared by target
            </summary>
        </member>
        <member name="T:JetBrains.Util.EnumPattern">
            <summary>
            Base class for all enum patterns
            </summary>
        </member>
        <member name="T:JetBrains.UI.IGraphicsContainer">
            <summary>
            An interface for a class that contains a device context.
            </summary>
        </member>
        <member name="P:JetBrains.UI.IGraphicsContainer.Graphics">
            <summary>
            Gets the device context.
            </summary>
        </member>
        <member name="T:JetBrains.UI.GraphicsContainer">
            <summary>
            The auto-container for a <see cref="T:System.Drawing.Graphics"/> device context that has several choices for where to create the graphics from.
            </summary>
        </member>
        <member name="M:JetBrains.UI.GraphicsContainer.FromControl(System.Windows.Forms.Control)">
            <summary>
            If the control already exists with its handle, uses its DC, otherwise, a screen DC.
            </summary>
        </member>
        <member name="M:JetBrains.UI.GraphicsContainer.FromGetDc(System.IntPtr)">
            <summary>
            Creates a generic device context from a window handle (<see cref="M:JetBrains.UI.Interop.Win32Declarations.GetDC(System.IntPtr)"/>).
            </summary>
            <param name="hwnd">The handle of the window to paint into.</param>
        </member>
        <member name="M:JetBrains.UI.GraphicsContainer.FromGraphicsOrControl(System.Drawing.Graphics,System.Windows.Forms.Control)">
            <summary>
            If <paramref name="g"/> is non-<c>Null</c>, just uses it.
            Otherwise, works like <see cref="M:JetBrains.UI.GraphicsContainer.FromControl(System.Windows.Forms.Control)"/> over <paramref name="control"/>.
            </summary>
            <param name="g">The DC to use if non-<c>Null</c>. May be <c>Null</c>.</param>
            <param name="control">The control to use for fallback, must not be <c>Null</c>.</param>
        </member>
        <member name="M:JetBrains.UI.GraphicsContainer.FromNothing">
            <summary>
            Creates a hollow container that ensures noone ever uses its <see cref="T:System.Drawing.Graphics"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.GraphicsContainer.FromPainting(System.Windows.Forms.Control)">
            <summary>
            Creates a special painting device context from a control.
            Must be used within <see cref="F:JetBrains.Interop.WinApi.WindowsMessages.WM_PAINT"/> only.
            </summary>
            <param name="control">The control to paint into. Must exist.</param>
        </member>
        <member name="M:JetBrains.UI.GraphicsContainer.FromPainting(System.IntPtr)">
            <summary>
            Creates a special painting device context from a window handle.
            Must be used within <see cref="F:JetBrains.Interop.WinApi.WindowsMessages.WM_PAINT"/> only.
            </summary>
            <param name="hwnd">The handle of the window to paint into.</param>
        </member>
        <member name="M:JetBrains.UI.GraphicsContainer.FromScreen">
            <summary>
            Creates a screen device context.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.GraphicsContainer.SetHighQuality(System.Drawing.Graphics)">
            <summary>
            Sets up the <see cref="T:System.Drawing.Graphics">graphics context</see> for high-quality rendering regardless of the screen settings.
            </summary>
        </member>
        <member name="T:JetBrains.UI.ScreenGraphics">
            <summary>
            A must-dispose class for creating a GDI+ graphics object associated with the screen device context.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ScreenGraphics.#ctor">
            <summary>
            Initializes the object by attaching to the screen's device context.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ScreenGraphics.#ctor(System.Windows.Forms.Control)">
            <summary>
            Attempts to create a graphics upon the control. If the control handle is not yet available, or the control has already been disposed, uses the screen device context.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ScreenGraphics.op_Implicit(JetBrains.UI.ScreenGraphics)~System.Drawing.Graphics">
            <summary>
            Same as <see cref="P:JetBrains.UI.ScreenGraphics.Graphics"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ScreenGraphics.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.UI.ScreenGraphics.Graphics">
            <summary>
            Gets the <see cref="P:JetBrains.UI.ScreenGraphics.Graphics"/> object. Don't dispose, dispose the whole <see cref="T:JetBrains.UI.ScreenGraphics"/> instance instead.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PaintGraphicsContainer">
            <summary>
            A must-dispose class for creating a GDI+ graphics object for painting a window in response to WM_PAINT.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PaintGraphicsContainer.#ctor(System.IntPtr)">
            <summary>
            Creates a painting graphics object against some window.
            </summary>
            <param name="hwnd">Handle to the window we're currently painting.</param>
        </member>
        <member name="M:JetBrains.UI.PaintGraphicsContainer.op_Implicit(JetBrains.UI.PaintGraphicsContainer)~System.Drawing.Graphics">
            <summary>
            Same as <see cref="P:JetBrains.UI.PaintGraphicsContainer.Graphics"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PaintGraphicsContainer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.UI.PaintGraphicsContainer.Graphics">
            <summary>
            Gets the <see cref="P:JetBrains.UI.PaintGraphicsContainer.Graphics"/> object. Don't dispose, dispose the whole <see cref="T:JetBrains.UI.PaintGraphicsContainer"/> instance instead.
            </summary>
        </member>
        <member name="F:JetBrains.UI.ControlGraphicsContainer.myControl">
            <summary>
            The control to create the DC from. <c>Null</c> after dispose.
            </summary>
        </member>
        <member name="F:JetBrains.UI.ControlGraphicsContainer.myGraphics">
            <summary>
            The DC lazily-created from the control, or <c>Null</c> if not created yet.
            Should be disposed of.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ControlGraphicsContainer.#ctor(System.Windows.Forms.Control)">
            <summary>
            Creates an instance over the control.
            The graphics is not created until retrieved from the property for the first time.
            </summary>
            <param name="control">A non-<c>Null</c> control that must exist with its handle.</param>
        </member>
        <member name="M:JetBrains.UI.ControlGraphicsContainer.IsGoodControl(System.Windows.Forms.Control)">
            <summary>
            Checks whether it will work on the given control.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ControlGraphicsContainer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.UI.ControlGraphicsContainer.Graphics">
            <summary>
            Gets the device context.
            </summary>
        </member>
        <member name="T:JetBrains.UI.SimpleGraphicsContainer">
            <summary>
            Just holds the given DC, won't dispose of it.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SimpleGraphicsContainer.#ctor(System.Drawing.Graphics)">
            <summary>
            Attaches to the given DC.
            </summary>
        </member>
        <member name="M:JetBrains.UI.SimpleGraphicsContainer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.UI.SimpleGraphicsContainer.Graphics">
            <summary>
            Gets the device context.
            </summary>
        </member>
        <member name="T:JetBrains.UI.GetDcGraphicsContainer">
            <summary>
            Performs <see cref="M:JetBrains.UI.Interop.Win32Declarations.GetDC(System.IntPtr)"/> on the given <c>HWND</c> and releases it at the end.
            </summary>
        </member>
        <member name="F:JetBrains.UI.GetDcGraphicsContainer.myGraphics">
            <summary>
            Lazy-init data.
            </summary>
        </member>
        <member name="F:JetBrains.UI.GetDcGraphicsContainer.myHdc">
            <summary>
            <c>HDC</c>, after one is lazy-created and before it is disposed of.
            </summary>
        </member>
        <member name="F:JetBrains.UI.GetDcGraphicsContainer.myHwnd">
            <summary>
            <c>HWND</c>, after the ctor and until the <c>HDC</c> is disposed of.
            </summary>
        </member>
        <member name="M:JetBrains.UI.GetDcGraphicsContainer.#ctor(System.IntPtr)">
            <summary>
            Creates a new container.
            The <c>HDC</c> is not created immediately; instead, it's constructed on the first <see cref="P:JetBrains.UI.GetDcGraphicsContainer.Graphics"/> use.
            </summary>
            <param name="hwnd">Handle to the window to which the device context should be created.</param>
        </member>
        <member name="M:JetBrains.UI.GetDcGraphicsContainer.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.UI.GetDcGraphicsContainer.Graphics">
            <summary>
            Gets the device context.
            </summary>
        </member>
        <member name="T:JetBrains.UI.HollowGraphicsContainer">
            <summary>
            An intentionally hollow graphics container that can be passed as a normal one, but will throw if someone actually tries to extract <see cref="P:JetBrains.UI.IGraphicsContainer.Graphics"/> out of it.
            Can be used if you expect the callee to not use the parameter, but must pass it against the API.
            </summary>
        </member>
        <member name="M:JetBrains.UI.HollowGraphicsContainer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.UI.HollowGraphicsContainer.Graphics">
            <summary>
            Gets the device context.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Interop.Helpers">
            <summary>
            Contains several interop helper functions
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.Helpers.BitBlt(System.Void*,System.Drawing.Bitmap,System.Drawing.Point,System.Void*,System.Byte,System.Drawing.Rectangle[])">
            <summary>
            Blits a bitmap onto a GDI device context.
            </summary>
            <param name="hdcDestination">The target HDC.</param>
            <param name="bitmapSource">The bitmap to blit (the complete bitmap blits to the target).</param>
            <param name="ptDestinationLocation">Blit location coordinates on the target DC.</param>
            <param name="hdcIntermediate">A device context to be used as blitting source, pass a compatible HDC if you have one, or <c>Null</c> if it should be on-time-created.</param>
            <param name="nOpacity">Opacity vaue for blitting, 0x00 is completely transparent, 0xFF is opaque.</param>
            <param name="rectsSource">A collection of the rectangles to blit on the source bitmap. The relative location of these rectangles on the target DC corresponds to their source location. <c>Null</c> to blit the whole bitmap.</param>
        </member>
        <member name="M:JetBrains.UI.Interop.Helpers.CanGlassify(System.IntPtr)">
            <summary>
            Performs all the checks of the <see cref="!:JetBrains.UI.Avalon.Helpers.Glassify(IntPtr,bool)"/> function, but does not actually apply the effect.
            Allows to tell with a high probability whether the <see cref="!:JetBrains.UI.Avalon.Helpers.Glassify(IntPtr,bool)"/> function will succeed.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.Helpers.CreateBitmap(System.Int32[0:,0:])">
            <summary>
            Sets all the pixels in the bitmap to the given values.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.Helpers.FlattenAlpha(System.Drawing.Image,System.Byte)">
            <summary>
            Flattens the alpha of the given bitmap using a threshold so that it becomes either 0x00 or 0xFF.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.Helpers.GetWindowExStyle(System.IntPtr)">
            <summary>
            Gets the extended style of the specified window.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.Helpers.GetWindowStyle(System.IntPtr)">
            <summary>
            Gets the style of the specified window.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.Helpers.PaintWindowToBitmap(System.Windows.Forms.IWin32Window)">
            <summary>
            Paints an arbitrary window to a bitmap.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.Helpers.RenderBuffered(JetBrains.UI.IGraphicsContainer,System.Drawing.Rectangle,System.Action{System.Drawing.Graphics},System.Boolean)">
            <summary>
            Renders to the given device context using an intermediate GDI backbuffer, which works around the ErrorStripeDisease™.
            Under terminal services, no backbuffer is used, just <paramref name="paint"/> is invoked.
            </summary>
            <param name="gc">The graphics device context container (must be disposed of by the caller, not before this method is called).</param>
            <param name="bounds">Size and location of the painting area in the device context coordinates. When painting, you should use the same coordinates as those in which the bounds are specified, don't use bounds-local coords.</param>
            <param name="paint">The function that would handle the rendering.</param>
            <param name="bSupportAlphaChannel">Whether the blitting of the back-buffer to the screen should support per-pixel alpha, or not. Note that when you turn this on, you must erase the whole area, and GDI text rendering will most likely fail to function properly.</param>
        </member>
        <member name="M:JetBrains.UI.Interop.Helpers.RenderBuffered(System.Drawing.Graphics,System.Drawing.Rectangle,System.Action{System.Drawing.Graphics},System.Boolean)">
            <summary>
            Renders to the given device context using an intermediate GDI backbuffer, which works around the ErrorStripeDisease™.
            Under terminal services, no backbuffer is used, just <paramref name="FPaint"/> is invoked.
            </summary>
            <param name="g">The graphics device context.</param>
            <param name="bounds">Size and location of the painting area in the device context coordinates. When painting, you should use the same coordinates as those in which the bounds are specified, don't use bounds-local coords.</param>
            <param name="FPaint">The function that would handle the rendering.</param>
            <param name="bSupportAlphaChannel">Whether the blitting of the back-buffer to the screen should support per-pixel alpha, or not. Note that when you turn this on, you must erase the whole area, and GDI text rendering will most likely fail to function properly.</param>
        </member>
        <member name="M:JetBrains.UI.Interop.Helpers.ShowLayered(System.IntPtr,System.Drawing.Rectangle,System.Action{System.Drawing.Graphics})">
            <summary>
            Updates a layered window by displaying the given alpha-channel-aware bitmap at the specified location.
            The bitmap then persists until the window is killed or hidden, or another bitmap is displayed.
            </summary>
            <param name="hwnd">Handle to the window being updated.</param>
            <param name="area">The window area, in screen coordinates.</param>
            <param name="funcRender">The callback to perform the rendering.</param>
        </member>
        <member name="T:JetBrains.UI.Interop.WindowsHook">
            <summary>
            Implements hooking to local and global windows messages by the means of <see cref="M:JetBrains.UI.Interop.Win32Declarations.SetWindowsHookEx(JetBrains.UI.Interop.HookType,JetBrains.UI.Interop.Win32Declarations.HookProc,System.IntPtr,System.Int32)"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Interop.WindowsHook.myFunc">
            <summary>
            WinAPI callback.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Interop.WindowsHook.myHookEventHandler">
            <summary>
            External handler for the hook events.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Interop.WindowsHook.myHookHandle">
            <summary>
            Handle to the hook, assigned by <see cref="M:JetBrains.UI.Interop.Win32Declarations.SetWindowsHookEx(JetBrains.UI.Interop.HookType,JetBrains.UI.Interop.Win32Declarations.HookProc,System.IntPtr,System.Int32)"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Interop.WindowsHook.myHookType">
            <summary>
            Hook code.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.WindowsHook.#ctor(JetBrains.UI.Interop.HookType,JetBrains.UI.Interop.WindowsHook.HookEventHandler)">
            <summary>
            Hooks the given event-handler to the messages specified by the code.
            </summary>
            <param name="code">Code for the messages to hook.</param>
            <param name="handler">External event handler.</param>
        </member>
        <member name="M:JetBrains.UI.Interop.WindowsHook.#ctor(JetBrains.UI.Interop.HookType,JetBrains.UI.Interop.Win32Declarations.HookProc)">
            <summary>
            Hooks the given <param name="callback"/> function to the messages specified by the code.
            </summary>
            <param name="code">Code for the messages to hook.</param>
            <param name="callback">Internal WinAPI hook handler.</param>
        </member>
        <member name="M:JetBrains.UI.Interop.WindowsHook.#ctor(JetBrains.UI.Interop.HookType,JetBrains.UI.Interop.WindowsHook.HookEventHandler,JetBrains.UI.Interop.Win32Declarations.HookProc)">
            <summary>
            An internal constructor.
            </summary>
            <param name="code">Code for the messages to hook.</param>
            <param name="handler">External event handler, <c>Null</c> for none.</param>
            <param name="callback">Internal WinAPI hook handler, <c>Null</c> to use the stock one that notifies the <paramref name="handler"/>.</param>
        </member>
        <member name="M:JetBrains.UI.Interop.WindowsHook.IsGlobalHook(JetBrains.UI.Interop.HookType)">
            <summary>
            Determines whether the hook is global (not per-thread) and needs a HINSTANCE specified etc when hooking.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.WindowsHook.Release">
            <summary>
            Uninstall the hook.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Interop.WindowsHook.HookEventHandler">
            <summary>
            event-like delegate for the external hook event handlers.
            </summary>
            <returns>Whether to call next handlers in the chain (<c>True</c>), or drop the request at this point (<c>False</c>).</returns>
        </member>
        <member name="T:JetBrains.UI.Interop.WindowsMessageHook">
            <summary>
            Hooks to all the windows messages in the process and notifies the listeners of them.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Interop.WindowsMessageHook.myHook">
            <summary>
            The object that winds up the WinAPI hook.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:JetBrains.UI.Interop.WindowsMessageHook.myHookEntries" -->
        <member name="F:JetBrains.UI.Interop.WindowsMessageHook.Dispatcher">
            <summary>
            Identifies the owning thread.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.WindowsMessageHook.Dump(System.Xml.XmlTextWriter)">
            <summary>
            Dumps the object.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.WindowsMessageHook.RemoveAll(System.Object)">
            <summary>
            Removes all the event subscriptions by the <paramref name="owner"/> object.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.WindowsMessageHook.AddRemoveHookEntry(JetBrains.UI.Interop.WindowsMessageHook.WindowsMessageHookEntry,JetBrains.UI.Interop.WindowsMessageHook.AddRemove)">
            <summary>
            The raw adder-remover of the <paramref name="entry"/> to the <see cref="F:JetBrains.UI.Interop.WindowsMessageHook.myHookEntries"/> map.
            </summary>
            <param name="entry">The entry to add/remove, specifies all the keys of the map and the value.</param>
            <param name="addremove">Whether to add or remove.</param>
        </member>
        <member name="M:JetBrains.UI.Interop.WindowsMessageHook.EnumAllEntries">
            <summary>
            Gets the all-entries enumerator.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.WindowsMessageHook.HookUnhook">
            <summary>
            Either hooks or unhooks the underlying WinAPI hook, depending on whether there are any clients in the map.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.WindowsMessageHook.OnHookedMessage(System.Object,JetBrains.UI.Interop.HookEventArgs)">
            <summary>
            The hook has caught some message, call the listeners.
            Should return <c>True</c> so that the chained callers would succeed in processing the message.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.WindowsMessageHook.RemoveAll">
            <summary>
            Removes all the hooks.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.WindowsMessageHook.AddRemoveMessageHandler(System.IntPtr,JetBrains.Interop.WinApi.WindowsMessages,System.EventHandler{JetBrains.UI.Interop.WindowsMessageEventArgs},System.Delegate,System.Boolean,JetBrains.UI.Interop.WindowsMessageHook.AddRemove)">
            <summary>
            Implements adding/removing the message handler to the map, possibly, with its children.
            </summary>
            <param name="window">Handle to the window, or <c>Null</c> for all the windows.</param>
            <param name="message">Message to listen to, or <c>Null</c> for all the messages.</param>
            <param name="handler">The handler to be invoked.</param>
            <param name="handlerOriginal">The external handler that will be used to unsubscribe from this event.</param>
            <param name="includeparents">Whether to listen to parent windows also, illegal if <paramref name="window"/> is <c>Null</c>.</param>
            <param name="addremove">Whether to add or remove.</param>
        </member>
        <member name="M:JetBrains.UI.Interop.WindowsMessageHook.AddRemoveMoveWindowHandler(System.IntPtr,System.EventHandler{JetBrains.UI.Interop.WindowMovedEventArgs},JetBrains.UI.Interop.WindowsMessageHook.AddRemove)">
            <summary>
            A wrapper for <see cref="M:JetBrains.UI.Interop.WindowsMessageHook.AddRemoveMessageHandler(System.IntPtr,JetBrains.Interop.WinApi.WindowsMessages,System.EventHandler{JetBrains.UI.Interop.WindowsMessageEventArgs},System.Delegate,System.Boolean,JetBrains.UI.Interop.WindowsMessageHook.AddRemove)"/> for the special case when we listen to the window movements (WM_MOVE on window and parents).
            Wraps the <paramref name="handler"/> into a local delegate.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.WindowsMessageHook.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.Interop.WindowsMessageHook.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.UI.Interop.WindowsMessageHook.Windows">
            <summary>
            Gets the collection of windows.
            To subscribe to or unsubscribe from an event, first pick the appropriate window thru this colleciton.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Interop.WindowsMessageHook.AddRemove">
            <summary>
            Helps telling the add action from the remove action.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Interop.WindowsMessageHook.Message">
            <summary>
            A particular message of a particular window that could be subscribed to.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Interop.WindowsMessageHook.Message.Code">
            <summary>
            Gets the WINAPI code of this message.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Interop.WindowsMessageHook.Message.Owner">
            <summary>
            Gets the owning hooker.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Interop.WindowsMessageHook.Message.Window">
            <summary>
            Gets the window whose message this is.
            </summary>
        </member>
        <member name="E:JetBrains.UI.Interop.WindowsMessageHook.Message.Received">
            <summary>
            An event that fires after the message described by the <see cref="P:JetBrains.UI.Interop.WindowsMessageHook.Message.Code"/> is processed by the <see cref="P:JetBrains.UI.Interop.WindowsMessageHook.Message.Window"/>.
            </summary>
        </member>
        <member name="E:JetBrains.UI.Interop.WindowsMessageHook.Message.ReceivedIncludingParents">
            <summary>
            An event that fires after the message described by the <see cref="P:JetBrains.UI.Interop.WindowsMessageHook.Message.Code"/> is processed by the <see cref="P:JetBrains.UI.Interop.WindowsMessageHook.Message.Window"/>, or one of the <see cref="P:JetBrains.UI.Interop.WindowsMessageHook.Message.Window"/>'s parents.
            Note that owning windows are not included.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Interop.WindowsMessageHook.MessagesCollection">
            <summary>
            The per-window collection of all the available messages.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Interop.WindowsMessageHook.MessagesCollection.All">
            <summary>
            Gets a virtual message that corresponds to all the messages received by the window specified.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Interop.WindowsMessageHook.MessagesCollection.Item(JetBrains.Interop.WinApi.WindowsMessages)">
            <summary>
            Gets a particluar message on a particular window.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Interop.WindowsMessageHook.MessagesCollection.Window">
            <summary>
            Gets the window whose messages are being accessed via this collection.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Interop.WindowsMessageHook.Window">
            <summary>
            A reference to a window.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Interop.WindowsMessageHook.Window.Messages">
            <summary>
            Gets the collection of messages available for this window.
            To subscribe to or unsubscribe from an event, pick the message you're interested in from this collection.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Interop.WindowsMessageHook.Window.Owner">
            <summary>
            The hooking manager.
            </summary>
        </member>
        <member name="E:JetBrains.UI.Interop.WindowsMessageHook.Window.VisualPositionChanged">
            <summary>
            An event that fires when the window changes its visual position on the screen.
            For a child window, this includes the cases when the parent window is moved.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Interop.WindowsMessageHook.Window.Handle">
            <summary>
            A handle to the current window.
            <c>Null</c> means “all the windows of the process”.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Interop.WindowsMessageHook.WindowsCollection">
            <summary>
            Collection of windows.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Interop.WindowsMessageHook.WindowsCollection.All">
            <summary>
            Gets a virtual window that captures the messages for all the windows in the process.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Interop.WindowsMessageHook.WindowsCollection.Item(System.Windows.Forms.IWin32Window)">
            <summary>
            Gets a window from the collection.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Interop.WindowsMessageHook.WindowsCollection.Item(System.IntPtr)">
            <summary>
            Gets a window from the collection by its handle.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Interop.WindowsMessageHook.WindowsCollection.Item(System.Void*)">
            <summary>
            Gets a window from the collection by its handle.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Interop.WindowsMessageHook.WindowsMessageHookEntry">
            <summary>
            An entrty in the hooks list.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Interop.WindowsMessageHook.WindowsMessageHookEntry.myHandler">
            <summary>
            <see cref="P:JetBrains.UI.Interop.WindowsMessageHook.WindowsMessageHookEntry.Handler"/>
            </summary>
        </member>
        <member name="F:JetBrains.UI.Interop.WindowsMessageHook.WindowsMessageHookEntry.myMessage">
            <summary>
            <see cref="P:JetBrains.UI.Interop.WindowsMessageHook.WindowsMessageHookEntry.Message"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Interop.WindowsMessageHook.WindowsMessageHookEntry.myOriginalHandler">
            <summary>
            <see cref="P:JetBrains.UI.Interop.WindowsMessageHook.WindowsMessageHookEntry.OriginalHandler"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Interop.WindowsMessageHook.WindowsMessageHookEntry.myOriginalTarget">
            <summary>
            <see cref="P:JetBrains.UI.Interop.WindowsMessageHook.WindowsMessageHookEntry.OriginalTarget"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Interop.WindowsMessageHook.WindowsMessageHookEntry.myTarget">
            <summary>
            <see cref="P:JetBrains.UI.Interop.WindowsMessageHook.WindowsMessageHookEntry.Target"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.WindowsMessageHook.WindowsMessageHookEntry.#ctor(System.IntPtr,System.IntPtr,JetBrains.Interop.WinApi.WindowsMessages,System.EventHandler{JetBrains.UI.Interop.WindowsMessageEventArgs},System.Delegate)">
            <summary>
            Inits all the fields of the instance, see corresponding attributes for comments.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.WindowsMessageHook.WindowsMessageHookEntry.Dump(System.Xml.XmlTextWriter)">
            <summary>
            Dumps the entry.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.WindowsMessageHook.WindowsMessageHookEntry.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.UI.Interop.WindowsMessageHook.WindowsMessageHookEntry.Handler">
            <summary>
            Handler to be invoked on capture.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Interop.WindowsMessageHook.WindowsMessageHookEntry.Message">
            <summary>
            Code of the message to capture.
            <c>0</c> is a wildcard.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Interop.WindowsMessageHook.WindowsMessageHookEntry.OriginalHandler">
            <summary>
            Gets the handler that the external user passed in when subscribing to the event.
            Needed to look up all the events from a particular user in case it bulk-unsubscribes.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Interop.WindowsMessageHook.WindowsMessageHookEntry.OriginalTarget">
            <summary>
            The original window, as specified by the client when subscribing, a child of <see cref="P:JetBrains.UI.Interop.WindowsMessageHook.WindowsMessageHookEntry.Target"/>. Not listened by this hook entry.
            It's rather a mark that the hook entry has been added in order to listen all the parents of the <see cref="P:JetBrains.UI.Interop.WindowsMessageHook.WindowsMessageHookEntry.OriginalTarget"/> window.
            Needed to remove all of such entries when unsubscribing.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Interop.WindowsMessageHook.WindowsMessageHookEntry.Target">
            <summary>
            The target window that should be spied in response to this hook entry.
            <c>Null</c> is a wildcard.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Interop.WindowMovedEventArgs">
            <summary>
            Arguments for the <see cref="E:JetBrains.UI.Interop.WindowsMessageHook.Window.VisualPositionChanged"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.WindowMovedEventArgs.GetWindowAsControl">
            <summary>
            Tries to find a control that corresponds to the <see cref="P:JetBrains.UI.Interop.WindowMovedEventArgs.Window"/>, returns <c>Null</c> if there's none.
            </summary>
            <returns></returns>
        </member>
        <member name="P:JetBrains.UI.Interop.WindowMovedEventArgs.HookManager">
            <summary>
            Gets the windows message hooks manager you're subscribed to.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Interop.WindowMovedEventArgs.Location">
            <summary>
            Gets the new location of the window.
            Specifies the x and y coordinates of the upper-left corner of the client area of the window. 
            The parameters are given in screen coordinates for overlapped and pop-up windows and in parent-client coordinates for child windows. 
            </summary>
        </member>
        <member name="P:JetBrains.UI.Interop.WindowMovedEventArgs.Window">
            <summary>
            Gets the window that has been moved.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Interop.WindowsMessageEventArgs">
            <summary>
            Arguments for the <see cref="T:JetBrains.UI.Interop.WindowsMessageHook"/>-emitted messages.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Interop.WindowsMessageEventArgs.HWnd">
            <summary>
            Gets the handle to the window that is receiving the message.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Interop.WindowsMessageEventArgs.HookManager">
            <summary>
            Gets the windows message hooks manager you're subscribed to.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Interop.WindowsMessageEventArgs.LParam">
            <summary>
            Gets the "LONG" parameter.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Interop.WindowsMessageEventArgs.LResult">
            <summary>
            Gets or sets the message result.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Interop.WindowsMessageEventArgs.Message">
            <summary>
            Gets the message ID.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Interop.WindowsMessageEventArgs.WParam">
            <summary>
            Gets the "WORD" parameter.
            </summary>
        </member>
        <member name="T:JetBrains.UI.RenderParams">
            <summary>
            Specifies rendering context for the <see cref="N:JetBrains.UI.RichText"/> and presentable item rederers.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RenderParams.myDefaultFont">
            <summary>
            <see cref="P:JetBrains.UI.RenderParams.DefaultFont"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RenderParams.myReadonly">
            <summary>
            <see cref="P:JetBrains.UI.RenderParams.Readonly"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RenderParams.myEmpty">
            <summary>
            <see cref="P:JetBrains.UI.RenderParams.Empty"/>, lazy-init.
            Let the defaults apply to all the static fields before we create an instance, so lazy-init on first use
            </summary>
        </member>
        <member name="F:JetBrains.UI.RenderParams.myDefaultTextRenderingMethod">
            <summary>
            <see cref="P:JetBrains.UI.RenderParams.DefaultTextRenderingMethod"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RenderParams.#ctor">
            <summary>
            Creates an empty instance initialized with the default values.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RenderParams.DumpToXaml(System.Xml.XmlWriter)">
            <summary>
            Dumps the object state in the XAML format.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RenderParams.ResetColors">
            <summary>
            Sets all the colors to be <see cref="F:System.Drawing.Color.Empty"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RenderParams.SetReadonly">
            <summary>
            Seals the instance by setting it into the read-only mode, see <see cref="P:JetBrains.UI.RenderParams.Readonly"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RenderParams.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.UI.RenderParams.Font">
            <summary>
            Gets or sets the font in which the text will be rendered.
            By default, specifies the <see cref="P:JetBrains.UI.RenderParams.DefaultFont"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RenderParams.FontStyle">
            <summary>
            Gets or sets the font style for rendering the text.
            Overrides the local value unless <see cref="F:System.Drawing.FontStyle.Regular"/> is specified, in which case all the strings are rendered with their local font styles.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RenderParams.NeutralForegroundColor">
            <summary>
            Gets or sets the  neutral foreground color setting. Does not override local colors, applies only to those strings whose color is set to <see cref="F:System.Drawing.Color.Empty"/>.
            May be <see cref="F:System.Drawing.Color.Empty"/>, in which case the renderer will choose the default color, most likely, <see cref="P:System.Drawing.SystemColors.ControlText"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RenderParams.NeutralBackgroundColor">
            <summary>
            Gets or sets the neutral background color setting. Does not override local colors, applies only to those strings whose color is set to <see cref="F:System.Drawing.Color.Empty"/>.
            May be <see cref="F:System.Drawing.Color.Empty"/>, in which case the renderer will choose the default color, most likely, <see cref="P:System.Drawing.Color.Transparent"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RenderParams.Trimming">
            <summary>
            Gets or sets the string trimming to be used when rendering the string.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RenderParams.Mnemonics">
            <summary>
            Gets or sets the mnemonic treatment (ampersand characters) to be used when rendering the string.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RenderParams.OverrideForegroundColor">
            <summary>
            Gets or sets the color that overrides the local foreground color of all the strings, unless set to <see cref="F:System.Drawing.Color.Empty"/>.
            Takes precedence over <see cref="P:JetBrains.UI.RenderParams.NeutralForegroundColor"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RenderParams.OverrideBackgroundColor">
            <summary>
            Gets or sets the color that overrides the local background color of all the strings, unless set to <see cref="F:System.Drawing.Color.Empty"/>.
            Takes precedence over <see cref="P:JetBrains.UI.RenderParams.NeutralBackgroundColor"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RenderParams.Effect">
            <summary>
            Gets or sets the effect style that overrides the local settings of the strings, unless set to <see cref="F:JetBrains.UI.RichText.TextStyle.EffectStyle.None"/>, in which case the local on the strings settings are used.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RenderParams.EffectColor">
            <summary>
            Gets or sets the effect color that overrides the local setting on the strings, unless set to <see cref="F:System.Drawing.Color.Empty"/>.
            Works independently of <see cref="P:JetBrains.UI.RenderParams.Effect"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RenderParams.TextRenderingMethod">
            <summary>
            Gets or sets a flag that defines the rendering engine to be used by text renderers.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RenderParams.Empty">
            <summary>
            Gets the empty rendering parameters that do not override anything and supply the default UI font.
            This instance is read-only and cannot be modified.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RenderParams.DefaultFont">
            <summary>
            Gets the default UI font, a single instance shared by default between all the instances of <see cref="T:JetBrains.UI.RenderParams"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RenderParams.DefaultTextRenderingMethod">
            <summary>
            Gets the default text rendering method.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RenderParams.Readonly">
            <summary>
            Gets whether the instance is readonly and its fields cannot be changed.
            </summary>
        </member>
        <member name="T:JetBrains.UI.RichText.FontCache">
            <summary>
            Cache for fonts.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.FontCache.GetHFont(System.Drawing.Font)">
            <summary>
            Gets a cached GDI handle to a font.
            The returned value should not be disposed of.
            </summary>
        </member>
        <member name="T:JetBrains.UI.RichText.RichString">
            <summary>
            Represents a formatted string that is a part of <see cref="P:JetBrains.UI.RichText.RichString.RichText"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.RichString.WaveLength">
            <summary>
            Wave length for weavy underlining.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.RichString.FontCache">
            <summary>
            Caches the fonts per-font-face and per-text-style.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.RichString.AugmentGdiPlusContext">
            <summary>
            Allows to fix the text-rendering-hint, but ruins ClearType … So, just a queer mode, after all.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.RichString.myOffset">
            <summary>
            Starting offset of the corresponding string part.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.RichString.myLength">
            <summary>
            Length of the corresponding string part.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.RichString.myRichText">
            <summary>
            The text which the part is belonging to.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichString.#ctor(System.Int32,System.Int32,JetBrains.UI.RichText.TextStyle,JetBrains.UI.RichText.RichText)">
            <summary>
            Creates a new <see cref="T:JetBrains.UI.RichText.RichString"/> instance.
            </summary>
            <param name="offset">String part offset.</param>    
            <param name="length">String part length.</param>
            <param name="style">The style.</param>
            <param name="richtext">The parent richtext block.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="richtext"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The range specified by <paramref name="offset"/> and <paramref name="length"/> does not fall within the parent <paramref name="richtext"/> string.</exception>
        </member>
        <member name="M:JetBrains.UI.RichText.RichString.GetSize(System.Drawing.Graphics,JetBrains.UI.RenderParams)">
            <summary>
            Gets size of the string in the given graphics
            </summary>
            <param name="g">The device context to calculate size in.</param>
            <param name="renderparams">Defines the rendering aspects.</param>
            <returns>Size of the string when drawn in a given graphics.</returns>
        </member>
        <member name="M:JetBrains.UI.RichText.RichString.GetIndexFromPoint(System.Drawing.Graphics,JetBrains.UI.RenderParams,System.Int32)">
            <summary>
            Gets the local index of the character at the given point, or <c>-1</c> if none hit.
            </summary>
            <param name="g">The device context for measuring the chars.</param>
            <param name="renderparams">Defines the rendering aspects.</param>
            <param name="x">X-coordinate of the point relative to the substring start.</param>
            <returns>Local zero-based index of the character at the given point, or <c>-1</c> if no character is hit.</returns>
        </member>
        <member name="M:JetBrains.UI.RichText.RichString.Measure(System.Drawing.Graphics,System.String,System.Drawing.SizeF,JetBrains.UI.RenderParams,JetBrains.UI.RichText.TextStyle)">
            <summary>
            Measures the string rendering size under the given conditions.
            Does not augment the Graphics context for better fitting of the text, so the results most probably won't agree to the <see cref="M:JetBrains.UI.RichText.RichString.GetSize(System.Drawing.Graphics,JetBrains.UI.RenderParams)"/>'s ones.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichString.Draw(System.Drawing.Graphics,System.Drawing.Rectangle,JetBrains.UI.RenderParams)">
            <summary>
            Draws the formatted string on a given graphics.
            </summary>
            <param name="g">The GDI+ device context to draw the string in.</param>
            <param name="rectClip">Clipping rectangle to paint the text within.</param>
            <param name="renderparams">Defines the rendering aspects.</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichString.GetParameterizedFormat_Gdi(JetBrains.UI.RenderParams)">
            <summary>
            Produces a <see cref="T:System.Windows.Forms.TextFormatFlags"/> flag combination filled in a way standard for JetRichText rendering.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichString.GetParameterizedFormat_GdiPlus(JetBrains.UI.RenderParams)">
            <summary>
            Produces a <see cref="T:System.Drawing.StringFormat"/> structure filled in a way standard for JetRichText rendering.
            You must not alter the instance returned.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichString.GetParametrizedFont(JetBrains.UI.RenderParams,JetBrains.UI.RichText.TextStyle)">
            <summary>
            Returns a parametrized font from the cache. 
            The returned value should not be disposed of.
            </summary>
            <param name="renderparams">Defines the rendering aspects.</param>
            <param name="localstyle">The local style to be overridden by the styles from <paramref name="renderparams"/>.</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichString.OverrideTextStyle(JetBrains.UI.RenderParams,JetBrains.UI.RichText.TextStyle)">
            <summary>
            Overrides the local text style with those properties of the <paramref name="renderparams"/>' text style that are set to override.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichString.OverrideFontStyle(JetBrains.UI.RenderParams,JetBrains.UI.RichText.TextStyle)">
            <summary>
            Overrides the local font style with settings from the rendering aspect.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichString.AssertValid">
            <summary>
            Checks whether the rich text substring settings are valid against the parent rich text object.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichString.Dump(System.Xml.XmlWriter)">
            <summary>
            Dumps the object.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichString.UnderlineStraight(System.Drawing.Graphics,System.Drawing.RectangleF,System.Drawing.Color)">
            <summary>
            Underlines text with text style color using straight line.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichString.UnderlineWeavy(System.Drawing.Graphics,System.Drawing.RectangleF,System.Drawing.Color)">
            <summary>
            Underlines text with text style color using weavy line.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichString.StrikeOut(System.Drawing.Graphics,System.Drawing.RectangleF,System.Drawing.Color)">
            <summary>
            Strikes out text with text style color using weavy line.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichString.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.UI.RichText.RichString.Text">
            <summary>
            Gets the text of this part.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.RichString.Style">
            <summary>
            Gets or sets the string style
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.RichString.Offset">
            <summary>
            Gets or sets the starting offset.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.RichString.Length">
            <summary>
            Gets or sets the length.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.RichString.RichText">
            <summary>
            Gets the parent text.
            </summary>
        </member>
        <member name="T:JetBrains.UI.RichText.RichString.AugmentGraphics">
            <summary>
            Augments the <see cref="T:System.Drawing.Graphics"/> device context, as required for the GDI+ rendering of the text.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichString.AugmentGraphics.#ctor(System.Drawing.Graphics,JetBrains.UI.RenderParams)">
            <summary>
            Inits the instance and does the augmenting.
            </summary>
            <param name="graphics">The graphics to augment in ctor and de-augment in <see cref="M:JetBrains.UI.RichText.RichString.AugmentGraphics.Dispose"/>.</param>
            <param name="renderparams">Defines the rendering aspects.</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichString.AugmentGraphics.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.RichText.RichString.AugmentGraphics.Augment">
            <summary>
            Does the thing.
            </summary>
        </member>
        <member name="T:JetBrains.UI.RichText.RichString.FormatFlags">
            <summary>
            Formatting flags that deifne the text rendering style.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.RichString.FormatFlags.None">
            <summary>
            No flags set.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.RichString.FormatFlags.EndEllipsis">
            <summary>
            Render the ellipsis character when the string gets truncated.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:JetBrains.UI.RichText.RichString.FormatFlags.ShowMnemonics" -->
        <member name="F:JetBrains.UI.RichText.RichString.FormatFlags.Mask">
            <summary>
            All the flags.
            </summary>
        </member>
        <member name="T:JetBrains.UI.RichText.RichText">
            <summary>
            Represents a formatted text block (i.e., actually, sequence of <see cref="T:JetBrains.UI.RichText.RichString"/> instances).
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.RichText.OptionTrace">
            <summary>
            Verbose trace.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.RichText.ourPaintCounter">
            <summary>
            Verbose trace counter.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.RichText.myData">
            <summary>
            Keeps user data attached to ranges.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.RichText.myParts">
            <summary>
            Formatting for the text parts. Must not be <c>Null</c>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.RichText.mySize">
            <summary>
            The cached size value.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.RichText.mySizeIsValid">
            <summary>
            Whether the cached size value can be trusted.
            Must be used in conjunction with <see cref="F:JetBrains.UI.RichText.RichText.mySizeParametersHash"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.RichText.mySizeParametersHash">
            <summary>
            A hash for the <see cref="T:JetBrains.UI.RenderParams"/> for which the <see cref="F:JetBrains.UI.RichText.RichText.mySize"/> is valid.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.RichText.myString">
            <summary>
            Plain text of the rich text. Must not be <c>Null</c>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.#ctor(System.String,JetBrains.UI.RichText.TextStyle)">
            <summary>
            Creates a new rich text string.
            </summary>
            <param name="text">Text content.</param>
            <param name="style">The style to apply to the plain text.</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.#ctor(System.String)">
            <summary>
            Creates a new rich text string.
            Does not apply any <see cref="T:JetBrains.UI.RichText.TextStyle"/> formatting to the plain text, uses the <see cref="P:JetBrains.UI.RichText.TextStyle.Default"/> value.
            </summary>
            <param name="text">Text content.</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.#ctor">
            <summary>
            Creates a new empty non-styled rich text string.
            Same as <see cref="P:JetBrains.UI.RichText.RichText.Empty"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.#ctor(System.String,System.Collections.Generic.ICollection{JetBrains.UI.RichText.RichString})">
            <summary>
            The internal cloning ctor.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.IsNullOrEmpty(JetBrains.UI.RichText.RichText)">
            <summary>
            Checks whether the given rich text instance is null or represents an empty string.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.Append(System.String,JetBrains.UI.RichText.TextStyle)">
            <summary>
            Appends a part with a custom style to the text.
            </summary>
            <param name="s">The part to add.</param>
            <param name="style">The style of the part to add.</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.Append(System.String)">
            <summary>
            Appends a string to the text.
            Uses the style of the trailing character.
            </summary>
            <param name="s">The part to add.</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.Append(JetBrains.UI.RichText.RichText)">
            <summary>
            Appends some rich text to the current one.
            </summary>
            <param name="richText">The rich text to append.</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.AssertValid">
            <summary>
            Performs consistency checks over the rich text.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.Clear">
            <summary>
            Clears the rich text string.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.Draw(System.Drawing.Graphics,System.Drawing.Rectangle,JetBrains.UI.RenderParams)">
            <summary>
            Draws the formatted string on a given graphics.
            </summary>
            <param name="g">The GDI+ device context to draw the string into.</param>
            <param name="bounds">The rectangle where the string is drawn.</param>
            <param name="renderparams">Defines the rendering aspects.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="g"/> is <c>Null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="renderparams"/> is <c>Null</c>.</exception>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.DumpToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.DumpToXaml(System.Xml.XmlWriter)">
            <summary>
            Dumps the object.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.GetFormattedParts">
            <summary>
            Gets a readonly collection of the <see cref="T:JetBrains.UI.RichText.RichText"/> formatting elements.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.GetIndexFromPoint(System.Drawing.Graphics,JetBrains.UI.RenderParams,System.Int32)">
            <summary>
            Gets the index of a character with the given local x-coordinate, or <c>-1</c> if none.
            </summary>
            <param name="g">The GDI+ device context to draw the string into.</param>
            <param name="renderparams">Defines the rendering aspects.</param>
            <param name="x">The richtext-local x-coordinate to lookup the character by.</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.GetIndexFromPoint(System.Drawing.Graphics,JetBrains.UI.RenderParams,System.Drawing.Point)">
            <summary>
            Gets the index of a character with the given local x-coordinate, or <c>-1</c> if none.
            The y-coordinate is checked for hitting the richtext-global bounding rect only.
            </summary>
            <param name="g">The GDI+ device context to draw the string into.</param>
            <param name="renderparams">Defines the rendering aspects.</param>
            <param name="point">The richtext-local coordinates to lookup the character by.</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.GetSize(System.Drawing.Graphics,JetBrains.UI.RenderParams)">
            <summary>
            Calculates the rich text bounding rectangle against the given device context.
            Caches the previously-calculated value.
            </summary>
            <param name="g">The GDI+ device context to draw the string into.</param>
            <param name="renderparams">Defines the rendering aspects.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="g"/> is <c>Null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="renderparams"/> is <c>Null</c>.</exception>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.GetSizeF(System.Drawing.Graphics,JetBrains.UI.RenderParams)">
            <summary>
            Calculates the rich text bounding rectangle against the given device context.
            Caches the previously-calculated value.
            </summary>
            <param name="g">The GDI+ device context to draw the string into.</param>
            <param name="renderparams">Defines the rendering aspects.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="g"/> is <c>Null</c>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="renderparams"/> is <c>Null</c>.</exception>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.GetUserData(System.Int32,System.Int32)">
            <summary>
            Gets the list of user data objects registered with <see cref="M:JetBrains.UI.RichText.RichText.PutUserData(System.Int32,System.Int32,System.Object)"/> whose ranges completely fall within the given range.
            </summary>
            <param name="startOffset">Starting offset.</param>
            <param name="endOffset">Ending offset, <c>-1</c> meand end-of-string.</param>
            <returns>An array of user data objects.</returns>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.Prepend(System.String,JetBrains.UI.RichText.TextStyle)">
            <summary>
            Prepends a part with a custom style to the text.
            </summary>
            <param name="s">The part to add.</param>
            <param name="style">The style of the part to add.</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.Prepend(System.String)">
            <summary>
            Prepends a string to the text.
            Uses the style of the leading character.
            </summary>
            <param name="s">The part to add.</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.Prepend(JetBrains.UI.RichText.RichText)">
            <summary>
            Appends one rich text to another
            </summary>
            <param name="richText">The rich text to append</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.PutUserData(System.Int32,System.Int32,System.Object)">
            <summary>
            Associates some user data with a range.
            </summary>
            <param name="startOffset">Starting offset.</param>
            <param name="endOffset">Ending offset, <c>-1</c> meand end-of-string.</param>
            <param name="data">User data.</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.SetBackColor(System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            Sets the new background color for the given range.
            Don't set background color to <see cref="P:System.Drawing.Color.Transparent"/> because it would prevent painters from providing the neutral color.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.SetBackColor(System.Drawing.Color)">
            <summary>
            Sets the new background color for the whole text.
            Don't set background color to <see cref="P:System.Drawing.Color.Transparent"/> because it would prevent painters from providing the neutral color.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.SetColors(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Sets new colors for the whole text.
            Don't set background color to <see cref="P:System.Drawing.Color.Transparent"/> because it would prevent painters from providing the neutral color.
            </summary>
            <param name="foreColor">Foreground color to set.</param>
            <param name="backColor">Background color to set.</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.SetColors(System.Drawing.Color,System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            Sets the new foreground and background colors for the given range.
            Don't set background color to <see cref="P:System.Drawing.Color.Transparent"/> because it would prevent painters from providing the neutral color.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.SetForeColor(System.Drawing.Color)">
            <summary>
            Sets the new foreground color for the whole text.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.SetForeColor(System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            Sets the new foreground color for the given range.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.SetStyle(JetBrains.UI.RichText.TextStyle,System.Int32,System.Int32)">
            <summary>
            Sets new style to a specified part of the text
            </summary>
            <param name="style">The style to set</param>
            <param name="startOffset">Start offset of the block</param>
            <param name="length">Block length</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><i>startOffset</i> is invalid in current string</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><i>length</i> is invalid starting with specified <i>startOffset</i></exception>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.SetStyle(System.Drawing.FontStyle,System.Int32,System.Int32)">
            <summary>
            Sets new font style to a specified part of the text
            </summary>
            <param name="style">The font style to set</param>
            <param name="startOffset">Start offset of the block</param>
            <param name="length">Block length</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><i>startOffset</i> is invalid in current string</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><i>length</i> is invalid starting with specified <i>startOffset</i></exception>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.SetStyle(JetBrains.UI.RichText.TextStyle)">
            <summary>
            Applies a new <see cref="T:JetBrains.UI.RichText.TextStyle"/> (font style and colors) to the whole rich text string.
            </summary>
            <param name="style">The style to apply.</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.SetStyle(JetBrains.UI.RichText.TextStyle.EffectStyle,System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            Sets new effect to a specified part of the text
            </summary>
            <param name="effect">The effect style to set</param>
            <param name="effectColor">The effect color to set</param>
            <param name="startOffset">Start offset of the block</param>
            <param name="length">Block length</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><i>startOffset</i> is invalid in current string</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><i>length</i> is invalid starting with specified <i>startOffset</i></exception>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.SetStyle(JetBrains.UI.RichText.TextStyle.EffectStyle,System.Drawing.Color)">
            <summary>
            Sets new effect to a specified part of the text
            </summary>
            <param name="effect">The effect style to set</param>
            <param name="effectColor">The effect color to set</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.Split(System.Int32)">
            <summary>
            Splits rich text before the specified offset so that the first part's length is equal to the <paramref name="offset"/>.
            </summary>
            <param name="offset">The offset to split the text at.</param>
            <returns>An array conssiting of the two resulting parts. The array length is always equal to <c>2</c>, even if either part is empty.</returns>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.Trim(System.Char[])">
            <summary>
            Trims the leading and trailing characters from the rich text string.
            Warning: a constant function, would not modify the instance!
            </summary>
            <param name="trimchars">An array of Unicode characters to remove or <c>Null</c>. </param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.TrimEnd(System.Char[])">
            <summary>
            Trims the trailing characters from the rich text string.
            Warning: a constant function, would not modify the instance!
            </summary>
            <param name="trimchars">An array of Unicode characters to remove or <c>Null</c>. </param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.TrimStart(System.Char[])">
            <summary>
            Trims the leading characters from the rich text string.
            Warning: a constant function, would not modify the instance!
            </summary>
            <param name="trimchars">An array of Unicode characters to remove or <c>Null</c>. </param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.BreakString(JetBrains.UI.RichText.RichString,System.Int32,System.Boolean)">
            <summary>
            Breaks a part into two parts at the given local offset, which is relative to the part.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.GetPartsFromRangeAndSplit(System.Int32,System.Int32)">
            <summary>
            Gets the lsit of parts that fall within the given range.
            The rich strings on the range boundaries are splitted, if needed.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichText.ToString">
            <summary>
            Gets plain string representation of rich text, plus string part marks.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.RichText.Empty">
            <summary>
            Gets an empty rich text string.
            Same as <see cref="M:JetBrains.UI.RichText.RichText.#ctor"/>
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.RichText.BackgroundColor">
            <summary>
            Returns common background color. If colors are different in different parts returns <see cref="F:System.Drawing.Color.Empty"/>
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.RichText.ForegroundColor">
            <summary>
            Returns common foreground color. If colors are different in different parts returns <see cref="F:System.Drawing.Color.Empty"/>
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.RichText.IsEmpty">
            <summary>
            Gets whether the string contained in this rich text is empty.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.RichText.Length">
            <summary>
            Gets total length of the text in characters.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.RichText.Text">
            <summary>
            Gets or sets the underlying text as an unformatted string.
            In the latter case the current RichText formatting is inherited.
            </summary>
        </member>
        <member name="T:JetBrains.UI.RichText.RichText.TextRangeDataRecord">
            <summary>
            Describes user data attached to a range within the text.
            </summary>
        </member>
        <member name="T:JetBrains.UI.RichText.TextRenderingMethod">
            <summary>
            Defines the possible rendering methods to be used when rendering text strings.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.TextRenderingMethod.GdiPlus">
            <summary>
            Use GDI+ rendering via the <see cref="T:System.Drawing.Graphics"/> class (.NET default).
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.TextRenderingMethod.Gdi">
            <summary>
            Use GDI rendering via the HDC device contexts and <see cref="M:JetBrains.UI.Interop.Win32Declarations.DrawText(System.IntPtr,System.String,System.Int32,JetBrains.Interop.WinApi.RECT@,JetBrains.UI.Interop.DrawTextFormatFlags)"/> function calls.
            </summary>
        </member>
        <member name="T:JetBrains.UI.RichText.RichTextParameters">
            <summary>
            Contains parameters for a whole rich text block
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichTextParameters.#ctor">
            <summary>
            Creates new rich text parameters
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichTextParameters.#ctor(System.Drawing.Font)">
            <summary>
            Creates new rich text parameters
            </summary>
            <param name="font">Font to use</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichTextParameters.#ctor(System.Drawing.Font,JetBrains.UI.RichText.TextStyle)">
            <summary>
            Creates new rich text parameters
            </summary>
            <param name="font">Font to use</param>
            <param name="style">Default text style</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichTextParameters.#ctor(System.Drawing.Font,JetBrains.UI.RichText.TextStyle,System.Boolean)">
            <summary>
            Creates new rich text parameters
            </summary>
            <param name="font">Font to use</param>
            <param name="style">Default text style</param>
            <param name="drawEllipsis">Default draw ellipsis flag</param>
        </member>
        <member name="M:JetBrains.UI.RichText.RichTextParameters.Dump(System.Xml.XmlWriter)">
            <summary>
            Dumps the object.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.RichTextParameters.DrawEllipsis">
            <summary>
            If to draw ellipsis if the text doesn't fit the given rectangle
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.RichTextParameters.Font">
            <summary>
            Gets or sets used font
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.RichTextParameters.Style">
            <summary>
            Gets or sets default text style
            </summary>
        </member>
        <member name="T:JetBrains.UI.RichText.RichTextBlock">
            <summary>
            Represents a block (possibly multiline) of rich text.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.RichTextBlock.myLines">
            <summary>
            Lines of rich text block
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.RichTextBlock.myParameters">
            <summary>
            Rich text block parameters
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichTextBlock.DumpToXaml(System.Xml.XmlWriter)">
            <summary>
            Dumps the object.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichTextBlock.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.UI.RichText.RichTextBlock.Lines">
            <summary>
            Gets the rich text lines of the block.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.RichTextBlock.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.RichTextBlock.RichText">
            <summary>
            Gets or sets the rich text block as a whole rich text fragment.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.RichTextBlock.Text">
            <summary>
            Gets or sets the plaintext representation of the rich text block.
            The setter creates a number of unformatted rich text lines.
            </summary>
        </member>
        <member name="T:JetBrains.UI.RichText.RichTextBlockParameters">
            <summary>
            Structure for setting parameters for rich text blocks
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichTextBlockParameters.DumpToXaml(System.Xml.XmlWriter)">
            <summary>
            Dumps the object.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichTextBlockParameters.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="F:JetBrains.UI.RichText.RichTextBlockPresenter.myDesiredSize">
            <summary>
            See <see cref="P:JetBrains.UI.RichText.RichTextBlockPresenter.DesiredSize"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.RichTextBlockPresenter.mySize">
            <summary>
            The current externally assigned size.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichTextBlockPresenter.GetConstrainedSize(System.Drawing.Graphics,System.Drawing.Size)">
            <summary>
            Measures the content desired size against the given constraints.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichTextBlockPresenter.SetContent(System.Drawing.Graphics,JetBrains.UI.RichText.RichTextBlock)">
            <summary>
            The parametersized setter for the <see cref="P:JetBrains.UI.RichText.RichTextBlockPresenter.Content"/> property.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichTextBlockPresenter.SetSize(System.Drawing.Graphics,System.Drawing.Size)">
            <summary>
            The parametersized setter for the <see cref="P:JetBrains.UI.RichText.RichTextBlockPresenter.Size"/> property.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichTextBlockPresenter.PerformLayout(System.Drawing.Graphics)">
            <summary>
            Reformats to accomodate for the current size.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.RichTextBlockPresenter.Content">
            <summary>
            Gets the multiline rich text content of the presenter.
            To set the content, use the parameterized <see cref="M:JetBrains.UI.RichText.RichTextBlockPresenter.SetContent(System.Drawing.Graphics,JetBrains.UI.RichText.RichTextBlock)"/> setter.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.RichTextBlockPresenter.DesiredSize">
            <summary>
            Gets the desired size as if there were no external limits.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.RichTextBlockPresenter.RenderParams">
            <summary>
            Gets or sets the rendering aspect of the presenter.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.RichTextBlockPresenter.Size">
            <summary>
            Gets the explicit forced size of the presenter.
            To set the size, use the parameterized <see cref="M:JetBrains.UI.RichText.RichTextBlockPresenter.SetSize(System.Drawing.Graphics,System.Drawing.Size)"/> setter.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.RichTextBlockPresenter.ReflowedContent">
            <summary>
            Gets the rich text block that is the result of reflowing the original <see cref="P:JetBrains.UI.RichText.RichTextBlockPresenter.Content"/> so that it fit the width of the given <see cref="P:JetBrains.UI.RichText.RichTextBlockPresenter.Size"/>.
            </summary>
        </member>
        <member name="T:JetBrains.UI.RichText.RichTextBlockFormatter">
            <summary>
            Reflows a rich text block 
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.RichTextBlockFormatter.Format(JetBrains.UI.RichText.RichTextBlock,System.Int32,System.Drawing.Graphics,JetBrains.UI.RenderParams)">
            <summary>
            Reflows the set of <see cref="T:JetBrains.UI.RichText.RichText"/> strings so that they fit the width specified.
            The existing line breaks are kept, new ones are added as needed.
            </summary>
            <param name="block">The source lines of text.</param>
            <param name="width">The maximum width.</param>
            <param name="g">The device context for measuring the text against.</param>
            <param name="renderparams">The rendering aspect.</param>
            <returns>The formatted rich text with new line breakss.</returns>
        </member>
        <member name="M:JetBrains.UI.RichText.RichTextBlockFormatter.Format(JetBrains.UI.RichText.RichText,System.Int32,System.Drawing.Graphics,JetBrains.UI.RenderParams)">
            <summary>
            Reflows the single line of <see cref="T:JetBrains.UI.RichText.RichText"/> so that it fits the width specified.
            The line breaks are added as needed.
            </summary>
            <param name="text">The source line of text.</param>
            <param name="width">The maximum width.</param>
            <param name="g">The device context for measuring the text against.</param>
            <param name="renderparams">The rendering aspect.</param>
            <returns>The formatted rich text with new line breaks.</returns>
        </member>
        <member name="T:JetBrains.UI.RichText.TextStyle">
            <summary>
            Represents style of text block
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.TextStyle.myFontStyle">
            <summary>
            Font style
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.TextStyle.myForegroundColor">
            <summary>
            Foreground color
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.TextStyle.myBackgroundColor">
            <summary>
            Background color
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.TextStyle.myEffect">
            <summary>
            Effect to use
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.TextStyle.myEffectColor">
            <summary>
            Effect color
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.TextStyle.#ctor(System.Drawing.FontStyle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Defines a text style.
            </summary>
            <remarks>
            This contructor defines style with no effects.
            </remarks>
            <param name="fontStyle">The font style to use</param>
            <param name="foregroundColor">Foreground color</param>
            <param name="backgroundColor">Background clor</param>
        </member>
        <member name="M:JetBrains.UI.RichText.TextStyle.#ctor(System.Drawing.FontStyle,System.Drawing.Color)">
            <summary>
            Defines a text style.
            </summary>
            <remarks>
            This contructor defines style with no effects.
            </remarks>
            <param name="fontStyle">The font style to use</param>
            <param name="foregroundColor">Foreground color</param>
        </member>
        <member name="M:JetBrains.UI.RichText.TextStyle.#ctor(System.Drawing.FontStyle,System.Drawing.Color,System.Drawing.Color,JetBrains.UI.RichText.TextStyle.EffectStyle,System.Drawing.Color)">
            <summary>
            Defines a text style.
            </summary>
            <param name="fontStyle">The font style to use</param>
            <param name="foregroundColor">Foreground color</param>
            <param name="backgroundColor">Background clor</param>
            <param name="effect">Effect to use</param>
            <param name="effectColor">Effect color to use</param>
        </member>
        <member name="M:JetBrains.UI.RichText.TextStyle.#ctor(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Defines a text style.
            </summary>
            <remarks>
            This contructor defines style with no effects and regular style of the text.
            </remarks>
            <param name="foregroundColor">Foreground color</param>
            <param name="backgroundColor">Background clor</param>
        </member>
        <member name="M:JetBrains.UI.RichText.TextStyle.FromBackColor(System.Drawing.Color)">
            <summary>
            Creates a style that has only background color specified.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.TextStyle.FromForeColor(System.Drawing.Color)">
            <summary>
            Creates a style that has only foreground color specified.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.TextStyle.ourDefaultStyle">
            <summary>
            The default text style.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.TextStyle.ourHiddenStyle">
            <summary>
            The hidden text style.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.TextStyle.Dump(System.Xml.XmlWriter)">
            <summary>
            Dumps the object.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RichText.TextStyle.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.UI.RichText.TextStyle.FontStyle">
            <summary>
            Gets or sets font style
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.TextStyle.ForegroundColor">
            <summary>
            Gets or sets the foreground color.
            <see cref="F:System.Drawing.Color.Empty"/> means “Don't care, renderer should specify, if not, use <see cref="P:JetBrains.UI.RichText.TextStyle.DefaultForegroundColor"/>”.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.TextStyle.BackgroundColor">
            <summary>
            Gets or sets the background color.
            <see cref="F:System.Drawing.Color.Empty"/> means “Don't care, renderer should specify, if not, use <see cref="P:JetBrains.UI.RichText.TextStyle.DefaultBackgroundColor"/>”.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.TextStyle.Effect">
            <summary>
            Gets or sets used effect
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.TextStyle.EffectColor">
            <summary>
            Gets or sets the effect color.
            <see cref="F:System.Drawing.Color.Empty"/> means the <see cref="P:JetBrains.UI.RichText.TextStyle.DefaultEffectColor"/> will be used.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.TextStyle.Default">
            <summary>
            Gets the default text style.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.TextStyle.Hidden">
            <summary>
            Gets the hidden text style.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.TextStyle.DefaultForegroundColor">
            <summary>
            See <see cref="P:JetBrains.UI.RichText.TextStyle.ForegroundColor"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.TextStyle.DefaultBackgroundColor">
            <summary>
            See <see cref="P:JetBrains.UI.RichText.TextStyle.BackgroundColor"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RichText.TextStyle.DefaultEffectColor">
            <summary>
            See <see cref="P:JetBrains.UI.RichText.TextStyle.EffectColor"/>.
            </summary>
        </member>
        <member name="T:JetBrains.UI.RichText.TextStyle.EffectStyle">
            <summary>
            Enumerates different text drawing effects
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.TextStyle.EffectStyle.None">
            <summary>
            No effects.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.TextStyle.EffectStyle.StraightUnderline">
            <summary>
            Underline with a straight line.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.TextStyle.EffectStyle.WeavyUnderline">
            <summary>
            Underline with a gay line.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RichText.TextStyle.EffectStyle.StrikeOut">
            <summary>
            Strike out with a straight line.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Concurrency.NativeEvent">
            <summary>
            This class just uses WaitForSingleObject directly to work around unwanted consequences of 
            message pumping that may happen while doing WaitHandle.WaitOne. It is not intended to implement
            all the functionality that WaitHandle possess.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Concurrency.NativeEvent.WaitOne(System.Int32)">
            <summary>
            Waiting for event to be SET
            </summary>
            <return>true if event was SET, false if timeout expired</return>
            <param name="timeout"></param>
        </member>
        <member name="M:JetBrains.Util.Concurrency.NativeEvent.WaitOne">
            <summary>
            Waiting for event to be SET
            </summary>
        </member>
        <member name="T:JetBrains.Util.BidirectionalMap`2">
            <summary>
            Mapping from one family of objects into another and vice versa.
            </summary>
        </member>
        <member name="M:JetBrains.Util.BidirectionalMap`2.Add(`0,`1)">
            <summary>
            Adds a new mapping to the map. Both ends must be unique in their maps.
            </summary>
        </member>
        <member name="M:JetBrains.Util.BidirectionalMap`2.SetMapping(`0,`1,System.Boolean)">
            <summary>
            Adds a new mapping to the map. You should use <see cref="M:JetBrains.Util.BidirectionalMap`2.Add(`0,`1)"/> whenever possible, as it throws on dpulicate keys.
            </summary>
            <param name="left">Left key.</param>
            <param name="right">Right key.</param>
            <param name="bIgnoreConflicts">Whether to ignore duplicate keys in left and right collections silently. Not recommended. The conflicting mappings will be dropped.</param>
        </member>
        <member name="P:JetBrains.Util.BidirectionalMap`2.Count">
            <summary>
            Get the number of mappings.
            As we implement the identity mapping, the number of items on both sides is always in sync.
            </summary>
        </member>
        <member name="T:JetBrains.Util.LocalHashSet`1">
            <summary>
            Lazily instantiates the hash set.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:JetBrains.Util.Diff.DiffFragment">
            <summary>
            Single frame after diffing two entities
            </summary>
        </member>
        <member name="T:JetBrains.Util.Diff.DiffFragmentType">
            <summary>
            Type of the single diff frame
            </summary>
        </member>
        <member name="T:JetBrains.Util.EmptyArray`1">
            <summary>
            Reuses the single instance of an empty array (one per type).
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.EqualEnumerables``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.EqualEnumerables``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.EqualEnumerables``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.EqualEnumerables``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.ICollection{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.EqualEnumerables``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.EqualEnumerables``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.Then``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Similar to <see cref="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})"/>, but not lazy and returns <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <remarks>
            Allows <c>null</c> as arguments, interprets it as empty sequence.
            </remarks>
            <returns>
            List containing elements of <paramref name="first"/> in order, followed by elements of <paramref name="tail"/> in order.
            </returns>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.TryGetFastCount``1(System.Collections.Generic.IEnumerable{``0},System.Int32@)">
            <summary>
            Tries to determine the number of elements in <paramref name="collection"/> in <c>O(1)</c>.
            </summary>
            <returns>
            <c>true</c> is the method succeeded and the number of elements has been assigned to <paramref name="count"/>, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.TryGetFastCount``1(System.Collections.Generic.ICollection{``0},System.Int32@)">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.TryGetFastCount(System.Collections.ICollection,System.Int32@)">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.TryGetFastCount(System.String,System.Int32@)">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.CanBeProvenEmptyFast``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns <c>true</c> if length of <paramref name="collection"/> can be checked fast and this check gives <c>0</c>.
            Otherwise returns <c>false</c> (it does not necessarily mean that <paramref name="collection"/> is not empty)
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.CanBeProvenEmptyFast``1(System.Collections.Generic.ICollection{``0})">
            <remarks>
            Static overload to prevent runtime type checks.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.CanBeProvenEmptyFast(System.Collections.ICollection)">
            <remarks>
            Static overload to prevent runtime type checks.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.CanBeProvenEmptyFast(System.String)">
            <remarks>
            Static overload to prevent runtime type checks.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.CanBeProvenNonEmptyFast``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns <c>true</c> if length of <paramref name="collection"/> can be checked fast and this check does not give <c>0</c>.
            Otherwise return <c>false</c> (it does not necessarily mean that <paramref name="collection"/> is empty!)
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.CanBeProvenNonEmptyFast``1(System.Collections.Generic.ICollection{``0})">
            <remarks>
            Static overload to prevent runtime type checks.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.CanBeProvenNonEmptyFast(System.Collections.ICollection)">
            <remarks>
            Static overload to prevent runtime type checks.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.CanBeProvenNonEmptyFast(System.String)">
            <remarks>
            Static overload to prevent runtime type checks.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns <c>true</c> if and only if <paramref name="collection"/> is empty (has no elements).
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.IsEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Returns <c>true</c> if and only if <paramref name="collection"/> is empty (has no elements).
            </summary>
            <remarks>
            Static overload to prevent runtime type checks.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.IsEmpty``1(JetBrains.Util.LocalList{``0})">
            <summary>
            Returns <c>true</c> if and only if <paramref name="collection"/> is empty (has no elements).
            </summary>
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.IsEmpty``1(System.Collections.Generic.Stack{``0})">
            <summary>
            Returns <c>true</c> if and only if <paramref name="collection"/> is empty (has no elements).
            </summary>
            <remarks>
            Static overload to prevent runtime type checks.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.IsEmpty``1(System.Collections.Generic.Queue{``0})">
            <summary>
            Returns <c>true</c> if and only if <paramref name="collection"/> is empty (has no elements).
            </summary>
            <remarks>
            Static overload to prevent runtime type checks.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.IsSingle``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns <c>true</c> if and only if <paramref name="collection"/> has exactly 1 element.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.IsSingle``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Returns <c>true</c> if and only if <paramref name="collection"/> has exactly 1 element.
            </summary>
            <remarks>
            Static overload to prevent runtime type checks.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.IsSingle(System.String)">
            <summary>
            Returns <c>true</c> if and only if <paramref name="str"/> has exactly 1 character.
            </summary>
            <remarks>
            Static overload to prevent runtime type checks.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.HasAtLeast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns <c>true</c> if and only if <paramref name="collection"/> has <paramref name="minimumCount"/> elements or more.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.HasAtLeast``1(System.Collections.Generic.IEnumerable{``0},System.Int64)">
            <summary>
            Returns <c>true</c> if and only if <paramref name="collection"/> has <paramref name="minimumCount"/> elements or more.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.HasAtLeast``1(System.Collections.Generic.ICollection{``0},System.Int32)">
            <summary>
            Returns <c>true</c> if and only if <paramref name="collection"/> has <paramref name="minimumCount"/> elements or more.
            </summary>
            <remarks>
            Static overload to prevent runtime type checks.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.HasAtLeast(System.String,System.Int32)">
            <summary>
            Returns <c>true</c> if and only if <paramref name="str"/> has <paramref name="minimumCount"/> characters or more.
            </summary>
            <remarks>
            Static overload to prevent runtime type checks.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.HasMultiple``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns <c>true</c> if and only if <paramref name="collection"/> has 2 elements or more.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.HasMultiple``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Returns <c>true</c> if and only if <paramref name="collection"/> has 2 elements or more.
            </summary>
            <remarks>
            Static overload to prevent runtime type checks.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.HasMultiple(System.String)">
            <summary>
            Returns <c>true</c> if and only if <paramref name="str"/> has 2 characters or more.
            </summary>
            <remarks>
            Static overload to prevent runtime type checks.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.HasMoreThan``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns <c>true</c> if and only if <paramref name="collection"/> has more than <paramref name="exclusiveLowerBound"/> elements.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.HasMoreThan``1(System.Collections.Generic.ICollection{``0},System.Int32)">
            <summary>
            Returns <c>true</c> if and only if <paramref name="collection"/> has more than <paramref name="exclusiveLowerBound"/> elements.
            </summary>
            <remarks>
            Static overload to prevent runtime type checks.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.HasMoreThan(System.String,System.Int32)">
            <summary>
            Returns <c>true</c> if and only if <paramref name="str"/> has more than <paramref name="exclusiveLowerBound"/> characters.
            </summary>
            <remarks>
            Static overload to prevent runtime type checks.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.CountIs``1(System.Collections.Generic.ICollection{``0},System.Int32)">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.CountIs(System.String,System.Int32)">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.IsOfSameLengthAs``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.ICollection{``1})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.IsOfSameLengthAs``2(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.IsOfSameLengthAs``2(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``1})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.AddRangeFluent``2(``1,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Fluent <c>AddRange</c>, returns the collection, can be used in chains and in field initializers.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.AsReadOnly``1(JetBrains.Util.ReadOnlyCollection{``0})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.AsReadOnly``2(JetBrains.Util.ReadOnlyDictionary{``0,``1})">
            <summary>
            Static overload to prevent runtime type checks.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.ConvertAll``2(System.Collections.Generic.IList{``1})">
            <summary>
            Warning! Copies the items!
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.ConvertAll``2(System.Collections.Generic.IList{``1},System.Func{``1,``0})">
            <summary>
            Warning! Copies the items!
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.CastAll``2(System.Collections.Generic.ICollection{``1})">
            <summary>
            Warning! Copies the items!
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.Convert``2(System.Collections.Generic.IEnumerable{``1},System.Converter{``1,``0})">
            <summary>
            Warning! Copies the items!
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.AsCollection``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Adapts a generic collection to the non-generic collection interface.
            Does not copy the items.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.ToArray``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Warning! Copies the items!
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.Sort``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            WARNING: Sometimes it sorts collection in-place
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.EnumerateRecursivelyDfs``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Enumerates the tree structure recursively. The tree includes the root element <paramref name="t"/> itself, its children, as gotten from <paramref name="getChildren"/>, and the children of those children, and so on.
            The walk uses Depth-First Search, does not use additional memory, but puts a strain on the call stack.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.EnumerateRecursivelyBfs``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Enumerates the tree structure recursively. The tree includes the root element <paramref name="root"/> itself, its children, as gotten from <paramref name="getChildren"/>, and the children of those children, and so on.
            The walk uses Breadth-First Search, does not use call stack, but allocates some additional memory.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.Force``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Forces evaluation of all <paramref name="collection"/> members.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.TryGetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            A <see cref="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)"/> version that silently returns <c>Null</c> when the <paramref name="key"/> is not present in the <paramref name="dictionary"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.TryGetValueNullable``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            A <see cref="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)"/> version that silently returns <c>Null</c> when the <paramref name="key"/> is not present in the <paramref name="dictionary"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.GetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.String)">
            <summary>
            A <see cref="!:IDictionary&lt;TKey,TValue&gt;.Item"/> version that throws the explicit <see cref="T:System.Collections.Generic.KeyNotFoundException"/> exception text when the <paramref name="key"/> is not present in the <paramref name="dictionary"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.TryGetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})">
            <summary>
            A <see cref="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)"/> version that adds a new entry the <paramref name="key"/> is not present in the <paramref name="dictionary"/>. The new value is given by <paramref name="funcNew"/> in this case.
            </summary>
            <remarks>Its name <c>TryGetValue</c> is kept for discoverability.</remarks>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.TryGetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            A <see cref="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)"/> version that adds a new entry the <paramref name="key"/> is not present in the <paramref name="dictionary"/>. The new value is given by <paramref name="funcNew"/> in this case.
            </summary>
            <remarks>Its name <c>TryGetValue</c> is kept for discoverability.
            This version takes a function of the key to allow caching the value-creation delegate without creating a new closure each time, as <see cref="M:JetBrains.Util.CollectionUtil.TryGetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})"/> would do. Recommended in high-perf scenarios.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.AggregateString``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{System.Text.StringBuilder,``0,System.Text.StringBuilder})">
            <summary>
            Aggregates a number of items into a single string, using the <see cref="T:System.Text.StringBuilder"/>
            to avoid creating excessive strings when concatenating.
            Use its <see cref="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object[])"/> method as appropriate.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.AggregateString``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{System.Text.StringBuilder,``0,System.Text.StringBuilder},System.Func{System.Text.StringBuilder,System.Text.StringBuilder})">
            <summary>
            Aggregates a number of items into a single string, using the <see cref="T:System.Text.StringBuilder"/>
            to avoid creating excessive strings when concatenating.
            Use its <see cref="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object[])"/> method as appropriate.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.AggregateString``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.Func{System.Text.StringBuilder,``0,System.Text.StringBuilder},System.Func{System.Text.StringBuilder,System.Text.StringBuilder})">
            <summary>
            Aggregates a number of items into a single string, using the <see cref="T:System.Text.StringBuilder"/>
            to avoid creating excessive strings when concatenating.
            Use its <see cref="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object[])"/> method as appropriate.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.AggregateString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Aggregates a number of items into a single string, using the <see cref="T:System.Text.StringBuilder"/> to avoid creating excessive strings when concatenating. Use its <see cref="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object[])"/> method as appropriate.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.AggregateString``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.Action{System.Text.StringBuilder})">
            <summary>
            Aggregates a number of items into a single string, using the <see cref="T:System.Text.StringBuilder"/> to avoid creating excessive strings when concatenating. Use its <see cref="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object[])"/> method as appropriate.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.AggregateString``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.Func{System.Text.StringBuilder,``0,System.Text.StringBuilder})">
            <summary>
            Aggregates a number of items into a single string, using the <see cref="T:System.Text.StringBuilder"/>
            to avoid creating excessive strings when concatenating.
            Use its <see cref="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object[])"/> method as appropriate.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.AggregateString``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Text.StringBuilder,``0,System.Text.StringBuilder})">
            <summary>
            Aggregates a number of items into a single string, using the <see cref="T:System.Text.StringBuilder"/>
            to avoid creating excessive strings when concatenating.
            Use its <see cref="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object[])"/> method as appropriate.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.AggregateString(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Aggregates a number of strings into a single string, using the <see cref="T:System.Text.StringBuilder"/>
            to avoid creating excessive strings when concatenating.
            Use its <see cref="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object[])"/> method as appropriate.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.Permute``1(System.Collections.Generic.IList{``0},``0[])">
            <summary>
            All permutations of collection.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.WhereNotNullCore``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Does not use a predicate, unlike generic <see cref="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.Pop``1(System.Collections.Generic.Stack{``0},System.String)">
            <summary>
            Pops the item from the stack (<see cref="M:System.Collections.Generic.Stack`1.Pop"/>), throws the <paramref name="exception">specific message</paramref> if the stack is empty, instead of the generic stack exception.
            </summary>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.ArrayUnion``1(``0[],``0)">
            <summary>
            <para>Creates a new array that is the old array plus one new item.</para>
            <para>If the item is already present in the list, returns the old array.</para>
            <para>This method is useful for implementing the copy-on-write scenarios a bit more effectively (compared to old.Concat(item).ToArray()).</para>
            </summary>
            <typeparam name="TItem">Item type.</typeparam>
            <param name="thіs">Original array (will not be modified).</param>
            <param name="item">The item to add.</param>
            <returns>The new array, if item added; the old array, if no change.</returns>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.ArrayUnion``1(``0[],``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            <para>Creates a new array that is the old array plus one new item.</para>
            <para>If the item is already present in the list, returns the old array.</para>
            <para>This method is useful for implementing the copy-on-write scenarios a bit more effectively (compared to old.Concat(item).ToArray()).</para>
            </summary>
            <typeparam name="TItem">Item type.</typeparam>
            <param name="thіs">Original array (will not be modified).</param>
            <param name="item">The item to add.</param>
            <param name="comparer">Item equality.</param>
            <returns>The new array, if item added; the old array, if no change.</returns>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.ArrayExcept``1(``0[],``0)">
            <summary>
            <para>Creates a new array that is the old array except the given item.</para>
            <para>If the item is not on the list, returns the old array.</para>
            <para>This method is useful for implementing the copy-on-write scenarios a bit more effectively (compared to old.Concat(item).ToArray()).</para>
            </summary>
            <typeparam name="TItem">Item type.</typeparam>
            <param name="thіs">Original array (will not be modified).</param>
            <param name="item">The item to remove.</param>
            <returns>The new array, if item removed; the old array, if no change.</returns>
        </member>
        <member name="M:JetBrains.Util.CollectionUtil.ArrayExcept``1(``0[],``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            <para>Creates a new array that is the old array except the given item.</para>
            <para>If the item is not on the list, returns the old array.</para>
            <para>This method is useful for implementing the copy-on-write scenarios a bit more effectively (compared to old.Concat(item).ToArray()).</para>
            </summary>
            <typeparam name="TItem">Item type.</typeparam>
            <param name="thіs">Original array (will not be modified).</param>
            <param name="item">The item to remove.</param>
            <param name="comparer">Item equality.</param>
            <returns>The new array, if item removed; the old array, if no change.</returns>
        </member>
        <member name="P:JetBrains.Util.CollectionUtil.BinarySearchResult`1.IsHit">
            <summary>
            Gets whether the search found any results.
            </summary>
        </member>
        <member name="P:JetBrains.Util.CollectionUtil.BinarySearchResult`1.HitIndex">
            <summary>
            Gets the index of the search hit, should there be any.
            In case of a search miss, throws.
            </summary>
        </member>
        <member name="P:JetBrains.Util.CollectionUtil.BinarySearchResult`1.NearestItemNotAboveTarget">
            <summary>
            The target, if the search had a hit.
            Otherwise, the nearest item below the target.
            If the first item in the list is above the target, throws an exception.
            </summary>
        </member>
        <member name="P:JetBrains.Util.CollectionUtil.BinarySearchResult`1.NearestItemNotBelowTarget">
            <summary>
            The target, if the search had a hit.
            Otherwise, the nearest item above the target.
            If the last item in the list is below the target, throws an exception.
            </summary>
        </member>
        <member name="P:JetBrains.Util.CollectionUtil.BinarySearchResult`1.NearestItemNotAboveTargetOrFirst">
            <summary>
            The target, if the search had a hit.
            Otherwise, the nearest item below the target.
            If the first item in the list is above the target, returns that item anyway. Throws on an empty list.
            </summary>
        </member>
        <member name="P:JetBrains.Util.CollectionUtil.BinarySearchResult`1.NearestItemNotBelowTargetOrLast">
            <summary>
            The target, if the search had a hit.
            Otherwise, the nearest item above the target.
            If the last item in the list is below the target, returns that item anyway. Throws on an empty list.
            </summary>
        </member>
        <member name="P:JetBrains.Util.CollectionUtil.BinarySearchResult`1.NearestIndexNotAboveTarget">
            <summary>
            The target, if the search had a hit.
            Otherwise, the nearest item below the target.
            If the first item in the list is above the target, throws an exception.
            </summary>
        </member>
        <member name="P:JetBrains.Util.CollectionUtil.BinarySearchResult`1.NearestIndexNotBelowTarget">
            <summary>
            The target, if the search had a hit.
            Otherwise, the nearest item above the target.
            If the last item in the list is below the target, throws an exception.
            </summary>
        </member>
        <member name="P:JetBrains.Util.CollectionUtil.BinarySearchResult`1.NearestIndexNotAboveTargetOrFirst">
            <summary>
            The target, if the search had a hit.
            Otherwise, the nearest item below the target.
            If the first item in the list is above the target, returns that item anyway. Throws on an empty list.
            </summary>
        </member>
        <member name="P:JetBrains.Util.CollectionUtil.BinarySearchResult`1.NearestIndexNotBelowTargetOrLast">
            <summary>
            The target, if the search had a hit.
            Otherwise, the nearest item above the target.
            If the last item in the list is below the target, returns that item anyway. Throws on an empty list.
            </summary>
        </member>
        <member name="P:JetBrains.Util.CollectionUtil.BinarySearchResult`1.HitItem">
            <summary>
            If the search found an item, returns that item. Otherwise, throws.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Console.MyConsole">
            <summary>
            Extended console for both Windows and Console Applications.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Initialize">
            <summary>
            Initializes WinConsole -- should be called at the start of the program using it
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Beep">
            <summary>
            Produces a simple beep.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Flash(System.Boolean)">
            <summary>
            Flashes the console window
            </summary>
            <param name="once">if off, flashes repeated until the user makes the console foreground</param>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Clear">
            <summary>
            Clear the console window
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.RedirectDebugOutput(System.Boolean,JetBrains.Util.Console.ConsoleColor,System.Boolean)">
            <summary>
            Redirects debug output to the console
            </summary>
            <param name="clear">clear all other listeners first</param>
            <param name="color">color to use for display debug output</param>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.RedirectTraceOutput(System.Boolean,JetBrains.Util.Console.ConsoleColor)">
            <summary>
            Redirects trace output to the console
            </summary>
            <param name="clear">clear all other listeners first</param>
            <param name="color">color to use for display trace output</param>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.GetWindowPosition(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets the Console Window location and size in pixels
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.SetWindowPosition(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the console window location and size in pixels
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.OpenStandardInput">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.OpenStandardInput(System.Int32)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.OpenStandardError">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.OpenStandardError(System.Int32)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.OpenStandardOutput">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.OpenStandardOutput(System.Int32)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.SetIn(System.IO.TextReader)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.SetOut(System.IO.TextWriter)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.SetError(System.IO.TextWriter)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Read">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.ReadLine">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.WriteLine">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.WriteLine(System.Boolean)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.WriteLine(System.Char)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.WriteLine(System.Char[])">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.WriteLine(System.Char[],System.Int32,System.Int32)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.WriteLine(System.Decimal)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.WriteLine(System.Double)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.WriteLine(System.Single)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.WriteLine(System.Int32)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.WriteLine(System.UInt32)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.WriteLine(System.Int64)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.WriteLine(System.UInt64)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.WriteLine(System.Object)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.WriteLine(System.String)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.WriteLine(System.String,System.Object)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.WriteLine(System.String,System.Object,System.Object)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.WriteLine(System.String,System.Object[])">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Write(System.String,System.Object)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Write(System.String,System.Object,System.Object)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Write(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Write(System.String,System.Object[])">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Write(System.Boolean)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Write(System.Char)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Write(System.Char[])">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Write(System.Double)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Write(System.Decimal)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Write(System.Single)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Write(System.Int32)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Write(System.UInt32)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Write(System.Int64)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Write(System.UInt64)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Write(System.Object)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="M:JetBrains.Util.Console.MyConsole.Write(System.String)">
            <summary>
            Same as the Console counterpart
            </summary>
        </member>
        <member name="P:JetBrains.Util.Console.MyConsole.Visible">
            <summary>
            Specifies whether the console window should be visible or hidden
            </summary>
        </member>
        <member name="P:JetBrains.Util.Console.MyConsole.Title">
            <summary>
            Gets or sets the title of the console window
            </summary>
        </member>
        <member name="P:JetBrains.Util.Console.MyConsole.Handle">
            <summary>
            Get the HWND of the console window
            </summary>
            <returns></returns>
        </member>
        <member name="P:JetBrains.Util.Console.MyConsole.ParentHandle">
            <summary>
            Gets and sets a new parent hwnd to the console window
            </summary>
            <param name="window"></param>
        </member>
        <member name="P:JetBrains.Util.Console.MyConsole.Buffer">
            <summary>
            Get the current Win32 buffer handle
            </summary>
        </member>
        <member name="P:JetBrains.Util.Console.MyConsole.CursorPosition">
            <summary>
            Get the current position of the cursor
            </summary>
            
        </member>
        <member name="P:JetBrains.Util.Console.MyConsole.ScreenSize">
            <summary>
            Returns a coordinates of visible window of the buffer
            </summary>
        </member>
        <member name="P:JetBrains.Util.Console.MyConsole.BufferSize">
            <summary>
            Returns the size of buffer
            </summary>
        </member>
        <member name="P:JetBrains.Util.Console.MyConsole.MaximumScreenSize">
            <summary>
            Returns the maximum size of the screen given the desktop dimensions
            </summary>
        </member>
        <member name="P:JetBrains.Util.Console.MyConsole.Info">
            <summary>
            Returns various information about the screen buffer
            </summary>
        </member>
        <member name="P:JetBrains.Util.Console.MyConsole.Color">
            <summary>
            Gets or sets the current color and attributes of text 
            </summary>
        </member>
        <member name="P:JetBrains.Util.Console.MyConsole.CtrlBreakPressed">
            <summary>
            Returns true if Ctrl-C or Ctrl-Break was hit since the last time this property
            was called. The value of this property is set to false after each request.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Console.MyConsole.Error">
            <summary>
            Returns the error stream (same as Console.Error)
            </summary>
        </member>
        <member name="P:JetBrains.Util.Console.MyConsole.In">
            <summary>
            Returns the input stream (same as Console.In)
            </summary>
        </member>
        <member name="P:JetBrains.Util.Console.MyConsole.Out">
            <summary>
            Returns the output stream (same as Console.Out)
            </summary>
        </member>
        <member name="T:JetBrains.Util.Rects">
            <summary>
            A helper class for carrying out advanced operations over rectangles.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.AbsMaximum(System.Drawing.Size)">
            <summary>
            Returns the maximum of the size dimensions absolute values.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.AlignCenter(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Centers one rectangle within another.
            </summary>
            <param name="source">The rectangle to align. The returned value will have the same size.</param>
            <param name="bounds">The bounds to align the <paramref name="source"/> within, may be smaller than <paramref name="source"/>.</param>
        </member>
        <member name="M:JetBrains.Util.Rects.AlignCenter(System.Drawing.Size,System.Drawing.Rectangle)">
            <summary>
            Centers one rectangle within another.
            </summary>
            <param name="source">The size of the rectangle to align. The returned value will have the same size.</param>
            <param name="bounds">The bounds to align the <paramref name="source"/> within, may be smaller than <paramref name="source"/>.</param>
        </member>
        <member name="M:JetBrains.Util.Rects.AlignCenterAndCrop(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Centers one rectangle within another and crops down as needed.
            </summary>
            <param name="source">The rectangle to align. The returned value may be cropped down by the <paramref name="bounds"/>.</param>
            <param name="bounds">The bounds to align the <paramref name="source"/> within, may be smaller than <paramref name="source"/>.</param>
        </member>
        <member name="M:JetBrains.Util.Rects.AlignCenterAndCrop(System.Drawing.Size,System.Drawing.Rectangle)">
            <summary>
            Centers one rectangle within another and crops down as needed.
            </summary>
            <param name="source">The size of the rectangle to align. The returned value may be cropped down by the <paramref name="bounds"/>.</param>
            <param name="bounds">The bounds to align the <paramref name="source"/> within, may be smaller than <paramref name="source"/>.</param>
        </member>
        <member name="M:JetBrains.Util.Rects.AlignCenterAndDownscale(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Centers one rectangle within another. If the <paramref name="source"/> does not fit into <paramref name="bounds"/>, it's downscaled proportionally.
            </summary>
            <param name="source">The rectangle to align. The returned value may be downscaled.</param>
            <param name="bounds">The bounds to align the <paramref name="source"/> within, may be smaller than <paramref name="source"/>.</param>
        </member>
        <member name="M:JetBrains.Util.Rects.AlignCenterAndDownscale(System.Drawing.Size,System.Drawing.Rectangle)">
            <summary>
            Centers one rectangle within another. If the <paramref name="source"/> does not fit into <paramref name="bounds"/>, it's downscaled proportionally.
            </summary>
            <param name="source">The size of the rectangle to align. The returned value may be downscaled.</param>
            <param name="bounds">The bounds to align the <paramref name="source"/> within, may be smaller than <paramref name="source"/>.</param>
        </member>
        <member name="M:JetBrains.Util.Rects.Attach(System.Drawing.Rectangle@,System.Windows.Forms.DockStyle,System.Int32)">
            <summary>
            Returns a non-collapsed rectangle attached outside the <paramref name="anchor"/> rectangle.
            </summary>
            <param name="anchor">The attachment anchor. Increased to include the newly-attached rectangle on exit, so that to attach multiple rects in sequence.</param>
            <param name="dockstyle">The docking style, which can be a side-dock only.</param>
            <param name="size">The characteristic size of the side-attached rectangle (only either width or height, whichever is not defined by the attachment process).</param>
            <returns>The rectangle attached at the given side.</returns>
        </member>
        <member name="M:JetBrains.Util.Rects.Attach(System.Drawing.Rectangle@,System.Windows.Forms.DockStyle,System.Drawing.Size)">
            <summary>
            Returns a non-collapsed rectangle attached outside the <paramref name="anchor"/> rectangle.
            </summary>
            <param name="anchor">The attachment anchor. Increased to include the newly-attached rectangle on exit, so that to attach multiple rects in sequence.</param>
            <param name="dockstyle">The docking style, which can be a side-dock only.</param>
            <param name="size">The characteristic size of the side-attached rectangle (only either width or height is used, whichever is not defined by the attachment process).</param>
            <returns>The rectangle attached at the given side.</returns>
        </member>
        <member name="M:JetBrains.Util.Rects.Attach(System.Drawing.Rectangle,System.Windows.Forms.DockStyle,System.Int32)">
            <summary>
            Returns a non-collapsed rectangle attached outside the <paramref name="anchor"/> rectangle.
            </summary>
            <param name="anchor">The attachment anchor.</param>
            <param name="dockstyle">The docking style, which can be a side-dock only.</param>
            <param name="size">The characteristic size of the side-attached rectangle (only either width or height, whichever is not defined by the attachment process).</param>
            <returns>The rectangle attached at the given side.</returns>
        </member>
        <member name="M:JetBrains.Util.Rects.Attach(System.Drawing.Rectangle,System.Windows.Forms.DockStyle,System.Drawing.Size)">
            <summary>
            Returns a non-collapsed rectangle attached outside the <paramref name="anchor"/> rectangle.
            </summary>
            <param name="anchor">The attachment anchor.</param>
            <param name="dockstyle">The docking style, which can be a side-dock only.</param>
            <param name="size">The characteristic size of the side-attached rectangle (only either width or height is used, whichever is not defined by the attachment process).</param>
            <returns>The rectangle attached at the given side.</returns>
        </member>
        <member name="M:JetBrains.Util.Rects.ClipSmart(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Performs the smart clipping that returns a non-all-zeros rectangle even if there is no intersection.
            Ie, when the <paramref name="source"/> rect lays outside the <paramref name="bounds"/> over some side, the result is a zero-thick projection on that side.
            </summary>
            <param name="source"></param>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.Util.Rects.Collapse(System.Drawing.Rectangle,JetBrains.UI.Anchoring2D)">
            <summary>
            Collapses a rectangle down to a point.
            The inside modes are located on the inner sides of the rectangle, and outside ones are one point outside.
            The bottom-right sides are not included within the rectangle area.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.Constrain(System.Drawing.Size,System.Drawing.Size)">
            <summary>
            Constrains the <paramref name="source"/> size by the <paramref name="limit"/>.
            </summary>
            <param name="source">The source size to be limited. May be non-normalized.</param>
            <param name="limit">The limiting size. Must be normalized.</param>
            <returns>The constrainted <paramref name="source"/>, guaranteed to be normalized.</returns>
        </member>
        <member name="M:JetBrains.Util.Rects.Deflate(System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Deflates all the rectangle's sides by the given amount. If the numbers are positive, the rectangle will shrink.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.Deflate(System.Drawing.Rectangle,System.Drawing.Size)">
            <summary>
            Deflates all the rectangle's sides by the given amount. If the numbers are positive, the rectangle will shrink.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.Deflate(System.Drawing.Rectangle,System.Windows.Forms.Padding)">
            <summary>
            Deflates all the rectangle's sides by the given amount. If the numbers are positive, the rectangle will shrink.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.Dock(System.Drawing.Rectangle@,System.Windows.Forms.DockStyle,System.Int32)">
            <summary>
            Returns a non-collapsed rectangle docked within the <paramref name="space"/> rectangle.
            </summary>
            <param name="space">The docking space. Decreased to exclude the newly-docked rectangle on exit, so that to dock multiple rects in sequence.</param>
            <param name="dockstyle">The docking style, which can be either any side or fill.</param>
            <param name="size">The characteristic size of the side-docked rectangle (either width or height, whichever is not defined by the docking process). In the <see cref="F:System.Windows.Forms.DockStyle.Fill"/> case, this parameter is ignored.</param>
            <returns>The rectangle docked at the given side.</returns>
        </member>
        <member name="M:JetBrains.Util.Rects.Dock(System.Drawing.Rectangle@,System.Windows.Forms.DockStyle,System.Drawing.Size)">
            <summary>
            Returns a non-collapsed rectangle docked within the <paramref name="space"/> rectangle.
            </summary>
            <param name="space">The docking space. Decreased to exclude the newly-docked rectangle on exit, so that to dock multiple rects in sequence.</param>
            <param name="dockstyle">The docking style, which can be either any side or fill.</param>
            <param name="size">The characteristic size of the side-docked rectangle (only either width or height is used, whichever is not defined by the docking process). In the <see cref="F:System.Windows.Forms.DockStyle.Fill"/> case, this parameter is ignored.</param>
            <returns>The rectangle docked at the given side.</returns>
        </member>
        <member name="M:JetBrains.Util.Rects.Dock(System.Drawing.Rectangle,System.Windows.Forms.DockStyle,System.Int32)">
            <summary>
            Returns a non-collapsed rectangle docked within the <paramref name="space"/> rectangle.
            </summary>
            <param name="space">The docking space.</param>
            <param name="dockstyle">The docking style, which can be either any side or fill.</param>
            <param name="size">The characteristic size of the side-docked rectangle (either width or height, whichever is not defined by the docking process). In the <see cref="F:System.Windows.Forms.DockStyle.Fill"/> case, this parameter is ignored.</param>
            <returns>The rectangle docked at the given side.</returns>
        </member>
        <member name="M:JetBrains.Util.Rects.Dock(System.Drawing.Rectangle,System.Windows.Forms.DockStyle,System.Drawing.Size)">
            <summary>
            Returns a non-collapsed rectangle docked within the <paramref name="space"/> rectangle.
            </summary>
            <param name="space">The docking space.</param>
            <param name="dockstyle">The docking style, which can be either any side or fill.</param>
            <param name="size">The characteristic size of the side-docked rectangle (only either width or height is used, whichever is not defined by the docking process). In the <see cref="F:System.Windows.Forms.DockStyle.Fill"/> case, this parameter is ignored.</param>
            <returns>The rectangle docked at the given side.</returns>
        </member>
        <member name="M:JetBrains.Util.Rects.EnsureEmptySize(System.Drawing.Size)">
            <summary>
            Returns <see cref="F:System.Drawing.Size.Empty"/> if the given <paramref name="size"/> is "enhanced-empty", that is, either it's <see cref="P:System.Drawing.Size.IsEmpty"/>, or one of its dimensions is zero. Otherwise, returns the original size.
            Curcumvents the fact that <see cref="P:System.Drawing.Size.IsEmpty"/> requires both dimensions to be simultaneousely zero.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.FromLtrbNonnegative(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a rectangle in a way similar to <see cref="M:System.Drawing.Rectangle.FromLTRB(System.Int32,System.Int32,System.Int32,System.Int32)"/>, but ensures that no dimension is negative.
            If near is less than far, they're both set to the middle value.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.GetBorder(System.Drawing.Rectangle,System.Drawing.Size)">
            <summary>
            Gets a set of non-overlapping rectangles forming a border just inside the given rect, of the thickness specified.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.GetCenter(System.Drawing.Rectangle)">
            <summary>
            Gets a point that is the center of the rectangle.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.Inflate(System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Inflates all the rectangle's sides by the given amount. If the numbers are positive, the rectangle will grow.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.Inflate(System.Drawing.Rectangle,System.Drawing.Size)">
            <summary>
            Inflates all the rectangle's sides by the given amount. If the numbers are positive, the rectangle will grow.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.Inflate(System.Drawing.Rectangle,System.Windows.Forms.Padding)">
            <summary>
            Inflates all the rectangle's sides by the given amount. If the numbers are positive, the rectangle will grow.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.IsCollapsed(System.Drawing.Size)">
            <summary>
            Gets whether the given size is collapsed, that is, has a zero or negative dimension.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.IsCollapsed(System.Drawing.Rectangle)">
            <summary>
            Gets whether the given rectangle is collapsed, that is, has a zero or negative dimension.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.IsConstrained(System.Drawing.Size,System.Drawing.Size)">
            <summary>
            Checks whether the <paramref name="source"/> size satisfies the <paramref name="limit"/>, in terms of the <see cref="M:JetBrains.Util.Rects.Constrain(System.Drawing.Size,System.Drawing.Size)"/> function.
            </summary>
            <param name="source">The source size to be limited. May be non-normalized.</param>
            <param name="limit">The limiting size. Must be normalized.</param>
            <returns>Whether executing <see cref="M:JetBrains.Util.Rects.Constrain(System.Drawing.Size,System.Drawing.Size)"/> over <paramref name="source"/> and <paramref name="limit"/> won't change the <paramref name="source"/>.</returns>
        </member>
        <member name="M:JetBrains.Util.Rects.IsEmptyArea(System.Drawing.Size)">
            <summary>
            Checks whether the size represents an empty area.
            Unlike <see cref="P:System.Drawing.Size.IsEmpty"/>, returns <c>True</c> if either of dimensions is empty (OR condition).
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.IsEmptyArea(System.Drawing.Rectangle)">
            <summary>
            Checks whether the rectangle represents an empty area.
            Unlike <see cref="P:System.Drawing.Rectangle.IsEmpty"/>, returns <c>True</c> if either of dimensions is empty (OR condition), and ignores the <see cref="P:System.Drawing.Rectangle.Location"/> completely.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.IsInfinite(System.Drawing.Size)">
            <summary>
            Gets whether the given rectangle is close to maxvalues.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.IsNormalized(System.Drawing.Size)">
            <summary>
            Checks whether the size corresponds to a normalized rectangle.
            A normalized rectangle is such whose left coordinate is not greater than right, and top coordinate is not greater than bottom.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.IsNormalized(System.Drawing.Rectangle)">
            <summary>
            Checks whether the rectangle is normalized.
            A normalized rectangle is such whose left coordinate is not greater than right, and top coordinate is not greater than bottom.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.Max(System.Drawing.Size,System.Drawing.Size)">
            <summary>
            Gets the normalized maximum of two sizes, max operation executed independently against both dimensions.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.Min(System.Drawing.Size,System.Drawing.Size)">
            <summary>
            Gets the normalized minimum of two sizes, min operation executed independently against both dimensions.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.Normalize(System.Drawing.Rectangle)">
            <summary>
            Normalizes the rectangle so that it has non-negative <see cref="P:System.Drawing.Rectangle.Width"/> and <see cref="P:System.Drawing.Rectangle.Height"/>, and passes the <see cref="M:JetBrains.Util.Rects.IsNormalized(System.Drawing.Rectangle)"/> with <c>True</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.Normalize(System.Drawing.Size)">
            <summary>
            Normalizes the size so that it <see cref="M:JetBrains.Util.Rects.IsNormalized(System.Drawing.Size)"/>. All the negative components are pulled up to become zero.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.Offset(System.Drawing.Rectangle,System.Drawing.Size)">
            <summary>
            Offsets the rectangle location by the given amount.
            </summary>
            <param name="source">The source rectangle.</param>
            <param name="offset">The offset distance.</param>
            <returns>The resulting rectangle.</returns>
        </member>
        <member name="M:JetBrains.Util.Rects.Offset(System.Drawing.Rectangle,System.Drawing.Point)">
            <summary>
            Offsets the rectangle location by the given amount.
            </summary>
            <param name="source">The source rectangle.</param>
            <param name="offset">The offset distance.</param>
            <returns>The resulting rectangle.</returns>
        </member>
        <member name="M:JetBrains.Util.Rects.SetBottom(System.Drawing.Rectangle,System.Int32)">
            <summary>
            Adjusts the rectangle so that only one of the Left, Top, Right, Bottom components changes. Width or Height are changed as appropriate.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.SetBottom(System.Drawing.Rectangle@,System.Int32)">
            <summary>
            Adjusts the rectangle so that only one of the Left, Top, Right, Bottom components changes. Width or Height are changed as appropriate.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.SetLeft(System.Drawing.Rectangle,System.Int32)">
            <summary>
            Adjusts the rectangle so that only one of the Left, Top, Right, Bottom components changes. Width or Height are changed as appropriate.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.SetLeft(System.Drawing.Rectangle@,System.Int32)">
            <summary>
            Adjusts the rectangle so that only one of the Left, Top, Right, Bottom components changes. Width or Height are changed as appropriate.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.SetRight(System.Drawing.Rectangle,System.Int32)">
            <summary>
            Adjusts the rectangle so that only one of the Left, Top, Right, Bottom components changes. Width or Height are changed as appropriate.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.SetRight(System.Drawing.Rectangle@,System.Int32)">
            <summary>
            Adjusts the rectangle so that only one of the Left, Top, Right, Bottom components changes. Width or Height are changed as appropriate.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.SetTop(System.Drawing.Rectangle,System.Int32)">
            <summary>
            Adjusts the rectangle so that only one of the Left, Top, Right, Bottom components changes. Width or Height are changed as appropriate.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.SetTop(System.Drawing.Rectangle@,System.Int32)">
            <summary>
            Adjusts the rectangle so that only one of the Left, Top, Right, Bottom components changes. Width or Height are changed as appropriate.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.Size(System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:System.Drawing.Size"/> object that is guaranteed to be normalized and, if at least one of its sides is empty, to be <see cref="P:System.Drawing.Size.IsEmpty"/>.
            </summary>
            <param name="width">The desired width.</param>
            <param name="height">The desired height.</param>
            <returns>A normalized size whose sides can only simultaneousely be <c>0</c>.</returns>
        </member>
        <member name="M:JetBrains.Util.Rects.Size(System.Drawing.Size)">
            <summary>
            Creates a new <see cref="T:System.Drawing.Size"/> object that is guaranteed to be normalized and, if at least one of its sides is empty, to be <see cref="P:System.Drawing.Size.IsEmpty"/>.
            </summary>
            <param name="size">The desired width and height.</param>
            <returns>A normalized size whose sides can only simultaneousely be <c>0</c>.</returns>
        </member>
        <member name="M:JetBrains.Util.Rects.StackHorizontally(System.Collections.Generic.IEnumerable{System.Drawing.Size},System.Int32)">
            <summary>
            Stacks a number of sizes horizontally and returns the resulting size.
            If a size in the list is collapsed, it's not included and the gaps for it are not added.
            </summary>
            <param name="sizes">The list of sizes to stack.</param>
            <param name="gap">The gap to insert between the adjacent stack-items.</param>
            <returns>The bounding rect of the result.</returns>
        </member>
        <member name="M:JetBrains.Util.Rects.StackHorizontally(System.Int32,System.Drawing.Size[])">
            <summary>
            Stacks a number of sizes horizontally and returns the resulting size.
            If a size in the list is collapsed, it's not included and the gaps for it are not added.
            </summary>
            <param name="sizes">The list of sizes to stack.</param>
            <param name="gap">The gap to insert between the adjacent stack-items.</param>
            <returns>The bounding rect of the result.</returns>
        </member>
        <member name="M:JetBrains.Util.Rects.StackVertically(System.Collections.Generic.IEnumerable{System.Drawing.Size},System.Int32)">
            <summary>
            Stacks a number of sizes vertically and returns the resulting size.
            If a size in the list is collapsed, it's not included and the gaps for it are not added.
            </summary>
            <param name="sizes">The list of sizes to stack.</param>
            <param name="gap">The gap to insert between the adjacent stack-items.</param>
            <returns>The bounding rect of the result.</returns>
        </member>
        <member name="M:JetBrains.Util.Rects.StackVertically(System.Int32,System.Drawing.Size[])">
            <summary>
            Stacks a number of sizes vertically and returns the resulting size.
            If a size in the list is collapsed, it's not included and the gaps for it are not added.
            </summary>
            <param name="sizes">The list of sizes to stack.</param>
            <param name="gap">The gap to insert between the adjacent stack-items.</param>
            <returns>The bounding rect of the result.</returns>
        </member>
        <member name="M:JetBrains.Util.Rects.Unite(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Unites the two rectangle and returns a rect that encompasses both.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.UniteHorizontally(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Unites the horizontal coordinates of the rectangles, and takes the y-coordinates solely from <paramref name="source"/>.
            </summary>
            <param name="source">The first rectangle, features the y-coordinates of the retval.</param>
            <param name="other">The second rectangle.</param>
        </member>
        <member name="M:JetBrains.Util.Rects.UniteVertically(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Unites the vertical coordinates of the rectangles, and takes the x-coordinates solely from <paramref name="source"/>.
            </summary>
            <param name="source">The first rectangle, features the x-coordinates of the retval.</param>
            <param name="other">The second rectangle.</param>
        </member>
        <member name="M:JetBrains.Util.Rects.Collapse_Linear(System.Int32,System.Int32,JetBrains.UI.Anchoring)">
            <summary>
            A helper function for the <see cref="M:JetBrains.Util.Rects.Collapse(System.Drawing.Rectangle,JetBrains.UI.Anchoring2D)"/> func, handles one dimension.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.StackImpl(System.Collections.Generic.IEnumerable{System.Drawing.Size},System.Int32,System.Boolean)">
            <summary>
            Implements the size-stacking.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Rects.MaxSize">
            <summary>
            Gets the size whose both components are <see cref="F:System.Int32.MaxValue"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Rects.RectsComparer">
            <summary>
            A comparer for the rectangles.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Rects.RectsComparer.Compare(System.Collections.Generic.IEnumerable{System.Drawing.Rectangle},System.Collections.Generic.IEnumerable{System.Drawing.Rectangle})">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            
            <returns>
            Value Condition Less than zerox is less than beta.Zerox equals beta.Greater than zerox is greater than beta.
            </returns>
            
            <param name="beta">The second object to compare.</param>
            <param name="alpha">The first object to compare.</param>
        </member>
        <member name="M:JetBrains.Util.Rects.RectsComparer.Compare(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            
            <returns>
            Value Condition Less than zerox is less than beta.Zerox equals beta.Greater than zerox is greater than beta.
            </returns>
            
            <param name="beta">The second object to compare.</param>
            <param name="alpha">The first object to compare.</param>
        </member>
        <member name="T:JetBrains.Util.TextRange">
            <summary>
            Represents a range in a plaintext document.
            </summary>
        </member>
        <member name="F:JetBrains.Util.TextRange.InvalidRange">
            <summary>
            Should be replaced with <see cref="T:System.Nullable`1"/> of <see cref="T:JetBrains.Util.TextRange"/> wherever possible.
            Avoid using in new code.
            </summary>
        </member>
        <member name="M:JetBrains.Util.TextRange.FromLength(System.Int32,System.Int32)">
            <summary>
            Creates a new range from offset and length, rather than from start + end offsets, as the <c>.ctor</c> would do.
            </summary>
        </member>
        <member name="M:JetBrains.Util.TextRange.FromLength(System.Int32)">
            <summary>
            Creates a new range from zero offset and length, rather than from start + end offsets, as the <c>.ctor</c> would do.
            </summary>
        </member>
        <member name="M:JetBrains.Util.TextRange.FromUnorderedOffsets(System.Int32,System.Int32)">
            <summary>
            <para>Creates a range from two unordered offsets, i.e. when it's not known which of the offsets is the start and which one is the end.</para>
            <para>The resultant range is guaranteed to be normalized.</para>
            <para>DO NOT USE unless the source of your offset is unordered by its nature (eg if you select text with shift+left the offsets of the selection range will be inverted, so they're sometimes out of order by design). Usually you should know which offset is start and which is end, and failure to do so might indicate an error in preceding code.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Util.TextRange.GetMinOffset">
            <summary>
            Gets the <see cref="P:JetBrains.Util.TextRange.StartOffset"/> or <see cref="P:JetBrains.Util.TextRange.EndOffset"/>, whichever is smaller. Use for consistent processing of potentially non-normalized ranges.
            </summary>
        </member>
        <member name="M:JetBrains.Util.TextRange.GetMaxOffset">
            <summary>
            Gets the <see cref="P:JetBrains.Util.TextRange.StartOffset"/> or <see cref="P:JetBrains.Util.TextRange.EndOffset"/>, whichever is greater. Use for consistent processing of potentially non-normalized ranges.
            </summary>
        </member>
        <member name="M:JetBrains.Util.TextRange.ContainedIn(JetBrains.Util.TextRange)">
            <summary>
            Gets whether this range is a subset of the <paramref name="textRange"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Util.TextRange.StrictContainedIn(JetBrains.Util.TextRange)">
            <summary>
            Gets whether this range is a proper subset of the <paramref name="textRange"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Util.TextRange.Contains(System.Int32)">
            <summary>
            Determines whether the offset falls within the range, start and end offsets included.
            </summary>
        </member>
        <member name="M:JetBrains.Util.TextRange.ContainsCharIndex(System.Int32)">
            <summary>
            <para>Checks whether the character at the <paramref name="charindex">given index</paramref> falls within this range.</para>
            <para>Unlike <see cref="M:JetBrains.Util.TextRange.Contains(System.Int32)"/>, the right offset is not included, because the range ends before the character with such an index.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Util.TextRange.AssertValid">
            <summary>
            Asserts that this range is valid, which means that it's not an <see cref="F:JetBrains.Util.TextRange.InvalidRange"/>.
            Throws in ASSERT mode only.
            </summary>
        </member>
        <member name="M:JetBrains.Util.TextRange.AssertNormalized">
            <summary>
            Asserts that this range is normalized, which means that its <see cref="P:JetBrains.Util.TextRange.Length"/> is nonnegative.
            Includes <see cref="M:JetBrains.Util.TextRange.AssertValid"/>.
            Throws in ASSERT mode only.
            </summary>
        </member>
        <member name="M:JetBrains.Util.TextRange.Normalized">
            <summary>
            Returns a normalized version of the current text range (with a nonnegative length).
            </summary>
        </member>
        <member name="M:JetBrains.Util.TextRange.DistanceTo(System.Int32)">
            <summary>
            Returns the distance between the <paramref name="offset"/> and the nearest point that belongs to the range.
            </summary>
        </member>
        <member name="P:JetBrains.Util.TextRange.StartOffset">
            <summary>
            <para>The first offset (character position) of the range, inclusive.</para>
            <para>A character at this index is included with the range.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Util.TextRange.EndOffset">
            <summary>
            <para>The last offset (character position) of the range, non-inclusive.</para>
            <para>A character at this index is not included with the range and goes right after the range end.</para>
            <para>An end offset could point at the end of the document, in which case there's no character at this position.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Util.TextRange.Length">
            <summary>
            <para>The number of characters in the text range.</para>
            <para>As the end offset is non-inclusive, this is equal to <see cref="P:JetBrains.Util.TextRange.EndOffset"/> <c>–</c> <see cref="P:JetBrains.Util.TextRange.StartOffset"/>.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Util.TextRange.IsEmpty">
            <summary>
            <para>Whether the range is empty.</para>
            <para>The <see cref="P:JetBrains.Util.TextRange.Length"/> of an empty range is zero, and its <see cref="P:JetBrains.Util.TextRange.StartOffset"/> is the same as its <see cref="P:JetBrains.Util.TextRange.EndOffset"/>.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Util.TextRange.IsValid">
            <summary>
            Should be replaced with <see cref="T:System.Nullable`1"/> of <see cref="T:JetBrains.Util.TextRange"/> wherever possible.
            Avoid using in new code.
            Checks that the range is not the <see cref="F:JetBrains.Util.TextRange.InvalidRange"/>.
            </summary>
        </member>
        <member name="P:JetBrains.Util.TextRange.IsNormalized">
            <summary>
            Gets whether this range is normalized, which means that its <see cref="P:JetBrains.Util.TextRange.Length"/> is nonnegative.
            </summary>
        </member>
        <member name="T:JetBrains.Util.EnsureWritableResult">
            <summary>
            Represents the result of an attempt to make files writable
            </summary>
        </member>
        <member name="F:JetBrains.Util.EnsureWritableResult.SUCCESS">
            <summary>
            All files were successfully made writable
            </summary>
        </member>
        <member name="F:JetBrains.Util.EnsureWritableResult.FAILURE">
            <summary>
            The attempt failed for some files
            </summary>
        </member>
        <member name="F:JetBrains.Util.EnsureWritableResult.CHANGES_DETECTED">
            <summary>
            Some files were modified as a result of the attempt to make them writable
            </summary>
        </member>
        <member name="F:JetBrains.Util.EnsureWritableResult.HAS_HIDDEN_FILES">
            <summary>
            Files list contains hidden files
            </summary>
        </member>
        <member name="T:JetBrains.Util.Events.EventDispatcher">
            <summary>
            Helper class for dispatching pending events
            </summary>
        </member>
        <member name="F:JetBrains.Util.Events.EventDispatcher.myDispatchingListeners">
            <summary>
            The stack of listeners being dispatched
            </summary>
        </member>
        <member name="F:JetBrains.Util.Events.EventDispatcher.myListeners">
            <summary>
            List of listeners ordered by the time listener was added
            </summary>
        </member>
        <member name="F:JetBrains.Util.Events.EventDispatcher.myListenersMap">
            <summary>
            Maps listeners to "notified" flags
            </summary>
        </member>
        <member name="F:JetBrains.Util.Events.EventDispatcher.myLastArgs">
            <summary>
            The last call args
            </summary>
        </member>
        <member name="F:JetBrains.Util.Events.EventDispatcher.myListenersArray">
            <summary>
            Array of listeners
            </summary>
        </member>
        <member name="T:JetBrains.Util.FileSystemPath">
            <summary>
            This class represents a path in the file system. It provides necessary methods for
            dealing with paths, and is more convenient for clients than raw strings, since it handles
            different separator characters, case etc
            </summary>
        </member>
        <member name="M:JetBrains.Util.FileSystemPath.#ctor(System.String)">
            <summary>
            Creates a new file system path. Invalid paths are ignored and turned into an empty path.
            </summary>
        </member>
        <member name="M:JetBrains.Util.FileSystemPath.#ctor(System.String,System.Boolean)">
            <summary>
            Allows to speed up creation from an already-canonical path.
            </summary>
        </member>
        <member name="M:JetBrains.Util.FileSystemPath.CreateByCanonicalPath(System.String)">
            <summary>
            Should be used with care, in special cases only.
            </summary>
        </member>
        <member name="M:JetBrains.Util.FileSystemPath.GetSpecialFolderPath(System.Environment.SpecialFolder)">
            <summary>
            Gets one of the <see cref="T:System.Environment.SpecialFolder"/> folders.
            </summary>
        </member>
        <member name="M:JetBrains.Util.FileSystemPath.Combine(System.String)">
            <summary>
            Combines a path with one or more path components. Throws on failure.
            </summary>
        </member>
        <member name="M:JetBrains.Util.FileSystemPath.Delete">
            <summary>
            Deletes the item.
            Does not fail if there is no such file or directory.
            </summary>
        </member>
        <member name="M:JetBrains.Util.FileSystemPath.DeleteChildren">
            <summary>
            On a folder, deletes its children.
            </summary>
        </member>
        <member name="M:JetBrains.Util.FileSystemPath.ToDirectoryInfo">
            <summary>
            Creates a system <see cref="T:System.IO.DirectoryInfo"/> object from this instance.
            </summary>
        </member>
        <member name="M:JetBrains.Util.FileSystemPath.ToDirectoryUri">
            <summary>
            Creates a system <see cref="T:System.Uri"/> object from this instance, making sure it ends in a slash.
            </summary>
        </member>
        <member name="M:JetBrains.Util.FileSystemPath.ToFileInfo">
            <summary>
            Creates a system <see cref="T:System.IO.FileInfo"/> object from this instance.
            </summary>
        </member>
        <member name="M:JetBrains.Util.FileSystemPath.ToUri">
            <summary>
            Creates a system <see cref="T:System.Uri"/> object from this instance.
            </summary>
        </member>
        <member name="M:JetBrains.Util.FileSystemPath.TryCombine(System.String)">
            <summary>
            Does not throw on failure, just silently returns <see cref="F:JetBrains.Util.FileSystemPath.Empty"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Util.FileSystemPath.GetCanonicalPath(System.String)">
            <summary>
            Gets the canonical path, returns <c>""</c> in case of a failure.
            </summary>
        </member>
        <member name="P:JetBrains.Util.FileSystemPath.Directory">
            <summary>
            Gets the parent directory of the current file or directory.
            </summary>
        </member>
        <member name="P:JetBrains.Util.FileSystemPath.ExistsDirectory">
            <summary>
            Gets whether this instance points to a directory, and that directory exists on disk.
            </summary>
        </member>
        <member name="P:JetBrains.Util.FileSystemPath.ExistsFile">
            <summary>
            Gets whether this instance points to a file, and that file exists on disk.
            </summary>
        </member>
        <member name="P:JetBrains.Util.FileSystemPath.ExtensionNoDot">
            <summary>
            Gets the file extension, without the leading dot.
            </summary>
            <example><c>C:\autoexec.bat</c> -> <c>bat</c></example>
        </member>
        <member name="P:JetBrains.Util.FileSystemPath.ExtensionWithDot">
            <summary>
            Gets the file extension, including the leading dot.
            </summary>
            <example><c>C:\autoexec.bat</c> -> <c>.bat</c></example>
        </member>
        <member name="P:JetBrains.Util.FileSystemPath.FileModificationTime">
            <summary>
            Gets the last write time of the file represented by this instance. Throws if there is no such file.
            </summary>
        </member>
        <member name="P:JetBrains.Util.FileSystemPath.IsHidden">
            <summary>
            Gets whether this file system path is a hidden file or folder.
            Returns <c>False</c> for nonexistent paths.
            </summary>
        </member>
        <member name="P:JetBrains.Util.FileSystemPath.Name">
            <summary>
            Gets the local name of the file/directory (the component after the last separator).
            </summary>
        </member>
        <member name="T:JetBrains.Util.IndexComparer`1">
            <summary>
            Compares elements by their positions in an ArrayList
            </summary>
        </member>
        <member name="T:JetBrains.Util.IUserDataHolder">
            <summary>
            Represents the "user data holder" pattern.
            The user data holder pattern can be used for associating 
            client-specific data with instances of certain type. 
            To let associating of user data with instances of 
            some type it should implement IUserDataHolder interface.
            It allows putting object values by arbitrary keys 
            of type <see cref="T:JetBrains.Util.Key"/>.   
            </summary>   
            <example> Example of usage: 
            <code>
              private const Key KEY = new Key("descriptor");
              
              ....
              {
                MyDataType dataToStore = ... 
                holder.PutData(KEY, dataToStore); 
                ....
                MyDataType restoredData = (MyDataType)holder.GetData(KEY); 
              }
            </code>
            </example>
            <seealso cref="T:JetBrains.Util.Key"/>
        </member>
        <member name="M:JetBrains.Util.IUserDataHolder.PutData``1(JetBrains.Util.Key{``0},``0)">
            <summary>
            Stores given value by specified key.
            Use <code>PutData(key, null)</code> to remove the association.
            </summary>
        </member>
        <member name="M:JetBrains.Util.IUserDataHolder.GetData``1(JetBrains.Util.Key{``0})">
            <summary>
            Retrieves value associated with given key.
            Returns null when no value is associated.
            </summary>
        </member>
        <member name="T:JetBrains.Util.IXmlExternalizable">
            <summary>
            An interface for components that support serializing their settings into the XML settings file.
            </summary>
        </member>
        <member name="M:JetBrains.Util.IXmlExternalizable.ReadFromXml(System.Xml.XmlElement)">
            <summary>
            <para>This method is called on the component to populate it with default or loaded settings, unless the component implements <see cref="T:JetBrains.Util.IXmlUpgradable"/> and returns <c>True</c> from its handler.</para>
            <para>The element is taken from the settings file, if available.</para>
            <para>If not, and there are settings files from the older versions, and the component does not implement <see cref="T:JetBrains.Util.IXmlUpgradable"/>, this method is called with the old settings.</para>
            <para>Otherwise, this method is called with an empty element or a <c>Null</c> value.</para>
            <para>For the first time, this method is called right before component's init.</para>
            <para>The settings-reading protocol might be executed more than once thru the component lifetime.</para>
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:JetBrains.Util.IXmlExternalizable.WriteToXml(System.Xml.XmlElement)">
            <summary>
            Called when the component should serialize its settings into the XML presentation, for saving into the settings file.
            </summary>
        </member>
        <member name="T:JetBrains.Util.IXmlStreamExternalizable">
            <summary>
            An interface for components that support serializing their settings into the XML settings file.
            </summary>
        </member>
        <member name="M:JetBrains.Util.IXmlStreamExternalizable.ReadFromXml(System.Xml.XmlReader)">
            <summary>
            Called to read the settings from the XML stream.
            </summary>
        </member>
        <member name="M:JetBrains.Util.IXmlStreamExternalizable.WriteToXml(System.Xml.XmlWriter)">
            <summary>
            Called to write the settings to the XML stream.
            </summary>
        </member>
        <member name="T:JetBrains.Util.IXmlRegistrable">
            <summary>
            Interface for classes that support registration in Windows Registry
            </summary>
        </member>
        <member name="T:JetBrains.Util.Key">
            <summary>
            Class to be used for keys in <see cref="T:JetBrains.Util.IUserDataHolder"/>.
            May also be used in other places where unique keys are needed.
            Instances of this class are constructed with String parameter
            but use it only to return in <see cref="!:Key.ToString()"/> method.
            This class does not override <see cref="M:System.Object.Equals(System.Object)"/> 
            and <see cref="M:System.Object.GetHashCode"/> and therefore all instances of 
            this class are considered to be different.
            <seealso cref="T:JetBrains.Util.IUserDataHolder"/>
            </summary>
        </member>
        <member name="T:JetBrains.Util.Key`1">
            <summary>
            Strongly types key. <see cref="T:JetBrains.Util.Key"/>
            This class does not override <see cref="M:System.Object.Equals(System.Object)"/> 
            and <see cref="M:System.Object.GetHashCode"/> and therefore all instances of 
            this class are considered to be different.
            <seealso cref="T:JetBrains.Util.IUserDataHolder"/>
            </summary>
        </member>
        <member name="M:JetBrains.Util.Memory.MemoryUtil.GetTotalVirtualMemory">
            <summary>
            Gets the total amount of virtual memory available to the process.
            Caches the value.
            </summary>
            <returns></returns>
        </member>
        <member name="F:JetBrains.Util.Memory.MemoryUtil.myTotalVirtualMemory">
            <summary>
            Caches the memory stats.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Memory.MemoryUtil.ObjectGraphScanner.System#Collections#Generic#IEqualityComparer{System#Object}#Equals(System.Object,System.Object)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
            
            <param name="y">The second object to compare.</param>
            <param name="x">The first object to compare.</param>
            <exception cref="T:System.ArgumentException">x and y are of different types and neither one can handle comparisons with the other.</exception>
        </member>
        <member name="T:JetBrains.Util.NamedAutoResetEvent">
            <summary>
            Event that can be used for cross-process synchronization
            </summary>
        </member>
        <member name="T:JetBrains.Util.RegistryUtil">
            <summary>
            This is a convenient wrapper around Registry API. It recognizes registry paths of the XPath syntax
            </summary>
        </member>
        <member name="M:JetBrains.Util.Tuple`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.Tuple`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.Tuple`3.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.Tuple`4.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="F:JetBrains.Util.StringUtil.myRandom">
            <summary>
            In order to get varying results on adjacent calls, there must be a shared Random object.
            </summary>
        </member>
        <member name="F:JetBrains.Util.StringUtil.ourRegexMacro">
            <summary>
            Caches the macro substitution regex.
            </summary>
        </member>
        <member name="M:JetBrains.Util.StringUtil.StartsWith(System.String,System.String,System.StringComparison)">
            <summary>
            Returns true if one qualified name starts with another.
            </summary>
        </member>
        <member name="M:JetBrains.Util.StringUtil.Combine(System.String,System.String)">
            <summary>
            Concatenates two names into a qualified name.
            </summary>
        </member>
        <member name="M:JetBrains.Util.StringUtil.ShortName(System.String)">
            <summary>
            Gets a short name out of qualified name
            </summary>
        </member>
        <member name="M:JetBrains.Util.StringUtil.NextQualification(System.String,System.String)">
            <summary>
            Takes a start of a fully qualified name and adds next part of it, e.g.:
            NextQualification ("A.B", "A.B.D.D") results in "A.B.D".
            </summary>
        </member>
        <member name="M:JetBrains.Util.StringUtil.SplitFQName(System.String)">
            <remarks> Splits fully qualified name of a class into name of the namespace and short name </remarks>
        </member>
        <member name="M:JetBrains.Util.StringUtil.MakeFQName(System.String,System.String)">
            <remarks> Concats namespace name and class name into fully qualified name </remarks>
        </member>
        <member name="M:JetBrains.Util.StringUtil.Split(System.String,System.String,System.Boolean)">
            <remarks> Splits a string into tokens given the string of delimiter characters. The third argument
            tells whether it is necessary to retain empty strings in the array returned. This functions is not
            as efficient as it may be, so use it accurately.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.StringUtil.GetCommon(System.String,System.String,System.Int32@)">
            <summary>
            Gets intersection of two qualified names
            </summary>
            <example>
            Calling it for "A.B.D.D" and "C.D.E.F" will return "C.D"
            </example>    
        </member>
        <member name="M:JetBrains.Util.StringUtil.SubstituteMacros(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Substs the macros in a string, throws if there are undefined macros.
            </summary>
        </member>
        <member name="M:JetBrains.Util.StringUtil.GenerateRandomName">
            <summary>
            Produces a human-readable random name.
            </summary>
        </member>
        <member name="M:JetBrains.Util.StringUtil.GenerateRandomName(System.Int32)">
            <summary>
            Produces a human-readable random name.
            </summary>
        </member>
        <member name="M:JetBrains.Util.StringUtil.GenerateRandomName(System.Int32,System.Random)">
            <summary>
            Produces a human-readable random name.
            </summary>
        </member>
        <member name="M:JetBrains.Util.StringUtil.IsEmpty(System.String)">
            <summary>
            Checks whether the string is an empty string or a <c>Null</c> reference.
            </summary>
            <seealso cref="M:System.String.IsNullOrEmpty(System.String)"/>
        </member>
        <member name="M:JetBrains.Util.StringUtil.ToThreadString(System.Threading.Thread)">
            <summary>
            Formats the identity of a thread.
            </summary>
        </member>
        <member name="M:JetBrains.Util.StringUtil.FormatQuoted(System.String,System.Object[])">
            <summary>
            Works like <see cref="M:System.String.Format(System.String,System.Object[])"/>, but surrounds the space-containing arguments with quotes.
            </summary>
        </member>
        <member name="M:JetBrains.Util.StringUtil.QuoteIfNeeded(System.String)">
            <summary>
            If the string contains spaces, surrounds it with quotes.
            </summary>
        </member>
        <member name="M:JetBrains.Util.StringUtil.ToStringIfNonDefault(System.Object)">
            <summary>
            Returns the <paramref name="o"/>'s <see cref="M:System.Object.ToString"/> value, unless <paramref name="o"/> is <c>Null</c>, or its <see cref="M:System.Object.ToString"/> is the default implementation (just returns the type name).
            Could be used to prevent non-implemented strings from getting into the UI.
            </summary>
        </member>
        <member name="M:JetBrains.Util.StringUtil.DropMiddleIfLong(System.String,System.Int32)">
            <summary>
            Makes sure the return text is no longer than <paramref name="nMaxLen"/>. Drops some text from the middle, if needed, keeping the beginning and the end.
            </summary>
        </member>
        <member name="M:JetBrains.Util.StringUtil.ToHexString(System.IntPtr)">
            <summary>
            Renders the pointer-sized integer as the appropriate number of hex chars, with leading zeros.
            </summary>
        </member>
        <member name="M:JetBrains.Util.StringUtil.ToHexString(System.Void*)">
            <summary>
            Renders the pointer value as the appropriate number of hex chars, with leading zeros.
            </summary>
        </member>
        <member name="M:JetBrains.Util.StringUtil.ToHexString(System.UIntPtr)">
            <summary>
            Renders the pointer-sized integer as the appropriate number of hex chars, with leading zeros.
            </summary>
        </member>
        <member name="M:JetBrains.Util.StringUtil.ToStringWithLeading(System.Int32,System.Int32,System.Globalization.CultureInfo)">
            <summary>
            Formats the <paramref name="value"/> to a string, adding leading zeros so that all of the numbers up to <paramref name="maxvalue"/>, inclusively, had the same number of characters in their string representation when formatted thru this function.
            </summary>
        </member>
        <member name="M:JetBrains.Util.StringUtil.SplitByWords(System.String)">
            <summary>
            Gets the words.
            </summary>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.Util.TextStreamReader">
            <summary>Uses one character to represent new line.</summary>
        </member>
        <member name="T:JetBrains.Util.TextStringReader">
            <summary>Uses one character to represent new line.</summary>
        </member>
        <member name="T:JetBrains.Util.XmlExternalizableAttribute">
            <summary>
            Use this attribute to mark those fields and properties of a class that should be serialized to XML.
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlExternalizableAttribute.ParseDefaultValue(System.Type)">
            <summary>
            Interprets the <see cref="P:JetBrains.Util.XmlExternalizableAttribute.DefaultValue"/> given the type of the field it applies to.
            </summary>
        </member>
        <member name="P:JetBrains.Util.XmlExternalizableAttribute.DefaultValue">
            <summary>
            <para>The default value for this entry. You do not need to initialize the field itself in the inline initializer or the constructor. Instead, you MUST set this to the desired initial value, for serialization to work consistently.</para>
            <para>The possible values are:</para>
            <para>• <c>Null</c>,.which means the default value for the <see cref="T:System.Type"/> of the field (<c>Null</c> for reference types and zero memory for value types).</para>
            <para>• Some value of the same type as the <see cref="T:System.Type"/> of the field, or a value type convertible to it.</para>
            <para>• An invariant string representation of a value that cannot be presented inline in the attribute ctor. value of the same type as the <see cref="T:System.Type"/> of the field, or a value type convertible to it. The appropriate <see cref="T:System.ComponentModel.TypeConverter"/> is used for reading the value.</para>
            </summary>
        </member>
        <member name="P:JetBrains.Util.XmlExternalizableAttribute.SettingName">
            <summary>
            Use this property to specify settings name used in the xml, if different from the property (field) name.
            </summary>
        </member>
        <member name="P:JetBrains.Util.XmlExternalizableAttribute.UseXmlSerializer">
            <summary>
            Gets or sets whether the XML Serializer should be used for serializing the value of this field.
            </summary>
        </member>
        <member name="T:JetBrains.Util.XmlExternalizationUtil">
            <summary>
            Utility class to externalize values of fields and properties of given instance via reflection.
            Helpful for implementing <see cref="T:JetBrains.Util.IXmlExternalizable"/> interface.
            Values of all fields and properties marked with <see cref="T:JetBrains.Util.XmlExternalizableAttribute"/> are saved/restored.
            The following value types are supported: <see cref="T:System.Boolean"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.String"/>, <see cref="T:System.Enum"/>s, <see cref="T:System.DateTime"/>s and one-dimensional arrays of the above types (as well as arrays of arrays).
            </summary>
        </member>
        <member name="F:JetBrains.Util.XmlExternalizationUtil.XmlIsNullAttrName">
            <summary>
            Controls the element nullity in the new serialization behavior.
            New behavior: elements with non-empty content are not-null values, and IsNull attribute must be present on elements with empty content to tell apart Null and empty string serialization (or empty arrays).
            Old behavior: if the IsNull attr is missing on an empty-content element, a self-closed tag is considered Null, and an opening+closing pair is considered an empty string.
            </summary>
        </member>
        <member name="F:JetBrains.Util.XmlExternalizationUtil.XmlExternalizableElementName">
            <summary>
            Name of the root element of the settings we write.
            </summary>
        </member>
        <member name="F:JetBrains.Util.XmlExternalizationUtil.XmlStreamElementName">
            <summary>
            Name of the <see cref="M:JetBrains.Util.XmlExternalizationUtil.WriteStreamToXml(System.Xml.XmlElement,System.Action{System.Xml.XmlWriter})"/> / <see cref="M:JetBrains.Util.XmlExternalizationUtil.ReadStreamFromXml(System.Xml.XmlElement,System.Action{System.Xml.XmlReader})"/> root element.
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlExternalizationUtil.ApplyDefaults(System.Object)">
            <summary>
            Enumerates the XML-externalizable fields of the <paramref name="externalizable"/> object and sets them to the default values, if such are given in the <see cref="P:JetBrains.Util.XmlExternalizableAttribute.DefaultValue"/> property.
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlExternalizationUtil.ApplyDefaults(System.Object,System.Object)">
            <summary>
            Enumerates the XML-externalizable fields of the <paramref name="externalizable"/> object and sets them to the default values, if such are given in the <see cref="P:JetBrains.Util.XmlExternalizableAttribute.DefaultValue"/> property.
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlExternalizationUtil.ReadStreamElementsFromXml(System.Xml.XmlElement,System.Action{System.Xml.XmlReader})">
            <summary>
            XML Serial access to the CDATA element content.
            Called on each top-level element under the stream root element.
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlExternalizationUtil.ReadStreamFromXml(System.Xml.XmlElement,System.Action{System.Xml.XmlReader})">
            <summary>
            XML Serial access to the CDATA element content.
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlExternalizationUtil.WriteStreamToXml(System.Xml.XmlElement,System.Action{System.Xml.XmlWriter})">
            <summary>
            XML Serial access to the CDATA element content.
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlExternalizationUtil.GetExternalizableMembers(System.Object)">
            <summary>
            Gets the members supported for XML Externalization.
            That is, fields or properties with the <see cref="T:JetBrains.Util.XmlExternalizableAttribute"/> attribute.
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlExternalizationUtil.ReadFromXml_FillMembersWithValues_Value(System.Xml.XmlReader,System.Type)">
            <summary>
            Reads a value from the reader, returns either that value of type <paramref name="type"/>, or <c>Null</c>.
            </summary>
            <param name="reader">XML Reader positioned at the element whose value should be parsed.</param>
            <param name="type">Expected value type.</param>
        </member>
        <member name="M:JetBrains.Util.XmlExternalizationUtil.ReadFromXml_FillMembersWithValues_Value(System.Xml.XmlElement,System.Type)">
            <summary>
            Reads the value, returns it if available, or <see cref="F:System.Convert.DBNull"/> otherwise.
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlExternalizationUtil.ReadFromXml_FillMembersWithValues_ValueXmlSerializer(System.Xml.XmlReader,JetBrains.Util.XmlExternalizationUtil.ExternalizableMember)">
            <summary>
            Value deserialization for the <see cref="P:JetBrains.Util.XmlExternalizableAttribute.UseXmlSerializer"/> case.
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlExternalizationUtil.ExternalizableMember.GetMemberType">
            <summary>
            Gets the type of the member values.
            Supports fields and properties of a CLR and <see cref="T:JetBrains.DataFlow.IProperty`1"/> type.
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlExternalizationUtil.ExternalizableMember.GetMemberValue(System.Object)">
            <summary>
            Retrieves a value of the member.
            Supports fields and properties of a CLR and <see cref="T:JetBrains.DataFlow.IProperty`1"/> type.
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlExternalizationUtil.ExternalizableMember.GetMemberValueRaw">
            <summary>
            Retrieves a value of the member in a raw manner.
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlExternalizationUtil.ExternalizableMember.HasDefaultValue">
            <summary>
            Gets whether there's a default value specified for the member in its <see cref="P:JetBrains.Util.XmlExternalizationUtil.ExternalizableMember.Attribute"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlExternalizationUtil.ExternalizableMember.ParseDefaultValue">
            <summary>
            Analyses and parses the default value, as given by the <see cref="P:JetBrains.Util.XmlExternalizationUtil.ExternalizableMember.Attribute"/>-&gt;<see cref="P:JetBrains.Util.XmlExternalizableAttribute.DefaultValue"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlExternalizationUtil.ExternalizableMember.SetMemberValue(System.Object,System.Object)">
            <summary>
            Assigns a value to the member.
            Supports fields and properties of a CLR and <see cref="T:JetBrains.DataFlow.IProperty`1"/> type.
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlExternalizationUtil.ExternalizableMember.SetMemberValueRaw(System.Object)">
            <summary>
            Sets the value of the member in a raw manner.
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlExternalizationUtil.ExternalizableMember.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj" /> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.XmlExternalizationUtil.ExternalizableMember.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.Util.XmlExternalizationUtil.ExternalizableMember.CompareTo(JetBrains.Util.XmlExternalizationUtil.ExternalizableMember)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other" /> parameter.Zero This object is equal to <paramref name="other" />. Greater than zero This object is greater than <paramref name="other" />. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:JetBrains.Util.XmlExternalizationUtil.ExternalizableMember.Equals(JetBrains.Util.XmlExternalizationUtil.ExternalizableMember)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="P:JetBrains.Util.XmlExternalizationUtil.ExternalizableMember.UserValue">
            <summary>
            The value read from the member, or the value to be written to the member. Temporary storage. Not operated by this class, read and written by external consumers.
            Initially, <see cref="F:System.Convert.DBNull"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlReaderEx.AssertAtElement(System.Xml.XmlReader,System.String)">
            <summary>
            Asserts that the reader is currently at the element with the specific name. Advances before throwing to avoid endless child loops.
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlReaderEx.KeepDepth(System.Xml.XmlReader,System.Action)">
            <summary>
            <para>Makes sure the reader is at the same node depth after executing the <paramref name="action">nested code</paramref> as before running it. Throws if the nested code pops out of the orignal level.</para>
            <para>Note: this is a lightweight alternative to <see cref="M:System.Xml.XmlReader.ReadSubtree"/>. Use the latter to get maximum stability.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlReaderEx.KeepParentDepth(System.Xml.XmlReader,System.Action)">
            <summary>
            <para>After executing the <paramref name="action">nested code</paramref>, makes sure the depth level is that of the parent of the orignial element (one depth level up). Throws if the nested code pops out of the limiting level.</para>
            <para>Note: this is a lightweight alternative to <see cref="M:System.Xml.XmlReader.ReadSubtree"/>. Use the latter to get maximum stability.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlReaderEx.ReadElement(System.Xml.XmlReader,System.Action{System.Xml.XmlReader})">
            <summary>
            Creates a new reader that scopes the current element only. <paramref name="funcElem"/> cannot proceed past the current element on its reader, as the reader will report end-of-stream. After this function exits, the outer <paramref name="reader"/> is positioned on the next node after the element it was called on.
            The reader of the <paramref name="funcElem"/> is initially positioned on the same element.
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlReaderEx.ReadElementChildren(System.Xml.XmlReader,System.Action{System.Xml.XmlReader})">
            <summary>
            <para>Enters the current element, scans through all of its children, and calls <see cref="!:funcChild"/> for each of the first-level child elements.</para>
            <para>Must be called on an element (use <see cref="M:JetBrains.Util.XmlReaderEx.ReadToElementStart(System.Xml.XmlReader)"/> if needed).</para>
            <para><paramref name="funcChild"/> must do at least one read operation on the <see cref="!:reader"/>, otherwise the reader could enter an endless loop. It is not necessary to read all of the child content, or return to the original depth level.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlReaderEx.ReadSiblingElements(System.Xml.XmlReader,System.Action{System.Xml.XmlReader})">
            <summary>
            <para>On the current depth level, scans through all of the elements, and calls <see cref="!:funcElem"/> for each of the same-level elements.</para>
            <para><paramref name="funcElem"/> must do at least one read operation on the <see cref="!:reader"/>, otherwise the reader could enter an endless loop. It is not necessary to read all of the element content, or return to the original depth level.</para>
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlReaderEx.ReadToElementStart(System.Xml.XmlReader)">
            <summary>
            Reads up to the opening tag of an element on the same level as the current reader position. Returns whether such an element could be found.
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlReaderEx.ReadToElementStart(System.Xml.XmlReader,System.Int32)">
            <summary>
            Reads up to the opening tag of an element on the specified depth level. Returns whether such an element could be found.
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlReaderEx.KeepReaderDepthCore(System.Xml.XmlReader,System.Action,System.Int32)">
            <summary>
            Impl for <see cref="M:JetBrains.Util.XmlReaderEx.KeepDepth(System.Xml.XmlReader,System.Action)"/> and <see cref="M:JetBrains.Util.XmlReaderEx.KeepParentDepth(System.Xml.XmlReader,System.Action)"/>.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:JetBrains.Util.XmlRegistrar" -->
        <member name="M:JetBrains.Util.XmlUtil.CreateAttributeWithNonEmptyValue(System.Xml.XmlElement,System.String,System.String)">
            <summary>
            Creates attribute only if passed value is not empty
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlUtil.CreateAttributeWithNonEmptyValueFluent(System.Xml.XmlElement,System.String,System.String)">
            <summary>
            A fluent version of <see cref="M:JetBrains.Util.XmlUtil.CreateAttributeWithNonEmptyValue(System.Xml.XmlElement,System.String,System.String)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlUtil.CreateAttributeWithValueFluent(System.Xml.XmlElement,System.String,System.String)">
            <summary>
            A fluent version of <see cref="M:JetBrains.Util.XmlUtil.CreateAttributeWithValue(System.Xml.XmlElement,System.String,System.String)"/>.
            </summary>
        </member>
        <member name="T:JetBrains.Util.StringEncryption">
            <summary>
            StringEncryption is a wrapper of System.Security.Cryptography.SymmetricAlgorithm classes
            and simplifies the interface. It supports customized SymmetricAlgorithm as well.
            </summary>
        </member>
        <member name="M:JetBrains.Util.StringEncryption.#ctor(JetBrains.Util.StringEncryption.StringEncryptionMethod)">
            <remarks>
            Constructor for using an intrinsic .Net SymmetricAlgorithm class.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.StringEncryption.#ctor(System.Security.Cryptography.SymmetricAlgorithm)">
            <remarks>
            Constructor for using a customized SymmetricAlgorithm class.
            </remarks>
        </member>
        <member name="M:JetBrains.Util.StringEncryption.GetLegalKey(System.String)">
            <remarks>
            Depending on the legal key size limitations of a specific CryptoService provider
            and length of the private key provided, padding the secret key with space character
            to meet the legal size of the algorithm.
            </remarks>
        </member>
        <member name="T:JetBrains.Util.StringEncryption.StringEncryptionMethod">
            <remarks>
            Supported .Net intrinsic SymmetricAlgorithm classes.
            </remarks>
        </member>
        <member name="F:JetBrains.Util.XmlWriterEx.WriterSettings">
            <summary>
            Default settings for an XML Writer.
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlWriterEx.Attr``1(``0,System.String,System.Object)">
            <summary>
            A fluent version of <see cref="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlWriterEx.CreateWriter(System.IO.Stream)">
            <summary>
            Creates a writer over the stream with readability-friendly settings (<see cref="T:System.Xml.XmlUtf8RawTextWriterIndent"/>).
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlWriterEx.Element(System.Xml.XmlWriter,System.String,System.String)">
            <summary>
            Writes an element string, mostly as <see cref="T:System.Xml.XmlWriter"/>, but supports special notation for <paramref name="name"/> to also specify the namespace in the form <c>xmlns::localname</c>, eg <c>"urn:shemas-jetbrains-com:all-assemblies-xml::AllAssemblies"</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlWriterEx.InElement(System.Xml.XmlWriter,System.String,System.Action)">
            <summary>
            <see cref="M:System.Xml.XmlWriter.WriteStartElement(System.String)"/> + <see cref="M:System.Xml.XmlWriter.WriteEndElement"/>.
            Supports special notation for <paramref name="name"/> to also specify the namespace in the form <c>xmlns::localname</c>, eg <c>"urn:shemas-jetbrains-com:all-assemblies-xml::AllAssemblies"</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlWriterEx.InElementNs(System.Xml.XmlWriter,System.String,System.String,System.Action)">
            <summary>
            <see cref="M:System.Xml.XmlWriter.WriteStartElement(System.String)"/> + <see cref="M:System.Xml.XmlWriter.WriteEndElement"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlWriterEx.PushElement(System.Xml.XmlWriter,System.String)">
            <summary>
            <see cref="M:System.Xml.XmlWriter.WriteStartElement(System.String)"/> + <see cref="M:System.Xml.XmlWriter.WriteEndElement"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlWriterEx.PushElementNs(System.Xml.XmlWriter,System.String,System.String)">
            <summary>
            <see cref="M:System.Xml.XmlWriter.WriteStartElement(System.String)"/> + <see cref="M:System.Xml.XmlWriter.WriteEndElement"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Util.XmlWriterEx.WriteXml(System.IO.Stream,System.Action{System.Xml.XmlWriter})">
            <summary>
            Creates a writer over the stream with readability-friendly settings (<see cref="T:System.Xml.XmlUtf8RawTextWriterIndent"/>).
            </summary>
        </member>
        <member name="T:JetBrains.Util.Tests.CompoundException">
            <summary>
            Aggregates multiple exceptions.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Tests.CompoundException.ToString">
            <summary>
            Creates and returns a string representation of the current exception.
            </summary>
            
            <returns>
            A string representation of the current exception.
            </returns>
            <filterpriority>1</filterpriority><PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" /></PermissionSet>
        </member>
        <member name="P:JetBrains.Util.Tests.CompoundException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            
            <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:JetBrains.Util.Tests.CompoundException.StackTrace">
            <summary>
            Gets a string representation of the frames on the call stack at the time the current exception was thrown.
            </summary>
            
            <returns>
            A string that describes the contents of the call stack, with the most recent method call appearing first.
            </returns>
            <filterpriority>2</filterpriority><PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" /></PermissionSet>
        </member>
        <member name="T:JetBrains.Util.Tests.TestException">
            <summary>
            A special exception for the test purposes, to distinguish it in catch-blocks from any other ones.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Tests.TestException.Expect``1(System.Action)">
            <summary>
            Executes the <paramref name="action"/>, continues OK whenif <typeparamref name="TException"/> occurs, throws if it does not.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Tests.TestLimits">
            <summary>
            Defines the constants that limit the number of iterations in random tests.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Tests.TestLimits.MaxSize">
            <summary>
            Upper limit for random sizes.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Tests.TestLimits.MinSize">
            <summary>
            Lower limit for random sizes.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Tests.TestLimits.RandomTryIterations">
            <summary>
            Number of iterations to try different random setups for the same test.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Tests.TestLimits.RichTextBlockLines">
            <summary>
            Number of lines when testing rich text blocks.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Tests.TestLimits.StringLength">
            <summary>
            Length limit for the autogenerated strings.
            The lower limit is usually <c>0</c>.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Tests.TestLimits.Repeat(System.Action)">
            <summary>
            Repeats the action <see cref="F:JetBrains.Util.Tests.TestLimits.RandomTryIterations"/> times.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Tests.TestLimits.RunInSta(System.Action)">
            <summary>
            Runs the given action on a STA thread.
            </summary>
        </member>
        <member name="T:JetBrains.Util.Tests.TestLoggerListener">
            <summary>
            In tests, allows all of the exceptions to be thrown out.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Tests.TestLoggerListener.myIsSuppressingExceptions">
            <summary>
            Whether we've altered the <see cref="P:JetBrains.Util.Logger.AllowExceptions"/> value, and have to restore it on <see cref="M:JetBrains.Util.Tests.TestLoggerListener.Dispose"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Util.Tests.TestLoggerListener.myOldAllowExceptionsValue">
            <summary>
            Caches the overridden <see cref="P:JetBrains.Util.Logger.AllowExceptions"/>, if <see cref="F:JetBrains.Util.Tests.TestLoggerListener.myIsSuppressingExceptions"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Tests.TestLoggerListener.#ctor">
            <summary>
            Enables logger's passing exceptions out of safe methods. Attaches self.
            Does not change the <see cref="P:JetBrains.Util.Logger.AllowExceptions"/> value.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Tests.TestLoggerListener.#ctor(System.Boolean)">
            <summary>
            Enables logger's passing exceptions out of safe methods. Attaches self.
            Optionally, lowers the <see cref="P:JetBrains.Util.Logger.AllowExceptions"/> value for the lifetime of the instance, so that the exceptions were collected and not thrown immediately.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Tests.TestLoggerListener.Dispose(System.Boolean)">
            <summary>
            Forces the finalizable objects to check whether their <see cref="M:System.IDisposable.Dispose"/> contract was fulfilled.
            Reports all of the exceptions that have occured within the listener's life.
            Detaches from the logger.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Tests.TestLoggerListener.RecycleLoggedExceptions">
            <summary>
            Returns the current <see cref="P:JetBrains.Util.Tests.TestLoggerListener.LoggedExceptions"/> object, and creates a new (empty) one instead of it.
            Does not actually throw the exception.
            Thread-safe.
            </summary>
        </member>
        <member name="M:JetBrains.Util.Tests.TestLoggerListener.Dispose">
            <summary>
            Reports all of the exceptions that have occured within the listener's life.
            Detaches from the logger.
            </summary>
        </member>
        <member name="P:JetBrains.Util.Tests.TestLoggerListener.LoggedExceptions">
            <summary>
            Exceptions logged during the session.
            </summary>
        </member>
        <member name="T:JetBrains.Tests.TestRandom">
            <summary>
            A random class that supports generating test objects in a deterministic way.
            Not thread-safe.
            </summary>
        </member>
        <member name="F:JetBrains.Tests.TestRandom.Seed">
            <summary>
            The default deterministic seed.
            </summary>
        </member>
        <member name="F:JetBrains.Tests.TestRandom.myNextStringBuilder">
            <summary>
            Worker instance for <see cref="M:JetBrains.Tests.TestRandom.NextString"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Tests.TestRandom.#ctor(System.Int32)">
            <summary>
            Initializes the object and seeds it with the given number.
            You can make the tests deterministic by always submitting the same number.
            </summary>
        </member>
        <member name="M:JetBrains.Tests.TestRandom.#ctor">
            <summary>
            Initializes the object and seeds it with the constant <see cref="F:JetBrains.Tests.TestRandom.Seed"/>, so that the sequence were deterministic.
            </summary>
        </member>
        <member name="M:JetBrains.Tests.TestRandom.CreateWithRandomSeed">
            <summary>
            Creates an instance initialized with a random seed, thus producing an unstable sequence.
            Useless for tests, but handy for debug method dummies.
            </summary>
        </member>
        <member name="M:JetBrains.Tests.TestRandom.GetRandomValues``1">
            <summary>
            Gets the random values for running a row of tests parameterized with <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Tests.TestRandom.NextColor">
            <summary>
            Generates a random <see cref="T:System.Drawing.Color"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Tests.TestRandom.NextRichText(System.Int32,System.Int32,System.String@)">
            <summary>
            Generates a random <see cref="T:JetBrains.UI.RichText.RichText"/> string consisting of multiple parts having different styles.
            </summary>
            <param name="min">Minimum length.</param>
            <param name="max">Maximum length.</param>
            <param name="text">Gives out the plain string containing the same characters as in the return value, in order to check their correspondence.</param>
        </member>
        <member name="M:JetBrains.Tests.TestRandom.NextRichText(System.Int32,System.Int32)">
            <summary>
            Generates a random <see cref="T:JetBrains.UI.RichText.RichText"/> string consisting of multiple parts having different styles.
            </summary>
            <param name="min">Minimum length.</param>
            <param name="max">Maximum length.</param>
        </member>
        <member name="M:JetBrains.Tests.TestRandom.NextRichText(System.Int32)">
            <summary>
            Generates a random <see cref="T:JetBrains.UI.RichText.RichText"/> string consisting of multiple parts having different styles.
            The minimum length is assumed to be zero (an empty string).
            </summary>
            <param name="max">Maximum length.</param>
        </member>
        <member name="M:JetBrains.Tests.TestRandom.NextSize(System.Int32,System.Int32)">
            <summary>
            Generates a random <see cref="T:System.Drawing.Size"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Tests.TestRandom.NextSizes(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates a random set of random <see cref="T:System.Drawing.Size"/> values.
            </summary>
        </member>
        <member name="M:JetBrains.Tests.TestRandom.NextString(System.Int32,System.Int32)">
            <summary>
            Generates a random string that consists of ASCII characters (20h…7Fh).
            </summary>
        </member>
        <member name="M:JetBrains.Tests.TestRandom.NextString">
            <summary>
            Generates a new string with the testlimits-defined length.
            </summary>
        </member>
        <member name="M:JetBrains.Tests.TestRandom.NextTextStyle">
            <summary>
            Generates a random <see cref="T:JetBrains.UI.RichText.TextStyle"/>.
            </summary>
        </member>
        <member name="M:JetBrains.Tests.TestRandom.Repeat(System.Boolean,System.Action{System.String})">
            <summary>
            Runs multiple iterations on random strings, including border values.
            </summary>
        </member>
        <member name="M:JetBrains.Tests.TestRandom.Repeat(System.Action{System.Int32})">
            <summary>
            Runs multiple iterations on random values, including border values.
            </summary>
        </member>
        <member name="M:JetBrains.Tests.TestRandom.Repeat``1(System.Action{``0})">
            <summary>
            Runs multiple iterations on random values, including border values.
            </summary>
        </member>
        <member name="M:JetBrains.Tests.TestRandom.RepeatPush``1(System.Func{``0,System.IDisposable})">
            <summary>
            Runs multiple iterations on random values, including border values.
            First executes all of the actions, then disposes of their retvals in the reverse order.
            </summary>
        </member>
        <member name="M:JetBrains.Tests.TestRandom.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number within a specified range.
            </summary>
            
            <returns>
            A 32-bit signed integer greater than or equal to minValue and less than maxValue; that is, the range of return values includes minValue but not maxValue. If minValue equals maxValue, minValue is returned.
            </returns>
            
            <param name="minValue">The inclusive lower bound of the random number returned. </param>
            <param name="maxValue">The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue. </param>
            <exception cref="T:System.ArgumentOutOfRangeException">minValue is greater than maxValue. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:JetBrains.Tests.TestRandom.Next(System.Int32)">
            <summary>
            Returns a nonnegative random number less than the specified maximum.
            </summary>
            
            <returns>
            A 32-bit signed integer greater than or equal to zero, and less than maxValue; that is, the range of return values includes zero but not maxValue.
            </returns>
            
            <param name="maxValue">The exclusive upper bound of the random number to be generated. maxValue must be greater than or equal to zero. </param>
            <exception cref="T:System.ArgumentOutOfRangeException">maxValue is less than zero. </exception><filterpriority>1</filterpriority>
        </member>
    </members>
</doc>
