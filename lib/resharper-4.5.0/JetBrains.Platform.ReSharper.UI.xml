<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.Platform.ReSharper.UI</name>
    </assembly>
    <members>
        <member name="T:JetBrains.UI.resources.StringTable">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdAllowDownloadCheckbox">
            <summary>
              Looks up a localized string similar to Download the list of available updates from the Web.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdAllowDownloadComment">
            <summary>
              Looks up a localized string similar to No personally identifiable information is uploaded to the server.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdAreNewPluginVersionsAvailable">
            <summary>
              Looks up a localized string similar to There are new plugin versions available..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdAreNewProductVersionsAvailable">
            <summary>
              Looks up a localized string similar to There are new {0} versions available..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdDownloadLink">
            <summary>
              Looks up a localized string similar to Download.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdEstimatedPrice">
            <summary>
              Looks up a localized string similar to Estimated price.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdFree">
            <summary>
              Looks up a localized string similar to free.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdIsNewPluginVersionAvailable">
            <summary>
              Looks up a localized string similar to There is a new plugin version available..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdIsNewProductVersionAvailable">
            <summary>
              Looks up a localized string similar to There is a new {0} version available..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdKindFeatures">
            <summary>
              Looks up a localized string similar to feature release.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdKindGeneric">
            <summary>
              Looks up a localized string similar to update.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdKindPreview">
            <summary>
              Looks up a localized string similar to prerelease build.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdKindService">
            <summary>
              Looks up a localized string similar to service update.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdNoUpdatesAvailable">
            <summary>
              Looks up a localized string similar to There are no updates available..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdNoUpdatesAvailableForProduct">
            <summary>
              Looks up a localized string similar to There are no updates available for {0}..
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdPluginUpdates">
            <summary>
              Looks up a localized string similar to Plugin Updates.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdProductUpdates">
            <summary>
              Looks up a localized string similar to {0} Updates.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdReadMoreLink">
            <summary>
              Looks up a localized string similar to Read More.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdThisUpdateInstallsInstalls">
            <summary>
              Looks up a localized string similar to installs.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdThisUpdateInstallsPre">
            <summary>
              Looks up a localized string similar to This.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdUnidentifiedProduct">
            <summary>
              Looks up a localized string similar to Unidentified Product.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdUnknownCompany">
            <summary>
              Looks up a localized string similar to Unknown Company.
            </summary>
        </member>
        <member name="P:JetBrains.UI.resources.StringTable.UpdUntitledUpdate">
            <summary>
              Looks up a localized string similar to Untitled.
            </summary>
        </member>
        <member name="T:JetBrains.UI.CommonControls.AutomationProvidersRegistry">
            <summary>
            <para>Manages the automation providers, as available for our custom controls.</para>
            <para>Automation provider implementations require referencing the Avalon assemblies, which we cannot do yet.</para>
            <para>When an Avalon-aware DLL is about to query for providers on our controls, it should load the providers DLL and cause them to sign up for this Registry. Subsequently, controls will start returning the providers in response to their <see cref="F:JetBrains.Interop.WinApi.WindowsMessages.WM_GETOBJECT"/>.</para>
            </summary>
            <remarks>
            The default implementation should call into <c>System.Windows.Automation.Provider.AutomationInteropProvider::ReturnRawElementProvider</c>.
            </remarks>
        </member>
        <member name="F:JetBrains.UI.CommonControls.AutomationProvidersRegistry.Items">
            <summary>
            Lists the provider entries. The <see cref="T:System.Type"/> key is the class whose instance is requesting the automation peer. The <see cref="T:System.Func`2"/> takes in an instance of the key <see cref="T:System.Type"/> plus some more things and returns an instance of the automation provider, converted to an LResult (.NET Object -&gt; COM Object -&gt; IDispatch -&gt; LResult), or <c>Null</c> if not available.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.AutomationProvidersRegistry.TryHandleWindowsMessage(System.Object,System.Windows.Forms.Message@)">
            <summary>
            Called from a <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)"/> of a control that would like be supported by an external automation peer, fills in the message result with that peer, if available.
            </summary>
            <param name="owner">The owning object who's handling the windows message. A key to the <see cref="F:JetBrains.UI.CommonControls.AutomationProvidersRegistry.Items"/> and a parameter to its value <see cref="T:System.Func`2"/>.</param>
            <param name="msg">Windows message, as received by <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)"/>.</param>
            <returns>Whether the message has been handled, and the base <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)"/> should not be called.</returns>
        </member>
        <member name="T:JetBrains.UI.CommonControls.AutomationProvidersRegistry.AutomationProviderRequest">
            <summary>
            Parameters to the value func of the <see cref="F:JetBrains.UI.CommonControls.AutomationProvidersRegistry.Items"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.AutomationProvidersRegistry.AutomationProviderRequest.Hwnd">
            <summary>
            Handle to the window represented by the <see cref="F:JetBrains.UI.CommonControls.AutomationProvidersRegistry.AutomationProviderRequest.Owner"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.AutomationProvidersRegistry.AutomationProviderRequest.Owner">
            <summary>
            The owner object, of the type given by the <see cref="T:System.Type"/> key in the <see cref="F:JetBrains.UI.CommonControls.AutomationProvidersRegistry.Items"/> dictionary.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.AutomationProvidersRegistry.AutomationProviderRequest.WParam">
            <summary>
            <c>wParam</c> of the Windows message we're handling. <c>lParam</c> is always <see cref="F:JetBrains.Interop.WinApi.Declarations.Constants.OBJID.OBJID_CLIENT"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.CommonControls.AutomationProvidersRegistry.AutomationProviderRequest.LParam">
            <summary>
            <c>lParam</c>, always <see cref="F:JetBrains.Interop.WinApi.Declarations.Constants.OBJID.OBJID_CLIENT"/>.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.BitmapWindowlessControl">
            <summary>
            A simple windowless control that just renders a bitmap.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.IWindowlessControl">
            <summary>
            An interface for the objects that implement a part of the control.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.IConstrainableControl">
            <summary>
            An interface that extends the standard control functionality by allowing it to negotiate for its size and focus on activation.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.IConstrainableControl.GetDesiredSize(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Performs the bottom-up layouting stage, when the control calculates its desired size using the given constraints.
            Should give generally the same results as <see cref="T:JetBrains.CommonControls.IConstrainableControl"/>, but could employ the <paramref name="gc"/> device context for the sake of optimization.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="limit">The maximum available space (that could affect the shape of the control, or strip down unnecessary calculations over the invisible items).
            May be a <see cref="T:System.Drawing.Size"/> with width and height equal to <see cref="F:System.Int32.MaxValue"/>, which means that the size is not limited.</param>
            <returns>The desired size, must be no larger than <paramref name="limit"/>.</returns>
        </member>
        <member name="M:JetBrains.CommonControls.IConstrainableControl.SetLayout(JetBrains.UI.LayoutResult)">
            <summary>
            Tells the control the details about the new layout applied to it by the controlling entity in conjunction with some <see cref="T:JetBrains.UI.IPopupLayouter"/>.
            Typically, the control need not apply the given size and location because that should be done by the controlling entity.
            The control may change its presentation in response to the layouting details, for example, whether it's attached to the top or the bottom of the anchoring rect.
            </summary>
            <param name="layout">The layouting details.</param>
        </member>
        <member name="P:JetBrains.CommonControls.IConstrainableControl.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.IConstrainableControl.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.IWindowlessControl.Paint(System.Drawing.Graphics)">
            <summary>
            Renders the context of the windowless control. The rendering bounds are given by the most recent call to the <see cref="M:JetBrains.CommonControls.IWindowlessControl.SetBounds(JetBrains.UI.IGraphicsContainer,System.Drawing.Rectangle)"/> method.
            </summary>
            <param name="g">The device context.</param>
        </member>
        <member name="M:JetBrains.CommonControls.IWindowlessControl.SetBounds(JetBrains.UI.IGraphicsContainer,System.Drawing.Rectangle)">
            <summary>
            Performs the top-down layouting stage, when the control lais out its parts within the given bounds.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="bounds">The new bounds. From now on, this value should be returned from the <see cref="P:JetBrains.CommonControls.IWindowlessControl.Bounds"/> property.</param>
        </member>
        <member name="P:JetBrains.CommonControls.IWindowlessControl.Bounds">
            <summary>
            The windowless control bounds in the parent coordinates. The implementor should just store and return the value set by the owner.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.IWindowlessControl.GottenDirty">
            <summary>
            The control has gotten dirty and should be repainted.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.BitmapWindowlessControl.GetDesiredSize(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Performs the bottom-up layouting stage, when the control calculates its desired size using the given constraints.
            Should give generally the same results as <see cref="T:JetBrains.CommonControls.IConstrainableControl"/>, but could employ the <paramref name="gc"/> device context for the sake of optimization.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="limit">The maximum available space (that could affect the shape of the control, or strip down unnecessary calculations over the invisible items).
            May be a <see cref="T:System.Drawing.Size"/> with width and height equal to <see cref="F:System.Int32.MaxValue"/>, which means that the size is not limited.</param>
            <returns>The desired size, must be no larger than <paramref name="limit"/>.</returns>
        </member>
        <member name="M:JetBrains.CommonControls.BitmapWindowlessControl.Paint(System.Drawing.Graphics)">
            <summary>
            Renders the context of the windowless control. The rendering bounds are given by the 
            </summary>
            <param name="g">The device context.</param>
        </member>
        <member name="M:JetBrains.CommonControls.BitmapWindowlessControl.SetBounds(JetBrains.UI.IGraphicsContainer,System.Drawing.Rectangle)">
            <summary>
            Performs the top-down layouting stage, when the control lais out its parts within the given bounds.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="bounds">The new bounds. From now on, this value should be returned from the <see cref="P:JetBrains.CommonControls.IWindowlessControl.Bounds"/> property.</param>
        </member>
        <member name="M:JetBrains.CommonControls.BitmapWindowlessControl.SetLayout(JetBrains.UI.LayoutResult)">
            <summary>
            Tells the control the details about the new layout applied to it by the controlling entity in conjunction with some <see cref="T:JetBrains.UI.IPopupLayouter"/>.
            Typically, the control need not apply the given size and location because that should be done by the controlling entity.
            The control may change its presentation in response to the layouting details, for example, whether it's attached to the top or the bottom of the anchoring rect.
            </summary>
            <param name="layout">The layouting details.</param>
        </member>
        <member name="P:JetBrains.CommonControls.BitmapWindowlessControl.Bitmap">
            <summary>
            Gets or sets the image to be rendered in the windowless control.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.BitmapWindowlessControl.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.BitmapWindowlessControl.Bounds">
            <summary>
            The windowless control bounds in the parent coordinates. The implementor should just store and return the value set by the owner.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.BitmapWindowlessControl.GottenDirty">
            <summary>
            The control has gotten dirty and should be repainted.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.BitmapWindowlessControl.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.BorderedPanel">
            <summary>
            A panel that has a lower border.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.BorderedPanel.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint"></see> event.
            </summary>
            
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"></see> that contains the event data. </param>
        </member>
        <member name="P:JetBrains.UI.Controls.BorderedPanel.BorderColor">
            <summary>
            Gets or sets the border color. <see cref="P:System.Windows.Forms.Control.ForeColor"/> is not used so that to avoid inheriting it in the child controls.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.BorderedPanel.BorderWidth">
            <summary>
            Gets or sets which borders to paint.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.BorderedPanel.FillColor">
            <summary>
            Gets or sets the fill color. <see cref="P:System.Windows.Forms.Control.BackColor"/> is not used so that to avoid inheriting it in the child controls.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Browser.MshtmlBrowserControl2.CreateWebBrowserSiteBase">
            <summary>
            Returns a reference to the unmanaged WebBrowser ActiveX control site, which you can extend to customize the managed <see cref="T:System.Windows.Forms.WebBrowser"></see> control.
            </summary>
            
            <returns>
            A <see cref="T:System.Windows.Forms.WebBrowser.WebBrowserSite"></see> that represents the WebBrowser ActiveX control site.
            </returns>
            
        </member>
        <member name="T:JetBrains.UI.CommonControls.LinkLabel">
            <summary>
            A customized link label that natively supports URIs for opening in the Web browser and copying to clipboard.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.ITooltipProvider">
            <summary>
            Any window that implements this interface will be queried for the tooltip info and, should the retval be non-<c>Null</c>, the tooltip will be displayed for this window.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.ITooltipProvider.GetTooltip(System.Drawing.Point)">
            <summary>
            Called by tooltip manager, if the tooltip is to be displayed
            </summary>
            <param name="point">Point in control's coordinates</param>
            <returns><see cref="T:JetBrains.CommonControls.ITooltipInfo"/>, or <c>Null</c> if no tooltip should be displayed.</returns>
        </member>
        <member name="M:JetBrains.UI.CommonControls.LinkLabel.#ctor(System.String,System.Uri)">
            <summary>
            A Web URI link.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.LinkLabel.#ctor(System.String,System.Action)">
            <summary>
            An action link.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.LinkLabel.OnClick(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Click" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:JetBrains.UI.CommonControls.LinkLabel.OnLinkClicked(System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.LinkLabel.LinkClicked" /> event.
            </summary>
            <param name="args">A <see cref="T:System.Windows.Forms.LinkLabelLinkClickedEventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:JetBrains.UI.CommonControls.LinkLabel.WndProc(System.Windows.Forms.Message@)">
            <summary>
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.LinkLabel.GetTooltip(System.Drawing.Point)">
            <summary>
            Called by tooltip manager, if the tooltip is to be displayed
            </summary>
            <param name="point">Point in control's coordinates</param>
            <returns><see cref="T:JetBrains.CommonControls.ITooltipInfo"/>, or <c>Null</c> if no tooltip should be displayed.</returns>
        </member>
        <member name="T:JetBrains.UI.CommonControls.Spacer">
            <summary>
            A spacer WinForms control to fill the unneeded space
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.Spacer.GetPreferredSize(System.Drawing.Size)">
            <summary>
            Retrieves the size of a rectangular area into which a control can be fitted.
            </summary>
            <returns>
            An ordered pair of type <see cref="T:System.Drawing.Size" /> representing the width and height of a rectangle.
            </returns>
            <param name="proposedSize">The custom-sized area for a control. </param><filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.UI.CommonControls.StatusBarProgressIndicator">
            <summary>
            A status bar indicator for a progress.
            </summary>
        </member>
        <member name="T:JetBrains.UI.StatusBar.JetStatusBarIndicator">
            <summary>
            Represents the data for an indicator in the status bar.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StatusBar.JetStatusBarIndicator.myWindowlessControl">
            <summary>
            <see cref="P:JetBrains.UI.StatusBar.JetStatusBarIndicator.WindowlessControl"/>
            </summary>
        </member>
        <member name="P:JetBrains.UI.StatusBar.JetStatusBarIndicator.Click">
            <summary>
            Fires when the user clicks a mouse button on the control.
            </summary>
        </member>
        <member name="P:JetBrains.UI.StatusBar.JetStatusBarIndicator.ContextMenu">
            <summary>
            Fires when a context menu should be shown.
            </summary>
        </member>
        <member name="P:JetBrains.UI.StatusBar.JetStatusBarIndicator.Cursor">
            <summary>
            Gets or sets the mouse cursor for the indicator view.
            </summary>
        </member>
        <member name="P:JetBrains.UI.StatusBar.JetStatusBarIndicator.DoubleClick">
            <summary>
            Fires when the user double-clicks a mouse button on the control.
            </summary>
        </member>
        <member name="P:JetBrains.UI.StatusBar.JetStatusBarIndicator.IsHot">
            <summary>
            Gets whether the control is currently hot (has mouse over its view).
            </summary>
        </member>
        <member name="P:JetBrains.UI.StatusBar.JetStatusBarIndicator.Margin">
            <summary>
            The margin around the <see cref="P:JetBrains.UI.StatusBar.JetStatusBarIndicator.WindowlessControl"/> content inside the status bar indicator place.
            </summary>
        </member>
        <member name="P:JetBrains.UI.StatusBar.JetStatusBarIndicator.TooltipProvider">
            <summary>
            Gets or sets the tooltip providers that allows casting a tooltip when the mouse pointer hovers this indicator.
            </summary>
        </member>
        <member name="P:JetBrains.UI.StatusBar.JetStatusBarIndicator.WindowlessControl">
            <summary>
            Gets or sets the windowless control that manages the painting and layouting of the indicator.
            If the value is <c>Null</c>, the status bar indicator is hidden and collapsed.
            You may use this approach for concealing the indicator instead of removing it from the status bar.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.StatusBarProgressIndicator.GapAroundText">
            <summary>
            Gap on the right and left of the text, but within the progress fill.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.StatusBarProgressIndicator.GapIconProgress">
            <summary>
            Gap between the icon and the progress area.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.StatusBarProgressIndicator.TicksBeforeChangingImmediateSize">
            <summary>
            Number of <see cref="F:JetBrains.UI.CommonControls.StatusBarProgressIndicator.myTicksAfterDesiredSizeChanged"/> ticks before the immediate size starts adapting.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.StatusBarProgressIndicator.SizeAdaptationStep">
            <summary>
            Step for changing the size when adapting.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.StatusBarProgressIndicator.myDesiredSize">
            <summary>
            The indicator's desired size, as derived from the content.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.StatusBarProgressIndicator.myDesiredSizeImmediate">
            <summary>
            The indicator size currently reported to the host as the desired size. Gradually changes to fit <see cref="F:JetBrains.UI.CommonControls.StatusBarProgressIndicator.myDesiredSize"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.StatusBarProgressIndicator.myGottenDirty">
            <summary>
            The control has gotten dirty and should be repainted.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.StatusBarProgressIndicator.myTicksAfterDesiredSizeChanged">
            <summary>
            Calculates the number of timer ticks after the <see cref="F:JetBrains.UI.CommonControls.StatusBarProgressIndicator.myDesiredSize"/> change.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.StatusBarProgressIndicator.myTimerAdjustDesiredSize">
            <summary>
            Gradually adjusts <see cref="F:JetBrains.UI.CommonControls.StatusBarProgressIndicator.myDesiredSizeImmediate"/> to fit <see cref="F:JetBrains.UI.CommonControls.StatusBarProgressIndicator.myDesiredSize"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.StatusBarProgressIndicator.myWantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.StatusBarProgressIndicator.Icon">
            <summary>
            Icon for the progress.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.StatusBarProgressIndicator.Text">
            <summary>
            Text.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.StatusBarProgressIndicator.Value">
            <summary>
            Value of the progress, in the [0…1] range.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.StatusBarProgressIndicator.OnUpdateDesiredSize">
            <summary>
            Calculates the true desired size.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.StatusBarProgressIndicator.OnTimerAdjustDesiredSize">
            <summary>
            When the timer ticks, gradually changes the immediate desired size value towards the actual desired size.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.StatusBarProgressIndicator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.CommonControls.StatusBarProgressIndicator.GetTooltip(System.Drawing.Point)">
            <summary>
            Called by tooltip manager, if the tooltip is to be displayed
            </summary>
            <param name="point">Point in control's coordinates</param>
            <returns><see cref="T:JetBrains.CommonControls.ITooltipInfo"/>, or <c>Null</c> if no tooltip should be displayed.</returns>
        </member>
        <member name="M:JetBrains.UI.CommonControls.StatusBarProgressIndicator.GetDesiredSize(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Performs the bottom-up layouting stage, when the control calculates its desired size using the given constraints.
            Should give generally the same results as <see cref="T:JetBrains.CommonControls.IConstrainableControl"/>, but could employ the <paramref name="gc"/> device context for the sake of optimization.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="limit">The maximum available space (that could affect the shape of the control, or strip down unnecessary calculations over the invisible items).
            May be a <see cref="T:System.Drawing.Size"/> with width and height equal to <see cref="F:System.Int32.MaxValue"/>, which means that the size is not limited.</param>
            <returns>The desired size, must be no larger than <paramref name="limit"/>.</returns>
        </member>
        <member name="M:JetBrains.UI.CommonControls.StatusBarProgressIndicator.Paint(System.Drawing.Graphics)">
            <summary>
            Renders the context of the windowless control. The rendering bounds are given by the 
            </summary>
            <param name="g">The device context.</param>
        </member>
        <member name="M:JetBrains.UI.CommonControls.StatusBarProgressIndicator.SetBounds(JetBrains.UI.IGraphicsContainer,System.Drawing.Rectangle)">
            <summary>
            Performs the top-down layouting stage, when the control lais out its parts within the given bounds.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="bounds">The new bounds. From now on, this value should be returned from the <see cref="P:JetBrains.CommonControls.IWindowlessControl.Bounds"/> property.</param>
        </member>
        <member name="M:JetBrains.UI.CommonControls.StatusBarProgressIndicator.SetLayout(JetBrains.UI.LayoutResult)">
            <summary>
            Tells the control the details about the new layout applied to it by the controlling entity in conjunction with some <see cref="T:JetBrains.UI.IPopupLayouter"/>.
            Typically, the control need not apply the given size and location because that should be done by the controlling entity.
            The control may change its presentation in response to the layouting details, for example, whether it's attached to the top or the bottom of the anchoring rect.
            </summary>
            <param name="layout">The layouting details.</param>
        </member>
        <member name="P:JetBrains.UI.CommonControls.StatusBarProgressIndicator.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.UI.CommonControls.StatusBarProgressIndicator.Bounds">
            <summary>
            The windowless control bounds in the parent coordinates. The implementor should just store and return the value set by the owner.
            </summary>
        </member>
        <member name="P:JetBrains.UI.CommonControls.StatusBarProgressIndicator.GottenDirty">
            <summary>
            The control has gotten dirty and should be repainted.
            </summary>
        </member>
        <member name="P:JetBrains.UI.CommonControls.StatusBarProgressIndicator.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.Browser.HtmlViewControl">
            <summary>
            A control that displays the HTML content.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Browser.HtmlViewControl.OnDocumentCompleted(System.Windows.Forms.WebBrowserDocumentCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.WebBrowser.DocumentCompleted"></see> event.
            </summary>
            
            <param name="e">A <see cref="T:System.Windows.Forms.WebBrowserDocumentCompletedEventArgs"></see> that contains the event data. </param>
            <exception cref="T:System.ObjectDisposedException">This <see cref="T:System.Windows.Forms.WebBrowser"></see> instance is no longer valid.</exception>
            <exception cref="T:System.InvalidOperationException">A reference to an implementation of the IWebBrowser2http://msdn.microsoft.com/workshop/browser/webbrowser/reference/ifaces/iwebbrowser2/iwebbrowser2.asp could not be retrieved from the underlying ActiveX WebBrowserhttp://msdn.microsoft.com/library/default.asp?url=/workshop/browser/webbrowser/browser_control_node_entry.asp.</exception>
        </member>
        <member name="P:JetBrains.CommonControls.Browser.HtmlViewControl.DocumentText">
            <summary>
            Gets or sets the HTML contents of the page displayed in the System.Windows.Forms.WebBrowser control.
            Wraps the base implementation to catch the setter silly exceptions.
            </summary>
        </member>
        <member name="T:JetBrains.UI.CommonControls.EditboxGlyph">
            <summary>
            Places a static glyph into an editbox control.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.EditboxGlyph.#ctor(System.Windows.Forms.TextBox,System.Drawing.Image)">
            <summary>
            Places the glyph into an owning editbox.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.EditboxGlyph.GetTooltip(System.Drawing.Point)">
            <summary>
            Called by tooltip manager, if the tooltip is to be displayed
            </summary>
            <param name="point">Point in control's coordinates</param>
            <returns><see cref="T:JetBrains.CommonControls.ITooltipInfo"/>, or <c>Null</c> if no tooltip should be displayed.</returns>
        </member>
        <member name="P:JetBrains.UI.CommonControls.EditboxGlyph.Glyph">
            <summary>
            Gets the image for the glyph.
            </summary>
        </member>
        <member name="P:JetBrains.UI.CommonControls.EditboxGlyph.TooltipProvider">
            <summary>
            Gets or sets the provider that defines the tooltip for the control.
            </summary>
        </member>
        <member name="T:JetBrains.UI.CommonControls.Fonts.FontsManagerImpl">
            <summary>
            Implementation for the <see cref="T:JetBrains.UI.CommonControls.Fonts.FontsManager"/> class.
            Standalone/test version.
            </summary>
        </member>
        <member name="P:JetBrains.UI.CommonControls.Fonts.FontsManager.DefaultCodeFont">
            <summary>
            Gets editor font
            </summary>
        </member>
        <member name="P:JetBrains.UI.CommonControls.Fonts.FontsManager.LookupFont">
            <summary>
            Gets lookup font
            </summary>
        </member>
        <member name="P:JetBrains.UI.CommonControls.Fonts.FontsManager.ListFont">
            <summary>
            Font for pop-up lists
            </summary>
        </member>
        <member name="P:JetBrains.UI.CommonControls.Fonts.FontsManager.TipFont">
            <summary>
            Font for pop-up tips
            </summary>
        </member>
        <member name="P:JetBrains.UI.CommonControls.Fonts.FontsManager.DialogFont">
            <summary>
            Font for dialogs
            </summary>
        </member>
        <member name="P:JetBrains.UI.CommonControls.Fonts.FontsManager.MenuFont">
            <summary>
            A font to be used for menu item labels.
            </summary>
        </member>
        <member name="T:JetBrains.UI.CommonControls.CheckBoxDisabledNoCheck">
            <summary>
            A checkbox that gets visually unchecked when disabled.
            Use the <see cref="P:JetBrains.UI.CommonControls.CheckBoxDisabledNoCheck.CheckedLogically"/> property if you'd like to use the non-visual state, <see cref="P:System.Windows.Forms.CheckBox.Checked"/> to use the visual state.
            Setting <see cref="P:System.Windows.Forms.CheckBox.Checked"/> will not affect the <see cref="P:JetBrains.UI.CommonControls.CheckBoxDisabledNoCheck.CheckedLogically"/> value.
            The <see cref="P:JetBrains.UI.CommonControls.CheckBoxDisabledNoCheck.CheckedVisually"/> property reflects the visual state of the checkbox.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.CheckBoxDisabledNoCheck.myFakeChange">
            <summary>
            <c>True</c> when the <see cref="P:System.Windows.Forms.CheckBox.Checked"/> property is being manipulated by this control on enable/disable.
            The <see cref="P:JetBrains.UI.CommonControls.CheckBoxDisabledNoCheck.CheckedLogically"/> should not change in such a case.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.CheckBoxDisabledNoCheck.UpdateCheckedProperty">
            <summary>
            Recacls the checked state of the control in response to various events.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.CheckBoxDisabledNoCheck.OnCheckedChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.CheckBox.CheckedChanged"></see> event.
            </summary>
            
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        </member>
        <member name="M:JetBrains.UI.CommonControls.CheckBoxDisabledNoCheck.OnEnabledChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.EnabledChanged"></see> event.
            </summary>
            
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        </member>
        <member name="P:JetBrains.UI.CommonControls.CheckBoxDisabledNoCheck.CheckedLogically">
            <summary>
            Gets or sets whether the checkbox is logically checked, not only visibly.
            </summary>
        </member>
        <member name="P:JetBrains.UI.CommonControls.CheckBoxDisabledNoCheck.CheckedVisually">
            <summary>
            Gets whether the checkbox is currently visually checked, or not.
            <c>False</c> when not <see cref="!:CheckBox.Enabled"/>.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Interop.EitherControl">
            <summary>
            A stub for the EitherControl that adapts the WinForms and Avalon controls to one another.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Interop.EitherControl.myControl">
            <summary>
            Stores the WinForms control, if explicitly inited.
            <see cref="F:JetBrains.UI.Interop.EitherControl.myControl"/> and <see cref="F:JetBrains.UI.Interop.EitherControl.myElement"/> are mutually exclusive.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Interop.EitherControl.myElement">
            <summary>
            Stores the Avalon element, if explicitly inited.
            <see cref="F:JetBrains.UI.Interop.EitherControl.myControl"/> and <see cref="F:JetBrains.UI.Interop.EitherControl.myElement"/> are mutually exclusive.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.EitherControl.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes from a WinForms control.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.EitherControl.#ctor(JetBrains.UI.Interop.EitherControl.UIElement)">
            <summary>
            Initializes from an Avalon element.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.EitherControl.FromObject(System.Object)">
            <summary>
            Detects the control type, throws if neither. Calls the appropriate ctor.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Interop.EitherControl.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.UI.Interop.EitherControl.Control">
            <summary>
            Gets the contained either-control as a Windows Forms control, creating a wrapper as needed.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Interop.EitherControl.Element">
            <summary>
            Gets the contained either-control as an Avalon UI element, creating a wrapper as needed.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Interop.EitherControl.IsDisposed">
            <summary>
            Gets whether the WinForms controls have been disposed of.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.LayoutSuspender">
            <summary>
            Suspends the layout of the given control and resumes it automatically when disposed of. [Omea]
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.LayoutSuspender._bLayoutOnResume">
            <summary>
            Whether to apply layout on resume.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.LayoutSuspender._suspended">
            <summary>
            The list of controls to be resumed.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.LayoutSuspender.#ctor(System.Windows.Forms.Control,System.Boolean,System.Boolean)">
            <summary>
            Suspends the layout of the following control and resumes it when disposed of.
            </summary>
            <param name="control">Control to be suspended/resumed. Must not be <c>Null</c>.</param>
            <param name="recursive">Whether to suspend all the child controls also.</param>
            <param name="bLayoutOnResume"><see cref="M:System.Windows.Forms.Control.ResumeLayout(System.Boolean)"/> will be called with <paramref name="bLayoutOnResume"/> as an argument.</param>
        </member>
        <member name="M:JetBrains.UI.Controls.LayoutSuspender.#ctor(System.Windows.Forms.Control)">
            <summary>
            Suspends the layout of the following control and resumes it when disposed of.
            </summary>
            <param name="control">Control to be suspended/resumed. Must not be <c>Null</c>.</param>
        </member>
        <member name="M:JetBrains.UI.Controls.LayoutSuspender.Resume">
            <summary>
            Suspends the <see cref="F:JetBrains.UI.Controls.LayoutSuspender._suspended"/> list.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.LayoutSuspender.Suspend">
            <summary>
            Suspends the <see cref="F:JetBrains.UI.Controls.LayoutSuspender._suspended"/> list.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.LayoutSuspender.Dispose">
            <summary>
            Resumes the control's layout.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.PresentableItemTipPainter">
            <summary>
            A tooltip control painter that renders a standard presentable item on it.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.PresentableItemTipPainter.myBounds">
            <summary>
            Bounds, as assigned by the parent.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.PresentableItemTipPainter.myPresentableItem">
            <summary>
            The rendered presentable item.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.PresentableItemTipPainter.myRenderParams">
            <summary>
            The rendering aspect.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.PresentableItemTipPainter.myWantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItemTipPainter.#ctor(JetBrains.CommonControls.IPresentableItem,JetBrains.UI.RenderParams)">
            <summary>
            Creates the tip painter.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItemTipPainter.#ctor(JetBrains.CommonControls.IPresentableItem)">
            <summary>
            Creates the tip painter.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItemTipPainter.#ctor(JetBrains.UI.RichText.RichText)">
            <summary>
            Creates the tip painter.
            Note: you should rather use <see cref="T:JetBrains.CommonControls.RichTextTipPainter"/> for formatted text, because it supports reflow.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItemTipPainter.#ctor(System.String)">
            <summary>
            Creates the tip painter.
            Note: you should rather use <see cref="T:JetBrains.CommonControls.RichTextTipPainter"/> for formatted text, because it supports reflow.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItemTipPainter.GetDesiredSize(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Performs the bottom-up layouting stage, when the control calculates its desired size using the given constraints.
            Should give generally the same results as <see cref="T:JetBrains.CommonControls.IConstrainableControl"/>, but could employ the <paramref name="gc"/> device context for the sake of optimization.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="limit">The maximum available space (that could affect the shape of the control, or strip down unnecessary calculations over the invisible items).
            May be a <see cref="T:System.Drawing.Size"/> with width and height equal to <see cref="F:System.Int32.MaxValue"/>, which means that the size is not limited.</param>
            <returns>The desired size, must be no larger than <paramref name="limit"/>.</returns>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItemTipPainter.Paint(System.Drawing.Graphics)">
            <summary>
            Renders the context of the windowless control. The rendering bounds are given by the 
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItemTipPainter.SetBounds(JetBrains.UI.IGraphicsContainer,System.Drawing.Rectangle)">
            <summary>
            Performs the top-down layouting stage, when the control lais out its parts within the given bounds.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="bounds">The available space.</param>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItemTipPainter.SetLayout(JetBrains.UI.LayoutResult)">
            <summary>
            Tells the control the details about the new layout applied to it by the controlling entity in conjunction with some <see cref="T:JetBrains.UI.IPopupLayouter"/>.
            Typically, the control need not apply the given size and location because that should be done by the controlling entity.
            The control may change its presentation in response to the layouting details, for example, whether it's attached to the top or the bottom of the anchoring rect.
            </summary>
            <param name="layout">The layouting details.</param>
        </member>
        <member name="P:JetBrains.CommonControls.PresentableItemTipPainter.PresentableItem">
            <summary>
            Gets or sets the presentable item rendered by the view.
            Can be <c>Null</c> for an empty view of zero size.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.PresentableItemTipPainter.RenderParams">
            <summary>
            Gets or sets the rendering aspect.
            Must not be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.PresentableItemTipPainter.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.PresentableItemTipPainter.Bounds">
            <summary>
            The windowless control bounds in the parent coordinates. The implementor should just store and return the value set by the owner.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.PresentableItemTipPainter.GottenDirty">
            <summary>
            The control has gotten dirty and should be repainted.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.PresentableItemTipPainter.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="T:JetBrains.UI.CommonControls.RadioGroup`1">
            <summary>
            Represents a group of radio buttons with a single value that is determined by the radiobutton that is checked.
            There is an option checkbox that disables or enables the whole group.
            </summary>
            <typeparam name="TValue">Type of the value chosen by this group.</typeparam>
        </member>
        <member name="F:JetBrains.UI.CommonControls.RadioGroup`1.myDefaultRadioMargin">
            <summary>
            The default radio button margin to which we're adding.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.RadioGroup`1.HasCheckbox">
            <summary>
            WHether the label or checkbox is visible.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.RadioGroup`1.LabelText">
            <summary>
            Text of the label (if there's no checkbox), or the checkbox (if it's ON).
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.RadioGroup`1.NothingSelectedValue">
            <summary>
            The <see cref="F:JetBrains.UI.CommonControls.RadioGroup`1.Value"/> when nothing is selected (eg checkbox is unchecked).
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.RadioGroup`1.RadioButtonsAdditionalMargin">
            <summary>
            The additional margin around the radio buttons, ie one that positions them indented under the title check/label.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.RadioGroup`1.Value">
            <summary>
            The composite value of this group.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.RadioGroup`1.myButtonValues">
            <summary>
            Values on the radio buttons.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.RadioGroup`1.myPropertyButtonsEnabled">
            <summary>
            Indicates whether the property buttons should be enabled.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonControls.RadioGroup`1.myValueBeforeDisabling">
            <summary>
            Provides for restoring the selection that used to be before disabling the radio buttons.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.RadioGroup`1.AddComment(System.Windows.Forms.Control)">
            <summary>
            Adds a comment to the last radio button.
            The only difference with adding a control directly is that the enabled state of the comment will be synched to the previous radio button.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.RadioGroup`1.AddDependent(System.Windows.Forms.Control)">
            <summary>
            Adds a dependent control to the last radio button.
            The only difference with adding a control directly is that the enabled state of the dependent control will be synched to the previous radio button checked/enabled state.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.RadioGroup`1.AddRadioButton(System.String,`0)">
            <summary>
            Adds a new radio button to the group, along with its value.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.RadioGroup`1.AddRef(System.IDisposable)">
            <summary>
            Adds a reference so that it's held until the form is disposed of, after which it's disposed of.
            </summary>
            <param name="ref"></param>
        </member>
        <member name="M:JetBrains.UI.CommonControls.RadioGroup`1.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.Control"></see> and its child controls and optionally releases the managed resources.
            </summary>
            
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
        </member>
        <member name="T:JetBrains.CommonControls.RichTextTipPainter">
            <summary>
            Tip painter which paints tips with simple multiline formatted text.
            Reflows the text if the width does not fit.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.RichTextTipPainter.BorderSize">
            <summary>
            Size of the padding around the text.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.RichTextTipPainter.myBounds">
            <summary>
            Bounds, as assigned by the parent.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.RichTextTipPainter.myDesiredBlockSize">
            <summary>
            The desired size of the <see cref="F:JetBrains.CommonControls.RichTextTipPainter.myRichTextBlock"/>, in absence of any external constraints.
            Lazily-calculated, <c>Null</c> when invalid.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.RichTextTipPainter.myReflowedRichTextBlock">
            <summary>
            Reflowed content, lazily-created.
            Use the <see cref="M:JetBrains.CommonControls.RichTextTipPainter.GetReflowedRichTextBlock(System.Drawing.Graphics)"/> method.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.RichTextTipPainter.myReflowedRichTextBlockUpToDate">
            <summary>
            Whether the <see cref="F:JetBrains.CommonControls.RichTextTipPainter.myReflowedRichTextBlock"/> is valid. Use <see cref="M:JetBrains.CommonControls.RichTextTipPainter.GetReflowedRichTextBlock(System.Drawing.Graphics)"/>.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.RichTextTipPainter.myRenderParams">
            <summary>
            Rendering aspect.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.RichTextTipPainter.myRichTextBlock">
            <summary>
            Content.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.RichTextTipPainter.myWidthConstraint">
            <summary>
            The current width constraint.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.RichTextTipPainter.myWantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.RichTextTipPainter.#ctor(JetBrains.UI.RichText.RichText)">
            <summary>
            Creates the painter over a rich text.
            If the text contains line breaks, it's splitted into several <see cref="P:JetBrains.CommonControls.RichTextTipPainter.RichTextBlock"/> lines.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.RichTextTipPainter.#ctor(JetBrains.UI.RichText.RichTextBlock,JetBrains.UI.RenderParams)">
            <summary>
            Creates the painter over a rich text block.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.RichTextTipPainter.#ctor(JetBrains.UI.RichText.RichTextBlock)">
            <summary>
            Creates the painter over a rich text block.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.RichTextTipPainter.GetReflowedRichTextBlock(System.Drawing.Graphics)">
            <summary>
            Gets the reflowed rich text block.
            Lazily reflows the original block if needed.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.RichTextTipPainter.GetDesiredSize(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Performs the bottom-up layouting stage, when the control calculates its desired size using the given constraints.
            Should give generally the same results as <see cref="T:JetBrains.CommonControls.IConstrainableControl"/>, but could employ the <paramref name="gc"/> device context for the sake of optimization.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="limit">The maximum available space (that could affect the shape of the control, or strip down unnecessary calculations over the invisible items).
            May be a <see cref="T:System.Drawing.Size"/> with width and height equal to <see cref="F:System.Int32.MaxValue"/>, which means that the size is not limited.</param>
            <returns>The desired size, must be no larger than <paramref name="limit"/>.</returns>
        </member>
        <member name="M:JetBrains.CommonControls.RichTextTipPainter.Paint(System.Drawing.Graphics)">
            <summary>
            Renders the context of the windowless control. The rendering bounds are given by the 
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:JetBrains.CommonControls.RichTextTipPainter.SetBounds(JetBrains.UI.IGraphicsContainer,System.Drawing.Rectangle)">
            <summary>
            Performs the top-down layouting stage, when the control lais out its parts within the given bounds.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="bounds">The available space.</param>
        </member>
        <member name="M:JetBrains.CommonControls.RichTextTipPainter.SetLayout(JetBrains.UI.LayoutResult)">
            <summary>
            Tells the control the details about the new layout applied to it by the controlling entity in conjunction with some <see cref="T:JetBrains.UI.IPopupLayouter"/>.
            Typically, the control need not apply the given size and location because that should be done by the controlling entity.
            The control may change its presentation in response to the layouting details, for example, whether it's attached to the top or the bottom of the anchoring rect.
            </summary>
            <param name="layout">The layouting details.</param>
        </member>
        <member name="P:JetBrains.CommonControls.RichTextTipPainter.RenderParams">
            <summary>
            Gets or sets the rendering aspect.
            Must not be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.RichTextTipPainter.RichTextBlock">
            <summary>
            Gets or sets the content.
            Must not be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.RichTextTipPainter.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.RichTextTipPainter.Bounds">
            <summary>
            The windowless control bounds in the parent coordinates. The implementor should just store and return the value set by the owner.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.RichTextTipPainter.GottenDirty">
            <summary>
            The control has gotten dirty and should be repainted.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.RichTextTipPainter.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="T:JetBrains.UI.CommonControls.TableLayoutPanelColored">
            <summary>
            Changes the background without actually changing the backcolor, to avoid inheritance to children.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonControls.TableLayoutPanelColored.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the background of the panel.
            </summary>
            
            <param name="args">A <see cref="T:System.Windows.Forms.PaintEventArgs"></see>  that contains information about the panel to paint.</param>
        </member>
        <member name="P:JetBrains.UI.CommonControls.TableLayoutPanelColored.FillColor">
            <summary>
            Gets or sets the fill color that won't propagate to the children.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.VsFlatColorTable.GetAlphaBlendedColor(System.Drawing.Graphics,System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
            Blends two colors.
            </summary>
            <param name="g">Device context to get the nearest color from. May be <c>Null</c>, in which case the exact color is returned.</param>
            <param name="src">The first color.</param>
            <param name="dest">The second color.</param>
            <param name="alpha">The alpha value in the [0…FF] range.</param>
            <returns>The blended color, constrained to the device context or not.</returns>
        </member>
        <member name="T:JetBrains.CommonControls.WindowlessControl">
            <summary>
            Helper class for various <see cref="T:JetBrains.CommonControls.IWindowlessControl"/> implementations.
            Mostly, dispatches the creation of various windowless controls for optimal performance.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonDialogs.PromptWinForm.ShowDialog">
            <summary>
            Shows the prompt form with the <see cref="P:JetBrains.UI.Application.UIApplicationShell.MainWindow"/> as the parent.
            Returns whether the user accepted the change.
            </summary>
        </member>
        <member name="F:JetBrains.UI.CommonDialogs.PromptWinForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.UI.CommonDialogs.PromptWinForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.UI.CommonDialogs.PromptWinForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.RichTextHeading">
            <summary>
            Renders a multiline wrappable heading with one bold paragraph and one normal-text paragraph. 
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.RichTextHeading.myLabelBody">
            <summary>
            Normal text part.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.RichTextHeading.myLabelTitle">
            <summary>
            Bold text part.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextHeading.Body">
            <summary>
            Gets or sets the body part of the heading.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextHeading.Title">
            <summary>
            Gets or sets the title part of the heading.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.ToolStripEx">
            <summary>
            This class adds click-through behaviour to ToolStrip
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.ToolStripEx.ClickThrough">
            <summary>
            Gets or sets whether the ToolStripEx honors item clicks when its containing form does
            not have input focus.
            </summary>
            <remarks>
            Default value is false, which is the same behavior provided by the base ToolStrip class.
            </remarks>
        </member>
        <member name="M:JetBrains.ActionManagement.ActionStripSplitButton.OnClick(System.EventArgs)">
            <summary>Raises the <see cref="E:System.Windows.Forms.Control.Click"></see> event.</summary>
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        </member>
        <member name="M:JetBrains.ActionManagement.ActionStripSplitButton.OnCheckedChanged(System.EventArgs)">
            <summary>Raises the <see cref="E:JetBrains.ActionManagement.ActionStripSplitButton.CheckedChanged"></see> event.</summary>
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        </member>
        <member name="M:JetBrains.ActionManagement.ActionStripSplitButton.OnCheckStateChanged(System.EventArgs)">
            <summary>Raises the <see cref="E:JetBrains.ActionManagement.ActionStripSplitButton.CheckStateChanged"></see> event.</summary>
            <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        </member>
        <member name="P:JetBrains.ActionManagement.ActionStripSplitButton.Checked">
            <summary>Gets or sets a value indicating whether the <see cref="T:System.Windows.Forms.ToolStripButton"></see> is pressed or not pressed.</summary>
            <returns>true if the <see cref="T:System.Windows.Forms.ToolStripButton"></see> is pressed in or not pressed in; otherwise, false. The default is false.</returns>
        </member>
        <member name="P:JetBrains.ActionManagement.ActionStripSplitButton.CheckOnClick">
            <summary>Gets or sets a value indicating whether the <see cref="T:System.Windows.Forms.ToolStripButton"></see> should automatically appear pressed in and not pressed in when clicked.</summary>
            <returns>true if the <see cref="T:System.Windows.Forms.ToolStripButton"></see> should automatically appear pressed in and not pressed in when clicked; otherwise, false. The default is false.</returns>
        </member>
        <member name="P:JetBrains.ActionManagement.ActionStripSplitButton.CheckState">
            <summary>Gets or sets a value indicating whether the <see cref="T:System.Windows.Forms.ToolStripButton"></see> is in the pressed or not pressed state by default, or is in an indeterminate state.</summary>
            <returns>One of the <see cref="T:System.Windows.Forms.CheckState"></see> values. The default is Unchecked.</returns>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value assigned is not one of the <see cref="T:System.Windows.Forms.CheckState"></see> values. </exception>
        </member>
        <member name="E:JetBrains.ActionManagement.ActionStripSplitButton.CheckedChanged">
            <summary>Occurs when the value of the <see cref="P:JetBrains.ActionManagement.ActionStripSplitButton.Checked"></see> property changes.</summary>
        </member>
        <member name="E:JetBrains.ActionManagement.ActionStripSplitButton.CheckStateChanged">
            <summary>Occurs when the value of the <see cref="P:JetBrains.ActionManagement.ActionStripSplitButton.CheckState"></see> property changes.</summary>
        </member>
        <member name="T:JetBrains.ActionManagement.Impl.ActionInfo">
            <summary>
            Initialization-time Action information
            </summary>
        </member>
        <member name="M:JetBrains.ActionManagement.ActionManagerBase.ExecuteShortcut(System.Windows.Forms.Keys,System.Boolean)">
            <summary>
            Attempts to execute the keyboard shortcut.
            Composite keyboard shortcuts, eg “Ctrl+K,F”, should be executed twice, once for each of the components.
            </summary>
            <param name="shortcut">The keyboard shortcut to execute. May be a part of a composite shortcut.</param>
            <param name="bIncludeHostActions">In a standalone configuration, has no meaning. In an embedded configurations, includes the host actions in the search list together with own actions managed by the action-manager.</param>
            <returns>Whether the action has been executed.</returns>
        </member>
        <member name="M:JetBrains.ActionManagement.ActionManagerBase.OnActionPresentationChanged(JetBrains.ActionManagement.IUpdatableAction,JetBrains.ActionManagement.ActionPresentation,JetBrains.ActionManagement.ActionPresentation)">
            <summary>
            Called when any action changes its presentation during an update.
            </summary>
        </member>
        <member name="T:JetBrains.ActionManagement.ActionsXmlAttribute">
            <summary>
            Use this attribute to specify resource name of XML file with actions configuration
            </summary>
        </member>
        <member name="T:JetBrains.ActionManagement.IExpandCollapseProvider">
            <summary>
            Implement this interface to use standard expand/collapse actions
            </summary>
        </member>
        <member name="M:JetBrains.ActionManagement.ActionBase.GetAction(JetBrains.ActionManagement.IActionHandler)">
            <summary>
            Gets the action that is handled by the given <paramref name="handler"/>, if the handler is a class that has the <see cref="T:JetBrains.ActionManagement.ActionHandlerAttribute"/>.
            </summary>
        </member>
        <member name="T:JetBrains.ActionManagement.ActionHandlerAttribute">
            <summary>
            A class marked with this attribute implements action and is registered at the startup automatically.
            The class must be an inheritor of Action or ActionGroup.
            </summary>
        </member>
        <member name="M:JetBrains.ActionManagement.ActionCollection.InsertAction(System.Int32,JetBrains.ActionManagement.IActionBase)">
            <summary>
            Inserts an action to collection or bounds it to the existing one
            </summary>
            <param name="pos"></param>
            <param name="action"></param>
            <returns>true if inserted new action, false if bound to already existing one</returns>
        </member>
        <member name="T:JetBrains.ActionManagement.DefaultActionHandler">
            <summary>
            Default ActionHandler does nothing
            </summary>
        </member>
        <member name="T:JetBrains.ActionManagement.NextActionHandler">
            <summary>
            NextActionHandler delegate
            </summary>
        </member>
        <member name="T:JetBrains.ActionManagement.ControlActionHandler">
            <summary>
            ActionHandler for actions, that works while the control specified contains focus only.
            </summary>
        </member>
        <member name="T:JetBrains.ActionManagement.IDataContextHolder">
            <summary>
            A menu or toolbar, that holds DataCantext to use by subitems.
            </summary>
        </member>
        <member name="T:JetBrains.ActionManagement.DataContext">
            <summary>
            The only implementation of IDataContext.
            </summary>
        </member>
        <member name="M:JetBrains.ActionManagement.DataContext.GetDataProviders">
            <summary>
            Collects all the available data providers, to query them for a data constant.
            </summary>
        </member>
        <member name="M:JetBrains.ActionManagement.DataContext.TakeSnapshot(JetBrains.ActionManagement.IDataConstant[])">
            <summary>
            A data context has a limited lifetime.
            Takes snapshot of the current data context by dupming the available information into a property bag.
            </summary>
            <param name="constants">Some of the constants in an <see cref="T:JetBrains.ActionManagement.IDataContext"/> cannot be enumerated, as they're coming from an external provider. The constants listed in this parameter are explicitly queried for.</param>
        </member>
        <member name="M:JetBrains.ActionManagement.DataContextEx.ToPropertyId(JetBrains.ActionManagement.IDataConstant)">
            <summary>
            Creates a property ID identified by a data constant.
            We convert it to a generic <see cref="T:JetBrains.ActionManagement.DataConstant`1"/> type, and then instantiate <see cref="T:JetBrains.ActionManagement.DataConstantPropertyId`1"/> for the same <c>T</c>.
            </summary>
        </member>
        <member name="M:JetBrains.ActionManagement.DataContextEx.ToPropertyId``1(JetBrains.ActionManagement.DataConstant{``0})">
            <summary>
            Creates a property ID identified by a data constant.
            </summary>
        </member>
        <member name="M:JetBrains.ActionManagement.DataContextEx.ToPropertyBag(JetBrains.ActionManagement.IDataContext,JetBrains.ActionManagement.IDataConstant[])">
            <summary>
            Creates a new property bag with a snapshot of this data context.
            </summary>
        </member>
        <member name="T:JetBrains.ActionManagement.EscapeActionHandlerBase">
            <summary>
            Base class for implementing escape action handlers
            </summary>
        </member>
        <member name="M:JetBrains.ActionManagement.OneOfaListActionHandler.IsAvailable(JetBrains.ActionManagement.IDataContext)">
            <summary>
            When overriden in inheritors determines whether the handler is available in the current context.
            </summary>
        </member>
        <member name="M:JetBrains.ActionManagement.OneOfaListActionHandler.Execute(JetBrains.ActionManagement.IDataContext)">
            <summary>
            When overriden in inheritors performs the handler action
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.ActiveRichText.FontInfo">
            <summary>
            Font information
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.ActiveRichText.FormattedText">
            <summary>
            Text markup
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.ActiveRichText.FormattedText.Lines">
            <summary>
            Gets array of lines to paint
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.ActiveRichText.IActiveText">
            <summary>
            Represents an active text
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.ActiveRichText.IActiveText.Paint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint the text
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.ActiveRichText.IActiveText.CalculateHeight(System.Drawing.Graphics,System.Int32)">
            <summary>
            Gets text full height
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.ActiveRichText.IActiveText.NotifyMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Notify active text about mouse move
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.ActiveRichText.IActiveText.GetAnchor(System.Drawing.Point)">
            <summary>
            Gets currently hovered anchor
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.ActiveRichText.IActiveText.ColorScheme">
            <summary>
            Gets or sets color scheme
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.ActiveRichText.IActiveText.Content">
            <summary>
            Gets or sets content
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.ActiveRichText.IActiveText.DefaultFont">
            <summary>
            Gets or sets default font for text
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.ActiveRichText.Impl.TextMarkup">
            <summary>
            Summary description for MarkupModel.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.ActiveRichText.TextLine">
            <summary>
            Line of text
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.ActiveRichText.TextPart">
            <summary>
            Part of text line with common text attributes
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.FormBase">
            <summary>
            The base class for dialogs that are owned by the DevEnv main window.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.SizeConstraint">
            <summary>
            Represents a constraint on control size
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.SizeConstraint.ConstrainingSize">
            <summary>
            Gets the width and height representing the current constraint.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.StringCollectionEdit.Caption">
            <summary>
            Caption above the strings list.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.StringCollectionEdit.ItemIcon">
            <summary>
            Icon for the items in the list.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.StringCollectionEdit.Items">
            <summary>
            Items in the editable list.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.StringCollectionEdit.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.Control"></see> and its child controls and optionally releases the managed resources.
            </summary>
            
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
        </member>
        <member name="T:JetBrains.CommonControls.IPresentableItem">
            <summary>
            Provides mechanism for specifying most common data for presentation items.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.IPresentableItem.Clear">
            <summary>
            Clears item's images and text.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.IPresentableItem.RichText">
            <summary>
            Gets or sets <see cref="P:JetBrains.CommonControls.IPresentableItem.RichText"/> object to specify text presentation.
            Must not be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.IPresentableItem.Images">
            <summary>
            Gets collection of images that are painted before text.
            Must not be <c>Null</c>.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.IPresentableItemImageOwner">
            <summary>
            Provides mechanism for notification of changes in image collection of <see cref="T:JetBrains.CommonControls.IPresentableItem"/>.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.IPresentableItemImageOwner.NotifyImageCollectionChanged">
            <summary>
            Called when image collection has been changed.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItem.#ctor(System.Drawing.Image)">
            <summary>
            Creates an icon-only presentable item.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItem.#ctor(System.Drawing.Image,JetBrains.UI.RichText.RichText)">
            <summary>
            Creates a presentable item that is a labeled icon, with icon on the left.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItem.#ctor(JetBrains.CommonControls.IPresentableItem)">
            <summary>
            Creates a static snapshot of the given presentable item.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.ToolbarButton">
            <summary>
            Special nice button like in IDEA
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.ControlUtil">
            <summary>
            Utils for accessing controls
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.ControlUtil.CenterInMainWindow(System.Drawing.Size)">
            <summary>
            Centers the <paramref name="size"/>-sized rectangle over the main window, checks that it falls in screen.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.ControlUtil.CenterInWindow(System.IntPtr,System.Drawing.Size)">
            <summary>
            Centers the <paramref name="size"/>-sized rectangle over the <paramref name="hwndOwner"/> window, checks that it falls in screen.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.ControlUtil.FitToScreen(System.Drawing.Rectangle)">
            <summary>
            Ensures the given bounds fall within a screen.
            Prefers to rather move than downsize.
            Chooses the screen that contains most of the initial <paramref name="bounds"/>.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.ControlUtil.GetFocusedControl">
            <summary>
            Returns the control that currently has focus, or <c>Null</c> if either none of our windows has focus, or the focused window is not a control.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JetBrains.CommonControls.Utils.DefaultNodeEqualityRelationship">
            <summary>
            Defines basic equality relationship based on tag equality
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.Utils.IDevExpressTreeState">
            <summary>
            Describes state of a DevExpress TreeList control. Includes things like currently selected nodes,
            expanded nodes and scrolling position
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Utils.IDevExpressTreeState.Apply(DevExpress.XtraTreeList.TreeList)">
            <summary>
            Apply state to a tree list control
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.ImagePlacement">
            <summary>
            Specify placement of the image.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.ImagePlacement.LEFT">
            <summary>
            Image is placed to the left of other text.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.ImagePlacement.RIGHT">
            <summary>
            Image is placed to the right of other text.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItemBlock.#ctor(System.Drawing.Image)">
            <summary>
            Creates an icon-only presentable item.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItemBlock.#ctor(System.Drawing.Image,JetBrains.UI.RichText.RichTextBlock)">
            <summary>
            Creates a presentable item that is a labeled icon, with icon on the left.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItemBlock.#ctor(JetBrains.CommonControls.PresentableItemBlock)">
            <summary>
            Creates a static snapshot of the given presentable item.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.PresentableItemBlockRenderer">
            <summary>
            Utility class to reneder <see cref="T:JetBrains.CommonControls.PresentableItemBlock"/> 
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItemBlockRenderer.Render(System.Drawing.Graphics,JetBrains.CommonControls.PresentableItemBlock,System.Drawing.Rectangle,JetBrains.UI.RenderParams)">
            <summary>
            Renders <see cref="T:JetBrains.CommonControls.PresentableItemBlock"/> object on the specified graphics in the specified bounds.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object to render on.</param>
            <param name="item"><see cref="T:JetBrains.CommonControls.PresentableItemBlock"/> to render.</param>
            <param name="bounds">Bounds to render in.</param>
            <param name="renderparams">Additional information about rendering.</param>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItemBlockRenderer.GetTextBounds(System.Drawing.Graphics,System.Drawing.Rectangle,JetBrains.CommonControls.PresentableItemBlock,JetBrains.UI.RenderParams)">
            <summary>
            Calculates rectangle of the RichText for specified bounds and rendering parameters.
            </summary>
            <param name="g">Graphics to measure against.</param>
            <param name="bounds">Bounds to measure in.</param>
            <param name="item"><see cref="T:JetBrains.CommonControls.PresentableItemBlock"/> to measure.</param>
            <param name="renderparams">Additional information about rendering.</param>
            <returns>Rectangle for the RichText.</returns>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItemBlockRenderer.HitTest(System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Rectangle,JetBrains.CommonControls.PresentableItemBlock,JetBrains.UI.RenderParams,System.Drawing.Rectangle@)">
            <summary>
            Finds subobject of <see cref="T:JetBrains.CommonControls.PresentableItemBlock"/> object in the specified point.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object to test on.</param>
            <param name="bounds">Bounds to test in.</param>
            <param name="item"><see cref="T:JetBrains.CommonControls.PresentableItemBlock"/> to analyze.</param>
            <param name="renderparams">Additional information about rendering.</param>
            <param name="hitPoint">Point to test for.</param>
            <param name="hitRect">Rectangle of the element at the specified location, or <see cref="F:System.Drawing.Rectangle.Empty"/> if no element was found.</param>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItemBlockRenderer.Measure(System.Drawing.Graphics,JetBrains.CommonControls.PresentableItemBlock,JetBrains.UI.RenderParams)">
            <summary>
            Renders <see cref="T:JetBrains.CommonControls.PresentableItemBlock"/> object on the specified graphics in the specified bounds.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object to render on.</param>
            <param name="item"><see cref="T:JetBrains.CommonControls.PresentableItemBlock"/> to render.</param>
            <param name="renderParams">Additional information about rendering.</param>
        </member>
        <member name="T:JetBrains.CommonControls.PresentableItemRenderer">
            <summary>
            Utility class to reneder <see cref="T:JetBrains.CommonControls.IPresentableItem"/> 
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItemRenderer.Render(System.Drawing.Graphics,JetBrains.CommonControls.IPresentableItem,System.Drawing.Rectangle,JetBrains.UI.RenderParams)">
            <summary>
            Renders <see cref="T:JetBrains.CommonControls.IPresentableItem"/> object on the specified graphics in the specified bounds.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object to render on.</param>
            <param name="item"><see cref="T:JetBrains.CommonControls.IPresentableItem"/> to render.</param>
            <param name="bounds">Bounds to render in.</param>
            <param name="renderparams">Additional information about rendering.</param>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItemRenderer.GetTextBounds(System.Drawing.Graphics,System.Drawing.Rectangle,JetBrains.CommonControls.IPresentableItem,JetBrains.UI.RenderParams)">
            <summary>
            Calculates rectangle of the RichText for specified bounds and rendering parameters.
            </summary>
            <param name="g">Graphics to measure against.</param>
            <param name="bounds">Bounds to measure in.</param>
            <param name="item"><see cref="T:JetBrains.CommonControls.IPresentableItem"/> to measure.</param>
            <param name="renderparams">Additional information about rendering.</param>
            <returns>Rectangle for the RichText.</returns>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItemRenderer.HitTest(System.Drawing.Graphics,System.Drawing.Point,System.Drawing.Rectangle,JetBrains.CommonControls.IPresentableItem,JetBrains.UI.RenderParams,System.Drawing.Rectangle@)">
            <summary>
            Finds subobject of <see cref="T:JetBrains.CommonControls.IPresentableItem"/> object at the specified point.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object to test on.</param>
            <param name="bounds">Bounds to test in.</param>
            <param name="item"><see cref="T:JetBrains.CommonControls.IPresentableItem"/> to analyze.</param>
            <param name="renderparams">Additional information about rendering.</param>
            <param name="hitPoint">Point to test for.</param>
            <param name="elementRect">Rectangle of the element at the specified location, or <see cref="F:System.Drawing.Rectangle.Empty"/> if no element was found.</param>
        </member>
        <member name="M:JetBrains.CommonControls.PresentableItemRenderer.Measure(System.Drawing.Graphics,JetBrains.CommonControls.IPresentableItem,JetBrains.UI.RenderParams)">
            <summary>
            Measures <see cref="T:JetBrains.CommonControls.IPresentableItem"/> object on the specified graphics 
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> object to measure on.</param>
            <param name="item"><see cref="T:JetBrains.CommonControls.IPresentableItem"/> to measure.</param>
            <param name="renderParams">Additional information about measuring.</param>
            <returns>Size of the item</returns>
        </member>
        <member name="M:JetBrains.CommonControls.VsSpecialColorTable.GetAlphaBlendedColor(System.Drawing.Graphics,System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
            Blends two colors.
            </summary>
            <param name="g">Device context to get the nearest color from. May be <c>Null</c>, in which case the exact color is returned.</param>
            <param name="src">The first color.</param>
            <param name="dest">The second color.</param>
            <param name="alpha">The alpha value in the [0…FF] range.</param>
            <returns>The blended color, constrained to the device context or not.</returns>
        </member>
        <member name="T:JetBrains.UI.Components.CustomListBox.CustomListBoxControl`1">
            <summary>
            A list box with a custom painter.
            </summary>
            <typeparam name="T">Type of the listbox items.</typeparam>
        </member>
        <member name="F:JetBrains.UI.Components.CustomListBox.CustomListBoxControl`1.myItemPainter">
            <summary>
            The item painter to use.
            </summary>
        </member>
        <member name="E:JetBrains.UI.Components.CustomListBox.CustomListBoxControl`1.Scrolled">
            <summary>
            Fires when the list box is scrolled.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Components.CustomListBox.IItemPainter`1">
            <summary>
            Interface for creating custom painters
            </summary>
        </member>
        <member name="M:JetBrains.UI.Components.CustomListBox.IItemPainter`1.IsHandled(`0)">
            <summary>
            Checks if a given Item can be handled by the painter
            </summary>
            <param name="item">The Item to check</param>
            <returns><c>true</c> if the Item can be handled, <c>false</c> it cannot.</returns>
        </member>
        <member name="M:JetBrains.UI.Components.CustomListBox.IItemPainter`1.GetSize(`0,JetBrains.UI.IGraphicsContainer)">
            <summary>
            Returns size of an item
            </summary>
        </member>
        <member name="M:JetBrains.UI.Components.CustomListBox.IItemPainter`1.Draw(`0,System.Drawing.Graphics,System.Drawing.Rectangle,JetBrains.UI.Components.CustomListBox.DrawMode)">
            <summary>
            Draws a given Item in specified rectangle
            </summary>
            <remarks>
            If the Item cannot be handled, the method should do nothing
            </remarks>
            <param name="item">The Item to draw</param>
            <param name="g">Graphics to draw in</param>
            <param name="rect">Bounding rectangle to use</param>
        </member>
        <member name="T:JetBrains.UI.Components.ImageListButton.ImageListButton">
            <summary>
            A simple button which draws one of four images from the image list depending on its
            state.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Controls.RichTextLabel">
            <summary>
            A rich text label control capable of autosizing.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.RichTextLabel.myFormattedBlock">
            <summary>
            The <see cref="P:JetBrains.UI.Controls.RichTextLabel.RichTextBlock"/> formatted to fit the width.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.RichTextLabel.myMapWidthToSize">
            <summary>
            Caches the width-to-size mappings for quick access.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Controls.RichTextLabel.myRichTextBlock">
            <summary>
            The rich text, as set by the user.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.RichTextLabel.#ctor">
            <summary>
            Constructs a default rich text label.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.RichTextLabel.#ctor(JetBrains.UI.RichText.RichTextBlock,System.Windows.Forms.Padding)">
            <summary>
            Creates a rich text label, setting the given text and changing the default margin.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.RichTextLabel.#ctor(JetBrains.UI.RichText.RichTextBlock)">
            <summary>
            Creates a rich text label, setting the given text.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.RichTextLabel.UpdateTextBlock">
            <summary>
            Reflows the formatted text block to the new width.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.RichTextLabel.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Controls.RichTextLabel.ProcessMnemonic(System.Char)">
            <summary>
            Processes a mnemonic character.
            </summary>
            
            <returns>
            true if the character was processed as a mnemonic by the control; otherwise, false.
            </returns>
            
            <param name="charCode">The character to process. </param>
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextLabel.DefaultRichTextLabelRenderParams">
            <summary>
            Gets the render params the rich text labels use by default.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextLabel.Mnemonic">
            <summary>
            Gets or sets the accelerator keystroke of the control.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextLabel.RenderParams">
            <summary>
            Gets or sets the rendering aspect for the text.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextLabel.RichText">
            <summary>
            Gets or sets the rich text associated with the control.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextLabel.RichTextBlock">
            <summary>
            Gets or sets the formatted text displayed by this label.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextLabel.BackColor">
            <summary>
            Gets or sets the background color for the control.
            </summary>
            
            <returns>
            A <see cref="T:System.Drawing.Color"></see> that represents the background color of the control. The default is the value of the <see cref="P:System.Windows.Forms.Control.DefaultBackColor"></see> property.
            </returns>
            <filterpriority>1</filterpriority><PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextLabel.DisplayRectangle">
            <summary>
            Gets the rectangle that represents the display area of the control.
            </summary>
            
            <returns>
            A <see cref="T:System.Drawing.Rectangle"></see> that represents the display area of the control.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextLabel.Font">
            <summary>
            Gets or sets the <see cref="P:JetBrains.UI.RenderParams.Font"/> proeprty of the <see cref="P:JetBrains.UI.Controls.RichTextLabel.RenderParams"/>.
            </summary>
            
            <returns>
            The <see cref="T:System.Drawing.Font"></see> to apply to the text displayed by the control. The default is the value of the <see cref="P:System.Windows.Forms.Control.DefaultFont"></see> property.
            </returns>
            <filterpriority>1</filterpriority><PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence"/><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/></PermissionSet>
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextLabel.ForeColor">
            <summary>
            Gets or sets the foreground color of the control.
            </summary>
            
            <returns>
            The foreground <see cref="T:System.Drawing.Color"></see> of the control. The default is the value of the <see cref="P:System.Windows.Forms.Control.DefaultForeColor"></see> property.
            </returns>
            <filterpriority>1</filterpriority><PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="P:JetBrains.UI.Controls.RichTextLabel.Text">
            <summary>
            Gets or sets the text associated with this control.
            </summary>
            
            <returns>
            The text associated with this control.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="F:JetBrains.UI.Components.Separator.Separator.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Components.Separator.Separator.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Components.Separator.Separator.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:JetBrains.UI.ImageLoader">
            <summary>
            Loads images from assemblies.
            Looks up the image by name in several assemblies in this order:
            (0) The calling assembly.
            (1) Maunal override (specified explicitly in <see cref="M:JetBrains.UI.ImageLoader.GetImage(System.String,System.Reflection.Assembly[])"/> call and alike).
            (2) Product configuration assembly, as given by the <see cref="P:JetBrains.Application.IApplicationDescriptor.ConfigurationAssembly"/>.
            (3) Platform UI assembly (the own assembly of the <see cref="T:JetBrains.UI.ImageLoader"/>).
            A fallback to the next step occurs if either the assembly is not available (eg manual override is <c>Null</c>), or the image could not be found in the assembly.
            </summary>
        </member>
        <member name="F:JetBrains.UI.ImageLoader.ImageRequested">
            <summary>
            Fires when an image is being resolved. Allows to override
            </summary>
        </member>
        <member name="M:JetBrains.UI.ImageLoader.ClearCache">
            <summary>
            Drops the cache of already-resolved bitmaps, causing them to be re-resolved when next requested.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ImageLoader.GetImage(System.String,System.Reflection.Assembly[])">
            <summary>
            Loads an image preferring the <param name="assemblies"/> assembly, see class description for the search algorithm.
            Throws if the image could not be found.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ImageLoader.HasImage(System.String,System.Reflection.Assembly[])">
            <summary>
            Checks whether an image exists, preferring the <param name="assemblies"/> assembly, see class description for the search algorithm.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ImageLoader.TryGetImage(System.String,System.Reflection.Assembly[])">
            <summary>
            Loads an image preferring the <param name="assemblies"/> assembly, see class description for the search algorithm.
            Returns <c>Null</c> if the image could not be found.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ImageLoader.DetachBitmapFromStream(System.IO.Stream)">
            <summary>
            The stream cannot be closed while the bitmap created on it still exists.
            Creates a new bitmap that is detached from the stream.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ImageLoader.GetImageRaw(JetBrains.UI.ImageLoader.ImageId,System.Boolean)">
            <summary>
            Implements [Try]GetImage.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ImageLoader.InternalTryGetImageStream(JetBrains.UI.ImageLoader.ImageId)">
            <summary>
            The central implementation method. Actually looks up the imagery.
            </summary>
        </member>
        <member name="P:JetBrains.UI.ImageLoader.Placeholder">
            <summary>
            Gets the default placeholder image to be used in place of images yet to be drawn.
            </summary>
        </member>
        <member name="T:JetBrains.UI.ImageLoader.ImageId">
            <summary>
            Image assembly + relative path in that assembly.
            </summary>
        </member>
        <member name="M:JetBrains.UI.ImageLoader.ImageId.#ctor(System.String,System.Reflection.Assembly[],System.Reflection.Assembly)">
            <summary>
            Describes an image.
            </summary>
            <param name="path">The image name, relative path to it.</param>
            <param name="assemblies">Overriding assemblies to look at.</param>
            <param name="caller">The caller assembly that has the highest priority ever.</param>
        </member>
        <member name="F:JetBrains.UI.ImageLoader.ImageId.AssembliesEligibleDefault">
            <summary>
            The list of default image-bearing assemblies.
            They're the product configuration assembly and Platform UI assembly, in order of ascending priority (the first overrides).
            </summary>
        </member>
        <member name="P:JetBrains.UI.ImageLoader.ImageId.Assemblies">
            <summary>
            Manual override assembly (look here first, then in the default ones).
            May be <c>Null</c> to look in defaults only.
            </summary>
        </member>
        <member name="P:JetBrains.UI.ImageLoader.ImageId.AssembliesEligible">
            <summary>
            Gets the list of assemblies eligible of looking for the icon. Any of them may be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.ImageLoader.ImageId.Path">
            <summary>
            Path to the icon under the assembly's “icons” namespace.
            </summary>
        </member>
        <member name="T:JetBrains.UI.ImageLoader.ImageRequestEventArgs">
            <summary>
            Args for requesting the image to be resolved.
            </summary>
        </member>
        <member name="P:JetBrains.UI.ImageLoader.ImageRequestEventArgs.Assembly">
            <summary>
            Gets the assembly in which to look up the image requested.
            If the image could not be determined in any of the assemblies, the last call comes with a <c>Null</c> as the last resort.
            </summary>
        </member>
        <member name="P:JetBrains.UI.ImageLoader.ImageRequestEventArgs.ImageStream">
            <summary>
            Gets or sets the image stream that is the result of the resolver operation.
            </summary>
        </member>
        <member name="P:JetBrains.UI.ImageLoader.ImageRequestEventArgs.Name">
            <summary>
            Gets the name of the image requested, as was specified by the caller to <see cref="T:JetBrains.UI.ImageLoader"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.ImageLoader.ImageRequestEventArgs.PerAssemblyPath">
            <summary>
            Gets the path to the image that is produced from the <see cref="P:JetBrains.UI.ImageLoader.ImageRequestEventArgs.Name"/> by prepending the <see cref="P:JetBrains.UI.ImageLoader.ImageRequestEventArgs.Assembly"/>-specific resource namespace prefix.
            </summary>
        </member>
        <member name="T:JetBrains.UI.ImagesBaseAttribute">
            <summary>
            When set on an assembly, hints on the base Resource Path for the images from that assembly.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.Helpers.AEmptyOptionsPage">
            <summary>
            Represents an empty options page that just holds a grouping node in the tree.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.IOptionsPage">
            <summary>
            Represents a page in the options dialog.
            Class implementing this interface should be marked with <see cref="T:JetBrains.UI.Options.OptionsPageAttribute"/> attribute
            and have public constructor taking one argument of <see cref="T:JetBrains.UI.Options.IOptionsDialog"/> type to be loaded.
            It is recommended to name the leaf classes against the <c>{Title}Page</c> pattern, where <c>Title</c> is the display name of the page in the Options dialog tree and title bar. This way, it will be readily locatable in the code.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.IOptionsPage.OnOk">
            <summary>
            Invoked when OK button in the options dialog is pressed.
            If the page returns <c>false</c>, the the options dialog won't be closed, and focus will be put into this page.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.IOptionsPage.ValidatePage">
            <summary>
            Check if the settings on the page are consistent, and page could be closed.
            </summary>
            <returns><c>true</c> if page data is consistent.</returns>
        </member>
        <member name="P:JetBrains.UI.Options.IOptionsPage.Control">
            <summary>
            Control to be shown as page.
            May be <c>Null</c> if the page does not have any UI.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.IOptionsPage.Id">
            <summary>
            Gets the ID of this option page.
            <see cref="T:JetBrains.UI.Options.IOptionsDialog"/> or <see cref="T:JetBrains.UI.Options.OptionsPageDescriptor"/> could be used to retrieve the <see cref="T:JetBrains.UI.Options.OptionsManager"/> out of it.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.AEmptyOptionsPage.OnOk">
            <summary>
            Invoked when OK button in the options dialog is pressed.
            If the page returns <c>false</c>, the the options dialog won't be closed, and focus will be put into this page.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.AEmptyOptionsPage.ValidatePage">
            <summary>
            Check if the settings on the page are consistent, and page could be closed.
            </summary>
            <returns><c>true</c> if page data is consistent.</returns>
        </member>
        <member name="P:JetBrains.UI.Options.Helpers.AEmptyOptionsPage.Control">
            <summary>
            Control to be shown as page.
            May be <c>Null</c> if the page does not have any UI.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.Helpers.AEmptyOptionsPage.Id">
            <summary>
            Gets the ID of this option page.
            <see cref="T:JetBrains.UI.Options.IOptionsDialog"/> or <see cref="T:JetBrains.UI.Options.OptionsPageDescriptor"/> could be used to retrieve the <see cref="T:JetBrains.UI.Options.OptionsManager"/> out of it.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.Helpers.AStackPanelOptionsPage">
            <summary>
            A base options page that features a vertical stack panel and maintains the bindings list.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.AStackPanelOptionsPage.#ctor(System.String)">
            <summary>
            Inits the base, sets the PID that will be given out thru <see cref="P:JetBrains.UI.Options.IOptionsPage.Id"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.AStackPanelOptionsPage.Bind``1(JetBrains.DataFlow.IProperty{``0},JetBrains.DataFlow.IProperty{``0})">
            <summary>
            Adds a one-way binding that is executed backwards on OK.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.AStackPanelOptionsPage.Bind(JetBrains.DataFlow.IPropertyBinding)">
            <summary>
            Adds a one-way binding that is executed backwards on OK.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.AStackPanelOptionsPage.AddRef(System.IDisposable)">
            <summary>
            Adds a reference so that it's held until the form is disposed of, after which it's disposed of.
            </summary>
            <param name="ref"></param>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.AStackPanelOptionsPage.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.Control"></see> and its child controls and optionally releases the managed resources.
            </summary>
            
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.AStackPanelOptionsPage.OnOk">
            <summary>
            Invoked when OK button in the options dialog is pressed.
            If the page returns <c>false</c>, the the options dialog won't be closed, and focus will be put into this page.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.AStackPanelOptionsPage.ValidatePage">
            <summary>
            Check if the settings on the page are consistent, and page could be closed.
            </summary>
            <returns><c>true</c> if page data is consistent.</returns>
        </member>
        <member name="P:JetBrains.UI.Options.Helpers.AStackPanelOptionsPage.Control">
            <summary>
            Control to be shown as page.
            May be <c>Null</c> if the page does not have any UI.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.Helpers.AStackPanelOptionsPage.Id">
            <summary>
            Gets the ID of this option page.
            <see cref="T:JetBrains.UI.Options.IOptionsDialog"/> or <see cref="T:JetBrains.UI.Options.OptionsPageDescriptor"/> could be used to retrieve the <see cref="T:JetBrains.UI.Options.OptionsManager"/> out of it.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.Helpers.Controls">
            <summary>
            Pre-styled controls for the option pages.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.Helpers.Controls.Indent">
            <summary>
            Padding for the inner level of controls (to be laid out under the logically parenting controls)
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.Controls.AddColumnChild(System.Windows.Forms.TableLayoutPanel,System.Int32,System.Windows.Forms.Control)">
            <summary>
            Adds a child control to the next column of the grid.
            </summary>
            <param name="grid">Grid.</param>
            <param name="child">The control to be added.</param>
            <param name="percent">Percent size, if <c>1</c> to <c>100</c>. AutoSize, if <c>0</c>.</param>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.Controls.AddRowChild(System.Windows.Forms.TableLayoutPanel,System.Int32,System.Windows.Forms.Control)">
            <summary>
            Adds a child control to the next row of the grid.
            </summary>
            <param name="grid">Grid.</param>
            <param name="child">The control to be added.</param>
            <param name="percent">Percent size, if <c>1</c> to <c>100</c>. AutoSize, if <c>0</c>.</param>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.Controls.CreateGrid">
            <summary>
            Creates a grid, pre-set with auto-sizing modes.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.Controls.CreateNoSolutionCueBanner">
            <summary>
            In case we have to disable all the controls on the page without a solution, this function creates a control that should be placed on the page instead of them all.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.Controls.CreateTreeSection(System.String,System.Func{System.Windows.Forms.Control},System.EventHandler,System.EventHandler,System.Boolean)">
            <summary>
            Creates a section with a tree-list, add/remove buttons, and a heading.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.Controls.PushOrigin(System.Drawing.Graphics,System.Drawing.Point)">
            <summary>
            Pushes the graphics context origin shift so that painting at (0,0) rendered at the location specified.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.Controls.PushState(System.Drawing.Graphics)">
            <summary>
            Pushes the graphics state until the return value is disposed of, using the <see cref="M:System.Drawing.Graphics.Save"/> and <see cref="M:System.Drawing.Graphics.Restore(System.Drawing.Drawing2D.GraphicsState)"/> functions.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.Controls.PushSuspendLayout(System.Windows.Forms.Control)">
            <summary>
            Pushes the <see cref="M:System.Windows.Forms.Control.SuspendLayout"/> operation, to be popped on disposal.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.Helpers.Controls.Button">
            <summary>
            A pre-setup auto-sizing button.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.Helpers.Controls.EditBox">
            <summary>
            An edit box.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.Helpers.Controls.HorzStackPanel">
            <summary>
            A pre-setup horizontal stack panel for use on the dialogs.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.Helpers.Controls.Label">
            <summary>
            A pre-setup label for use on the dialogs.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.Helpers.Controls.SectionHeading">
            <summary>
            A heading for the options section.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.Helpers.Controls.Separator">
            <summary>
            Adds vertical space to the vertical stack.
            Makes the stack occupy the whole width.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.Controls.Separator.GetPreferredSize(System.Drawing.Size)">
            <summary>
            Retrieves the size of a rectangular area into which a control can be fitted.
            </summary>
            
            <returns>
            An ordered pair of type <see cref="T:System.Drawing.Size"></see> representing the width and height of a rectangle.
            </returns>
            
            <param name="proposedSize">The custom-sized area for a control. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.Options.Helpers.Controls.Separator.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint"></see> event.
            </summary>
            
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"></see> that contains the event data. </param>
        </member>
        <member name="P:JetBrains.UI.Options.Helpers.Controls.Separator.DefaultHeight">
            <summary>
            Gets the default empty separator of the default height.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.Helpers.Controls.Spin">
            <summary>
            A spin control with an integer property mirroring the <see cref="P:System.Windows.Forms.NumericUpDown.Value"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.Helpers.Controls.Spin.IntegerValue">
            <summary>
            The integer value of the control.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.Helpers.Controls.Timer.IsFiredOnEnable">
            <summary>
            Gets or sets whether the timer will fire the signal immediately when it gets enabled.
            On <c>False</c>: first fires <see cref="P:System.Windows.Forms.Timer.Interval"/> ms after enabling.
            On <c>True</c>: first fires right when it is enabled.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.IOptionsDialog">
            <summary>
            The options dialog interface.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.IOptionsDialog.GetPage(System.String)">
            <summary>
            Fetches <see cref="T:JetBrains.UI.Options.IOptionsPage"/> instance by id.
            This method can be used for fetching values from another page (for dependent pages).
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.IOptionsDialog.CurrentPage">
            <summary>
            Gets or sets the current page in the options dialog.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.IOptionsDialog.DataContext">
            <summary>
            Gets the data context that holds the contextual information about the environment being set up and its state.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.IOptionsManager.AddOptionsPage(System.Type,JetBrains.UI.Options.OptionsPageAttribute)">
            <summary>
            Allows to add an options page dynamically.
            Normally you don't need to use this method. 
            Instead you can mark the class of the page with <see cref="T:JetBrains.UI.Options.OptionsPageAttribute"/> 
            and it will be added (and removed on unloading your plugin) automatically.
            This method should be used when you need to add/remove page depending on some conditions
            and in other non-standard cases.
            </summary>
            <param name="pageClass">Class of the page (should implement <see cref="T:JetBrains.UI.Options.IOptionsPage"/>).</param>
            <param name="attribute">Attribute instance containing all necessary information about the page and position to insert it.</param>
        </member>
        <member name="M:JetBrains.UI.Options.IOptionsManager.GetPageDescriptorById(System.String)">
            <summary>
            Looks up a page descriptor by its ID.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.IOptionsManager.RemoveOptionsPage(System.String)">
            <summary>
            Removes options page added by <see cref="M:JetBrains.UI.Options.OptionsManager.RemoveOptionsPage(System.String)"/> method.
            </summary>
            <param name="pageId">Page id.</param>
        </member>
        <member name="M:JetBrains.UI.Options.IOptionsManager.ShowOptions(System.String)">
            <summary>
            Shows the options dialog with that page selected.
            </summary>
            <param name="pageId">Page id.</param>
        </member>
        <member name="M:JetBrains.UI.Options.IOptionsManager.ShowOptions">
            <summary>
            Shows the options dialog with the MRU page selected.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.IOptionsManager.OptionsDialogBounds">
            <summary>
            Gets the persisted bounds for the Options Dialog, relative to the main window location.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.IOptionsManager.OptionsTreeWidth">
            <summary>
            Gets or sets the width of the Options tree in the Options dialog.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.IOptionsManager.RootPageDescriptor">
            <summary>
            Gets the root page descriptor.
            It is the synthetic universal root that always exists.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.IOptionsManager.SelectedPageId">
            <summary>
            Gets or sets the MRU selected page.
            On load, validates that the MRU page still exists and returns the root page instead of an invalid ID.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.OptionPageViewStore">
            <summary>
            Creates and caches the views of the pages.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionPageViewStore.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.UI.Options.OptionPageViewStore.Views">
            <summary>
            Gets the collection of the views currently in the cache.
            Those are all the pages to take part in the current Options dialog run.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.OptionsDialog">
            <summary>
            Implements the Options Dialog UI.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialog.DefaultHelpKeyword">
            <summary>
            Keyword for the help topic to be opened when the current page does not specify its own keyword.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialog.SplitterDistanceThreshold">
            <summary>
            Threshold under which the splitter is considered to be collapsed.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialog.myDisposablesTreeViewVisible">
            <summary>
            Stores the actions performed while the tree view is visible.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialog.myHistory">
            <summary>
            Maintains the options page navigation history.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialog.myLabelNoContent">
            <summary>
            A label that's displayed when the options page has no content nor children.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialog.myLabelOptionsPageTitle">
            <summary>
            A label that displays the current page title above the page content and child items.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialog.myMenuChildPages">
            <summary>
            A stack with the child pages of the current options page.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialog.myOptionPageViewStore">
            <summary>
            Creates and caches the views of the pages.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialog.myPanelContent">
            <summary>
            A panel that holds either the page content control, or the “no items” label.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialog.mySplitTree">
            <summary>
            The splitter with the tree on the left and the current page on the right.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialog.myToolbarGlobal">
            <summary>
            The dialog-global toolbar.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialog.myToolbarNavigation">
            <summary>
            The dialog-global navigation toolbar.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialog.myToolStripContainer">
            <summary>
            Contains the tool strips and the main content.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialog.OptionNavigation">
            <summary>
            Whether to enable and user-expose the navigation-related features.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialog.CurrentPageProperty">
            <summary>
            Identifies the current page property.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.InitControls">
            <summary>
            Creates and sets up the UI controls.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.InitControls_BodySplitter">
            <summary>
            The splitter that occupies the main body and holds the Options Tree and Preview Area.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.InitControls_ButtonsPanel">
            <summary>
            The bordered panel with dialog buttons, on the bottom.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.InitControls_OptionsTree">
            <summary>
            Prepares the options tree.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.InitControls_PreviewArea">
            <summary>
            Inits the controls that may appear at the preview area.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.OnCurrentPage_Navigation(JetBrains.DataFlow.PropertyChangedEventArgs{JetBrains.UI.Options.IOptionsPage})">
            <summary>
            Updates the navigation indicators as the current page changes.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.OnCurrentPage_Navigation_DialogTitleText(JetBrains.UI.Options.OptionsPageDescriptor)">
            <summary>
            Dialog title.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:JetBrains.UI.Options.OptionsDialog.OnCurrentPage_Navigation_NextPrev(JetBrains.UI.Options.OptionsPageDescriptor)" -->
        <member name="M:JetBrains.UI.Options.OptionsDialog.OnCurrentPage_Navigation_Toolbar(JetBrains.UI.Options.OptionsPageDescriptor)">
            <summary>
            Navigation bar items.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.OnCurrentPage_TreeSelection(JetBrains.DataFlow.PropertyChangedEventArgs{JetBrains.UI.Options.IOptionsPage})">
            <summary>
            Updates selection in the tree as the current page changes.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.OnCurrentPage_View(JetBrains.DataFlow.PropertyChangedEventArgs{JetBrains.UI.Options.IOptionsPage})">
            <summary>
            Displays a new page on the dialog as the current page changes.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.OnCurrentPage_View_InThisSection(JetBrains.UI.Options.OptionsPageDescriptor)">
            <summary>
            The list of the child pages, the “In This Section” control.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.OnCurrentPage_View_NoItemsCueBanner">
            <summary>
            “No Content” label (if there's no content nor child item buttons)
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.OnCurrentPage_View_PageControl(JetBrains.DataFlow.PropertyChangedEventArgs{JetBrains.UI.Options.IOptionsPage})">
            <summary>
            The control that presents the page content.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.OnCurrentPage_View_PageTitle(JetBrains.UI.Options.OptionsPageDescriptor)">
            <summary>
            Title of the page.
            Also features the special “Internal Mode Only” glyphs.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.OnNavigationButtonClicked(System.Object,System.EventArgs)">
            <summary>
            When a button on the navibar is clicked, navigates to the corresponding page.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.OnNavigationButtonDropDownOpening(System.Object,System.EventArgs)">
            <summary>
            A drop-down has been clicked on the navigation bar.
            Populate the drop-down list with items.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.OnTreeViewSelectionChanged(System.Object,System.EventArgs)">
            <summary>
            When selection changes in the tree, opens another page.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.OnTreeViewSelectionChanged_GetPageToSelect">
            <summary>
            Attempts to choose a page to open.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.OnTreeViewVisibleChanged(System.Object,System.EventArgs)">
            <summary>
            We track the tree visibility, it only starts working when becomes visible.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.Dispose(System.Boolean)">
            <summary>
            Disposes of the resources (other than memory) used by the <see cref="T:System.Windows.Forms.Form"></see>.
            </summary>
            
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Form.Closing"></see> event.
            </summary>
            
            <param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs"></see> that contains the event data. </param>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.OnHelpButtonClicked(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Form.HelpButtonClicked"></see> event.
            </summary>
            
            <param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs"></see> that contains the event data. </param>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.KeyDown"></see> event.
            </summary>
            
            <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs"></see> that contains the event data. </param>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.GetPage(System.String)">
            <summary>
            Fetches <see cref="T:JetBrains.UI.Options.IOptionsPage"/> instance by id.
            This method can be used for fetching values from another page (for dependent pages).
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.OptionsDialog.CurrentPage">
            <summary>
            Gets or sets the current page in the options dialog.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.OptionsDialog.DataContext">
            <summary>
            Gets the data context that holds the contextual information about the environment being set up and its state.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.OptionsDialog.History">
            <summary>
            Maintains the options page navigation history.
            Operates on string IDs.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialog.History.myPageHistoryList">
            <summary>
            Stores the history of the visited pages, back and forth the current one.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialog.History.MaximumHistoryDepth">
            <summary>
            The maximum length of the <see cref="F:JetBrains.UI.Options.OptionsDialog.History.myPageHistoryList"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialog.History.CurrentPageId">
            <summary>
            The ID of the current page, an empty string for no current page (the initial value).
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsDialog.History.Index">
            <summary>
            Index of the active item in the history list.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.History.GoTo(System.String)">
            <summary>
            Goes forward to the given ID.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsDialog.History.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.UI.Options.OptionsDialogTreePresenter">
            <summary>
            Presents the options tree structure in the options dialog.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.OptionsManager">
            <summary>
            Manages the Options Dialog.
            </summary>
            <remarks>
            An option page has three levels of existence:
            • ID, a unique string identifier.
            • Descriptor, an instance of the <see cref="T:JetBrains.UI.Options.OptionsPageDescriptor"/> class. Created when adding pages to the manager. Lives until removed.
            • View, a WinForms control created from the Decriptor, lives only for the run of the Options dialog.
            </remarks>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsManager.OptionsTreeWidthExpandedDefault">
            <summary>
            When expanding the options tree, set the splitter distance to this value.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsManager.IsPageInConfiguration(JetBrains.UI.Options.OptionsPageAttribute)">
            <summary>
            Checks whether the page should be visible in the current configuration
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsManager.AddOptionsPage(System.Type,JetBrains.UI.Options.OptionsPageAttribute)">
            <summary>
            Allows to add an options page dynamically.
            Normally you don't need to use this method. 
            Instead you can mark the class of the page with <see cref="T:JetBrains.UI.Options.OptionsPageAttribute"/> 
            and it will be added (and removed on unloading your plugin) automatically.
            This method should be used when you need to add/remove page depending on some conditions
            and in other non-standard cases.
            </summary>
            <param name="pageClass">Class of the page (should implement <see cref="T:JetBrains.UI.Options.IOptionsPage"/>).</param>
            <param name="attribute">Attribute instance containing all necessary information about the page and position to insert it.</param>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsManager.GetPageDescriptorById(System.String)">
            <summary>
            Looks up a page descriptor by its ID.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsManager.RemoveOptionsPage(System.String)">
            <summary>
            Removes options page added by <see cref="M:JetBrains.UI.Options.OptionsManager.RemoveOptionsPage(System.String)"/> method.
            </summary>
            <param name="pageId">Page id.</param>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsManager.ShowOptions(System.String)">
            <summary>
            Shows options dialog with that page selected.
            </summary>
            <param name="pageId">Page id.</param>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsManager.ShowOptions">
            <summary>
            Shows options dialog.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.OptionsManager.OptionsDialogBounds">
            <summary>
            Gets the persisted bounds for the Options Dialog.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.OptionsManager.OptionsTreeWidth">
            <summary>
            Gets or sets the width of the Options tree in the Options dialog.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.OptionsManager.RootPageDescriptor">
            <summary>
            Gets the root page descriptor.
            It is the synthetic universal root that always exists.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.OptionsManager.SelectedPageId">
            <summary>
            Gets or sets the MRU selected page.
            On load, validates that the MRU page still exists and returns <c>Null</c> instead of an invalid ID.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.OptionsManager.JetBrains#ComponentModel#IXmlExternalizableComponent#Scope">
            <summary>
            Scope that defines which store the data goes into.
            Must not be <c>0</c>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.OptionsManager.JetBrains#ComponentModel#IXmlExternalizableComponent#TagName">
            <summary>
            Name of the XML tag in the settings file.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.OptionsPageAttribute">
            <summary>
            This attribute should mark classes implementing <see cref="T:JetBrains.UI.Options.IOptionsPage"/> interface.
            <seealso cref="T:JetBrains.UI.Options.IOptionsPage"/>
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsPageAttribute.#ctor(System.String,System.String,System.String)">
            <param name="id">Id of this page. The recommended value is the class name without the <c>Page</c> suffix, which should look like the page display name in the Options tree, save for the spaces.</param>
            <param name="name">Presentable name of this page (to be shown in the tree of pages)</param>
            <param name="image">Resource name of image file for this page. If null, default image is used.</param>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsPageAttribute.#ctor(System.String)">
            <summary>
            Uses the supplied ID for the display name and the image also.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsPageAttribute.#ctor(System.String,System.String)">
            <summary>
            Uses the supplied ID for the image also.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsPageAttribute.CompareTo(JetBrains.UI.Options.OptionsPageAttribute)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the other parameter.Zero This object is equal to other. Greater than zero This object is greater than other. 
            </returns>
            
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="P:JetBrains.UI.Options.OptionsPageAttribute.HelpKeyword">
            <summary>
            Gets or sets the Help keyword that will be used to open the Help topic for the current options page.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.OptionsPageAttribute.Id">
            <summary>
            Id of this page
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.OptionsPageAttribute.Image">
            <summary>
            Resource name of image file for this page. If null, default image is used.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.OptionsPageAttribute.Name">
            <summary>
            Presentable name of this page (to be shown in the tree of pages)
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.OptionsPageAttribute.ParentId">
            <summary>
            Id of parent page. If not specified, the page is inserted at the top level.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.OptionsPageAttribute.Sequence">
            <summary>
            Gets or sets the sequence number for this page, which defines its relative positions against the siblings.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.OptionsPageAttribute.SupportedEditions">
            <summary>
            Gets or sets the list of editions in which this page should be shown.
            <c>Null</c> means that it should be shown in all editions.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.OptionsPageDescriptor">
            <summary>
            Runtime descriptor of an options page. UIless, but can create the UI.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Options.OptionsPageDescriptor.myParent">
            <summary>
            If this is not a root page, points to the parent page in the hierarchy.
            There may be only one root page, <see cref="P:JetBrains.UI.Options.OptionsManager.RootPageDescriptor"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsPageDescriptor.CreateView(JetBrains.UI.Options.IOptionsDialog)">
            <summary>
            Creates a new view for this page, does not cache.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsPageDescriptor.GetFullPath">
            <summary>
            Gets the full path to the options page.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsPageDescriptor.GetIcon">
            <summary>
            Retrieves an icon for the given options page.
            Won't throw or return <c>Null</c> unless very broken.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsPageDescriptor.TryGetNext">
            <summary>
            Goes to the next page in the tree. Returns <c>Null</c> if the next page is not available.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsPageDescriptor.TryGetPrevious">
            <summary>
            Goes to the previous page in the tree. Returns <c>Null</c> if the previous page is not available.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsPageDescriptor.Destroy">
            <summary>
            Removes itself from the option pages tree.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsPageDescriptor.Sort">
            <summary>
            Applies <see cref="P:JetBrains.UI.Options.OptionsPageAttribute.Sequence"/> to the children.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsPageDescriptor.AppendChild(JetBrains.UI.Options.OptionsPageDescriptor)">
            <summary>
            Inserts a new child. For internal use only.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.OptionsPageDescriptor.RemoveChild(JetBrains.UI.Options.OptionsPageDescriptor)">
            <summary>
            Removes a child. For internal use only.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.OptionsPageDescriptor.Id">
            <summary>
            Gets the ID of this page, as extracted from the <see cref="P:JetBrains.UI.Options.OptionsPageDescriptor.Attribute"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.OptionsPageDescriptor.Parent">
            <summary>
            If this is not a root page, points to the parent page in the hierarchy.
            There may be only one root page, <see cref="P:JetBrains.UI.Options.OptionsManager.RootPageDescriptor"/>.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Options.RootOptionsPage">
            <summary>
            Implements the root options page descriptor.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.RootOptionsPage.OnOk">
            <summary>
            Invoked when OK button in the options dialog is pressed.
            If the page returns <c>false</c>, the the options dialog won't be closed, and focus will be put into this page.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Options.RootOptionsPage.ValidatePage">
            <summary>
            Check if the settings on the page are consistent, and page could be closed.
            </summary>
            <returns><c>true</c> if page data is consistent.</returns>
        </member>
        <member name="P:JetBrains.UI.Options.RootOptionsPage.Control">
            <summary>
            Control to be shown as page.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Options.RootOptionsPage.Id">
            <summary>
            Gets the ID of this option page.
            <see cref="T:JetBrains.UI.Options.OptionsManager"/> or <see cref="T:JetBrains.UI.Options.IOptionsDialog"/> could be used to retrieve the <see cref="T:JetBrains.UI.Options.OptionsPageDescriptor"/> out of it.
            </summary>
        </member>
        <member name="T:JetBrains.UI.AnchoringRect">
            <summary>
            The basic implementation of the <see cref="T:JetBrains.UI.IAnchoringRect"/> interface.
            </summary>
        </member>
        <member name="T:JetBrains.UI.IAnchoringRect">
            <summary>
            Represents a dynamic anchoring rectangle against this some controls could be laid out.
            </summary>
        </member>
        <member name="P:JetBrains.UI.IAnchoringRect.Rectangle">
            <summary>
            Gets the current value of the anchoring rectangle.
            Note that, depending on the context, it could be either in client, screen, or any other coordinates.
            </summary>
        </member>
        <member name="E:JetBrains.UI.IAnchoringRect.AnchorChanged">
            <summary>
            Fires whenever the <see cref="P:JetBrains.UI.IAnchoringRect.Rectangle"/> changes.
            </summary>
        </member>
        <member name="F:JetBrains.UI.AnchoringRect.myRectangle">
            <summary>
            Backend for the <see cref="P:JetBrains.UI.AnchoringRect.Rectangle"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.AnchoringRect.myUserData">
            <summary>
            Holds the user data this object exposes via its <see cref="T:JetBrains.Util.IUserDataHolder"/> interface.
            </summary>
        </member>
        <member name="M:JetBrains.UI.AnchoringRect.Transform(System.Drawing.Size)">
            <summary>
            Applies a transformation to this anchoring rectangle and returns the result as a new anchoring rectangle.
            The current one should not be disposed of or used anywhere else.
            </summary>
            <param name="offset">The translation portion of the transformation.</param>
        </member>
        <member name="M:JetBrains.UI.AnchoringRect.Transform(System.Drawing.Size,JetBrains.UI.Anchoring2D)">
            <summary>
            Applies a transformation to this anchoring rectangle and returns the result as a new anchoring rectangle.
            The current one should not be disposed of or used anywhere else.
            </summary>
            <param name="offset">The translation portion of the transformation.</param>
            <param name="collapseto">
            Gets or sets whether the rectangle should be collapsed into a point, and, if yes, to which exactly point of the original rectangle.
            The inside modes are located on the inner sides of the rectangle, and outside ones are one point outside.
            </param>
        </member>
        <member name="M:JetBrains.UI.AnchoringRect.FireAnchorChanged">
            <summary>
            Fires the <see cref="E:JetBrains.UI.AnchoringRect.AnchorChanged"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.UI.AnchoringRect.UpdateAnchor">
            <summary>
            Updates the anchoring rectangle as it gets dirty.
            </summary>
        </member>
        <member name="M:JetBrains.UI.AnchoringRect.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.AnchoringRect.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.AnchoringRect.GetData``1(JetBrains.Util.Key{``0})">
            <summary>
            Retrieves value associated with given key.
            Returns null when no value is associated.
            </summary>
        </member>
        <member name="M:JetBrains.UI.AnchoringRect.PutData``1(JetBrains.Util.Key{``0},``0)">
            <summary>
            Stores given value by specified key.
            Use <code>PutData(key, null)</code> to remove the association.
            </summary>
        </member>
        <member name="E:JetBrains.UI.AnchoringRect.AnchorChanged">
            <summary>
            Fires whenever the <see cref="P:JetBrains.UI.IAnchoringRect.Rectangle"/> changes.
            </summary>
        </member>
        <member name="P:JetBrains.UI.AnchoringRect.Rectangle">
            <summary>
            Gets or sets the current value of the anchoring rectangle.
            Note that, depending on the context, it could be either in client, screen, or any other coordinates.
            The setter fires the “changed” event.
            </summary>
        </member>
        <member name="T:JetBrains.UI.DockingLayouter">
            <summary>
            Base implementation of the <see cref="T:JetBrains.UI.IPopupLayouter"/> interface.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupLayouter">
            <summary>
            A layouter that does not do any useful layout.
            </summary>
        </member>
        <member name="T:JetBrains.UI.IPopupLayouter">
            <summary>
            Lays out the popup windows.
            </summary>
        </member>
        <member name="P:JetBrains.UI.IPopupLayouter.Layout">
            <summary>
            Gets the result of laying out the entity.
            Submit a <see cref="P:JetBrains.UI.IPopupLayouter.Size"/> to have the new layout calculated.
            </summary>
        </member>
        <member name="P:JetBrains.UI.IPopupLayouter.Size">
            <summary>
            Gets or sets the size of the entity to be laid out.
            Whenever you set a new site, the <see cref="P:JetBrains.UI.IPopupLayouter.Layout"/> is updated, as needed, to provide with a new layout that fits the requested size. Note that the <see cref="P:JetBrains.UI.IPopupLayouter.Layout"/>'s size may be below the requested value if there's not enough room onscreen to fit it.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupLayouter.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.UI.PopupLayouter.Layout">
            <summary>
            Gets the result of laying out the entity.
            Submit a <see cref="P:JetBrains.UI.IPopupLayouter.Size"/> to have the new layout calculated.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupLayouter.Size">
            <summary>
            Gets or sets the size of the entity to be laid out.
            Whenever you set a new site, the <see cref="P:JetBrains.UI.IPopupLayouter.Layout"/> is updated, as needed, to provide with a new layout that fits the requested size. Note that the <see cref="P:JetBrains.UI.IPopupLayouter.Layout"/>'s size may be below the requested value if there's not enough room onscreen to fit it.
            </summary>
        </member>
        <member name="F:JetBrains.UI.DockingLayouter.mySuppressLayout">
            <summary>
            If <c>True</c>, the layouting (and event-firing) is temporarily suppressed.
            </summary>
        </member>
        <member name="F:JetBrains.UI.DockingLayouter.myUseStickyDispositions">
            <summary>
            Whether dispositions are sticky, and the list is updated to promote the MRU disposition.
            </summary>
        </member>
        <member name="M:JetBrains.UI.DockingLayouter.#ctor(JetBrains.UI.IAnchoringRect)">
            <summary>
            Creates a new layouter that attaches to the specific anchoring rectangle.
            </summary>
        </member>
        <member name="M:JetBrains.UI.DockingLayouter.#ctor(JetBrains.UI.IAnchoringRect,System.Collections.Generic.ICollection{JetBrains.UI.Anchoring2D})">
            <summary>
            Creates a new layouter that attaches to the specific anchoring rectangle at the sides specified by the <paramref name="dispositions"/> collection.
            </summary>
        </member>
        <member name="M:JetBrains.UI.DockingLayouter.#ctor(JetBrains.UI.IAnchoringRect,System.Collections.Generic.ICollection{JetBrains.UI.Anchoring2D},System.Int32)">
            <summary>
            Creates a new layouter that attaches to the specific anchoring rectangle at the sides specified by the <paramref name="dispositions"/> collection.
            </summary>
        </member>
        <member name="M:JetBrains.UI.DockingLayouter.#ctor(JetBrains.UI.IAnchoringRect,System.Collections.Generic.ICollection{JetBrains.UI.Anchoring2D},System.Int32,System.Boolean)">
            <summary>
            Creates a new layouter that attaches to the specific anchoring rectangle at the sides specified by the <paramref name="dispositions"/> collection.
            You may turn the sticky dispositions mode (see <see cref="P:JetBrains.UI.DockingLayouter.UseStickyDispositions"/>) on or off.
            </summary>
        </member>
        <member name="M:JetBrains.UI.DockingLayouter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.DockingLayouter.GetScreenBounds(System.Drawing.Rectangle)">
            <summary>
            Gets the screen bounds into which the rectangle being laid out should be fit.
            The default implementation returns the display screen on which the most of <paramref name="rectAnchor"/> is located.
            </summary>
            <param name="rectAnchor">The anchoring rectangle around which the position provider will dock its controlled rect. Could be used to determine which screen to use as bounds.</param>
            <returns>The “screen” bounds for fitting the resulting rectangle into.</returns>
        </member>
        <member name="M:JetBrains.UI.DockingLayouter.OnAnchorChanged(System.Object,System.EventArgs)">
            <summary>
            The anchoring rect has changed. Redock.
            </summary>
        </member>
        <member name="M:JetBrains.UI.DockingLayouter.UpdateLayout">
            <summary>
            Re-layouts the entity using the current configuration.
            Submits the result to the <see cref="!:Layout"/> property, which triggers the change event, if the value is different.
            </summary>
        </member>
        <member name="P:JetBrains.UI.DockingLayouter.Anchor">
            <summary>
            Gets or sets the anchoring rectangle against which the entity is docked.
            </summary>
        </member>
        <member name="P:JetBrains.UI.DockingLayouter.Dispositions">
            <summary>
            Gets or sets the list of dispositions available for laying out the controlled rectangle against the anchoring rectangle.
            </summary>
        </member>
        <member name="P:JetBrains.UI.DockingLayouter.Padding">
            <summary>
            Gets or sets the padding between the anchoring rectangle and the laid out entity.
            </summary>
        </member>
        <member name="P:JetBrains.UI.DockingLayouter.UseStickyDispositions">
            <summary>
            Gets or sets whether the Sticky Dispositions mode is on.
            In this mode, the disposition used when layouting is promoted in the dispositions list so that it was preferred over the others the next time the layout is performed.
            The collection returned from <see cref="P:JetBrains.UI.DockingLayouter.Dispositions"/> is modified accordingly.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupWindowManager.IPopupWindowContext">
            <summary>
            Represents the owning context for a popup window.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.IPopupWindowContext.CreateLayouter">
            <summary>
            Gets the default position provider for the view. 
            Usually gets position provider which provides position bound to the current selection or insertion point of the view.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.IPopupWindowContext.FireAnyOtherAction">
            <summary>
            Fires the <see cref="E:JetBrains.UI.PopupWindowManager.IPopupWindowContext.AnyOtherAction"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.IPopupWindowContext.FireDeactivated">
            <summary>
            Fires the <see cref="E:JetBrains.UI.PopupWindowManager.IPopupWindowContext.Deactivated"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.IPopupWindowContext.FireScroll">
            <summary>
            Fires the <see cref="E:JetBrains.UI.PopupWindowManager.IPopupWindowContext.Scroll"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.IPopupWindowContext.FireSelectionChanged">
            <summary>
            Fires the <see cref="E:JetBrains.UI.PopupWindowManager.IPopupWindowContext.SelectionChanged"/> event.
            </summary>
        </member>
        <member name="E:JetBrains.UI.PopupWindowManager.IPopupWindowContext.AnyOtherAction">
            <summary>
            Fires when some action occurs in the context owner.
            </summary>
        </member>
        <member name="E:JetBrains.UI.PopupWindowManager.IPopupWindowContext.Deactivated">
            <summary>
            Fires when the context owner is deactivated.
            </summary>
        </member>
        <member name="E:JetBrains.UI.PopupWindowManager.IPopupWindowContext.EscapePressed">
            <summary>
            Fires when the ESCAPE key is pressed in the owning context. Works as a stack of handlers instead of a multicast event, that is, always notifies only the most-recently-added event in the stack, and then removes it from the stack.
            </summary>
        </member>
        <member name="E:JetBrains.UI.PopupWindowManager.IPopupWindowContext.Scroll">
            <summary>
            Fires when the context owner is scrolled.
            </summary>
        </member>
        <member name="E:JetBrains.UI.PopupWindowManager.IPopupWindowContext.SelectionChanged">
            <summary>
            Fires when selection changes in the context owner.
            </summary>
        </member>
        <member name="T:JetBrains.UI.LayoutResult">
            <summary>
            Represents the result of layouting by the means of an <see cref="T:JetBrains.UI.IPopupLayouter"/>.
            Besides the entity bounds, specifies how they're located against the anchoring area, should there be any.
            </summary>
        </member>
        <member name="F:JetBrains.UI.LayoutResult.Empty">
            <summary>
            The empty layouting result.
            </summary>
        </member>
        <member name="F:JetBrains.UI.LayoutResult.AnchoringRect">
            <summary>
            The anchoring rectangle against which the entity has been laid out.
            Valid only if <see cref="F:JetBrains.UI.LayoutResult.Disposition"/> is not <see cref="F:JetBrains.UI.Anchoring2D.Empty"/>; otherwise, considered to be not available.
            </summary>
        </member>
        <member name="F:JetBrains.UI.LayoutResult.Bounds">
            <summary>
            The bounds of the laid out entity.
            </summary>
        </member>
        <member name="F:JetBrains.UI.LayoutResult.Disposition">
            <summary>
            The disposition of the laid out entity against the anchoring rectangle, <see cref="F:JetBrains.UI.LayoutResult.AnchoringRect"/>.
            Should be <see cref="F:JetBrains.UI.Anchoring2D.Empty"/> if this data is not available.
            </summary>
        </member>
        <member name="F:JetBrains.UI.LayoutResult.Room">
            <summary>
            The room available for layouting at the specified <see cref="F:JetBrains.UI.LayoutResult.Disposition"/>.
            The <see cref="F:JetBrains.UI.LayoutResult.Bounds"/> fall within the <see cref="F:JetBrains.UI.LayoutResult.Room"/>, docked inside as specified by <see cref="F:JetBrains.UI.LayoutResult.Disposition"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.LayoutResult.#ctor(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Rectangle,JetBrains.UI.Anchoring2D)">
            <summary>
            Initializes the instance with the laid out entity bounds, anchoring rectangle and dispositon of the entity against it.
            </summary>
        </member>
        <member name="M:JetBrains.UI.LayoutResult.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.UI.LayoutResult.Location">
            <summary>
            Gets the location of the laid out entity.
            </summary>
        </member>
        <member name="P:JetBrains.UI.LayoutResult.Size">
            <summary>
            Gets the size of the laid out entity.
            </summary>
        </member>
        <member name="T:JetBrains.UI.NestedAnchoringRect">
            <summary>
            Takes two anchoring rects and nests one itno another, treating the coordinates of the first one as relative to the second's.
            Useful for nesting a client-coordinates rect into the window rect for getting the screen coordinates that track both client item and window movements.
            </summary>
        </member>
        <member name="M:JetBrains.UI.NestedAnchoringRect.#ctor(JetBrains.UI.IAnchoringRect,JetBrains.UI.IAnchoringRect)">
            <summary>
            Nests the <paramref name="nested"/> anchoring rect within the <paramref name="outer"/> one, treating the coordinates of the first as client ones within the second.
            </summary>
        </member>
        <member name="M:JetBrains.UI.NestedAnchoringRect.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.NestedAnchoringRect.UpdateAnchor">
            <summary>
            Updates the anchor based on the two underlying anchors.
            </summary>
        </member>
        <member name="P:JetBrains.UI.NestedAnchoringRect.Nested">
            <summary>
            Gets that of the two anchors that is nested within the other.
            </summary>
        </member>
        <member name="P:JetBrains.UI.NestedAnchoringRect.Outer">
            <summary>
            Gets that of the two anchors that is the outer one.
            </summary>
        </member>
        <member name="T:JetBrains.UI.RectangleDocker">
            <summary>
            Attaches one rect to another according to the rules.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RectangleDocker.myAllowedDispositions">
            <summary>
            <see cref="P:JetBrains.UI.RectangleDocker.AllowedDispositions"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RectangleDocker.myAnchoringRect">
            <summary>
            <see cref="P:JetBrains.UI.RectangleDocker.AnchoringRect"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RectangleDocker.myCandidateDisposition">
            <summary>
            <see cref="P:JetBrains.UI.RectangleDocker.CandidateDisposition"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RectangleDocker.myCandidateRatio">
            <summary>
            <see cref="P:JetBrains.UI.RectangleDocker.CandidateRatio"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RectangleDocker.myCandidateRect">
            <summary>
            <see cref="P:JetBrains.UI.RectangleDocker.CandidateRect"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RectangleDocker.myCandidateRoom">
            <summary>
            <see cref="P:JetBrains.UI.RectangleDocker.CandidateRoom"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RectangleDocker.myPadding">
            <summary>
            <see cref="P:JetBrains.UI.RectangleDocker.Padding"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RectangleDocker.myScreen">
            <summary>
            <see cref="P:JetBrains.UI.RectangleDocker.Screen"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.RectangleDocker.mySize">
            <summary>
            <see cref="P:JetBrains.UI.RectangleDocker.Size"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RectangleDocker.#ctor(System.Drawing.Rectangle,System.Drawing.Size,System.Collections.Generic.ICollection{JetBrains.UI.Anchoring2D},System.Drawing.Rectangle)">
            <summary>
            Docks one rectangle to another. See the <see cref="P:JetBrains.UI.RectangleDocker.Result"/> property for the result.
            </summary>
            <param name="rectAnchor">The anchoring rectangle to which the resulting rectangle will be docked.</param>
            <param name="size">The desired size that describes the rectangle to be docked (the location is determined by the docking process). The size may decrease in case the <paramref name="screen"/>has not enough room for docking the rectangle in all its entirety.</param>
            <param name="dispositionsAllowed">Defines sides at which the rectangle may be docked to the anchor, in order of decreasing priority.</param>
            <param name="screen">The available space for the dockee.</param>
        </member>
        <member name="M:JetBrains.UI.RectangleDocker.#ctor(System.Drawing.Rectangle,System.Drawing.Size,System.Collections.Generic.ICollection{JetBrains.UI.Anchoring2D},System.Drawing.Rectangle,System.Int32)">
            <summary>
            Docks one rectangle to another. See the <see cref="P:JetBrains.UI.RectangleDocker.Result"/> property for the result.
            </summary>
            <param name="rectAnchor">The anchoring rectangle to which the resulting rectangle will be docked.</param>
            <param name="size">The desired size that describes the rectangle to be docked (the location is determined by the docking process). The size may decrease in case the <paramref name="screen"/>has not enough room for docking the rectangle in all its entirety.</param>
            <param name="dispositionsAllowed">Defines sides at which the rectangle may be docked to the anchor, in order of decreasing priority.</param>
            <param name="screen">The available space for the dockee.</param>
            <param name="padding">Padding to be inserted between the anchor and the dockee.</param>
        </member>
        <member name="M:JetBrains.UI.RectangleDocker.Attach">
            <summary>
            The main routine.
            Tries each of the available dispositions in turn.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RectangleDocker.AttachRect(System.Drawing.Rectangle,JetBrains.UI.Anchoring2D)">
            <summary>
            Attaches a rectangle using the one and only specified <paramref name="disposition"/>.
            </summary>
            <param name="rectAnchor">The anchoring area to attach to.</param>
            <param name="disposition">A side or a corner to attach at.</param>
            <returns>Whether the result was 100% fitting the desired size, and no further trying is needed.</returns>
        </member>
        <member name="M:JetBrains.UI.RectangleDocker.AttachRectInside(System.Drawing.Rectangle,JetBrains.UI.Anchoring2D)">
            <summary>
            Attaches inside the anchoring rect: flips the anchor so that to solve the “attach-outside” problem afterwards.
            </summary>
            <returns>Whether the result was 100% fitting the desired size, and no further trying is needed.</returns>
        </member>
        <member name="M:JetBrains.UI.RectangleDocker.AttachRectMiddle(JetBrains.UI.Anchoring2D,System.Drawing.Rectangle)">
            <summary>
            Handles the Middle-Middle disposition case, in a simplified manner.
            </summary>
            <returns>Whether the result was 100% fitting the desired size, and no further trying is needed.</returns>
        </member>
        <member name="M:JetBrains.UI.RectangleDocker.AttachRectOutside(System.Drawing.Rectangle,JetBrains.UI.Anchoring2D,JetBrains.UI.Anchoring2D)">
            <summary>
            Attaches a rectangle outside the given anchoring rect.
            Inside-attachment calls this routine with anchor mirrored against the attachment side, so that it were an outside attachment, after all.
            </summary>
            <param name="rectAnchor">The anchor.</param>
            <param name="dispositionAttachment">The disposition to use when attaching.</param>
            <param name="dispositionOriginal">The disposition to be recorded in the <see cref="P:JetBrains.UI.RectangleDocker.Result"/>, as <paramref name="dispositionAttachment"/> may be modified from the original value.</param>
            <returns>Whether the result was 100% fitting the desired size, and no further trying is needed.</returns>
        </member>
        <member name="M:JetBrains.UI.RectangleDocker.CenterHorizontally(System.Drawing.Point,System.Drawing.Rectangle@)">
            <summary>
            Centers the desired size against the anchoring rect, in the horizontal dimension. Constrains by the screen.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RectangleDocker.CenterVertically(System.Drawing.Point,System.Drawing.Rectangle@)">
            <summary>
            Centers the desired size against the anchoring rect, in the vertical dimension. Constrains by the screen.
            </summary>
        </member>
        <member name="M:JetBrains.UI.RectangleDocker.CheckCandidate(System.Drawing.Rectangle@,System.Drawing.Rectangle,JetBrains.UI.Anchoring2D)">
            <summary>
            Evaluates the candidate rectangle, either promotes it to the instance-global candidate, if its ratio is better, or discards otherwise.
            If the rect satisfies the desired size entirely, returns <c>True</c> so that to stop trying other candidates.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RectangleDocker.AllowedDispositions">
            <summary>
            Gets the collection of the dispositions allowed.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RectangleDocker.AnchoringRect">
            <summary>
            Gets the anchor.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RectangleDocker.CandidateDisposition">
            <summary>
            Gets the disposition of the <see cref="P:JetBrains.UI.RectangleDocker.CandidateRect"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RectangleDocker.CandidateRatio">
            <summary>
            Gets the ratio of the <see cref="P:JetBrains.UI.RectangleDocker.CandidateRect"/>, ie how much it fits the desired size, the smaller the better.
            The following candidates are accepted or rejected based on this ratio.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RectangleDocker.CandidateRect">
            <summary>
            Gets the current candidate for the layout result.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RectangleDocker.CandidateRoom">
            <summary>
            Gets the total room available for the current <see cref="P:JetBrains.UI.RectangleDocker.CandidateRect"/>, at its <see cref="P:JetBrains.UI.RectangleDocker.CandidateDisposition"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RectangleDocker.Padding">
            <summary>
            Gets the padding to be inserted between the anchor and the dockee.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RectangleDocker.Result">
            <summary>
            Gets the result of docking, the final candidate and all of its properties packed into a single structure.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RectangleDocker.Screen">
            <summary>
            Gets the screen, which is the total room available for layouting.
            Either given explicitly by the user, or chosen as the same desktop the anchor lies in.
            </summary>
        </member>
        <member name="P:JetBrains.UI.RectangleDocker.Size">
            <summary>
            Gets the desired size we're trying to lay out by docking.
            </summary>
        </member>
        <member name="T:JetBrains.UI.StaticAnchoringRect">
            <summary>
            Creates an anchoring rectangle whose position is fixed.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StaticAnchoringRect.#ctor(System.Drawing.Point)">
            <summary>
            Creates a position provider.
            </summary>
            <param name="location">The fixed location, in screen coordinates.</param>
        </member>
        <member name="M:JetBrains.UI.StaticAnchoringRect.#ctor(System.Drawing.Rectangle)">
            <summary>
            Creates a position provider.
            </summary>
            <param name="anchor">The fixed anchoring rectangle, in screen coordinates.</param>
        </member>
        <member name="M:JetBrains.UI.StaticAnchoringRect.FromCurrentMousePosition">
            <summary>
            Creates a static anchoring rectangle at the point where the mouse pointer was at the moment of the call.
            The size of the rectangle is chosen so that there was a double-click-size distance from the mouse location to either side.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StaticAnchoringRect.FromCurrentMousePosition(System.Drawing.Size)">
            <summary>
            Creates a static anchoring rectangle at the point where the mouse pointer was at the moment of the call.
            The size of the rectangle is chosen so that there was a double-click-size distance from the mouse location to either side.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StaticAnchoringRect.SetRectangle(System.Drawing.Rectangle)">
            <summary>
            Sets the new static anchoring rectangle.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StaticAnchoringRect.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.StaticAnchoringRect.UpdateAnchor">
            <summary>
            Updates the anchoring rectangle as it gets dirty.
            </summary>
        </member>
        <member name="T:JetBrains.UI.StickyDisposition">
            <summary>
            Keeps the allowed dispositions list — a list of <see cref="T:JetBrains.UI.Anchoring2D"/> values — and promotes the most recently used one to have the highest priority, ie it gets sticky and will be used next time, unless there's a better choice.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StickyDisposition.myDispositions">
            <summary>
            The list of dispositions, in priority order.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StickyDisposition.#ctor(System.Collections.Generic.ICollection{JetBrains.UI.Anchoring2D})">
            <summary>
            Creates a new instance and initializes it with the set of dispositions, sorted in an ascending order of priority.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StickyDisposition.#ctor">
            <summary>
            Creates a new instance and initializes it with the default <see cref="P:JetBrains.UI.Anchoring2D.AnchorBottomOrTop"/> set of dispositions, sorted in an ascending order of priority.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StickyDisposition.Promote(JetBrains.UI.Anchoring2D)">
            <summary>
            Promotes the disposition specified so that it had the highest priority next time you get <see cref="P:JetBrains.UI.StickyDisposition.Dispositions"/>, and thus ruled out the layouting (unless some other disposition makes a better fit).
            </summary>
            <param name="disposition">The disposition to promote.</param>
        </member>
        <member name="M:JetBrains.UI.StickyDisposition.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.UI.StickyDisposition.Dispositions">
            <summary>
            Gets or sets the current set of dispositions which consists of the same dispositions as were given on construction time, but in another priority.
            </summary>
        </member>
        <member name="T:JetBrains.UI.TransformedAnchoringRect">
            <summary>
            An anchor that applies a transofrmation to some other anchor.
            </summary>
        </member>
        <member name="M:JetBrains.UI.TransformedAnchoringRect.ApplyTransformations(System.Drawing.Rectangle)">
            <summary>
            Applies the transformations of this object.
            </summary>
        </member>
        <member name="M:JetBrains.UI.TransformedAnchoringRect.FireApplyTransformation(System.Drawing.Rectangle)">
            <summary>
            Fires the <see cref="E:JetBrains.UI.TransformedAnchoringRect.ApplyTransformation"/> event so that to modify the rectangle.
            </summary>
            <param name="source">The original rectangle value.</param>
            <returns>The possibly-modified rectangle value.</returns>
        </member>
        <member name="M:JetBrains.UI.TransformedAnchoringRect.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.TransformedAnchoringRect.UpdateAnchor">
            <summary>
            Recalculates the anchoring rectangle.
            </summary>
        </member>
        <member name="P:JetBrains.UI.TransformedAnchoringRect.CollapseTo">
            <summary>
            Gets or sets whether the rectangle should be collapsed into a point, and, if yes, to which exactly point of the original rectangle.
            The inside modes are located on the inner sides of the rectangle, and outside ones are one point outside.
            </summary>
        </member>
        <member name="P:JetBrains.UI.TransformedAnchoringRect.Offset">
            <summary>
            Gets or sets the translation portion of the transformation.
            </summary>
        </member>
        <member name="P:JetBrains.UI.TransformedAnchoringRect.UnderlyingAnchor">
            <summary>
            Gets the underlying anchoring object that is being transformed by this adapter.
            </summary>
        </member>
        <member name="E:JetBrains.UI.TransformedAnchoringRect.ApplyTransformation">
            <summary>
            Fires when the unlerlying anchoring rect changes and its new value should be transformed.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:JetBrains.UI.PopupMenu.ApproveItemEventArgs" -->
        <member name="T:JetBrains.UI.PopupMenu.ItemEventArgs">
            <summary>
            <see cref="T:JetBrains.UI.PopupMenu.JetPopupMenu"/> event arguments that reference an item.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.ItemEventArgs.#ctor(JetBrains.UI.PopupMenu.JetPopupMenu,System.Object)">
            <summary>
            Inits the instance.
            </summary>
            <param name="menu">The owning menu, must not be <c>Null</c>.</param>
            <param name="key">Key to the item that is described by the event, <c>Null</c> means “no item” (eg no selection).</param>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.ItemEventArgs.Key">
            <summary>
            Gets the key to the item referenced by this event.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.ItemEventArgs.Menu">
            <summary>
            Gets the popup menu that has fired the event.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.ApproveItemEventArgs.Approved">
            <summary>
            Gets or sets whether the handler approves the event and allows the action meant by it to occur.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.DescribeItemEventArgs">
            <summary>
            Arguments for the <see cref="!:JetPopupMenu.DescribeItemEvent"/> event.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.DescribeItemEventArgs.Descriptor">
            <summary>
            Gets the desciprtor to be filled by the event sink.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.IMenuItemDescriptor">
            <summary>
            Describes how the menu should present an item.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.IMenuItemDescriptor.Icon">
            <summary>
            Gets the image (icon) for the item.
            <c>Null</c> if the item has no image.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.IMenuItemDescriptor.Mnemonic">
            <summary>
            If the menu is working in the <see cref="F:JetBrains.UI.PopupMenu.KeyboardAccelerationFlags.Mnemonics"/> mode, specifies the mnemonic to assign to this menu item.
            The letter holding the mnemonic will be underlined automatically.
            To specify a mnemonic, either:
            (1) set the <see cref="P:JetBrains.UI.PopupMenu.IMenuItemDescriptor.Mnemonic"/> to contain a plaintext copy of the item <see cref="P:JetBrains.UI.PopupMenu.IMenuItemDescriptor.Text"/>, with the mnemonic char prepended by an ampersand “&amp;”; normal ampersands should be doubled in the text,
            or,
            (2) set the <see cref="P:JetBrains.UI.PopupMenu.IMenuItemDescriptor.Mnemonic"/> to contain the single case-insensitive character of the mnemonic, whose position in the <see cref="P:JetBrains.UI.PopupMenu.IMenuItemDescriptor.Text"/> will be determined automatically; it's also legal to specify a mnemonic not present in the text.
            May be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.IMenuItemDescriptor.ShortcutText">
            <summary>
            Shortcut text to be displayed to the right of the <see cref="P:JetBrains.UI.PopupMenu.IMenuItemDescriptor.Text">main item text</see>.
            May be <c>Null</c> or an empty string for no shortcut.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.IMenuItemDescriptor.Style">
            <summary>
            Gets or sets the style of the item.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.IMenuItemDescriptor.Tag">
            <summary>
            A freehand object tag on the menu item descriptor.
            May be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.IMenuItemDescriptor.TailGlyph">
            <summary>
            Gets or sets an optional glyph that is displayed at the end of the menu item, after its shortcut text.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.IMenuItemDescriptor.Text">
            <summary>
            Gets the text that should present the item in the list.
            Must not be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.IMenuItemDescriptor.Tooltip">
            <summary>
            Get the tooltip that should be shown when the mouse pointer hovers above this item in the list.
            May be <c>Null</c> or an empty string for no tooltip.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.IMenuItemsFilter.IncomingDelete">
            <summary>
            This is an incoming signal, which means that it's fired by the filter owner rather than by the filter itself.
            Fired when an item should be deleted.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.IMenuItemsFilter.IncomingExecute">
            <summary>
            This is an incoming signal, which means that it's fired by the filter owner rather than by the filter itself.
            Fired when an item should be executed.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.IMenuItemsFilter.IncomingExpand">
            <summary>
            This is an incoming signal, which means that it's fired by the filter owner rather than by the filter itself.
            Fired when an item should be expanded.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.IMenuItemsFilter.InputItems">
            <summary>
            Input items for the filter, as coming from the previous filter in the stack.
            The filter must perform the filtering operation on them and apply the changes to the <see cref="P:JetBrains.UI.PopupMenu.Impl.IMenuItemsFilter.OutputItems"/> collection.
            The filter must not modify its <see cref="P:JetBrains.UI.PopupMenu.Impl.IMenuItemsFilter.InputItems"/>, it's changed externally.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.IMenuItemsFilter.IsBusy">
            <summary>
            Gets whether the filter is currently busy populating the <see cref="P:JetBrains.UI.PopupMenu.Impl.IMenuItemsFilter.OutputItems"/> collection.
            The "not ready" state for the async population of the items collection.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.IMenuItemsFilter.OutputItems">
            <summary>
            Output items of the filter. This collection is changed by the filter only, based on the changes to the <see cref="P:JetBrains.UI.PopupMenu.Impl.IMenuItemsFilter.InputItems"/> collection and filter's own operation.
            The <see cref="P:JetBrains.UI.PopupMenu.Impl.IMenuItemsFilter.OutputItems"/> result goes either to the input of the next filter, or to the final reault of the stack.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.MenuItemsFilter">
            <summary>
            The default implementation of a menu items filter.
            Although it can be inherited, most operations can be fulfilled by advising its events externally.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.MenuItemsFilter.#ctor(System.String)">
            <summary>
            Creates a filter and assigns it an ID.
            This ID will be used to produce the IDs of containing data points (lists and signals).
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.MenuItemsFilter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.MenuItemsFilter.Id">
            <summary>
            Gets the identifier of the filter.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.MenuItemsFilter.IncomingDelete">
            <summary>
            This is an incoming signal, which means that it's fired by the filter owner rather than by the filter itself.
            Fired when an item should be deleted.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.MenuItemsFilter.IncomingExecute">
            <summary>
            This is an incoming signal, which means that it's fired by the filter owner rather than by the filter itself.
            Fired when an item should be executed.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.MenuItemsFilter.IncomingExpand">
            <summary>
            This is an incoming signal, which means that it's fired by the filter owner rather than by the filter itself.
            Fired when an item should be expanded.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.MenuItemsFilter.InputItems">
            <summary>
            Input items for the filter, as coming from the previous filter in the stack.
            The filter must perform the filtering operation on them and apply the changes to the <see cref="P:JetBrains.UI.PopupMenu.Impl.IMenuItemsFilter.OutputItems"/> collection.
            The filter must not modify its <see cref="P:JetBrains.UI.PopupMenu.Impl.IMenuItemsFilter.InputItems"/>, it's changed externally.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.MenuItemsFilter.IsBusy">
            <summary>
            Gets whether the filter is currently busy populating the <see cref="P:JetBrains.UI.PopupMenu.Impl.IMenuItemsFilter.OutputItems"/> collection.
            The "not ready" state for the async population of the items collection.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.MenuItemsFilter.OutputItems">
            <summary>
            Output items of the filter. This collection is changed by the filter only, based on the changes to the <see cref="P:JetBrains.UI.PopupMenu.Impl.IMenuItemsFilter.InputItems"/> collection and filter's own operation.
            The <see cref="P:JetBrains.UI.PopupMenu.Impl.IMenuItemsFilter.OutputItems"/> result goes either to the input of the next filter, or to the final reault of the stack.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.MenuItemsContainer">
            <summary>
            A composite container for the <see cref="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc"/> items.
            Aggregates several filters, organizes them into a stack, allows for incremental population or filtering of the items.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.MenuItemsContainer.myDisposables">
            <summary>
            Instance-wide disposables.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.MenuItemsContainer.myPushFilterLinks">
            <summary>
            Links between the filters' output-input collections, as well as the outer collections of the container itself.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.MenuItemsContainer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView">
            <summary>
            Layouter and renderer interface that handles the presentation for the <see cref="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem"/>.
            Directed and invoked by <see cref="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView.GetSize(JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewPresentationFlags)">
            <summary>
            Gets the actual size of the item at the current moment, as obtained after the last <see cref="M:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView.LayoutTopDown(System.Drawing.Size[],JetBrains.UI.IGraphicsContainer)"/>, according to which the item is about to <see cref="M:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView.Paint(System.Drawing.Graphics,JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ColorSet,JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewPresentationFlags)"/>.
            Flags affect the upper margin size.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView.HitTest(System.Drawing.Point)">
            <summary>
            Performs a hit-test of the menu item.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView.LayoutBottomUp(JetBrains.UI.IGraphicsContainer)">
            <summary>
            First (bottom-up) part of the layout: the preferred sizes are being collected.
            Calculates the per-column preferred size of the menu item.
            Should be called before <see cref="M:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView.LayoutTopDown(System.Drawing.Size[],JetBrains.UI.IGraphicsContainer)"/> on any change.
            </summary>
            <param name="gc">A device context to measure the text against.</param>
            <returns>Returns an array of preferred sizes for each of the cells defined.</returns>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView.LayoutTopDown(System.Drawing.Size[],JetBrains.UI.IGraphicsContainer)">
            <summary>
            Performs the top-down part of the layout, when the item receives some size it should layout itself into.
            Should be called after <see cref="M:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView.LayoutBottomUp(JetBrains.UI.IGraphicsContainer)"/>.
            </summary>
            <param name="cells">The available size for layouting each of the cells into.</param>
            <param name="gc">A device context to measure the text against.</param>
            <returns>The size the item succeeded to layout into. Typically, should be equal in width to the sum of all the cell widths, and in height to the maximum height encountered.</returns>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView.Paint(System.Drawing.Graphics,JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ColorSet,JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewPresentationFlags)">
            <summary>
            Paints the item according to the current layout.
            <see cref="M:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView.LayoutTopDown(System.Drawing.Size[],JetBrains.UI.IGraphicsContainer)"/> must be called before painting to achieve a meaningful result.
            The painting is performed within the <see cref="T:System.Drawing.Size"/>, at the location <see cref="P:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView.Location"/>.
            Either includes or not the upper margin that constitutes the spacing between the items and makes the item asymmetric.
            The first item in non-scrollable menu and the standalone item presentation should not have the upper margin.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView.Item">
            <summary>
            Gets the item this presentation handler is attached to.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView.Location">
            <summary>
            Gets or sets the location.
            Must be set before calling the <see cref="M:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView.Paint(System.Drawing.Graphics,JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ColorSet,JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewPresentationFlags)"/> method.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuColumnId">
            <summary>
            Column IDs for the menu item columns.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuColumnId.Icon">
            <summary>
            A column that holds the item icon.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuColumnId.Label">
            <summary>
            A column that renders the item's text label and shortcut key.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuColumnId.MAX">
            <summary>
            The total number of columns defined.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc">
            <summary>
            Implements the <see cref="T:JetBrains.UI.PopupMenu.JetPopupMenu"/> overall runtime logic.
            Presentation is handled by <see cref="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.#ctor">
            <summary>
            Initializes the instance.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.ArrowKeysWrapAroundEnds">
            <summary>
            Whether selection should wrap around ends of the items list in the menu.
            <c>True</c> by default.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.AutoselectFirstItem">
            <summary>
            Whether to select the first menu item when items appear in the menu. <c>True</c> is the default behavior.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.BeforeExecuteAction">
            <summary>
            Fires before an action is executed on a menu item or a toolbar button.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.CurrentItems">
            <summary>
            The list of items currently displayed in the menu, as produced by the filters.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.ItemChanged">
            <summary>
            An item has changed.
            This event is fired for the changes in the item state (eg selection). Note: not valid if the whole collection changes.
            You can fire it externally if you change the item presentation (but not the size).
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.ItemPresentationRequested">
            <summary>
            Requests the view to provide presentation for the item, which includes its snapshot image and a layouter that attaches to its location.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.ItemsContainer">
            <summary>
            Stores, filters down and providers the menu items for display in this menu.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.KeyboardAcceleration">
            <summary>
            Gets or sets the way keyboard acceleration works for the list.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.Mnemonics">
            <summary>
            Handles the mnemonic assignment.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.QuickSearch">
            <summary>
            Manages the incremental QuickSearch process.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.SelectedIndex">
            <summary>
            Gets or sets the index of the currently selected item wihtin the <see cref="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.CurrentItems"/> list.
            The return value is guaranteed to be either a valid items array index, or the special <c>-1</c> value in case there is no selection.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.SelectedItem">
            <summary>
            Gets the selected item wrapper object.
            <c>Null</c> is a legitimate value meaning there's no selection.
            If not <c>Null</c>, must belong to the <see cref="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.CurrentItems"/> collection.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.ToolbarButtons">
            <summary>
            Toolbar buttons for the menu's title.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.ApplyCurrentPassFilter(System.Collections.Generic.ICollection{JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem})">
            <summary>
            Applies a current-items-pass filter to the list of menu items, so that only those items are left on output that belong to the <see cref="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.CurrentItems"/> list.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.DeleteSelectedItem">
            <summary>
            Removes the selected item from the list, if such an operation is supported by the provider.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.DumpItemsToString">
            <summary>
            Dumps all the menu items.
            Calls <see cref="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.DumpItemsToXaml(System.Xml.XmlWriter)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.DumpItemsToXaml(System.Xml.XmlWriter)">
            <summary>
            Dumps all the menu items.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.ExecuteMnemonic(System.Char,System.Boolean@)">
            <summary>
            Tries to execute a mnemonic.
            If there's exactly one item registered for this mnemonic, executes the item.
            If there're no items, does nothing.
            If there're multiple conflicting items, selects them in turn, but does not execute.
            </summary>
            <param name="ch">The character to be tested, either a v-key or a char representation.</param>	// TODO: switch to using the accelerator tables
            <returns>Whether an item was executed for this mnemonic.</returns>
            <param name="bMnemonicWasAccepted">If we've refused to execute (returned <c>False</c>), tells whether it's due to the mnemonic not found (<c>False</c>) or duplicate mnemonic (<c>True</c>).</param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.ExecuteSelectedItem">
            <summary>
            Performs the action over the selected item, which should have enabled state for the action to succeed.
            Returns whether the execution was performed.
            If there is no selection or the item is disabled, just returns <c>False</c>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.ExpandSelectedItem">
            <summary>
            If the selected item has a sub-menu associated with it, opens that sub-menu and returns the success flag. Otherwise, returns <c>False</c>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.GetNextIndex(System.Int32,JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.NextItemDir,JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.EndBehavior,JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.AllowedItems)">
            <summary>
            Gets the next/prev item based on the current index.
            Note: the new index is not guaranteed to differ from the original or to fall into the <see cref="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.CurrentItems"/> valid indices (eg -1)!
            </summary>
            <param name="nOriginalIndex">Current index, may be <c>-1</c>. Won't fail on totally invalid numbers.</param>
            <returns>The next index, may be <c>-1</c> if <paramref name="endbehavior"/> is <see cref="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.EndBehavior.ReturnNothing"/> or there are no [suitable] items.</returns>
            <param name="direction">Whether to go towards the end or beginning.</param>
            <param name="endbehavior">Whether to wrap over the end of the items list.</param>
            <param name="alloweditems">Whether iteration is allowed over all the items, or enabled ones only.</param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.SelectNextItem(JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.NextItemDir)">
            <summary>
            Selects the next item in either direction.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.InitLogging">
            <summary>
            Sinks events for logging.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.AllowedItems">
            <summary>
            Defines which items could be processed.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.AllowedItems.All">
            <summary>
            All the items are OK.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.AllowedItems.EnabledOnly">
            <summary>
            Disabled items should be ignored.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.EndBehavior">
            <summary>
            When requesting the next item, defines the behavior at the end of the list, whether to wrap around or return a "no-selection" item.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.EndBehavior.Stop">
            <summary>
            Can't go “next” beyond the last item.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.EndBehavior.WrapAround">
            <summary>
            Goes to the item at the opposite end after the last item.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.EndBehavior.ReturnNothing">
            <summary>
            Goes to “no selection” after the last item.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.ItemIndexEventArgs">
            <summary>
            Event arguments that specify a menu item and its index in the current items collection for fast access in the view.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.ItemIndexEventArgs.Index">
            <summary>
            Gets the index of the item that has changed.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.ItemIndexEventArgs.Item">
            <summary>
            Gets the item that has changed.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.NextItemDir">
            <summary>
            When requesting the next item, defines the direction of the search.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem">
            <summary>
            Stores the item information and implements the basic behavior of the jet-popup-menu item.
            Is a logical part of <see cref="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc"/>, whose visual presentation is handled by <see cref="T:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView"/>-implementors, as directed by <see cref="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.myDisplayName">
            <summary>
            Text to be rendered in the list.
            Cannot be <c>Null</c>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.myIcon">
            <summary>
            The icon. Can be <c>Null</c>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.myKey">
            <summary>
            An external key to the item.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.myMnemonic">
            <summary>
            An uppercase character that is the item's mnemonic, or <c>Null</c>, if the item has no mnemonics assigned.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.myShortcutText">
            <summary>
            Shortcut text, displayed to the right of the main item text.
            Cannot be <c>Null</c>.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.myStyle" -->
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.myTailGlyph">
            <summary>
            Holds the tail glyph of the item, which is the rightmost icon that goes after the shortcut text.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.myTooltipText">
            <summary>
            Tooltip text for this item, or an empty string if there is no tools item.
            Cannot be <c>Null</c>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.#ctor(System.Object,JetBrains.UI.PopupMenu.IMenuItemDescriptor)">
            <summary>
            Creates a new item.
            </summary>
            <param name="key">External key of the item this class would represent.</param>
            <param name="descriptor">Describes the item data to make the item presentation out of it.</param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.DumpToXaml(System.Xml.XmlWriter)">
            <summary>
            Dumps the object.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.Init(JetBrains.UI.PopupMenu.IMenuItemDescriptor)">
            <summary>
            Retrieves the item data via its provider, adjusts if needed, and stores a static copy.
            Calcs the sizes, but does not layout.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.StubText">
            <summary>
            Gets the default text that should be used when item text is not available.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.DisplayName">
            <summary>
            Gets the text to be rendered in the item.
            Cannot be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.Icon">
            <summary>
            Gets the icon. Can be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.IsEnabled">
            <summary>
            Gets whether this item is enabled.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.IsExpandable">
            <summary>
            Gets whether this item can be xpanded.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.IsGroupHeader">
            <summary>
            Gets whether this item is a group header item.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.IsSeparator">
            <summary>
            Gets whether this item is a separator item.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.Key">
            <summary>
            Gets the external item key of type <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.ManualMnemonic">
            <summary>
            Gets the manually-assigned mnemonic, if any, as was specified in the producing <see cref="T:JetBrains.UI.PopupMenu.IMenuItemDescriptor"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.Mnemonic">
            <summary>
            Gets or sets an uppercase character that is the item's mnemonic, or <c>Null</c>, if the item has no mnemonics assigned.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.ShortcutText">
            <summary>
            Gets the shortcut text to be displayed to the right of the <see cref="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.DisplayName"/>.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.Style" -->
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.TailGlyph">
            <summary>
            Holds the tail glyph of the item, which is the rightmost icon that goes after the shortcut text.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem.TooltipText">
            <summary>
            Gets the tooltip text for this item, or an empty string if there is no tools item.
            Cannot be <c>Null</c>.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView">
            <summary>
            A base class for the popup menu item presentations in their default rendering ("as in menu").
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.myRenderParams">
            <summary>
            Use <see cref="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.RenderParams"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.myItem">
            <summary>
            Menu item we're rendering.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.myLocation">
            <summary>
            <see cref="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.Location"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.PaintWithUpperMargin(System.Drawing.Graphics,JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ColorSet,JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewPresentationFlags)">
            <summary>
            Painting implementation. Always includes the upper margin. Works in menu-item-local coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.GetSize(JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewPresentationFlags)">
            <summary>
            Gets the actual size of the item at the current moment, as obtained after the last <see cref="M:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView.LayoutTopDown(System.Drawing.Size[],JetBrains.UI.IGraphicsContainer)"/>, according to which the item is about to <see cref="M:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView.Paint(System.Drawing.Graphics,JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ColorSet,JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewPresentationFlags)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.HitTest(System.Drawing.Point)">
            <summary>
            Performs a vertical hit-test (checks the y-coordinate only).
            </summary>
            <returns>Zero if hit, less than zero if the point is located above the item, and more than zero if below.</returns>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.LayoutBottomUp(JetBrains.UI.IGraphicsContainer)">
            <summary>
            First (bottom-up) part of the layout: the preferred sizes are being collected.
            Calculates the per-column preferred size of the menu item.
            Should be called before <see cref="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.LayoutTopDown(System.Drawing.Size[],JetBrains.UI.IGraphicsContainer)"/> on any change.
            </summary>
            <param name="gc">A device context to measure the text against.</param>
            <returns>Returns an array of preferred sizes for each of the cells defined.</returns>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.LayoutTopDown(System.Drawing.Size[],JetBrains.UI.IGraphicsContainer)">
            <summary>
            Performs the top-down part of the layout, when the item receives some size it should layout itself into.
            Should be called after <see cref="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.LayoutBottomUp(JetBrains.UI.IGraphicsContainer)"/>.
            </summary>
            <param name="cells">The available size for layouting each of the cells into.</param>
            <param name="gc">A device context to measure the text against.</param>
            <returns>The size the item succeeded to layout into. Typically, should be equal in width to the sum of all the cell widths, and in height to the maximum height encountered.</returns>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.Paint(System.Drawing.Graphics,JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ColorSet,JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewPresentationFlags)">
            <summary>
            Paints the item according to the current layout.
            <see cref="M:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView.LayoutTopDown(System.Drawing.Size[],JetBrains.UI.IGraphicsContainer)"/> must be called before painting to achieve a meaningful result.
            The painting is performed within the <see cref="M:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView.GetSize(JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewPresentationFlags)"/>, at the location <see cref="P:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView.Location"/>.
            Either includes or not the upper margin that constitutes the spacing between the items and makes the item asymmetric.
            The first item in non-scrollable menu and the standalone item presentation should not have the upper margin.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.RenderParams">
            <summary>
            Gets the rendering parameters to be used while rendering the items text.
            Non thread-safe.
            You CAN and MUST set up all of the color parameters over this instance each time before the call.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.Item">
            <summary>
            Gets the item this presentation handler is attached to.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.Location">
            <summary>
            Gets or sets the location.
            Must be set before calling the <see cref="M:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView.Paint(System.Drawing.Graphics,JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ColorSet,JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewPresentationFlags)"/> method.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.Dim">
            <summary>
            A static class with dimension constants.
            See the layout image for meanings.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.Dim.GroupHeaderGap">
            <summary>
            Width of the gap between the icon column and its bulk fill.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.Dim.LabelMinDesiredSize">
            <summary>
            The minimum size under which it's not desirable to shrink the label.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.Dim.Margin" -->
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.Dim.Separator">
            <summary>
            Heigh of the separator.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.Dim.ShortcutTextGap">
            <summary>
            Minimal gap between the menu item text and its mnemonic on the right.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemView.Dim.TailGlyphToShortcutTextGap">
            <summary>
            Gap between the shortcut text and the tail glyph, if both are present.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewHitTestResult">
            <summary>
            Menu item view hit test result.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewHitTestResult.Above">
            <summary>
            The y-coordinate is above the item. The x-coordinate is not checked.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewHitTestResult.Below">
            <summary>
            The y-coordinate is below the item. The x-coordinate is not checked.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewHitTestResult.Bulk">
            <summary>
            The bulk of the menu item.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewHitTestResult.ActiveTailGlyph">
            <summary>
            The tail glyph that can be clicked (eg expandable items).
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewPresentationFlags">
            <summary>
            Affects the presentation of menu item views.
            Does not affect layout and measure.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewPresentationFlags.None">
            <summary>
            Default.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewPresentationFlags.IsSelected">
            <summary>
            The item is currently in the selected state.
            Does not affect item size or layout.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewPresentationFlags.ExcludeUpperMargin">
            <summary>
            The item does not have the upper margin (spacer between the items).
            Required for first items in non-scrollable views and standalone presentations.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView">
            <summary>
            Implements the Mainpart sub-control of the <see cref="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView"/>.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ISubpart">
            <summary>
            An interface to be implemented by all the menu subparts.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView">
            <summary>
            Masters the Jet Popup Menu main body presentation.
            Is a topmost popup window that looks like an MSO-11 v-menu, performs low-level custom layered-window painting to achieve the alpha-channel transparency (non-rectangular form, shadows).
            Visually reflects the state backended by <see cref="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc"/>.
            Implements the control that is displayed by the <see cref="M:JetBrains.UI.PopupMenu.JetPopupMenu.Show"/> method.
            Do not create directly, use <see cref="T:JetBrains.UI.PopupMenu.JetPopupMenu"/> frontend instead.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.myOptionEnableMovingArrows">
            <summary>
            Whether the scroll-arrows reflect the scrolling position and range, or not.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.myOptionHollowDisabledScrollArrows">
            <summary>
            Whether the disabled scroll arrows have an outline and no fill.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.OptionTransparencyAlwaysOff">
            <summary>
            Forces the Alpha rendering mode to be never used.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.OptionTransparencyAlwaysOn">
            <summary>
            Forces the Alpha rendering mode to be used always.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.myTransparentBackRenderParams">
            <summary>
            Use <see cref="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.TransparentBackRenderParams"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.Caption">
            <summary>
            The caption for the menu view.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.CaptureMouseInitially">
            <summary>
            Gets or sets whether the menu should capture mouse input on startup and trigger the action on mouseup, thus assuming the "mouse-down" part of the input already done.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.myAutoActivate">
            <summary>
            <see cref="T:JetBrains.CommonControls.IConstrainableControl"/> helper.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.myColors">
            <summary>
            The precalculated set of colors.
            Must not be <c>Null</c>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.myDocument">
            <summary>
            Codebehind that implements the menu logic.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.myDropShadowEnabled">
            <summary>
            Caches the drop-shadow-enabled state, as it must be maintained constant between calc-sizes, but should update from time to time.
            Synced to OS settings on each <see cref="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.OnLayout(System.Windows.Forms.LayoutEventArgs)"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.myMainpart">
            <summary>
            The mainpart subcontrol.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.myRects">
            <summary>
            The current precalculated layout.
            Created on the first top-down layouting pass.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.myShadows">
            <summary>
            Hands a shadow next to the window.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.myShape">
            <summary>
            The list of rectangles describing the current shape of the window — that is, the region most recently specified at the top-down layouting stage.
            Useful for checking whether we should update the shape or not.
            Cannot be <c>Null</c>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.myTitle">
            <summary>
            The title subcontrol.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.myTitleDisposition">
            <summary>
            Defines where the title should be placed, depending on the side of the anchoring rectangle at which the menu is displayed.
            Vertically, may only be <see cref="F:JetBrains.UI.Anchoring.NearWithin"/> or <see cref="F:JetBrains.UI.Anchoring.FarWithin"/>, which means that the header is either above or below the body.
            Horizontally, may only be one of the inside anchorings, <see cref="F:JetBrains.UI.Anchoring.NearWithin"/>, <see cref="F:JetBrains.UI.Anchoring.MiddleWithin"/>, or <see cref="F:JetBrains.UI.Anchoring.NearWithout"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.myTransparency">
            <summary>
            Defines whether the transparency special effects, like real shadow, are enabled, or not.
            Setting the initial value to <c>False</c> forcibly disables the effect.
            The field fallbacks to <c>False</c> automatically if there are too few display colors.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.myWantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.InitControls">
            <summary>
            Inits the UI controls, including the form itself
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.LayoutBottomUp(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Calculates the preferred size of the control so that all the context fit.
            Does not apply the size, just returns it.
            </summary>
            <param name="gc">The device context to measure the text against.</param>
            <param name="sizeLimit">The limit for the size, as it helps to reduce the number of calculations.</param>
            <returns>The preferred constrained size.</returns>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.LayoutTopDown(JetBrains.UI.IGraphicsContainer)">
            <summary>
            Performs the top-down layouting stage.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.Paint(System.Drawing.Graphics,JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ColorSet,System.Drawing.Region)">
            <summary>
            Does just the very painting into the given <see cref="T:System.Drawing.Graphics"/>.
            </summary>
            <param name="g">Device context.</param>
            <param name="colors">The color table currently in use by the menu.</param>
            <param name="rgnDirty">The dirty region within which the items should be painted. May be <c>Null</c>.</param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.UpdateShape">
            <summary>
            Updates the window non-rectangular shape, as defined by the <see cref="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.LayoutRects.Opaque"/> set.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.Dispose(System.Boolean)">
            <summary>
            Disposes of the resources (other than memory) used by the <see cref="T:System.Windows.Forms.Form"></see>.
            </summary>
            
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.OnClosed(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Form.Closed"></see> event.
            </summary>
            
            <param name="e">The <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.KeyPress"></see> event.
            </summary>
            
            <param name="args">A <see cref="T:System.Windows.Forms.KeyPressEventArgs"></see> that contains the event data. </param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.OnLocationChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.LocationChanged" /> event.
            </summary>
            
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            The non-Transparency mode painting function.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.OnVisibleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.VisibleChanged" /> event.
            </summary>
            
            <param name="e">The <see cref="T:System.EventArgs" /> that contains the event data. </param>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.TransparentBackRenderParams">
            <summary>
            Gets the rendering aspect for rendering the text over a transparent background in the menu. Not for menu items.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.Disposition">
            <summary>
            Gets the menu disposition, which determines whether the title is above or below, and so on.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.Document">
            <summary>
            Gets the object that implements the menu logic.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.Mainpart">
            <summary>
            Gets the Mainpart subcontrol.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.Title">
            <summary>
            Gets the Title subcontrol.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ShadowSize">
            <summary>
            Gets the shadow size (width/height of vertical/horizontal shadow, respectively).
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.Colors">
            <summary>
            Gets the set of colors involved in painting the control.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ShowWithoutActivation">
            <summary>
            Gets a value indicating whether the window will be activated when it is shown.
            </summary>
            
            <returns>
            True if the window will not be activated when it is shown; otherwise, false. The default is false.
            </returns>
            
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ColorSet">
            <summary>
            A set of precalculated colors that are based on the system ones and are used for painting different parts of the control.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ColorSet.Blend(System.Drawing.Color,System.Drawing.Color,System.Double,System.Drawing.Graphics)">
             <summary>
             Alpha-blends two colors.
             </summary>
             <param name="factor">A real number between <c>0</c> and <c>1</c>, specifying the first color alpha.</param>
             <returns></returns>
            <param name="a">The first color.</param>
            <param name="b">The second color.</param>
            <param name="g">A device context to adjust for the nearest solid color.</param>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.Dim">
            <summary>
            A static class with dimension constants.
            See the layout image for meanings.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.Dim.MainpartFarBorder">
            <summary>
            Height-only.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.Dim.MainpartNearBorder">
            <summary>
            Height-only.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ISubpart">
            <summary>
            An interface to be implemented by all the menu subparts.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ISubpart.OnKeyDownHighPriority(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Should process only high-priority keys.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ISubpart.OnKeyDownLowPriority(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Should process all the keys.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ISubpart.OnKeyPressLowPriority(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Should process all the keys.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.LayoutRects">
            <summary>
            Groups a set of rectangles that completely define the layout and drawing parts of the control.
            An instance is filled on the layouting stage, and used for painting and hittesting.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.LayoutRects.Opaque">
            <summary>
            A set of rectangles that produce the opaque part of the window, in client coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.LayoutRects.ClearRects(System.Object)">
            <summary>
            Clears all the <see cref="T:System.Drawing.Rectangle"/> fields in the specified container.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.LayoutRects.BorderLayoutRects.GetBackgroundColorArea">
            <summary>
            Gets the list of borders to be filled with <see cref="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ColorSet.Background"/> when painting.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.LayoutRects.BorderLayoutRects.GetBorderColorArea">
            <summary>
            Gets the list of borders to be filled with <see cref="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ColorSet.Border"/> when painting.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.ScrollTimerIntervalWithMouse">
            <summary>
            The scroll timer interval in case a mouse button (left or right) is down.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.ScrollTimerIntervalWithoutMouse">
            <summary>
            The scroll timer interval in case neither left nor right mouse button is down.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.LastVisibleItem">
            <summary>
            Index of the last visible item in the scrolling view.
            <c>-1</c> means it has not been initialized yet.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.myBmpArrowDownDisabled">
            <summary>
            The pre-rendered lower-scroller arrow, disabled state.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.myBmpArrowDownEnabled">
            <summary>
            The pre-rendered lower-scroller arrow, enabled state.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.myBmpArrowUpDisabled">
            <summary>
            The pre-rendered upper-scroller arrow, disabled state.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.myBmpArrowUpEnabled">
            <summary>
            The pre-rendered upper-scroller arrow, enabled state.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.myColumnWidths">
            <summary>
            After performing the first layouting, stores the menu-item-column-widths.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.myDirtyItems">
            <summary>
            Collects the indices of dirty items that have to be repainted on the next paint iteration.
            The usual <see cref="M:JetBrains.UI.Interop.Win32Declarations.GetUpdateRgn(System.IntPtr,System.IntPtr,System.Boolean)"/> mechanisms do not take scrolling into account correctly.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.myDropShadowEnabled">
            <summary>
            Caches the drop-shadow-enabled state, as it must be maintained constant between calc-sizes, but should update from time to time.
            Synced to OS settings on each <see cref="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.OnLayout(System.Windows.Forms.LayoutEventArgs)"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.myItemToView">
            <summary>
            After the mapping between items and views is established by <see cref="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.InitDataFlow_ItemViews"/>, contains the up-to-date mapping from document items to item views.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.myLastKeyDownWasMnemonic">
            <summary>
            Set by the <see cref="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.OnKeyDownLowPriority(System.Windows.Forms.KeyEventArgs)"/> depending on whether it has successfully processed the key-down message as a mnemonic, or not.
            If <c>False</c>, the <see cref="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.OnKeyPressLowPriority(System.Windows.Forms.KeyPressEventArgs)"/> should try looking up a mnemonic by char also, in addition to the key-down's v-key.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.myMenuClientHeight">
            <summary>
            Caches the <see cref="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.LayoutRects.MenuClient"/> value so that the scroll ranges could be adjusted when the menu client height changes.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.myMenuView">
            <summary>
            Codebehind that implements the menu logic.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.myMouseLocation">
            <summary>
            Filters out zero movements.
            Also, helps with telling the initial menu display from normal mouse movements.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.myMouseWheelScrollDelta">
            <summary>
            Caches the system metric.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.myMouseWheelScrollLines">
            <summary>
            Caches the system metric.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.myReadonlyCookie">
            <summary>
            A token that supports implementing the readonly <see cref="T:JetBrains.DataFlow.Property`1"/> items.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.myRects">
            <summary>
            The current precalculated layout.
            Created on the first top-down layouting pass.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.myScrollNeeded">
            <summary>
            Whether the content does not fit into the control's constrained size, and scrolling is needed to present it all.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.myScrollPos">
            <summary>
            If <see cref="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.myScrollNeeded"/>, represents the scrolling position — an index of the item at the top of the view.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.myScrollTimer">
            <summary>
            A timer that triggers scrolling by one item.
            Lazily-created.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.myWantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.IsKeyboardNavigating">
            <summary>
            Readonly. Set to <c>True</c> when the keyboard navigation is being performed.
            If the document's selected item is being changed due to a keyboard action, this property is <c>True</c> when the change actually occurs.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.IsValidItemLocation(System.Drawing.Point)">
            <summary>
            Checks whether such a location represents a visible item.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.EnsureVisible(System.Int32,JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.VisibleAt)">
            <summary>
            Adjusts the view scrolling so that the item with the given index were visible at the position specified.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.GetAutoscrolling(JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.NextItemDir@)">
            <summary>
            Gets whether the autoscrolling mode is on, and, if yes, what it direction is.
            </summary>
            <param name="direction">Autoscrolling direction, if the retval is <c>True</c>. Otherwise, undefined.</param>
            <returns>Whether autoscrolling is currently on.</returns>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.GetHitMenuItemIndex(System.Drawing.Point)">
            <summary>
            Looks up a menu item hit by the given point. <c>-1</c> means outside any items.
            </summary>
            <param name="pt">Point, in client coordinates.</param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.InitControls">
            <summary>
            Inits the UI controls, including the form itself
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.InitDataFlow_Document">
            <summary>
            Sinks the document events.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.InitDataFlow_EnableKeyboardTooltips">
            <summary>
            All of the keyboard tooltip handling for this menu.
            Keyboard-tooltips: appear when items are selected with keyboard.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.InitDataFlow_ItemViews">
            <summary>
            Monitors the document items, maintains the item views.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.InvalidateDirtyItems">
            <summary>
            Marks the regions occupied by those items considered dirty as invalid.
            Helps taking scrolling into account correctly.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.InvalidateItem(System.Int32)">
            <summary>
            Causes the specified item to be repainted on the next painting cycle.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.LayoutBottomUp(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Layouts the main part that includes the part borders, menu items, scrollers, quick-search editbox, etc.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.LayoutBottomUp_MenuItems(System.Int32[]@,System.Int32[]@,System.Drawing.Size@,JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Invokes the menu items' bottom-up layouting and collects the information about max-column-widths and total-menu-width.
            </summary>
            <param name="nColumnWidths">Maximum encountered widths for each of the columns.</param>
            <param name="nItemHeights">Height of each of the items.</param>
            <param name="sizeTotal">Total size of all the items (item height is max cells' height, item width is the sum of cell widths).</param>
            <param name="gc">A device context to measure the text against.</param>
            <param name="sizeLimit">The limit for the size, as it helps to reduce the number of calculations.</param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.LayoutTopDown_MenuItems(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            During the top-down layout session, when the menu area is already placed, layouts the menu items and scrolling arrows.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.LayoutTopDown_PlaceMenuItems(System.Boolean)">
            <summary>
            Sets the menu items' coordinates according to the scrolling position.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.OnScrollTimerTick(System.Object,System.EventArgs)">
            <summary>
            The scroll timer has ticked, perform the scrolling.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.Paint(System.Drawing.Graphics)">
            <summary>
            Does just the very painting into the given <see cref="T:System.Drawing.Graphics"/>.
            </summary>
            <param name="g">Device context.</param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.PrerenderBitmapsStatic">
            <summary>
            Prerenders some of the commonly used UI elements into bitmaps.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.PrerenderBitmapsStatic_ScrollArrows">
            <summary>
            Prerenders the bitmaps for scrolling arrows.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.ResetScrollRanges">
            <summary>
            Resets the scroll ranges and recalculates the current scrolling position so that the selected item were visible and the scrolling pos was not beyound the last reasonable position (ie no empty space beyond the end).
            Should be called after loading a new set of items or after the menu client height (<see cref="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.LayoutRects.MenuClient"/>) changes.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.ScrollByOneItem(JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.NextItemDir)">
            <summary>
            Scrolls the view by one item, if possible.
            In either case, one item is expected to appear in view after the scrolling, and zero or more items to disappear at the opposite edge. This is to the case of non-equally-sized items.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.ScrollMenu(System.Int32)">
            <summary>
            Scrolls the menu vertically by the amount given by the <paramref name="dy"/> value, in pixels.
            <paramref name="dy"/> being positive, the content slides down. Otherwise, it slides up.
            This method causes no repaint.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.SelectItemAtPoint(System.Drawing.Point)">
            <summary>
            Selects a menu item that is currently under the point specified.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.SetAutoscrolling" -->
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.Control"></see> and its child controls and optionally releases the managed resources.
            </summary>
            
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseWheel"></see> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"></see> that contains the event data.</param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            The non-Transparency mode painting function.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.OnVisibleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.VisibleChanged"></see> event.
            </summary>
            
            <param name="e">The <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.OnKeyDownHighPriority(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Should process only high-priority keys.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.OnKeyDownLowPriority(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Should process all the keys.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.OnKeyPressLowPriority(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Should process all the keys.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.Document">
            <summary>
            Gets the object that implements the menu logic.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.FirstVisibleItem">
            <summary>
            Gets the first visible item in the scrolling view.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.MenuView">
            <summary>
            Gets the parent menu view.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.ScrollNeeded">
            <summary>
            Gets whether scrolling is turned on in the menu (if the items do not fit into the constrained size).
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.Colors">
            <summary>
            Gets the set of colors involved in painting the control.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.Dim">
            <summary>
            A static class with dimension constants.
            See the layout image for meanings.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.Dim.ScrollArrow">
            <summary>
            Size of the scroller arrow inside the <see cref="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.Dim.Scroller">scroller area</see>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.Dim.ScrollArrowMargin">
            <summary>
            A width-only size that defines the minimum distance between a scroll arrow and the edge of its parent scroll area.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.Dim.Scroller">
            <summary>
            Height-only size of the scroller area.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.LayoutRects">
            <summary>
            Groups a set of rectangles that completely define the layout and drawing parts of the control.
            An instance is filled on the layouting stage, and used for painting and hittesting.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.LayoutRects.MenuLowerScrollArrow">
            <summary>
            Layouted in <see cref="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.LayoutTopDown_PlaceMenuItems(System.Boolean)"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.LayoutRects.MenuLowerScrollArrow2">
            <summary>
            Layouted in <see cref="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.LayoutTopDown_PlaceMenuItems(System.Boolean)"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.LayoutRects.MenuUpperScrollArrow">
            <summary>
            Layouted in <see cref="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.LayoutTopDown_PlaceMenuItems(System.Boolean)"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.LayoutRects.MenuUpperScrollArrow2">
            <summary>
            Layouted in <see cref="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.LayoutTopDown_PlaceMenuItems(System.Boolean)"/>.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.VisibleAt">
            <summary>
            Location argument for the <see cref="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.EnsureVisible(System.Int32,JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.VisibleAt)"/> function.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.VisibleAt.DontCare">
            <summary>
            The menu should be scrolled so that the item at the given index were visible, be it at the top, bottom or middle of the list.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.VisibleAt.Top">
            <summary>
            The menu should be scrolled so that the item at the given index were at the top of the visible area.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuMainpartView.VisibleAt.Bottom">
            <summary>
            The menu should be scrolled so that the item at the given index were at the bottom of the visible area.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuNormalItemView">
            <summary>
            Layouter and renderer for ordinary menu items.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuNormalItemView.myIsIconFit">
            <summary>
            Whether the icon fits into the specified size or not.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuNormalItemView.myCache_LayoutBottomUp_ResultCells">
            <summary>
            Caches the <see cref="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuNormalItemView.LayoutBottomUp(JetBrains.UI.IGraphicsContainer)"/> calculations.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuNormalItemView.myCache_LayoutTopDown_InputCells">
            <summary>
            Caches the <see cref="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuNormalItemView.LayoutTopDown(System.Drawing.Size[],JetBrains.UI.IGraphicsContainer)"/> input cells. If they don't differ, the rects will not be recalculated.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuNormalItemView.GetIconConstrainedSize">
            <summary>
            Gets the icon size, constrained by the min-icon-size.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuNormalItemView.HitTest(System.Drawing.Point)">
            <summary>
            Performs a vertical hit-test (checks the y-coordinate only).
            </summary>
            <returns>Zero if hit, less than zero if the point is located above the item, and more than zero if below.</returns>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuNormalItemView.LayoutBottomUp(JetBrains.UI.IGraphicsContainer)">
            <summary>
            First (bottom-up) part of the layout: the preferred sizes are being collected.
            Calculates the per-column preferred size of the menu item.
            Should be called before <see cref="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuNormalItemView.LayoutTopDown(System.Drawing.Size[],JetBrains.UI.IGraphicsContainer)"/> on any change.
            </summary>
            <param name="gc">A device context to measure the text against.</param>
            <returns>Returns an array of preferred sizes for each of the cells defined.</returns>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuNormalItemView.LayoutTopDown(System.Drawing.Size[],JetBrains.UI.IGraphicsContainer)">
            <summary>
            Performs the top-down part of the layout, when the item receives some size it should layout itself into.
            Should be called after <see cref="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuNormalItemView.LayoutBottomUp(JetBrains.UI.IGraphicsContainer)"/>.
            </summary>
            <param name="cells">The available size for layouting each of the cells into.</param>
            <param name="gc">A device context to measure the text against.</param>
            <returns>The size the item succeeded to layout into. Typically, should be equal in width to the sum of all the cell widths, and in height to the maximum height encountered.</returns>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuNormalItemView.PaintWithUpperMargin(System.Drawing.Graphics,JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ColorSet,JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewPresentationFlags)">
            <summary>
            Painting implementation. Always includes the upper margin. Works in menu-item-local coordinates.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuNormalItemView.IconCellPadding">
            <summary>
            Padding for the icon and to the icon-cell boundaries.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuNormalItemView.LabelCellPadding">
            <summary>
            Padding for the label and to the label-cell boundaries.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuSeparatorItemView">
            <summary>
            Layouter and renderer for separator menu items.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuSeparatorItemView.RNonGradientAboveSep">
            <summary>
            Non-gradient part above the separator line (the upper margin).
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuSeparatorItemView.RNonGradientLefty">
            <summary>
            Non-gradient part to the left of the separator line, to the right of the gradient part.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuSeparatorItemView.RSeparatorBody">
            <summary>
            The separator itself.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuSeparatorItemView.LayoutBottomUp(JetBrains.UI.IGraphicsContainer)">
            <summary>
            First (bottom-up) part of the layout: the preferred sizes are being collected.
            Calculates the per-column preferred size of the menu item.
            Should be called before <see cref="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuSeparatorItemView.LayoutTopDown(System.Drawing.Size[],JetBrains.UI.IGraphicsContainer)"/> on any change.
            </summary>
            <param name="gc">A device context to measure the text against.</param>
            <returns>Returns an array of preferred sizes for each of the cells defined.</returns>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuSeparatorItemView.LayoutTopDown(System.Drawing.Size[],JetBrains.UI.IGraphicsContainer)">
            <summary>
            Performs the top-down part of the layout, when the item receives some size it should layout itself into.
            Should be called after <see cref="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuSeparatorItemView.LayoutBottomUp(JetBrains.UI.IGraphicsContainer)"/>.
            </summary>
            <param name="cells">The available size for layouting each of the cells into.</param>
            <param name="gc">A device context to measure the text against.</param>
            <returns>The size the item succeeded to layout into. Typically, should be equal in width to the sum of all the cell widths, and in height to the maximum height encountered.</returns>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuSeparatorItemView.PaintWithUpperMargin(System.Drawing.Graphics,JetBrains.UI.PopupMenu.Impl.JetPopupMenuView.ColorSet,JetBrains.UI.PopupMenu.Impl.JetPopupMenuItemViewPresentationFlags)">
            <summary>
            Paints the item according to the current layout.
            <see cref="M:JetBrains.UI.PopupMenu.Impl.IJetPopupMenuItemView.LayoutTopDown(System.Drawing.Size[],JetBrains.UI.IGraphicsContainer)"/> must be called before painting to achieve a meaningful result.
            The painting is performed within the <see cref="!:IJetPopupMenuItemView.Size"/>, and the coordinate system origin of <paramref name="g"/> must be adjusted so that it were in the top-left corner of the item place.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView">
            <summary>
            Implements the Title sub-control of the <see cref="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.myControlExtension">
            <summary>
            The extension control that's added to the title area.
            <c>Null</c> by default, which means there is no control.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.myEditboxQuickSearch">
            <summary>
            The quick-search string input editbox.
            Must not be <c>Null</c>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.myIconQuickSearch">
            <summary>
            An icon for the quick search editbox line.
            Must not be <c>Null</c>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.myMenuView">
            <summary>
            The parent menu view.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.myMouseLocation">
            <summary>
            Filters out zero movements.
            Also, helps with telling the initial menu display from normal mouse movements.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.myRects">
            <summary>
            The current precalculated layout.
            Created on the first top-down layouting pass.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.myStateQuickSearch">
            <summary>
            Whether, how and where the quick-search editbox should be displayed.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.myToolbar">
            <summary>
            The toolbar in the header.
            <c>Null</c> if there are no toolbar items.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.myWantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.#ctor(JetBrains.UI.PopupMenu.Impl.JetPopupMenuView)">
            <summary>
            Init the instance, attach to the parent menu view.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.IsEditboxChangingColor">
            <summary>
            Specifies whether the QuickSearch editbox color reflects the ready-state and validness of the quick search.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.InitControls">
            <summary>
            Inits the UI controls, including the form itself
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.Paint(System.Drawing.Graphics)">
            <summary>
            Does just the very painting into the given <see cref="T:System.Drawing.Graphics"/>.
            </summary>
            <param name="g">Device context.</param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.UpdateEditboxColor">
            <summary>
            Updates the quick-search editbox coloring to reflect the current state: pending, invalid, etc.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.UpdateQuickSearchState">
            <summary>
            Syncs the quick-search-related UI controls state.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.Control"></see> and its child controls and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            The non-Transparency mode painting function.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.OnKeyDownHighPriority(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Should process only high-priority keys.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.OnKeyDownLowPriority(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Should process all the keys.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.OnKeyPressLowPriority(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Should process all the keys.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.Document">
            <summary>
            Gets the object that implements the menu logic.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.ExtensionControl">
            <summary>
            Gets or sets the custom extension control that is added to the title.
            May be <c>Null</c>, which means there is no extension control.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.MenuView">
            <summary>
            Gets the parent menu view.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.QuickSearchEditbox">
            <summary>
            Gets the editbox that accepts the quick search string.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.Toolbar">
            <summary>
            Gets the toolbar part of the title view.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.Colors">
            <summary>
            Gets the set of colors involved in painting the control.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.Dim">
            <summary>
            A static class with dimension constants.
            See the layout image for meanings.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.Dim.CaptionPadding">
            <summary>
            Padding around the caption element of the title.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.Dim.EditboxTextPadding">
            <summary>
            Approximate padding of the editbox text, that includes the border and some additional padding inside it.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.Dim.InterlineGap">
            <summary>
            Gap between the title lines.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.Dim.ItemsGap">
            <summary>
            Gap between different items in the title.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.Dim.Margin">
            <summary>
            Margin around the title client content inside the borders.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.Dim.QuickSearchEditboxMarginInline">
            <summary>
            A margin around the quick-search editbox in case when it's displayed on a separate line.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.Dim.QuickSearchEditBoxMin">
            <summary>
            The minimum size of the QuickSearch editbox.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.Dim.QuickSearchIconPadding">
            <summary>
            The desired visual passing around the Quick Search icon.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.Dim.QuickSearchIconPaddingLeftInSecondLine">
            <summary>
            The part of the Quick Search icon leftside visual padding that falls within the second line rect.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.Dim.QuickSearchIconPaddingRightInSecondLine">
            <summary>
            The part of the Quick Search icon rightside visual padding that falls within the second line rect.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.LayoutRects">
            <summary>
            Groups a set of rectangles that completely define the layout and drawing parts of the control.
            An instance is filled on the layouting stage, and used for painting and hittesting.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.QuickSearchEditboxStates">
            <summary>
            Whether, how and where the quick-search editbox should be displayed.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.QuickSearchEditboxStates.Hidden">
            <summary>
            The editbox is hidden, no space is layouted for it.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuTitleView.QuickSearchEditboxStates.ShownInTitle">
            <summary>
            The editbox is displayed right in the title bar.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView">
            <summary>
            The <see cref="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView"/>'s toolbar.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.myToolbarRenderParams">
            <summary>
            Use <see cref="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.ToolbarRenderParams"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.myMapKeysToItems">
            <summary>
            Maps keyboard shortcuts to the assigned items.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.myBounds">
            <summary>
            The bounds, in parent coordinates.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.SelectedIndex">
            <summary>
            Gets or sets the index of the selected toolbar button, or <c>-1</c> if none is selected.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.SelectedItem">
            <summary>
            Gets the selected item of the toolbar, or <c>Null</c> if none is available.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.ExecuteSelectedItem">
            <summary>
            Executes an action associated with the selected item.
            Safe to call even if there's no selection.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Processes the keyboard shortcuts associated with the toolbar.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles mouse movements.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.GetHitItemIndex(System.Drawing.Point)">
            <summary>
            Looks up a menu item hit by the given point. <c>-1</c> means outside any items.
            The point must be in owner coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.GetTooltip(System.Drawing.Point)">
            <summary>
            Called by tooltip manager, if the tooltip is to be displayed
            </summary>
            <param name="point">Point in control's coordinates</param>
            <returns><see cref="T:JetBrains.CommonControls.ITooltipInfo"/>, or <c>Null</c> if no tooltip should be displayed.</returns>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.GetDesiredSize(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Performs the bottom-up layouting stage, when the control calculates its desired size using the given constraints.
            Should give generally the same results as <see cref="T:JetBrains.CommonControls.IConstrainableControl"/>, but could employ the <paramref name="gc"/> device context for the sake of optimization.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="limit">The maximum available space (that could affect the shape of the control, or strip down unnecessary calculations over the invisible items).
            May be a <see cref="T:System.Drawing.Size"/> with width and height equal to <see cref="F:System.Int32.MaxValue"/>, which means that the size is not limited.</param>
            <returns>The desired size, must be no larger than <paramref name="limit"/>.</returns>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.Paint(System.Drawing.Graphics)">
            <summary>
            Renders the context of the windowless control. The rendering bounds are given by the 
            </summary>
            <param name="g">The device context.</param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.SetBounds(JetBrains.UI.IGraphicsContainer,System.Drawing.Rectangle)">
            <summary>
            Performs the top-down layouting stage, when the control lais out its parts within the given bounds.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="bounds">The new bounds. From now on, this value should be returned from the <see cref="P:JetBrains.CommonControls.IWindowlessControl.Bounds"/> property.</param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.SetLayout(JetBrains.UI.LayoutResult)">
            <summary>
            Tells the control the details about the new layout applied to it by the controlling entity in conjunction with some <see cref="T:JetBrains.UI.IPopupLayouter"/>.
            Typically, the control need not apply the given size and location because that should be done by the controlling entity.
            The control may change its presentation in response to the layouting details, for example, whether it's attached to the top or the bottom of the anchoring rect.
            </summary>
            <param name="layout">The layouting details.</param>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.ToolbarRenderParams">
            <summary>
            Gets the toolbar rendering aspects.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.Items">
            <summary>
            Gets the toolbar items.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.ItemViews">
            <summary>
            Gets the views for the toolbar items.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.MenuView">
            <summary>
            Gets the menu that owns this toolbar.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.Bounds">
            <summary>
            Gets the toolbar bounds (in parent window client rect coords).
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.GottenDirty">
            <summary>
            The control has gotten dirty and should be repainted.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView">
            <summary>
            A toolbar item on the <see cref="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuView"/>'s toolbar (<see cref="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarView"/>).
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.myShortcutText">
            <summary>
            The shortcut, as a text string.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.myBounds">
            <summary>
            The item bounds, in parent coordinates (unlike other Rects, that are WC-local).
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.IsSelected">
            <summary>
            Gets whether this item is currently in the selected state.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.Execute">
            <summary>
            Executes the action of this menu button.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.HitTestHorizontal(System.Int32)">
            <summary>
            Hit-tests the item by the x-coordinate, which must be in item-local coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.InitShortcuts">
            <summary>
            Inits the shortcuts text, appends to the tooltip.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.GetTooltip(System.Drawing.Point)">
            <summary>
            Called by tooltip manager, if the tooltip is to be displayed
            </summary>
            <param name="point">Point in control's coordinates</param>
            <returns><see cref="T:JetBrains.CommonControls.ITooltipInfo"/>, or <c>Null</c> if no tooltip should be displayed.</returns>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.GetDesiredSize(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Performs the bottom-up layouting stage, when the control calculates its desired size using the given constraints.
            Should give generally the same results as <see cref="T:JetBrains.CommonControls.IConstrainableControl"/>, but could employ the <paramref name="gc"/> device context for the sake of optimization.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="limit">The maximum available space (that could affect the shape of the control, or strip down unnecessary calculations over the invisible items).
            May be a <see cref="T:System.Drawing.Size"/> with width and height equal to <see cref="F:System.Int32.MaxValue"/>, which means that the size is not limited.</param>
            <returns>The desired size, must be no larger than <paramref name="limit"/>.</returns>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.Paint(System.Drawing.Graphics)">
            <summary>
            Renders the context of the windowless control. The rendering bounds are given by the 
            </summary>
            <param name="g">The device context.</param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.SetBounds(JetBrains.UI.IGraphicsContainer,System.Drawing.Rectangle)">
            <summary>
            Performs the top-down layouting stage, when the control lais out its parts within the given bounds.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="bounds">The new bounds. From now on, this value should be returned from the <see cref="P:JetBrains.CommonControls.IWindowlessControl.Bounds"/> property.</param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.SetLayout(JetBrains.UI.LayoutResult)">
            <summary>
            Tells the control the details about the new layout applied to it by the controlling entity in conjunction with some <see cref="T:JetBrains.UI.IPopupLayouter"/>.
            Typically, the control need not apply the given size and location because that should be done by the controlling entity.
            The control may change its presentation in response to the layouting details, for example, whether it's attached to the top or the bottom of the anchoring rect.
            </summary>
            <param name="layout">The layouting details.</param>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.ExternalInfo">
            <summary>
            The document of this view.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.Shortcut">
            <summary>
            Gets the shortcut assigned to the toolbar button.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.ShortcutText">
            <summary>
            Gets the <see cref="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.Shortcut"/> formatted as user-friendly text, or an empty string if the shortcut is not defined.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.Toolbar">
            <summary>
            Gets the toolbar that owns this item.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.TooltipText">
            <summary>
            Gets the tooltip text, as provided by the user, without appending any shortcuts. Must not be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.TooltipTextWithShortcut">
            <summary>
            Gets the tooltip text with the shortcut tip, which is the <see cref="T:System.Windows.Forms.ToolTip"/> with a user-friendly rep of <see cref="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.Shortcut"/> appended. Must not be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.Bounds">
            <summary>
            Gets the item bounds, in the same coordinate space, as the parent toolbar (probably, the parent window's client rect coords).
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.GottenDirty">
            <summary>
            The control has gotten dirty and should be repainted.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.JetPopupMenuToolbarItemView.Dim">
            <summary>
            Dimension constants.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.MnemonicStore">
            <summary>
            Handles the mnemonic assignment and access.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.MnemonicStore.myMapMnemonicToItem">
            <summary>
            Item by mnemonic.
            No duplicate mnemonics are allowed. If a manually-assigned mnemonic conflicts with smth, it's refused.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.MnemonicStore.PreprocessMnemonic(System.Char)">
            <summary>
            The routine that adapts the mnemonic for case-insensitivity, and all.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.MnemonicStore.RemoveMnemonicMark(System.String)">
            <summary>
            Removes the mnemonic marks (a single ampersand) from the given text.
            Unescapes normal ampersands (from a double ampersand).
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.MnemonicStore.RemoveMnemonicMark(System.String,System.String@,System.Int32@,System.Int32@)">
            <summary>
            Removes the mnemonic marks (a single ampersand) from the given text.
            Unescapes normal ampersands (from a double ampersand).
            </summary>
            <param name="escaped">The source escaped string.</param>
            <param name="stripped">The unescaped string (single ampersands stripped, double ampersands unescaped into single).</param>
            <param name="nEscapedMnemonicIndex">Index of the mnemonic character in the <paramref name="escaped"/>, or <c>-1</c> if no mnemonics were found in the string. Note: it's the char itself rather than its ampersand.</param>
            <param name="nStrippedMnemonicIndex">Index of the mnemonic character in the <paramref name="stripped"/>, or <c>-1</c> if no mnemonics were found in the string.</param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.MnemonicStore.GetItemsByMnemonic(System.Char)">
            <summary>
            Case-insensitively looks up a set of items by their mnemonic. Won't return <c>Null</c>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.MnemonicStore.IsMnemonicUsed(System.Char)">
            <summary>
            Case-insensitively checks whether the given nmenonic is already used by one or more items in the menu.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.MnemonicStore.RegisterMnemonic(System.Char,JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem)">
            <summary>
            Registers a mnemonic for an item.
            A duplicate mnemonic is an error.
            </summary>
            <returns>The preprocessed mnemonic value as it gets into the map, eg, uppercased.</returns>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.MnemonicStore.RegisterMnemonicAndHighlight(System.Char,JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem,System.Int32)">
            <summary>
            Registers a mnemonic for an item.
            A duplicate mnemonic is an error.
            If the <paramref name="index"/> is not <c>-1</c>, the mnemonic is underlined in the menu item presentation.
            </summary>
            <returns>The preprocessed mnemonic value as it gets into the map, eg, uppercased.</returns>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.MnemonicStore.TryGetItemByMnemonic(System.Char)">
            <summary>
            Case-insensitively looks up an item by its mnemonic.
            Returns <c>Null</c> if not found.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.MnemonicStore.TryGetMnemonicByItem(JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem)">
            <summary>
            Returns an uppercase mnemonic for the item, if available, or <c>Null</c>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.MnemonicStore.TryUnregister(JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem)">
            <summary>
            Unregisters the item's mnemonic, if there is such. Returns the success flag.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.MnemonicStore.Watch(JetBrains.DataFlow.IListEvents{JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem})">
            <summary>
            Starts watching the collection of menu items for mnemonic assignment.
            This includes manual and auto mnemonics.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.MnemonicStore.AssignMnemonic_Auto(JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem)">
            <summary>
            Chooses and assigns the mnemonics automatically.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.MnemonicStore.AssignMnemonic_Manual(JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem)">
            <summary>
            Checks and places the manually-assigned mnemonics.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.MnemonicStore.AssignMnemonic_Manual_Free(JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem,System.String)">
            <summary>
            Places the non-index-bound mnemonics.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.MnemonicStore.AssignMnemonic_Manual_Positioned(JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem,System.String@)">
            <summary>
            Handles positionally-specified manual mnemonics (specified by duplicating the display-name with an ampersand).
            On fallback, the <param name="sManualMnemonic"/> is modified to contain just one proposed mnemonic char.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.SearchHost">
            <summary>
            Implements the incremental search functionality for the <see cref="T:JetBrains.UI.PopupMenu.JetPopupMenu"/> family of controls.
            Can be either consumed directly by the menu customizers to obtain the current search string, or used to produce a menu items filter to be included into the item filters stack in <see cref="F:JetBrains.UI.PopupMenu.Impl.JetPopupMenuDoc.ItemsContainer"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.SearchHost.InputString">
            <summary>
            Gets or sets the string, as entered in the UI.
            The changes to this property are withheld for the grace period and after that they apply to the <see cref="F:JetBrains.UI.PopupMenu.Impl.SearchHost.SearchString"/> and <see cref="F:JetBrains.UI.PopupMenu.Impl.SearchHost.SearchRegex"/> properties. During that grace period, the <see cref="F:JetBrains.UI.PopupMenu.Impl.SearchHost.IsPending"/> is <c>True</c>, and <see cref="M:JetBrains.UI.PopupMenu.Impl.SearchHost.CommitPendingChanges"/> will cause the changes to be applied immediately.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.SearchHost.IsActive">
            <summary>
            Gets or sets whether the search is currently active.
            The setter fails silently if being set to <c>False</c> while <see cref="F:JetBrains.UI.PopupMenu.Impl.SearchHost.IsAlwaysActive"/> is <c>True</c>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.SearchHost.IsAlwaysActive">
            <summary>
            Gets or sets whether the search host cannot be deactivated. 
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.SearchHost.IsPending">
            <summary>
            Gets whether there are pending changes to the <see cref="F:JetBrains.UI.PopupMenu.Impl.SearchHost.InputString"/>
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.SearchHost.IsValid">
            <summary>
            Gets or sets whether the current <see cref="F:JetBrains.UI.PopupMenu.Impl.SearchHost.SearchString"/> is considered to be valid by the search-host consumer.
            If the search-host is used as a filter (<see cref="M:JetBrains.UI.PopupMenu.Impl.SearchHost.CreateFilter"/>), then this value reflects the number of items in the filter, meaning the search-string is valid iff there are items in the list after applying the filter.
            Otherwise, just the user-assigned value is stored.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.SearchHost.SearchRegex">
            <summary>
            Gets the current filtering regex, based on the current <see cref="F:JetBrains.UI.PopupMenu.Impl.SearchHost.SearchString"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.SearchHost.SearchString">
            <summary>
            Gets the current filtering string. Any changes to the <see cref="F:JetBrains.UI.PopupMenu.Impl.SearchHost.InputString"/> get into this property as the grace period expires.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.SearchHost.IsMatch(JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem,System.Text.RegularExpressions.Regex)">
            <summary>
            Checks whether the given <paramref name="item"/> matches the given <paramref name="regex"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.SearchHost.MakeRegex(System.String)">
            <summary>
            Produces the matcher regular expression out of a plaintext search string.
            Throws on errors.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.SearchHost.CommitPendingChanges">
            <summary>
            If the <see cref="F:JetBrains.UI.PopupMenu.Impl.SearchHost.SearchString"/> setter is working asynchronously and defers writes of the new value, causes the deferred write operation to occur immediately.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.SearchHost.CreateFilter">
            <summary>
            Creates a menu items filter that applies the search string to filter the items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.SearchHost.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.ItemExpandedEventArgs">
            <summary>
            Arguments for the event that notifies about a menu item expanding its submenu.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.ItemExpandedEventArgs.FuncCreateLayouter">
            <summary>
            Gets the function that can be used to get an item-bound layouter.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.ItemExpandedEventArgs.Screenshot">
            <summary>
            Gets the visual presentation of the item.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.IToolBarItemInfo">
            <summary>
            A descriptor for the popup menu toolbar item.
            This interface must be wholy implemented, no <see cref="T:System.NotImplementedException"/>s allowed.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.IToolBarItemInfo.Clicked">
            <summary>
            Gets the Clicked signal for this toolbar button.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.IToolBarItemInfo.IsChecked">
            <summary>
            Gets or sets whether the button is initially checked.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.IToolBarItemInfo.Presentation">
            <summary>
            Gets or sets the toolbar button presentation, usually consisting of just one icon.
            <c>Null</c> to hide the button.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.IToolBarItemInfo.Shortcut">
            <summary>
            Shortcut key for the toolbar button.
            Must be <see cref="F:System.Windows.Forms.Keys.None"/> if no shortcut is assigned to the button.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.IToolBarItemInfo.TooltipText">
            <summary>
            Gets or sets the tooltip text for the button.
            May be <c>Null</c>.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.JetPopupMenu">
            <summary>
            Interface class for the Jet Popup Menu component.
            Create an instance, set up the properties and call for the <see cref="M:JetBrains.UI.PopupMenu.JetPopupMenu.Show"/> method.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.JetPopupMenu.OptionTrace">
            <summary>
            Whether the verbose trace is enabled.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.JetPopupMenu.myCloseOnExecute">
            <summary>
            <see cref="P:JetBrains.UI.PopupMenu.JetPopupMenu.CloseOnExecute"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.JetPopupMenu.myLayouter">
            <summary>
            <see cref="P:JetBrains.UI.PopupMenu.JetPopupMenu.Layouter"/>
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.JetPopupMenu.myMenuDocument">
            <summary>
            Menu model document, when menu is running.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.JetPopupMenu.myMenuView">
            <summary>
            Menu view (screen form), when menu is running.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.JetPopupMenu.myNoItemsBanner">
            <summary>
            <see cref="P:JetBrains.UI.PopupMenu.JetPopupMenu.NoItemsBanner"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.JetPopupMenu.myPopupWindow">
            <summary>
            The popup window object managing the menu position, at the time span the menu is visible on the screen.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.JetPopupMenu.myPopupWindowContext">
            <summary>
            <see cref="P:JetBrains.UI.PopupMenu.JetPopupMenu.PopupWindowContext"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.JetPopupMenu.myToolbarButtons">
            <summary>
            <see cref="P:JetBrains.UI.PopupMenu.JetPopupMenu.ToolbarButtons"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.JetPopupMenu.myCaption">
            <summary>
            <see cref="P:JetBrains.UI.PopupMenu.JetPopupMenu.Caption"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.JetPopupMenu.DescribeItem">
            <summary>
            Fires when the item needs to be described in order to be presented in the menu.
            The <see cref="P:JetBrains.DataFlow.InOutEventArgs`2.In"/> is the menu item key (not Null).
            The <see cref="P:JetBrains.DataFlow.InOutEventArgs`2.Out"/> is an empty menu item descriptor that should be filled by the event sink.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.JetPopupMenu.ItemClicked">
            <summary>
            Fires when an item is clicked in the menu.
            Gives out the item key.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.JetPopupMenu.ItemDeleted">
            <summary>
            Fires when the menu wants to remove an item.
            The sink must approve the event for the item to disappear from the menu.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.JetPopupMenu.KeyboardAcceleration">
            <summary>
            Gets or sets the way keyboard acceleration works for the list.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.JetPopupMenu.myCaptureMouseInitially">
            <summary>
            Means the list should capture mouse input on startup and trigger the action on mouseup, thus assuming the "mouse-down" part of the input already done.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.JetPopupMenu.SelectedItemKey">
            <summary>
            Gets the key of the item currently selected in the menu.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.JetPopupMenu.CaptureIfMouseDown">
            <summary>
            A helper for setting the <see cref="P:JetBrains.UI.PopupMenu.JetPopupMenu.CaptureMouseInitially"/> property automatically, based on whether the mouse button is currently down or not.
            Has no visible effect if the menu is already running.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.JetPopupMenu.SetItems(JetBrains.UI.PopupMenu.SimpleMenuItem[])">
            <summary>
            Produces a simple static popup menu with self-contained items, each of which has its own <see cref="E:JetBrains.UI.PopupMenu.SimpleMenuItem.Clicked"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.JetPopupMenu.Show">
            <summary>
            <para>Displays the menu onscreen. Cannot be called twice.</para>
            <para>Calls <see cref="M:JetBrains.UI.PopupMenu.JetPopupMenu.Show(JetBrains.UI.PopupMenu.JetPopupMenu.ShowWhen)"/> with the <see cref="F:JetBrains.UI.PopupMenu.JetPopupMenu.ShowWhen.NoItemsBannerIfNoItems"/> flag.</para>
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.JetPopupMenu.Show(JetBrains.UI.PopupMenu.JetPopupMenu.ShowWhen)">
            <summary>
            Shows the menu onscreen. Cannot be called twice.
            </summary>
            <param name="when">Specifies the flags that could cancel showing the menu and replace it with something else.</param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.JetPopupMenu.ShowIfMultiple">
            <summary>
            <para>Displays the menu onscreen. Cannot be called twice.</para>
            <para>Calls <see cref="M:JetBrains.UI.PopupMenu.JetPopupMenu.Show(JetBrains.UI.PopupMenu.JetPopupMenu.ShowWhen)"/> with the <see cref="F:JetBrains.UI.PopupMenu.JetPopupMenu.ShowWhen.NoItemsBannerIfNoItems"/> and <see cref="F:JetBrains.UI.PopupMenu.JetPopupMenu.ShowWhen.AutoExecuteIfSingleItem"/> flags.</para>
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.JetPopupMenu.CheckThread">
            <summary>
            Throws if called on a wrong (non-UI) thread.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.JetPopupMenu.OnMenuItemDeleted(JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem)">
            <summary>
            Processes user's deletion of an item.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.JetPopupMenu.Show_CutoffEarly(JetBrains.UI.PopupMenu.JetPopupMenu.ShowWhen,System.Collections.Generic.ICollection{System.Object})">
            <summary>
            Cut off menu show early, without describing items.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.JetPopupMenu.Show_CutoffLate(JetBrains.UI.PopupMenu.JetPopupMenu.ShowWhen,System.Collections.Generic.IEnumerable{JetBrains.UI.PopupMenu.Impl.JetPopupMenuItem})">
            <summary>
            Cut off menu show after we know item descriptions, like if it's enabled.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.JetPopupMenu.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.JetPopupMenu.CaptionLocation">
            <summary>
            Gets the offset of the menu caption from the menu top left corder, which is needed in case you want to position the image right above some object.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.JetPopupMenu.Caption">
            <summary>
            Gets or sets the popup menu caption, displayed in the title section of the menu.
            <c>Null</c> for no caption.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.JetPopupMenu.CaptureMouseInitially">
            <summary>
            Gets or sets whether the list should capture mouse input on startup and trigger the action on mouseup, thus assuming the "mouse-down" part of the input already done.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.JetPopupMenu.CloseOnExecute">
            <summary>
            Whether to close the menu automatically whenever an item (menu item or toolbar button) is executed. The default is <c>True</c>.
            If <c>False</c>, the menu will not close when you execute an item, unless you spawn some control that steals focus from the menu.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.JetPopupMenu.ItemExpanded">
            <summary>
            Fires when an item should be expanded into a submenu.
            Either a submenu should be shown, or a tooltip explaining the failure to do so.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.JetPopupMenu.ItemKeys">
            <summary>
            Gets the collection to which the keys for the menu items should be added.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.JetPopupMenu.Layouter">
            <summary>
            Gets or sets the layouter that will govern the menu location onscreen.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.JetPopupMenu.NoItemsBanner">
            <summary>
            Gets or sets the banner that is displayed instead of the menu if there are zero items in the menu.
            May be <c>Null</c>, which means that the menu should be displayed even in case there are no items.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.JetPopupMenu.PopupWindowContext">
            <summary>
            Gets or sets the popup window context that defines the owning context for the menu.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.JetPopupMenu.ToolbarButtons">
            <summary>
            Gets the list of toolbar buttons to display in the title section of the menu.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.JetPopupMenu.Visible">
            <summary>
            Gets or sets whether the menu is currently visible.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.JetPopupMenu.ShowWhen">
            <summary>
            When the menu should not be actually shown.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.JetPopupMenu.ShowWhen.NoItemsBannerIfNoItems">
            <summary>
            If there're no items in the <see cref="P:JetBrains.UI.PopupMenu.JetPopupMenu.ItemKeys"/> collection, the menu is not shown, just the <see cref="P:JetBrains.UI.PopupMenu.JetPopupMenu.NoItemsBanner"/> is displayed.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.JetPopupMenu.ShowWhen.NoItemsBannerIfNoEnabledItems">
            <summary>
            If there're no enabled items, the menu is not shown, just the <see cref="P:JetBrains.UI.PopupMenu.JetPopupMenu.NoItemsBanner"/> is displayed.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.JetPopupMenu.ShowWhen.AutoExecuteIfSingleItem">
            <summary>
            If there is exactly one item in the menu, the menu is not shown, and that item is executed automatically. // TODO: check if the item is enabled.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.JetPopupMenu.ShowWhen.AutoExecuteIfSingleEnabledItem">
            <summary>
            If there is exactly one enabled item in the menu, the menu is not shown, and that item is executed automatically.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.KeyboardAccelerationFlags">
            <summary>
            Determines how mnemonics are assigned to menu items.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.KeyboardAccelerationFlags.QuickSearch">
            <summary>
            Enable the Narrow-Down QuickSearch.
            This is the default.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.KeyboardAccelerationFlags.Mnemonics">
            <summary>
            Use mnemonic for quick access to the menu items, as specified at the <see cref="P:JetBrains.UI.PopupMenu.IMenuItemDescriptor.Mnemonic"/> field and assigned automatically, if missing.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.MenuItemDescriptor">
            <summary>
            The default menu item descriptor.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.MenuItemDescriptor.#ctor(System.Object)">
            <summary>
            Creates the default descriptor from an object by specifying the object's text representation as the item's text.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.MenuItemDescriptor.DumpToXaml(System.Xml.XmlWriter)">
            <summary>
            Dumps the object.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.MenuItemDescriptor.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.MenuItemDescriptor.Icon">
            <summary>
            Gets the image (icon) for the item.
            <c>Null</c> if the item has no image.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.MenuItemDescriptor.Mnemonic">
            <summary>
            If the menu is working in the <see cref="F:JetBrains.UI.PopupMenu.KeyboardAccelerationFlags.Mnemonics"/> mode, specifies the mnemonic to assign to this menu item.
            The letter holding the mnemonic will be underlined automatically.
            To specify a mnemonic, either:
            (1) set the <see cref="P:JetBrains.UI.PopupMenu.MenuItemDescriptor.Mnemonic"/> to contain a plaintext copy of the item <see cref="P:JetBrains.UI.PopupMenu.MenuItemDescriptor.Text"/>, with the mnemonic char prepended by an ampersand “&amp;”; normal ampersands should be doubled in the text,
            or,
            (2) set the <see cref="P:JetBrains.UI.PopupMenu.MenuItemDescriptor.Mnemonic"/> to contain the single case-insensitive character of the mnemonic, whose position in the <see cref="P:JetBrains.UI.PopupMenu.MenuItemDescriptor.Text"/> will be determined automatically; it's also legal to specify a mnemonic not present in the text.
            May be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.MenuItemDescriptor.ShortcutText">
            <summary>
            Shortcut text to be displayed to the right of the <see cref="P:JetBrains.UI.PopupMenu.IMenuItemDescriptor.Text">main item text</see>.
            May be <c>Null</c> or an empty string for no shortcut.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.MenuItemDescriptor.Style">
            <summary>
            Gets or sets the style of the item.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.MenuItemDescriptor.Tag">
            <summary>
            A freehand object tag on the menu item descriptor.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.MenuItemDescriptor.TailGlyph">
            <summary>
            Gets or sets an optional glyph that is displayed at the end of the menu item, after its shortcut text.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.MenuItemDescriptor.Text">
            <summary>
            Gets the text that should present the item in the list.
            Should not be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.MenuItemDescriptor.Tooltip">
            <summary>
            Get the tooltip that should be shown when the mouse pointer hovers above this item in the list.
            May be <c>Null</c> or an empty string for no tooltip.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.MenuItemStyle">
            <summary><seealso cref="T:JetBrains.UI.PopupMenu.MenuItemStyleValidator"/>
            Defines the style and state for a list item described by a <see cref="T:JetBrains.UI.PopupMenu.IMenuItemDescriptor"/> object.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.MenuItemStyle.Enabled">
            <summary>
            This flag is present iff the item is enabled.
            Cannot be used together with <see cref="F:JetBrains.UI.PopupMenu.MenuItemStyle.Separator"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.MenuItemStyle.Separator">
            <summary>
            Whether the item is a separator item.
            Cannot be used together with <see cref="F:JetBrains.UI.PopupMenu.MenuItemStyle.Enabled"/> and <see cref="F:JetBrains.UI.PopupMenu.MenuItemStyle.GroupHeader"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.MenuItemStyle.GroupHeader">
            <summary>
            Whether the item is a static item.
            A static item is a special full-size item that cannot be selected or triggered and is painted in a greyed style.
            Cannot be used together with <see cref="F:JetBrains.UI.PopupMenu.MenuItemStyle.Separator"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.MenuItemStyle.CanExpand">
            <summary>
            Whether the item can be expanded into a submenu.
            An event is fired by the document when submenu should be shown.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.MenuItemStyleValidator">
            <summary>
            Validates the <see cref="T:JetBrains.UI.PopupMenu.MenuItemStyle"/> values.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.MenuItemStyleValidator.AssertValid(JetBrains.UI.PopupMenu.MenuItemStyle)">
            <summary>
            Throws if invalid.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.Impl.Shadoof">
            <summary>
            Floats a shadow near to some other window.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.Shadoof.myColorsShadowCorner">
            <summary>
            Colors in the shadow corner.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.Shadoof.myColorsShadowLine">
            <summary>
            Colors in the linear shadow.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.Shadoof.myBmpShadowCornerLeftBottom">
            <summary>
            Shadow corner.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.Shadoof.myBmpShadowCornerRightBottom">
            <summary>
            Shadow corner.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.Shadoof.myBmpShadowCornerRightTop">
            <summary>
            Shadow corner.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.Shadoof.myBmpShadowHorizontal">
            <summary>
            One-pixel-long shadow segment.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.Shadoof.myBmpShadowVertical">
            <summary>
            One-pixel-long shadow segment.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.Shadoof.myLocation">
            <summary>
            <see cref="P:JetBrains.UI.PopupMenu.Impl.Shadoof.Location"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.Shadoof.myRects">
            <summary>
            The list of rectangles, in client coordinates, that form the thing that should be casting the shadow.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.Shadoof.UpdateRequested">
            <summary>
            Fires when the object gets dirty.
            The object does not update immediately, but instead collects the requests.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupMenu.Impl.Shadoof.UpdateRequired">
            <summary>
            Fires when the <see cref="F:JetBrains.UI.PopupMenu.Impl.Shadoof.UpdateRequested"/> signals get collected and are finally executed (basically, when we get off the stack frame).
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.Shadoof.Adjust(System.Drawing.Point,System.Collections.Generic.List{System.Drawing.Rectangle})">
            <summary>
            Sets the new location and new list of rectangles in a single call, thus only one recalculation and redisplay.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.Shadoof.AttachShadowHorizontal(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Attaches a vertical shadow, including the upper corner.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.Shadoof.AttachShadowVertical(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Attaches a vertical shadow, including the upper corner.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.Shadoof.CreateBitmaps">
            <summary>
            Lazy-creates the static bitmaps.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.Shadoof.FillShadowHorizontal(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Tiles the <see cref="F:JetBrains.UI.PopupMenu.Impl.Shadoof.myBmpShadowHorizontal"/> to draw a horizontal shadow. A tricky thing in GDI+.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.Shadoof.FillShadowVertical(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Tiles the <see cref="F:JetBrains.UI.PopupMenu.Impl.Shadoof.myBmpShadowVertical"/> to draw a vertical shadow. A tricky thing in GDI+.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.Shadoof.OptimizeRectangles(System.Collections.Generic.List{System.Drawing.Rectangle})">
            <summary>
            Decreases the number of rects by merging, sorts them vertically, etc.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.Shadoof.CheckCreateWindow">
            <summary>
            Creates the window when it's finally needed.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.Shadoof.SetLocation(System.Drawing.Point)">
            <summary>
            Sets the <see cref="F:JetBrains.UI.PopupMenu.Impl.Shadoof.myLocation"/>, tells whether modified, does not cause an update.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.Shadoof.SetRectangles(System.Collections.Generic.List{System.Drawing.Rectangle})">
            <summary>
            Sets the <see cref="F:JetBrains.UI.PopupMenu.Impl.Shadoof.myRects"/>, tells whether modified, does not cause an update.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.Shadoof.Update">
            <summary>
            Updates the visual presentation on the screen to respect the new coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.Impl.Shadoof.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.Shadoof.ShadowThickness">
            <summary>
            Gets the linear shadow thickness (height for horizontal, width for vertical).
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.Shadoof.Location">
            <summary>
            Gets or sets the screen location to which the <see cref="P:JetBrains.UI.PopupMenu.Impl.Shadoof.Rectangles"/> coordinates are relative.
            To set both <see cref="P:JetBrains.UI.PopupMenu.Impl.Shadoof.Location"/> and <see cref="P:JetBrains.UI.PopupMenu.Impl.Shadoof.Rectangles"/>, use <see cref="M:JetBrains.UI.PopupMenu.Impl.Shadoof.Adjust(System.Drawing.Point,System.Collections.Generic.List{System.Drawing.Rectangle})"/> to do it in a batch.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.Impl.Shadoof.Rectangles">
            <summary>
            Gets or sets the list of rectangles for which the shadow is displayed.
            The coordinates must be relative to the <see cref="P:JetBrains.UI.PopupMenu.Impl.Shadoof.Location"/>.
            To set both <see cref="P:JetBrains.UI.PopupMenu.Impl.Shadoof.Location"/> and <see cref="P:JetBrains.UI.PopupMenu.Impl.Shadoof.Rectangles"/>, use <see cref="M:JetBrains.UI.PopupMenu.Impl.Shadoof.Adjust(System.Drawing.Point,System.Collections.Generic.List{System.Drawing.Rectangle})"/> to do it in a batch.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.SimpleMenuItem">
            <summary>
            A simple menu item for the <see cref="T:JetBrains.UI.PopupMenu.JetPopupMenu"/> that allows to easily create and use a small menu consisting of static items only, with all the handlers attached to the items themselves rather than global “describe” and “clicked” all-item callbacks.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.SimpleMenuItem.#ctor">
            <summary>
            Default ctor. Don't forget to init the item.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.SimpleMenuItem.#ctor(JetBrains.UI.RichText.RichText,System.Drawing.Image,System.EventHandler)">
            <summary>
            Fully initializes the item.
            </summary>
            <param name="text">Main text of the item.</param>
            <param name="icon">Icon for the item.</param>
            <param name="delegateClicked">Called when the item is clicked.</param>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.SimpleMenuItem.CreateSeparator">
            <summary>
            Creates a ready-for-use separator menu item.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.SimpleMenuItem.Describe(JetBrains.UI.PopupMenu.IMenuItemDescriptor)">
            <summary>
            Copies the item description into the given descriptor.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.SimpleMenuItem.FireClicked">
            <summary>
            Fires the <see cref="E:JetBrains.UI.PopupMenu.SimpleMenuItem.Clicked"/> event.
            </summary>
        </member>
        <member name="E:JetBrains.UI.PopupMenu.SimpleMenuItem.Clicked">
            <summary>
            Fires when this particular item is clicked.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupMenu.ToolbarItemInfo">
            <summary>
            The default <see cref="T:JetBrains.UI.PopupMenu.IToolBarItemInfo"/> interface implementation.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupMenu.ToolbarItemInfo.#ctor(JetBrains.CommonControls.IPresentableItem,JetBrains.UI.RichText.RichText,System.Windows.Forms.Keys,System.Boolean,System.Action)">
            <summary>
            Initializes all of the fields.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.ToolbarItemInfo.Clicked">
            <summary>
            Gets the Clicked signal for this toolbar button.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.ToolbarItemInfo.IsChecked">
            <summary>
            Gets or sets whether the button is initially checked.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.ToolbarItemInfo.Presentation">
            <summary>
            Gets or sets the toolbar button presentation, usually consisting of just one icon.
            <c>Null</c> to hide the button.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.ToolbarItemInfo.Shortcut">
            <summary>
            Shortcut key for the toolbar button.
            Must be <see cref="F:System.Windows.Forms.Keys.None"/> if no shortcut is assigned to the button.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupMenu.ToolbarItemInfo.TooltipText">
            <summary>
            Gets or sets the tooltip text for the button.
            May be <c>Null</c>.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupWindowManager.HideFlags">
            <summary>
            Specifies when a popup window should be hidden.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.HideFlags.None">
            <summary>
            Manual deactivation only.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.HideFlags.Scrolling">
            <summary>
            The context owner has been scrolled.
            Not very useful, as <see cref="T:JetBrains.UI.PopupWindowManager.IPopupWindow"/> can track its position after the scrolling.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.HideFlags.Escape">
            <summary>
            The <see cref="F:System.Windows.Forms.Keys.Escape"/> has been pressed in the context owner.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.HideFlags.AnyOtherAction">
            <summary>
            Something has happened to the context owner, which does not fall into any of the other flags.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.HideFlags.SelectionChanged">
            <summary>
            Selection has changed in the context owner.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.HideFlags.FocusLoss">
            <summary>
            The popup window has lost focus.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.HideFlags.Deactivated">
            <summary>
            The context owner has lost focus.
            Ignored if the popup window grabs focus initially.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.HideFlags.All">
            <summary>
            All of the above.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupWindowManager.IPopupWindow">
            <summary>
            Represents a popup window.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.IPopupWindow.HideWindow">
            <summary>
            Closes the window. After that the window cannot resurrect. Invoking this will cause the <see cref="E:JetBrains.UI.PopupWindowManager.IPopupWindow.Closed"/> event to fire.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.IPopupWindow.ShowWindow">
            <summary>
            Initially shows the popup window. The window remains shown until it is closed by the <see cref="M:JetBrains.UI.PopupWindowManager.IPopupWindow.HideWindow"/> method or by an action from the <see cref="T:JetBrains.UI.PopupWindowManager.IPopupWindowContext"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.IPopupWindow.Context">
            <summary>
            Gets context the window is shown in.
            May be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.IPopupWindow.HideMethod">
            <summary>
            Gets or sets what exactly the popup window should do to hide the controlled form.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.IPopupWindow.IsDisposed">
            <summary>
            Gets whether the window has already been disposed.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.IPopupWindow.LayoutMode">
            <summary>
            Gets or sets whether the popup window location and size is currently controlled by the layouter.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.IPopupWindow.Mutex">
            <summary>
            Gets the mutex that defines the popup window's identity class.
            For example, it may prohibit displaying more than one window of the same class at a time.
            This value should be immutable.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.IPopupWindow.Visible">
            <summary>
            Gets value indicating whether the window is currently shown.
            </summary>
        </member>
        <member name="E:JetBrains.UI.PopupWindowManager.IPopupWindow.Closed">
            <summary>
            Event which is raised when the window is closed either manually (by invoking the <see cref="M:JetBrains.UI.PopupWindowManager.IPopupWindow.HideWindow"/> method) or 
            when position provider returns empty position.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupWindowManager.PopupWindowLayoutMode">
            <summary>
            Defines the way the popup window controls its content location and size.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.PopupWindowLayoutMode.None">
            <summary>
            The layouter is not applied to the window, its size and position are manually controlled.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.PopupWindowLayoutMode.Full">
            <summary>
            The layouter fully controls the window size and position.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupWindowManager.FormHideMethod">
            <summary>
            What exactly the popup window should do to hide the controlled form.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.FormHideMethod.Visibility">
            <summary>
            Manipulate visibility (<c>ShowWindow(…)</c>).
            This won't <see cref="M:System.IDisposable.Dispose"/> the form, which is good for reusable windows.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.FormHideMethod.Closing">
            <summary>
            Close the window (<c>WM_CLOSE</c>).
            The window gets disposed and cannot be reused.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupWindowManager.PopupFormController">
            <summary>
            The layout controller for the popup forms.
            Shows a popup window, controls its location and position against the layouter, and destroys the form upon one of the predefined actions.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.PopupFormController.myConstrainableControl">
            <summary>
            <see cref="F:JetBrains.UI.PopupWindowManager.PopupFormController.myContentForm"/>, cast to the <see cref="T:JetBrains.CommonControls.IConstrainableControl"/> interface.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.PopupFormController.myContentForm">
            <summary>
            The form being controlled.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.PopupFormController.myContext">
            <summary>
            <see cref="P:JetBrains.UI.PopupWindowManager.PopupFormController.Context"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.PopupFormController.myEventsAttached">
            <summary>
            Specifies whether <see cref="M:JetBrains.UI.PopupWindowManager.PopupFormController.AttachEvents"/> has been performed for the instance.
            Needed for <see cref="F:JetBrains.UI.PopupWindowManager.FormHideMethod.Visibility"/>-type windows that may call <see cref="M:JetBrains.UI.PopupWindowManager.PopupFormController.ShowWindow"/> more than once, to prevent multiple <see cref="M:JetBrains.UI.PopupWindowManager.PopupFormController.AttachEvents"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.PopupFormController.myHideFlags">
            <summary>
            Defines the actions on which to hide. Can't be changed in runtime.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.PopupFormController.myHideMethod">
            <summary>
            <see cref="P:JetBrains.UI.PopupWindowManager.PopupFormController.HideMethod"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.PopupFormController.myIsChangingSize">
            <summary>
            Prevents from reacting to the child form resizes that are caused by ours applying the layout.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.PopupFormController.myIsDisposed">
            <summary>
            <see cref="P:JetBrains.UI.PopupWindowManager.PopupFormController.IsDisposed"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.PopupFormController.myLayouter">
            <summary>
            Layouts the popup onscreen.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.PopupFormController.myLayoutMode">
            <summary>
            <see cref="P:JetBrains.UI.PopupWindowManager.PopupFormController.LayoutMode"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.PopupFormController.myMutex">
            <summary>
            By default, each window is independent.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.PopupFormController.myReshowOnActivation">
            <summary>
            Whether a window should be shown automatically when the application is activated. Set to <c>True</c> only for those windows that have <see cref="F:JetBrains.UI.PopupWindowManager.FormHideMethod.Visibility"/> and if they were hidden due to app deactivation.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.PopupFormController.myWantsFocus">
            <summary>
            Whether to grab focus on show.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupFormController.#ctor(System.Windows.Forms.Form,JetBrains.UI.IPopupLayouter,JetBrains.UI.PopupWindowManager.IPopupWindowContext,JetBrains.UI.PopupWindowManager.HideFlags,System.Boolean,JetBrains.UI.PopupWindowManager.PopupWindowMutex)">
            <summary>
            Constructs a popup form controller.
            </summary>
            <param name="form">A form to be shown as a popup window.</param>
            <param name="layouter">The layouter that defines the location and size.</param>
            <param name="context">The owning context for the popup window.</param>
            <param name="hideflags">Flags that identify when to destroy the form.</param>
            <param name="wantsfocus">If <c>True</c>, sets the focus to the popup window.</param>
            <param name="mutex">Specifies the popup window's identity group.</param>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupFormController.AttachEvents">
            <summary>
            Hooks on all the listeners.
            Must be called before showing the window onscreen.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupFormController.DetachEvents">
            <summary>
            Detaches from all the events.
            You'd better not call it manually, but rather call <see cref="M:JetBrains.UI.PopupWindowManager.PopupFormController.Dispose"/> instead.
            Resets many things to <c>Null</c>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupFormController.GetControlPreferredSize(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Asks the <see cref="F:JetBrains.UI.PopupWindowManager.PopupFormController.myConstrainableControl"/> for its <see cref="M:JetBrains.CommonControls.IConstrainableControl.GetDesiredSize(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)"/>.
            Validates the retval.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupFormController.HideWindowIfNotFocused">
            <summary>
            Checks whether the controlled form owns the focus at the moment, and hides it if not.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupFormController.HideWindowOnDeactivation">
            <summary>
            The app has been deactivated, hides the window.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupFormController.OnActiveChanged">
            <summary>
            Kills the popup when switching away from Devenv.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupFormController.UpdatePopupLayout">
            <summary>
            Applies the new layout to the form.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupFormController.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.PopupFormController.CanShowPopups">
            <summary>
            Gets whether the popup windows could be shown at the moment, ie whether the main window is currently active.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.PopupFormController.HideMethod">
            <summary>
            Gets or sets what exactly the popup window should do to hide the controlled form.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.PopupFormController.IsDisposed">
            <summary>
            Gets whether the window has already been disposed.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.PopupFormController.LayoutMode">
            <summary>
            Gets or sets whether the popup window location and size is currently controlled by the layouter.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.PopupFormController.Mutex">
            <summary>
            Gets the mutex that defines the popup window's identity class.
            For example, it may prohibit displaying more than one window of the same class at a time.
            This value should be immutable.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupWindowManager.PopupWindowContext">
            <summary>
            The default implementation of the <see cref="T:JetBrains.UI.PopupWindowManager.IPopupWindowContext"/> interface.
            Represents an empty window context and a base class for meaningful window contexts.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.PopupWindowContext.ourEmpty">
            <summary>
            <see cref="P:JetBrains.UI.PopupWindowManager.PopupWindowContext.Empty"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupWindowContext.#ctor">
            <summary>
            A protected constructor for use from the inheritors.
            To get a default window context, use <see cref="P:JetBrains.UI.PopupWindowManager.PopupWindowContext.Empty"/> instead.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupWindowContext.CreateLayouter">
            <summary>
            Creates the default layouter that positiones its entities in the center of the DEVENV window.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupWindowContext.FireAnyOtherAction">
            <summary>
            Fires the <see cref="E:JetBrains.UI.PopupWindowManager.PopupWindowContext.AnyOtherAction"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupWindowContext.FireDeactivated">
            <summary>
            Fires the <see cref="E:JetBrains.UI.PopupWindowManager.PopupWindowContext.Deactivated"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupWindowContext.FireScroll">
            <summary>
            Fires the <see cref="E:JetBrains.UI.PopupWindowManager.PopupWindowContext.Scroll"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupWindowContext.FireSelectionChanged">
            <summary>
            Fires the <see cref="E:JetBrains.UI.PopupWindowManager.PopupWindowContext.SelectionChanged"/> event.
            </summary>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.PopupWindowContext.Empty">
            <summary>
            Gets the default popup window context.
            </summary>
        </member>
        <member name="E:JetBrains.UI.PopupWindowManager.PopupWindowContext.EscapePressed">
            <summary>
            Fires when the ESCAPE key is pressed in the owning context. Works as a stack of handlers instead of a multicast event, that is, always notifies only the most-recently-added event in the stack, and then removes it from the stack.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupWindowContext.EmptyPopupWindowContext.CreateLayouter">
            <summary>
            Creates the default layouter that positiones its entities in the center of the DEVENV window.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupWindowManager.PopupWindowManager">
            <summary>
            Manages the display, positioning, and destroying popup windows.
            </summary>
        </member>
        <member name="F:JetBrains.UI.PopupWindowManager.PopupWindowManager.myPopupWindows">
            <summary>
            This must be an instance member.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupWindowManager.CreatePopupWindow(System.Windows.Forms.Form,JetBrains.UI.IPopupLayouter,JetBrains.UI.PopupWindowManager.IPopupWindowContext,JetBrains.UI.PopupWindowManager.HideFlags)">
            <summary>
            Shows a popup window, controls its location and position against the layouter, and destroys the form upon one of the predefined actions.
            Does not assign the focus to the form.
            </summary>
            <param name="form">A form to be shown as a popup window.</param>
            <param name="layouter">The layouter that defines the location and size.</param>
            <param name="context">The owning context for the popup window.</param>
            <param name="hideflags">Flags that identify when to destroy the form.</param>
            <returns>Identifies the popup window controller.</returns>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupWindowManager.CreatePopupWindow(System.Windows.Forms.Form,JetBrains.UI.IPopupLayouter,JetBrains.UI.PopupWindowManager.IPopupWindowContext,JetBrains.UI.PopupWindowManager.HideFlags,System.Boolean)">
            <summary>
            Shows a popup window, controls its location and position against the layouter, and destroys the form upon one of the predefined actions.
            </summary>
            <param name="form">A form to be shown as a popup window.</param>
            <param name="layouter">The layouter that defines the location and size.</param>
            <param name="context">The owning context for the popup window.</param>
            <param name="hideflags">Flags that identify when to destroy the form.</param>
            <param name="wantsfocus">If <c>True</c>, sets the focus to the popup window.</param>
            <returns>Identifies the popup window controller.</returns>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupWindowManager.CreatePopupWindow(System.Windows.Forms.Form,JetBrains.UI.IPopupLayouter,JetBrains.UI.PopupWindowManager.IPopupWindowContext,JetBrains.UI.PopupWindowManager.HideFlags,System.Boolean,JetBrains.UI.PopupWindowManager.PopupWindowMutex)">
            <summary>
            Shows a popup window, controls its location and position against the layouter, and destroys the form upon one of the predefined actions.
            </summary>
            <param name="form">A form to be shown as a popup window.</param>
            <param name="layouter">The layouter that defines the location and size.</param>
            <param name="context">The owning context for the popup window.</param>
            <param name="hideflags">Flags that identify when to destroy the form.</param>
            <param name="wantsfocus">If <c>True</c>, sets the focus to the popup window.</param>
            <param name="mutex">Specifies the popup window's identity group.</param>
            <returns>Identifies the popup window controller.</returns>
        </member>
        <member name="P:JetBrains.UI.PopupWindowManager.PopupWindowManager.PopupWindows">
            <summary>
            Gets the collection of popup windows currently active in the system.
            Some of them may be invisible.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupWindowManager.PopupWindowMutex">
            <summary>
            Defines the identity of the popup window group within which the popup windows are mutually exclusive.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupWindowMutex.WindowAdded(JetBrains.UI.PopupWindowManager.IPopupWindow,System.Collections.Generic.IEnumerable{JetBrains.UI.PopupWindowManager.IPopupWindow},JetBrains.DataFlow.ICollectionEvents{JetBrains.UI.PopupWindowManager.IPopupWindow})">
            <summary>
            Called when a new window is added to the identity group.
            The default implementation closes all the previous windows in the group.
            </summary>
        </member>
        <member name="M:JetBrains.UI.PopupWindowManager.PopupWindowMutex.WindowRemoved(JetBrains.UI.PopupWindowManager.IPopupWindow,System.Collections.Generic.IEnumerable{JetBrains.UI.PopupWindowManager.IPopupWindow},JetBrains.DataFlow.ICollectionEvents{JetBrains.UI.PopupWindowManager.IPopupWindow})">
            <summary>
            Called when a new window is removed from the identity group.
            The default implementation does nothing.
            </summary>
        </member>
        <member name="T:JetBrains.UI.PopupWindowManager.Util.PopupWindowContextSpecificEscapeActionHandler">
            <summary>
            Represents a view-specific wrapper for handling escape actions in views
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.ExceptionReport.ConnectionOptionsPage.Bind(JetBrains.DataFlow.IPropertyBinding)">
            <summary>
            Adds a one-way binding that is executed backwards on OK.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.ExceptionReport.ConnectionOptionsPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.ExceptionReport.ConnectionOptionsPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.UI.Application.ExceptionReport.ConnectionOptionsPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.ExceptionReport.ExceptionNotifierPopupWindow.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            
            </summary>
            
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data. </param>
        </member>
        <member name="T:JetBrains.UI.TreeView.TreeModelView">
            <summary>
            Provides default viewer for tree models
            </summary>
        </member>
        <member name="M:JetBrains.UI.TreeView.TreeModelView.#ctor(JetBrains.UI.TreeView.ITreeViewController)">
            <summary>
            Initializes new instance of the TreeModelView
            </summary>
            <param name="controller">Controller which defines behavior for this view</param>
        </member>
        <member name="M:JetBrains.UI.TreeView.TreeModelView.#ctor(JetBrains.TreeModels.TreeModel,JetBrains.UI.TreeView.ITreeViewController)">
            <summary>
            Initializes new instance of the TreeModelView using specified model
            </summary>
            <param name="model">Model to display in this view</param>
            <param name="controller">Controller which defines behavior for this view</param>
        </member>
        <member name="M:JetBrains.UI.TreeView.TreeModelView.Initialize">
            <summary>
            Initializes custom properties of the view
            </summary>
        </member>
        <member name="M:JetBrains.UI.TreeView.TreeModelView.IsModelNodeVisible(JetBrains.TreeModels.TreeModelNode)">
            <summary>
            Returns value indicating if specified viewNode/modelNode pair is visible
            </summary>
            <param name="modelNode"></param>
            <returns></returns>
        </member>
        <member name="M:JetBrains.UI.TreeView.TreeModelView.EnsureChildren(JetBrains.UI.TreeView.TreeModelViewNode)">
            <summary>
            Ensures that direct children for the node are created
            </summary>
            <param name="viewNode"></param>
        </member>
        <member name="M:JetBrains.UI.TreeView.TreeModelView.EnsureDescendants(JetBrains.UI.TreeView.TreeModelViewNode)">
            <summary>
            Ensures that whole subtree for the node is created
            </summary>
            <param name="viewNode"></param>
        </member>
        <member name="M:JetBrains.UI.TreeView.TreeModelView.InitializeNode(JetBrains.UI.TreeView.TreeModelViewNode,JetBrains.TreeModels.TreeModelNode)">
            <summary>
            Initializes visual representation of the model node
            </summary>
            <param name="viewNode">View node to initialize</param>
            <param name="modelNode">Model node associated with view node</param>
        </member>
        <member name="M:JetBrains.UI.TreeView.TreeModelView.UpdateNodePresentation(JetBrains.TreeModels.TreeModelNode)">
            <summary>
            Updates presentation of the view node associated with specified model node
            </summary>
            <param name="modelNode">Model node to update presentation for</param>
        </member>
        <member name="M:JetBrains.UI.TreeView.TreeModelView.UpdateNodePresentation(System.Object)">
            <summary>
            Updates presentation of the view nodes associated with specified data value
            </summary>
            <param name="dataValue"></param>
        </member>
        <member name="M:JetBrains.UI.TreeView.TreeModelView.UpdateNodePresentation(JetBrains.UI.TreeView.TreeModelViewNode)">
            <summary>
            Updates presentation of the given view node
            </summary>
            <param name="viewNode"></param>
        </member>
        <member name="M:JetBrains.UI.TreeView.TreeModelView.UpdateAllNodesPresentation">
            <summary>
            Updates presentation for all view nodes
            </summary>
        </member>
        <member name="M:JetBrains.UI.TreeView.TreeModelView.UpdateNodesPresentation(System.Collections.Generic.IEnumerable{JetBrains.TreeModels.TreeModelNode})">
            <summary>
            Updates presentation for specified model nodes
            </summary>
        </member>
        <member name="P:JetBrains.UI.TreeView.TreeModelView.Model">
            <summary>
            Gets or sets model which is displayed in the view
            </summary>
        </member>
        <member name="P:JetBrains.UI.TreeView.TreeModelView.MinimumRowHeight">
            <summary>
            Gets or sets minimum row height
            </summary>
        </member>
        <member name="P:JetBrains.UI.TreeView.TreeModelView.RemoveOnCollapse">
            <summary>
            Gets or set value indicating whether nodes are removed on collapse or not
            </summary>
        </member>
        <member name="P:JetBrains.UI.TreeView.TreeModelView.NavigateOnClick">
            <summary>
            Gets or sets value indicating whether Navigate command is issued on single click 
            </summary>
        </member>
        <member name="P:JetBrains.UI.TreeView.TreeModelView.CustomPresenters">
            <summary>
            Gets map of custom presentation handlers
            </summary>
        </member>
        <member name="P:JetBrains.UI.TreeView.TreeModelView.FocusedNode">
            <summary>
            Gets or sets currently focused node
            </summary>
        </member>
        <member name="P:JetBrains.UI.TreeView.TreeModelView.ModelFocusedNode">
            <summary>
            Gets currently focused node in the model space
            </summary>
        </member>
        <member name="P:JetBrains.UI.TreeView.TreeModelView.ModelSelection">
            <summary>
            Gets currently selected nodes in the model space
            </summary>
        </member>
        <member name="E:JetBrains.UI.TreeView.TreeModelView.Navigate">
            <summary>
            Raised when node navigation is occuring
            </summary>
        </member>
        <member name="M:JetBrains.UI.TreeView.TreeModelPresentableView.Initialize">
            <summary>
            Initializes custom properties of the view
            </summary>
        </member>
        <member name="P:JetBrains.UI.TreeView.TreeModelPresentableView.Presenter">
            <summary>
            Gets or sets presenter for this view
            </summary>
        </member>
        <member name="P:JetBrains.UI.TreeView.TreeModelPresentableView.ModelColumn">
            <summary>
            Gets column which contents is provided my model
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.ExceptionReport.TrackerLoginForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.ExceptionReport.TrackerLoginForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.UI.Application.ExceptionReport.TrackerLoginForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.ExceptionReport.SubmitterProgressWindow.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.ExceptionReport.SubmitterProgressWindow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.UI.Application.ExceptionReport.SubmitterProgressWindow.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.ILicenseCheckComponent.CheckLicense">
            <summary>
            throws LicenseCheckFailureException if no license found or entered
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.ILicenseCheckComponent.Shutdown">
            <summary>
            Called from shell shutdown
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.ILicenseCheckComponent.GetLicenseData">
            <summary>
            Returns data describing currently used license
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.ILicenseCheckComponent.OnLicenseChanged">
            <summary>
            Called when user selects new license instead of existing one
            </summary>
        </member>
        <member name="T:JetBrains.UI.Application.IsApplicationActiveTracker">
            <summary>
            Tracks the application active state.
            Updates the <see cref="F:JetBrains.UI.Application.UIApplicationShell.IsApplicationActive"/> property.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.IsApplicationActiveTracker.IsEnabled">
            <summary>
            When set to <c>True</c>, starts tracking the active state of the application and promoting the values into the <see cref="P:JetBrains.UI.Application.IsApplicationActiveTracker.TargetProperty"/> (usually, <see cref="F:JetBrains.UI.Application.UIApplicationShell.IsApplicationActive"/>).
            Initially, OFF. The default implementation sets to <c>True</c> for the Shell lifetime.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.IsApplicationActiveTracker.UpdateActive(JetBrains.DataFlow.IProperty{System.Boolean})">
            <summary>
            Checks the active window to update the active state.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Application.IsApplicationActiveTracker.TargetProperty">
            <summary>
            Gets the property we should modify when tracking the application state.
            Change it to implement a filter in the inheritor.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.License.LicenseAgreementForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.License.LicenseAgreementForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.UI.Application.License.LicenseAgreementForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.License.ILicenseInformation.GetEvaluationLicenseInfo">
            <summary>
            Returns string, that describes evalaution status.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Application.License.ILicenseInformation.UserLicense">
            <summary>
            Returns license, entered by user.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Application.License.ILicenseInformation.UseCustomLicenseServerUrl">
            <summary>
            License server information
            </summary>
        </member>
        <member name="T:JetBrains.UI.Application.LoggerExceptionReporter">
            <summary>
            Listens for <see cref="T:JetBrains.Util.Logger"/> exceptions, reports them to the exception submitter.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.LoggerExceptionReporter.IntervalSuppressSubsequentExceptions">
            <summary>
            After each exception, subsequent exceptions are not reported for the <see cref="F:JetBrains.UI.Application.LoggerExceptionReporter.IntervalSuppressSubsequentExceptions"/> interval.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.LoggerExceptionReporter.ReportException">
            <summary>
            Fires when an exception is to be reported to the exception submitter.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.LoggerExceptionReporter.IsRelevantException(System.Exception)">
            <summary>
            Looks for our company/product names in the stack trace.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.LoggerExceptionReporter.OnException_Marshalled(System.Exception)">
            <summary>
            <see cref="M:JetBrains.UI.Application.LoggerExceptionReporter.OnException(System.Exception)"/>, marshalled to the UI thread.
            </summary>
            <param name="ex">The exception.</param>
        </member>
        <member name="P:JetBrains.UI.Application.LoggerExceptionReporter.BeforeReportExceptionEventArgs.CanReport">
            <summary>
            Gets or sets whether the exception can be reported.
            Otherwise, it will be suppressed.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Application.MouseWheelRedirector">
            <summary>
            Fixes the mouse wheel behavior so that it were redirected to the hovered window, not the focused one.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.MouseWheelRedirector.OnHookedMessage(System.Object,JetBrains.UI.Interop.HookEventArgs)">
            <summary>
            The hook function.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.MouseWheelRedirector.Attach">
            <summary>
            Starts fixing.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.MouseWheelRedirector.Detach">
            <summary>
            Stops fixing.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.MouseWheelRedirector.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.UI.Application.Progress.CustomProgressDialog">
            <summary>
            A custom-crafted progress dialog.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.CustomProgressDialog.DescriptionLine1">
            <summary>
            The first line of the progress dialog description. Shortens paths.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.CustomProgressDialog.DescriptionLine2">
            <summary>
            The second line of the progress dialog description. Shortens paths.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.CustomProgressDialog.IsCancelable">
            <summary>
            Whether the cancel button is available on the dialog.
            Cannot be changed when <see cref="F:JetBrains.UI.Application.Progress.CustomProgressDialog.IsRunning"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.CustomProgressDialog.IsRunning">
            <summary>
            Whether the dialog is currently visible. Set to <c>True</c> to show. To hide, either set to <c>False</c> or dispose of the dialog.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.CustomProgressDialog.IsRunningEffective">
            <summary>
            The dialog is shown with a delay, this is the delayed value.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.CustomProgressDialog.IsUserCanceled">
            <summary>
            Whether the user has canceled the progress dialog. Readonly.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.CustomProgressDialog.Title">
            <summary>
            Progress dialog title.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.CustomProgressDialog.Value">
            <summary>
            Value of the progress, in the [0…1] range.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.CustomProgressDialog.WindowHandle">
            <summary>
            A handle to the progress window. Readonly.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.CustomProgressDialog.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.CustomProgressDialogEx.BindToProgressIndicator(JetBrains.UI.Application.Progress.CustomProgressDialog,JetBrains.Application.Progress.IProgressIndicatorModel)">
            <summary>
            Binds a progress indicator to its visual presentation.
            The values are prevented from being updated too often.
            Returns a diconnection token.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Application.Progress.JetProgressWnd">
            <summary>
            Implementation details for the <see cref="T:JetBrains.UI.Application.Progress.CustomProgressDialog"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.JetProgressWnd.IsUserCanceled">
            <summary>
            Whether the user has canceled the progress dialog. Readonly.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.JetProgressWnd.JetBrains#CommonControls#IConstrainableControl#GetDesiredSize(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Performs the bottom-up layouting stage, when the control calculates its desired size using the given constraints.
            Should give generally the same results as <see cref="T:JetBrains.CommonControls.IConstrainableControl"/>, but could employ the <paramref name="gc"/> device context for the sake of optimization.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="limit">The maximum available space (that could affect the shape of the control, or strip down unnecessary calculations over the invisible items).
            May be a <see cref="T:System.Drawing.Size"/> with width and height equal to <see cref="F:System.Int32.MaxValue"/>, which means that the size is not limited.</param>
            <returns>The desired size, must be no larger than <paramref name="limit"/>.</returns>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.JetProgressWnd.JetBrains#CommonControls#IConstrainableControl#SetLayout(JetBrains.UI.LayoutResult)">
            <summary>
            Tells the control the details about the new layout applied to it by the controlling entity in conjunction with some <see cref="T:JetBrains.UI.IPopupLayouter"/>.
            Typically, the control need not apply the given size and location because that should be done by the controlling entity.
            The control may change its presentation in response to the layouting details, for example, whether it's attached to the top or the bottom of the anchoring rect.
            </summary>
            <param name="layout">The layouting details.</param>
        </member>
        <member name="P:JetBrains.UI.Application.Progress.JetProgressWnd.JetBrains#CommonControls#IConstrainableControl#AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Application.Progress.JetProgressWnd.JetBrains#CommonControls#IConstrainableControl#WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Application.Progress.SystemProgressDialog">
            <summary>
            Exposes the system-standard Progress Dialog.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.SystemProgressDialog.Animation">
            <summary>
            An animation to be displayed on the dialog above the progress. A choice of the standard system animations.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.SystemProgressDialog.DescriptionLine1">
            <summary>
            The first line of the progress dialog description. Shortens paths.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.SystemProgressDialog.DescriptionLine2">
            <summary>
            The second line of the progress dialog description. Shortens paths.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.SystemProgressDialog.DescriptionLine3">
            <summary>
            Available only when not <see cref="F:JetBrains.UI.Application.Progress.SystemProgressDialog.IsEstimatingTime"/>. The third line of the progress dialog description. Shortens paths.
            When <see cref="F:JetBrains.UI.Application.Progress.SystemProgressDialog.IsEstimatingTime"/>, this line is used for displaying the time estimate.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.SystemProgressDialog.IsCancelable">
            <summary>
            Whether the cancel button is available on the dialog.
            Cannot be changed when <see cref="F:JetBrains.UI.Application.Progress.SystemProgressDialog.IsRunning"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.SystemProgressDialog.IsEstimatingTime">
            <summary>
            Whether the system should estimate the remaining time and give it out in the third description line of the dialog.
            Cannot be changed when <see cref="F:JetBrains.UI.Application.Progress.SystemProgressDialog.IsRunning"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.SystemProgressDialog.IsMarquee">
            <summary>
            Whether the progress is indeterminate.
            Cannot be changed when <see cref="F:JetBrains.UI.Application.Progress.SystemProgressDialog.IsRunning"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.SystemProgressDialog.IsRunning">
            <summary>
            Whether the dialog is currently visible. Set to <c>True</c> to show. To hide, either set to <c>False</c> or dispose of the dialog.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.SystemProgressDialog.IsUserCanceled">
            <summary>
            Whether the user has canceled the progress dialog. Readonly.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.SystemProgressDialog.Title">
            <summary>
            Progress dialog title.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.SystemProgressDialog.Value">
            <summary>
            Value of the progress, in the [0…1] range.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.SystemProgressDialog.WindowHandle">
            <summary>
            A handle to the progress window. Readonly.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.SystemProgressDialog.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.SystemProgressDialogEx.BindToProgressIndicator(JetBrains.UI.Application.Progress.SystemProgressDialog,JetBrains.Application.Progress.IProgressIndicatorModel)">
            <summary>
            Binds a progress indicator to its visual presentation.
            The values are prevented from being updated too often.
            Returns a diconnection token.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Application.Progress.TaskProgressControl">
            <summary>
            Summary description for TaskProgressControl.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.TaskProgressControl.FillColor">
            <summary>
            Background fill color. Not inherited by the child controls.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.TaskProgressControl.GetPreferredSize(System.Drawing.Size)">
            <summary>
            Retrieves the size of a rectangular area into which a control can be fitted.
            </summary>
            
            <returns>
            An ordered pair of type <see cref="T:System.Drawing.Size"></see> representing the width and height of a rectangle.
            </returns>
            
            <param name="proposedSize">The custom-sized area for a control. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.TaskProgressControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint"></see> event.
            </summary>
            
            <param name="args">A <see cref="T:System.Windows.Forms.PaintEventArgs"></see> that contains the event data. </param>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.TaskThreadAffinity.Primary">
            <summary>
            The task must be executed on the primary (UI) thread only.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.TaskThreadAffinity.Free">
            <summary>
            The task could be run on any thread.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.TrackFocus.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.UI.Application.Progress.UITaskExecutor">
            <summary>
            A task executor that displays graphical user interface while the progress is running.
            This object is reusable and is not connected to any given task execution.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.UITaskExecutor.#ctor(JetBrains.UI.Application.Progress.TaskThreadAffinity)">
            <summary>
            Creates a new task executor. Specifies whether a task might be executed on another thread.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.UITaskExecutor.OnAttachProgressWindowUI_CustomDialog(System.String,JetBrains.Application.Progress.IProgressIndicatorModel,JetBrains.Application.Progress.TaskCancelable,JetBrains.DataFlow.Disposables)">
            <summary>
            Progress UI for the task run: homebrew progress dlg.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.UITaskExecutor.OnAttachProgressWindowUI_SystemDialog(System.String,JetBrains.Application.Progress.IProgressIndicatorModel,JetBrains.Application.Progress.TaskCancelable)">
            <summary>
            Progress UI for the task run: system progress dlg.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.UITaskExecutor.ExecuteTask(System.String,JetBrains.Application.Progress.TaskCancelable,System.Action{JetBrains.Application.Progress.IProgressIndicator})">
            <summary>
            Executes the task without exiting the method until the task is completed.
            </summary>
            <param name="name">
            <para>Task title, short form.</para>
            <para>This is used for the progress window title by the UI progress indicators.</para>
            <para>The long form of the task caption should go to the <see cref="P:JetBrains.Application.Progress.IProgressIndicator.TaskName"/> of the <paramref name="task"/>'s <see cref="T:JetBrains.Application.Progress.IProgressIndicator"/>.</para>
            <para>Prepended with the product name automatically. Might be empty, in which case the product name will be used.</para>
            </param>
            <param name="task">The task to execute.</param>
            <param name="cancelable">Whether the task could be canceled by the user, if the task progress indication provided by <see cref="T:JetBrains.Application.Progress.ITaskExecutor"/> supports canceling.</param>
            <returns>Whether the task has completed execution (ie was not canceled). Note that a <see cref="T:JetBrains.Application.Progress.ProcessCancelledException"/> could cancel even a <see cref="F:JetBrains.Application.Progress.TaskCancelable.No"/> task.</returns>
            <remarks>Any return values of the task should be assigned inside the closure that implements the <paramref name="task"/>.</remarks>
        </member>
        <member name="P:JetBrains.UI.Application.Progress.UITaskExecutor.FreeThreaded">
            <summary>
            Gets a UI Task Executor that can run tasks on worker threads.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Application.Progress.UITaskExecutor.SingleThreaded">
            <summary>
            Gets a UI Task Executor that can run tasks on the primary (UI) thread only.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Application.Progress.UITaskExecutorRun">
            <summary>
            Controls a single <see cref="M:JetBrains.Application.Progress.ITaskExecutor.ExecuteTask(System.String,JetBrains.Application.Progress.TaskCancelable,System.Action{JetBrains.Application.Progress.IProgressIndicator})"/> run of the <see cref="T:JetBrains.UI.Application.Progress.UITaskExecutor"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.UITaskExecutorRun.myBackingA">
            <summary>
            Private.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.UITaskExecutorRun.#ctor(JetBrains.UI.Application.Progress.TaskThreadAffinity,System.Action{JetBrains.Application.Progress.IProgressIndicator},System.Func{JetBrains.Application.Progress.IProgressIndicatorModel,JetBrains.DataFlow.Disposables,System.IntPtr},JetBrains.Application.Progress.ProgressIndicator)">
            <summary>
            Creates an object that runs the task execution once.
            </summary>
            <param name="threading">Whether the task MUST be run on the primary thred (<see cref="F:JetBrains.UI.Application.Progress.TaskThreadAffinity.Primary"/>), or it COULD be run on a worker thread to avoid freezing the UI (<see cref="F:JetBrains.UI.Application.Progress.TaskThreadAffinity.Free"/>).</param>
            <param name="task">The task to run. The <see cref="T:JetBrains.Application.Progress.IProgressIndicator"/> given to the task is always free-threaded for both reading and writing, even if <see cref="F:JetBrains.UI.Application.Progress.TaskThreadAffinity.Primary"/>.</param>
            <param name="FAttachUi">Allows the owner to attach its UI to the progress of the task. The <see cref="T:JetBrains.Application.Progress.IProgressIndicatorModel"/> object given as parameter is always primary-threaded, which means that it fires modifications on the primary thread only. To cancel out the UI or binding, submit to the <see cref="T:JetBrains.DataFlow.Disposables"/> parameter. Optionally return the window handle, if known already, to keep from disabling when applying the modal state.</param>
            <param name="indicator">The owner-provided progress indicator.</param>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.UITaskExecutorRun.#ctor(JetBrains.UI.Application.Progress.TaskThreadAffinity,System.Action{JetBrains.Application.Progress.IProgressIndicator},System.Func{JetBrains.Application.Progress.IProgressIndicatorModel,JetBrains.DataFlow.Disposables,System.IntPtr})">
            <summary>
            Creates an object that runs the task execution once.
            </summary>
            <param name="threading">Whether the task MUST be run on the primary thred (<see cref="F:JetBrains.UI.Application.Progress.TaskThreadAffinity.Primary"/>), or it COULD be run on a worker thread to avoid freezing the UI (<see cref="F:JetBrains.UI.Application.Progress.TaskThreadAffinity.Free"/>).</param>
            <param name="task">The task to run. The <see cref="T:JetBrains.Application.Progress.IProgressIndicator"/> given to the task is always free-threaded for both reading and writing, even if <see cref="F:JetBrains.UI.Application.Progress.TaskThreadAffinity.Primary"/>.</param>
            <param name="FAttachUi">Allows the owner to attach its UI to the progress of the task. The <see cref="T:JetBrains.Application.Progress.IProgressIndicatorModel"/> object given as parameter is always primary-threaded, which means that it fires modifications on the primary thread only. To cancel out the UI or binding, submit to the <see cref="T:JetBrains.DataFlow.Disposables"/> parameter. Optionally return the window handle, if known already, to keep from disabling when applying the modal state.</param>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.UITaskExecutorRun.IsDone">
            <summary>
            Set to <c>True</c> after the task has finished running.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.UITaskExecutorRun.Run">
            <summary>
            The main method.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.UITaskExecutorRun.GetSettingsTimeSpan(System.String,System.TimeSpan)">
            <summary>
            A helper for reading a TimeSpan from the Settings. To be replaced with Settings access when they support arbitrary types.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.UITaskExecutorRun.GetTaskAffinedThread">
            <summary>
            Gets or creates the thread on which the task should be executed (either the current one, or the special worker thread, see <see cref="F:JetBrains.UI.Application.Progress.UITaskExecutorRun.myTaskThreadAffinity"/>).
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.UITaskExecutorRun.Run_AttachUI">
            <summary>
            Progress UI for the task run, as specified by the owner of this Run object.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.UITaskExecutorRun.Run_DisableWindows(System.IntPtr)">
            <summary>
            Pushes a main-window-disable, to emulate modality.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.UITaskExecutorRun.Run_WaitUntilDone">
            <summary>
            Pumps messages until the task is thru.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.UITaskExecutorRun.RunStartTask">
            <summary>
            Starts the task, on whichever thread needed.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.UITaskExecutorRun.RunStartTaskCallTaskAction">
            <summary>
            The <see cref="F:JetBrains.UI.Application.Progress.UITaskExecutorRun.myTask"/> caller impl, runs on task target thread, at the end notifies the owner thru <see cref="F:JetBrains.UI.Application.Progress.UITaskExecutorRun.IsDone"/> async.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Application.Progress.UITaskExecutorSwitchingImplementation">
            <summary>
            Allows to override the default <see cref="T:JetBrains.UI.Application.Progress.UITaskExecutor"/> implementation with test mocks or app-specifics.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.UITaskExecutorSwitchingImplementation.CreateExecutor(JetBrains.UI.Application.Progress.TaskThreadAffinity)">
            <summary>
            Switching implementation for <see cref="T:JetBrains.UI.Application.Progress.UITaskExecutor"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.UITaskExecutorSwitchingImplementation.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.UI.Application.Progress.WorkerThreadShop">
            <summary>
            Creates personal worker threads.
            Ensures they will be reclaimed when the <see cref="T:JetBrains.Application.Shell"/> is torn down.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.WorkerThreadShop.Create(System.String)">
            <summary>
            Creates a new <see cref="T:JetBrains.Threading.JetDispatcher">dispatcher</see> thread that will be reclaimed when the <see cref="T:JetBrains.Application.Shell"/> is shut down.
            </summary>
            <param name="name">Name for the managed thread.</param>
            <returns>Thread-owning dispatcher.</returns>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.WorkerThreadShop.Create(System.String,JetBrains.Threading.JetDispatcher@)">
            <summary>
            Creates a new <see cref="T:JetBrains.Threading.JetDispatcher">dispatcher</see> thread that will be reclaimed when the <see cref="T:JetBrains.Application.Shell"/> is shut down, or when the return value is disposed of.
            </summary>
            <param name="name">Name for the managed thread.</param>
            <param name="thread">Thread-owning dispatcher.</param>
            <returns>A token for disposing of the thread.</returns>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.WorkerThreadShop.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:JetBrains.UI.Application.ShellComponentsEx">
            <summary>
            <see cref="T:JetBrains.Application.ShellComponents"/> in this assembly.
            </summary>
            <remarks>Excluded: <see cref="T:JetBrains.Application.OneTimeInitializationManager"/>, <see cref="T:JetBrains.Application.OleUndoManagerFactory"/>.</remarks>
        </member>
        <member name="T:JetBrains.UI.Application.StatusBar">
            <summary>
            Provides access to the Status Bar of the UI application.
            </summary>
        </member>
        <member name="T:JetBrains.UI.StatusBar.IStatusBar">
            <summary>
            Provides access to the Status Bar of the UI application.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.IStatusBar.ClearText">
            <summary>
            Clears the status bar text.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.IStatusBar.SetText(System.String,System.Boolean)">
            <summary>
            Sets the status bar text.
            </summary>
            <param name="text">Text.</param>
            <param name="emphisized">Whether to apply special highlighting to the status bar text to emphasize that it's not a routine message.</param>
        </member>
        <member name="P:JetBrains.UI.StatusBar.IStatusBar.Indicators">
            <summary>
            Gets the collection of the status bar indicators.
            </summary>
        </member>
        <member name="P:JetBrains.UI.StatusBar.IStatusBar.IsVisible">
            <summary>
            Gets whether the application status bar is currently visible (not turned off).
            </summary>
        </member>
        <member name="P:JetBrains.UI.StatusBar.IStatusBar.Text">
            <summary>
            Gets the text currently displayed in the status bar.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.StatusBar.myIsVisible">
            <summary>
            <see cref="P:JetBrains.UI.Application.StatusBar.IsVisible"/>.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Application.StatusBar.Indicators">
            <summary>
            Gets the collection of the status bar indicators.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Application.StatusBar.IsVisible">
            <summary>
            Gets whether the application status bar is currently visible (not turned off).
            </summary>
        </member>
        <member name="T:JetBrains.UI.Application.SubclassStatusBar">
            <summary>
            A status bar implementation that works by subclassing the standard WinAPI Status Bar control in the main window.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.SubclassStatusBar.StatusBarWindowClassName">
            <summary>
            Name of the common controls Windows class of the statusbar control window.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.SubclassStatusBar.myShim">
            <summary>
            Subclasses the window of the WinAPI status bar (be it DEVENV's or standalone app's).
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.SubclassStatusBar.FindStatusBarInMainWindow(System.IntPtr)">
            <summary>
            In an application window, looks up all of the child windows to find the status bar window. Throws on a failure.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.SubclassStatusBar.GetHwndToSubclass">
            <summary>
            Override this funct if you know the exact HWND of the status bar window to be subclassed.
            The default implementation looks up the best status bar window in the application main window.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.SubclassStatusBar.ClearText">
            <summary>
             Clears the status bar text.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.SubclassStatusBar.SetText(System.String,System.Boolean)">
            <summary>
             Sets the status bar text.
            </summary>
            <param name="text">Text.</param>
            <param name="emphisized">Whether to apply special highlighting to the status bar text to emphasize that it's not a routine message.</param>
        </member>
        <member name="P:JetBrains.UI.Application.SubclassStatusBar.Indicators">
            <summary>
            Gets the collection of the status bar indicators.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Application.SubclassStatusBar.Text">
            <summary>
             Gets the text currently displayed in the status bar.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Application.TimeBombComponent">
            <summary>
            A timebomb that renders the product unusable after a period of time.
            Makes sure Beta builds cannot be used forever.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Application.TimeBombComponent.TimeBombPeriod">
            <summary>
            <para>If <c>Null</c>, there is no timebomb in the build.</para>
            <para>A positive value denotes the period of time after the build date (<see cref="P:JetBrains.Application.IApplicationDescriptor.BuiltOn"/>) within which the product is operational. When the timeout expires, the product cannot be used anymore.</para>
            <para>Do not use non-positive time spans.</para>
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.UIApplicationShell.PropGetLegacySettingsFiles">
            <summary>
            A property that <see cref="T:JetBrains.Application.IApplicationDescriptor"/>s could put into their <see cref="P:JetBrains.Application.IApplicationDescriptor.Bag"/>s to look for older-version settings in non-standard folders when there are no up-to-date-version settings found and we would like to upgrade from an older version.
            The strings are file path names.
            The versions are versions of the product to which the settings supposedly belong.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.UIApplicationShell.PropShowProductHelp">
            <summary>
            A property that <see cref="T:JetBrains.Application.IApplicationDescriptor"/>s could put into their <see cref="P:JetBrains.Application.IApplicationDescriptor.Bag"/>s to override the default <see cref="M:JetBrains.UI.Application.UIApplicationShell.ShowProductHelp(System.String)"/> behavior for the given product.
            To invoke the help from code, use <see cref="M:JetBrains.UI.Application.UIApplicationShell.ShowProductHelp(System.String)"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.UIApplicationShell.Idle">
            <summary>
            Fires periodically during the application idle time.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.UIApplicationShell.IsApplicationActive">
            <summary>
            Gets whether the application is currently active.
            This means that some of the application top-level windows currently has input focus.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.UIApplicationShell.GetVersionStringForAboutBox(JetBrains.Application.IApplicationDescriptor,System.Boolean)">
            <summary>
            Gets the version string for the current product, without the 
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.UIApplicationShell.GetVersionStringForAboutBox(System.Boolean)">
            <summary>
            Gets the version string for the current product, without the 
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.UIApplicationShell.ShowProductHelp(System.String)">
            <summary>
            Opens the help topic for the given keyword.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.UIApplicationShell.UiApplicationShellMessageBox(System.IntPtr,System.String,System.String,JetBrains.Interop.WinApi.MessageBoxFlags)">
            <summary>
            Implements the MessageBox that is owned by the main window and supplies the product name correctly.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.UIApplicationShell.ShowProductHelp_AppDescriptorOverride(System.String)">
            <summary>
            Checks the <see cref="P:JetBrains.Application.Shell.Descriptor"/> for an override on opening the product help, and executes it.
            </summary>
            <param name="keyword"></param>
            <returns></returns>
        </member>
        <member name="P:JetBrains.UI.Application.UIApplicationShell.HasInstance">
            <summary>
            Tells whether the <see cref="P:JetBrains.UI.Application.UIApplicationShell.Instance"/> is available, and the property could be read.
            When <c>False</c>, <see cref="P:JetBrains.UI.Application.UIApplicationShell.Instance"/> throws an exception.
            </summary>
            <remarks>Notes to inheritors: <see cref="P:JetBrains.UI.Application.UIApplicationShell.HasInstance"/> and <see cref="P:JetBrains.UI.Application.UIApplicationShell.Instance"/> must be overridden in sync.</remarks>
        </member>
        <member name="P:JetBrains.UI.Application.UIApplicationShell.Instance">
            <summary>
            Gets the instance of the UI Application Shell.
            If not available, throws an exception. Check the <see cref="P:JetBrains.UI.Application.UIApplicationShell.HasInstance"/> property value to see if <see cref="P:JetBrains.UI.Application.UIApplicationShell.Instance"/> can be accessed. 
            </summary>
            <remarks>Notes to inheritors: <see cref="P:JetBrains.UI.Application.UIApplicationShell.HasInstance"/> and <see cref="P:JetBrains.UI.Application.UIApplicationShell.Instance"/> must be overridden in sync.</remarks>
        </member>
        <member name="P:JetBrains.UI.Application.UIApplicationShell.LoggerExceptionReporter">
            <summary>
            Gets the default exception reporter of the shell that listens for <see cref="T:JetBrains.Util.Logger"/> exceptions and displays an exception submitter for them.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Application.UIApplicationShell.MainWindow">
            <summary>
            Gets a handle to the application main window that could be used for owning dialog boxes, and such.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Application.WindowsMessageHookManager">
            <summary>
            Manages the lifetime of the system-wide <see cref="P:JetBrains.UI.Application.WindowsMessageHookManager.WindowsMessageHook"/> instance.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.WindowsMessageHookManager.myWindowsMessageHook">
            <summary>
            Instance.
            </summary>
        </member>
        <member name="P:JetBrains.UI.Application.WindowsMessageHookManager.WindowsMessageHook">
            <summary>
            Gets the class that provides for hooking into the Windows messages received by a window.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.WindowUtil.LoadChildDialogPosition(System.Drawing.Rectangle,System.Windows.Forms.Form)">
            <summary>
            Loads the child dialog position from the persisted settings, and applies it to the form.
            The position is stored in a relative form, against the center of the main window.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.WindowUtil.PushModalWindowEnabledState(System.IntPtr)">
            <summary>
            To enter a modal state for the given window, disables all of the other top-level windows on the same thread, plus the window owner.
            If you haven't shown the modal window yet, you may pass <c>Null</c>.
            </summary>
            <param name="hwndModalWindow">Optional. The window to become modal that will not be disabled. <c>Null</c> if n/a.</param>
        </member>
        <member name="M:JetBrains.UI.Application.WindowUtil.SaveChildDialogPosition(System.Windows.Forms.Form)">
            <summary>
            Prepares the child dialog position for persisting in the settings.
            The position is stored in a relative form, against the center of the main window.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.WindowUtil.SetOwnerReliable(System.Windows.Forms.Form,System.Windows.Forms.IWin32Window)">
            <summary>
            Sets an owner for the form in a reliable manner.
            The problem with reliability is that if the owner is not another <see cref="T:System.Windows.Forms.Form"/> (ie <see cref="P:System.Windows.Forms.Form.Owner"/> cannot be used), and form-to-be-owned is not <see cref="P:System.Windows.Forms.Form.ShowInTaskbar"/>, then the netfx implementation will drop the owner assigned with WinAPI calls and replace it with its own parking window (kinda to prevent it from showing up in the taskbar).
            This is done after the handle is created and after all of the notifications, so we should wait some more and then reapply the desired parent.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.WindowUtil.SetOwnerReliable_MainWindow(System.Windows.Forms.Form)">
            <summary>
            Sets an owner for the form in a reliable manner. The main application window will be the owner.
            The problem with reliability is that if the owner is not another <see cref="T:System.Windows.Forms.Form"/> (ie <see cref="P:System.Windows.Forms.Form.Owner"/> cannot be used), and form-to-be-owned is not <see cref="P:System.Windows.Forms.Form.ShowInTaskbar"/>, then the netfx implementation will drop the owner assigned with WinAPI calls and replace it with its own parking window (kinda to prevent it from showing up in the taskbar).
            This is done after the handle is created and after all of the notifications, so we should wait some more and then reapply the desired parent.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.WindowUtil.ShowFocusCatcher(System.Void*)">
            <summary>
            Shows a window that catches focus and then returns it back immediately, so that the <paramref name="hwndTopmost"/> window could process the activation message consistently and place focus on the proper child window. Without that it could happen that focus sits directly on the main window and no child is active.
            </summary>
        </member>
        <member name="T:JetBrains.UI.StatusBar.Indicators.MemoryUsageIndicator">
            <summary>
            Displays memory usage in the status bar.
            Shows and hides based on the options.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StatusBar.Indicators.MemoryUsageIndicator.myMemoryUsageValue">
            <summary>
            The current memory usage.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.Indicators.MemoryUsageIndicator.OnHide(System.Object,System.EventArgs)">
            <summary>
            Hides the indicator, hints on bringing it back.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.Indicators.MemoryUsageIndicator.ShowPopupMessage(JetBrains.UI.RichText.RichText)">
            <summary>
            Shows a message in a popup tooltip somewhere near the indicator.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.Indicators.MemoryUsageIndicator.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.StatusBar.Indicators.MemoryUsageIndicator.JetBrains#CommonControls#ITooltipProvider#GetTooltip(System.Drawing.Point)">
            <summary>
            Called by tooltip manager, if the tooltip is to be displayed
            </summary>
            <param name="point">Point in control's coordinates</param>
            <returns><see cref="T:JetBrains.CommonControls.ITooltipInfo"/>, or <c>Null</c> if no tooltip should be displayed.</returns>
        </member>
        <member name="P:JetBrains.UI.StatusBar.Indicators.MemoryUsageIndicator.Presentation">
            <summary>
            Gets the visual presentation of the control.
            </summary>
        </member>
        <member name="T:JetBrains.UI.StatusBar.Indicators.MemoryUsageIndicator.GcMonitor">
            <summary>
            When <see cref="M:System.GC.Collect"/> occurs, the finalizer is called on this class, and the owner is notified of the event.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.License.LicenseInformationForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.License.FormWithWebBrowser.GetMeasuringDivStyle(System.Drawing.Size)">
            <summary>
            Generates a style for the div we use for measuring the text, assigning it the specified width and height, which must be given in pixels.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.License.FormWithWebBrowser.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.License.FormWithWebBrowser.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.UI.Application.License.FormWithWebBrowser.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.License.EvaluationExpirationForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.License.EvaluationExpirationForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.UI.Application.License.EvaluationExpirationForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.License.EvaluationFeedbackForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.License.EvaluationFeedbackForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:JetBrains.UI.Application.License.EvaluationFeedbackForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.License.ExpirationWarningForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.License.ExpirationWarningForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.License.ExpirationWarningForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.License.LicenseInfoForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.License.PasteTextBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.License.PasteTextBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.License.PasteTextBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.PluginSupport.PluginManager.myPluginIdToStateMap">
            <summary>
            Indicates the plugin's enabled state.
            Filled in by <see cref="!:ReadFromXml"/>.
            </summary>
        </member>
        <member name="T:JetBrains.UI.Application.PluginSupport.PluginManager.PluginLoaderLogListener">
            <summary>
            Collects errors that occur while a particular plugin is being loaded.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.PluginSupport.PluginsTableForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Application.Progress.ProgressWindow.IsTaskRunning">
            <summary>
            Set to <c>True</c> before the task starts running, reverted to <c>False</c> when the task completes.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.ProgressWindow.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.ProgressWindow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.ProgressWindow.ExecuteTask(System.String,JetBrains.Application.Progress.TaskCancelable,System.Action{JetBrains.Application.Progress.IProgressIndicator})">
            <summary>
            Executes the task without exiting the method until the task is completed.
            </summary>
            <param name="name">Task name. Must not be empty.</param>
            <param name="task">The task to execute.</param>
            <param name="cancelable">Whether the task could be canceled by the user, if the task progress indication provided by <see cref="T:JetBrains.Application.Progress.ITaskExecutor"/> supports canceling.</param>
            <returns>Whether the task has completed execution (ie was not canceled). Note that a <see cref="T:JetBrains.Application.Progress.ProcessCancelledException"/> could cancel even a <see cref="F:JetBrains.Application.Progress.TaskCancelable.No"/> task.</returns>
            <remarks>Any return values of the task should be assigned inside the closure that implements the <paramref name="task"/>.</remarks>
        </member>
        <member name="P:JetBrains.UI.Application.Progress.ProgressWindow.TaskThread">
            <summary>
            When the task is running (<see cref="F:JetBrains.UI.Application.Progress.ProgressWindow.IsTaskRunning"/> is <c>True</c>), set to the thread on which the task is running.
            At other times, might be <c>Null</c>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Application.Progress.SyncProgressWindow.#ctor">
            <summary>
            Constucts progress window without show delay
            </summary>
        </member>
        <member name="T:JetBrains.UI.SourceGrid.DataGridCheckBoxColumn">
            <summary>
            Custom DataGrid column which paints checkboxes
            </summary>
        </member>
        <member name="T:JetBrains.UI.SourceGrid.DataGridLabelColumn">
            <summary>
            DataGrid column for simple text
            </summary>
        </member>
        <member name="T:JetBrains.UI.StatusBar.JetStatusBarIndicatorView">
            <summary>
            Represents the window that hosts the <see cref="T:JetBrains.UI.StatusBar.JetStatusBarIndicator"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.myData">
            <summary>
            <see cref="P:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.Data"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.myIsHovered">
            <summary>
            <c>True</c> whenif mouse is over the control.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.myPadding">
            <summary>
            Padding of the indicator, as reflected from the data.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.myWindowlessControl">
            <summary>
            The effective Windowless Control value, coming from the <see cref="P:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.Data"/>.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.#ctor(JetBrains.UI.StatusBar.JetStatusBarIndicator)">
            <summary>
            Creates a new view and attaches it to its data.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.GottenDirty">
            <summary>
            Fires when the indicator must repaint itself.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.CreateControl(System.Windows.Forms.IWin32Window,System.Drawing.Rectangle)">
            <summary>
            Creates the control.
            If the rectangle is non-empty, makes the control visible.
            </summary>
            <param name="parent">Handle to the parent window.</param>
            <param name="bounds">Bounds of the control, in parent client coords.</param>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.CreateControl(System.Windows.Forms.IWin32Window)">
            <summary>
            Creates the control, does not assign it any meaningful size, does not make it visible.
            </summary>
            <param name="parent">Handle to the parent window.</param>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.OnButtonDblClk(System.Windows.Forms.Message@,System.Windows.Forms.MouseButtons)">
            <summary>
            Generates the mouse double-clicks when the mouse button is doubleclicked.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.OnButtonUp(System.Windows.Forms.Message@,System.Windows.Forms.MouseButtons)">
            <summary>
            Generates the mouse clicks when the mouse button is released.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.OnContextMenu(System.Windows.Forms.Message@)">
            <summary>
            Causes the context-menu event to fire.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.OnPaint">
            <summary>
            WM_PAINT.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.PaintBackground(System.Drawing.Graphics)">
            <summary>
            Paints the appropriately styled background for the status bar control.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.OnHandleChange">
            <summary>
            Specifies a notification method that is called when the handle for a window is changed. 
            </summary>
            
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Invokes the default window procedure associated with this window. 
            </summary>
            
            <param name="m">A <see cref="T:System.Windows.Forms.Message"></see> that is associated with the current Windows message. </param>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.GetDesiredSize(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Performs the bottom-up layouting stage, when the control calculates its desired size using the given constraints.
            Should give generally the same results as <see cref="T:JetBrains.CommonControls.IConstrainableControl"/>, but could employ the <paramref name="gc"/> device context for the sake of optimization.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="limit">The maximum available space (that could affect the shape of the control, or strip down unnecessary calculations over the invisible items).
            May be a <see cref="T:System.Drawing.Size"/> with width and height equal to <see cref="F:System.Int32.MaxValue"/>, which means that the size is not limited.</param>
            <returns>The desired size, must be no larger than <paramref name="limit"/>.</returns>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.SetLayout(JetBrains.UI.LayoutResult)">
            <summary>
            Tells the control the details about the new layout applied to it by the controlling entity in conjunction with some <see cref="T:JetBrains.UI.IPopupLayouter"/>.
            Typically, the control need not apply the given size and location because that should be done by the controlling entity.
            The control may change its presentation in response to the layouting details, for example, whether it's attached to the top or the bottom of the anchoring rect.
            </summary>
            <param name="layout">The layouting details.</param>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.GetTooltip(System.Drawing.Point)">
            <summary>
            Called by tooltip manager, if the tooltip is to be displayed
            </summary>
            <param name="point">Point in control's coordinates</param>
            <returns><see cref="T:JetBrains.CommonControls.ITooltipInfo"/>, or <c>Null</c> if no tooltip should be displayed.</returns>
        </member>
        <member name="P:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.Bounds">
            <summary>
            Gets or sets the window bounds, in parent's client coordinates.
            </summary>
        </member>
        <member name="P:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.Data">
            <summary>
            Gets or sets the document this view represents.
            </summary>
        </member>
        <member name="P:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.Visible">
            <summary>
            Gets or sets whether the window is visible.
            </summary>
        </member>
        <member name="P:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.UI.StatusBar.JetStatusBarIndicatorView.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="T:JetBrains.UI.StatusBar.JetStatusBarShim">
            <summary>
            Subclasses the Visual Studio WinAPI status bar window.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StatusBar.JetStatusBarShim.myStatusbarMessagesAll">
            <summary>
            All of the statusbar-specific messages.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StatusBar.JetStatusBarShim.myStatusbarMessagesExpected">
            <summary>
            Those of the statusbar-specific messages that we expect to come from VS to our statusbar.
            It's not that we handle them all, but we're aware of what they could do.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StatusBar.JetStatusBarShim.myStatusbarMessagesUnexpected">
            <summary>
            Those of the statusbar-specific messages that are not expected to come from VS to our statusbar.
            If such are discovered, it may be needed to think of how to manage them.
            For example, seeing <see cref="F:JetBrains.Interop.WinApi.WindowsMessages.SB_GETPARTS"/> would be some kind of a small f***-up.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StatusBar.JetStatusBarShim.myIndicatorViews">
            <summary>
            The list of the indicator windows we place in the status bar parts.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StatusBar.JetStatusBarShim.myLastHandle">
            <summary>
            Persists the MRU attached handle, so that we could kick it into recalculating even after we fully detach
            </summary>
        </member>
        <member name="F:JetBrains.UI.StatusBar.JetStatusBarShim.myPaddingAroundEachPart">
            <summary>
            Padding around each of the indicator parts placed in the status bar.
            The value is updated when we intercept the Devenv's queries for the status bar extents.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StatusBar.JetStatusBarShim.myRemappedPartsBuffer">
            <summary>
            When we change the status bar parts layout, this is the buffer that is passed around to the unmanaged code.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StatusBar.JetStatusBarShim.myVisibilityUpdatesWaiting">
            <summary>
            Whether there are pending visibility updates, and no new should be added (see <see cref="M:JetBrains.UI.StatusBar.JetStatusBarShim.OnPingStatusBar"/>).
            </summary>
        </member>
        <member name="F:JetBrains.UI.StatusBar.JetStatusBarShim.MinFirstPartWidth">
            <summary>
            Specifies the minimum width of the first statusbar part.
            We won't insert our content if the resulting first part (one with the meaningful text) is smaller than that. 
            </summary>
        </member>
        <member name="F:JetBrains.UI.StatusBar.JetStatusBarShim.OptionTrace">
            <summary>
            Verbose traces.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarShim.Attach(System.IntPtr)">
            <summary>
            Looks up a status bar on the given window, and attaches to it.
            Note: the status bar window always exists, even if the status bar is not shown in DEVENV.
            Throws on failure.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarShim.GetUnexpectedStatusBarMessages">
            <summary>
            Produces an “all but expected” statusbar messages collection.
            Useful for logging, but we'd like to rather manually enter an array of the things we do expect.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarShim.InvalidateSizeOf(System.IntPtr)">
            <summary>
            Forces the window to invalidate its size.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarShim.InvalidateSize">
            <summary>
            Makes the statusbar owner reapply the layout, so that we could remap its parts and inject our indicators.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarShim.OnPingStatusBar">
            <summary>
            Executed periodically.
            Syncs to the status bar properties.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarShim.OnSbGetBorders(System.Windows.Forms.Message@)">
            <summary>
            When Devenv is requesting the statusbar borders, store this info for our use.
            Those are various paddings in the status bar window.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarShim.OnSbSetParts(System.Windows.Forms.Message@)">
            <summary>
            Devenv is trying to assign parts to the status bar.
            This is the place where we modify them to make room for our own, and add new parts.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarShim.OnSbSetParts_Apply(System.Collections.Generic.IList{System.Drawing.Rectangle})">
            <summary>
            After all the parts' sizes are measured, apply them.
            </summary>
            <param name="rectBounds">Indicator bounds, in statusbar client coords.</param>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarShim.OnSbSetParts_Measure(System.Windows.Forms.Message@,System.Collections.Generic.IList{System.Drawing.Rectangle},JetBrains.UI.IGraphicsContainer)">
            <summary>
            Measures the statusbar and determines the placing of all the registered indicators.
            </summary>
            <param name="m">The message being processed.</param>
            <param name="rectBounds">Indicator bounds, in statusbar client coords.</param>
            <param name="gc">Provides graphics for measuring against.</param>
            <returns>Whether the base <see cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)"/> has been called in the course of action.</returns>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarShim.OnHandleChange">
            <summary>
            Specifies a notification method that is called when the handle for a window is changed.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarShim.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Invokes the default window procedure associated with this window. 
            </summary>
            
            <param name="m">A <see cref="T:System.Windows.Forms.Message"></see> that is associated with the current Windows message. </param>
        </member>
        <member name="M:JetBrains.UI.StatusBar.JetStatusBarShim.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.UI.StatusBar.JetStatusBarShim.IndicatorData">
            <summary>
            Gets the list of indicator datas belonging to the indicator views this status bar hosts.
            </summary>
        </member>
        <member name="P:JetBrains.UI.StatusBar.JetStatusBarShim.IsVisible">
            <summary>
            Gets whether the status bar window is currently visible.
            </summary>
        </member>
        <member name="P:JetBrains.UI.StatusBar.JetStatusBarShim.IndicatorViews">
            <summary>
            Gets the list of indicator views this status bar hosts.
            </summary>
        </member>
        <member name="T:JetBrains.UI.StatusBar.Indicators.TrefoilIndicator">
            <summary>
            A test status bar indicator that renders a trefoil.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StatusBar.Indicators.TrefoilIndicator.mySpinPeriod">
            <summary>
            Period of a full spin, in milliseconds.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StatusBar.Indicators.TrefoilIndicator.myAngularSpeed">
            <summary>
            Defines the direction and mul-factor.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StatusBar.Indicators.TrefoilIndicator.myGottenDirty">
            <summary>
            The control has gotten dirty and should be repainted.
            </summary>
        </member>
        <member name="F:JetBrains.UI.StatusBar.Indicators.TrefoilIndicator.myWantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.Indicators.TrefoilIndicator.CreateIndicatorInStatusBar">
            <summary>
            Creates a ready-for-use status-bar indicator.
            </summary>
        </member>
        <member name="M:JetBrains.UI.StatusBar.Indicators.TrefoilIndicator.GetTooltip(System.Drawing.Point)">
            <summary>
            Called by tooltip manager, if the tooltip is to be displayed
            </summary>
            <param name="point">Point in control's coordinates</param>
            <returns><see cref="T:JetBrains.CommonControls.ITooltipInfo"/>, or <c>Null</c> if no tooltip should be displayed.</returns>
        </member>
        <member name="M:JetBrains.UI.StatusBar.Indicators.TrefoilIndicator.GetDesiredSize(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Performs the bottom-up layouting stage, when the control calculates its desired size using the given constraints.
            Should give generally the same results as <see cref="T:JetBrains.CommonControls.IConstrainableControl"/>, but could employ the <paramref name="gc"/> device context for the sake of optimization.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="limit">The maximum available space (that could affect the shape of the control, or strip down unnecessary calculations over the invisible items).
            May be a <see cref="T:System.Drawing.Size"/> with width and height equal to <see cref="F:System.Int32.MaxValue"/>, which means that the size is not limited.</param>
            <returns>The desired size, must be no larger than <paramref name="limit"/>.</returns>
        </member>
        <member name="M:JetBrains.UI.StatusBar.Indicators.TrefoilIndicator.Paint(System.Drawing.Graphics)">
            <summary>
            Renders the context of the windowless control. The rendering bounds are given by the 
            </summary>
            <param name="g">The device context.</param>
        </member>
        <member name="M:JetBrains.UI.StatusBar.Indicators.TrefoilIndicator.SetBounds(JetBrains.UI.IGraphicsContainer,System.Drawing.Rectangle)">
            <summary>
            Performs the top-down layouting stage, when the control lais out its parts within the given bounds.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="bounds">The new bounds. From now on, this value should be returned from the <see cref="P:JetBrains.CommonControls.IWindowlessControl.Bounds"/> property.</param>
        </member>
        <member name="M:JetBrains.UI.StatusBar.Indicators.TrefoilIndicator.SetLayout(JetBrains.UI.LayoutResult)">
            <summary>
            Tells the control the details about the new layout applied to it by the controlling entity in conjunction with some <see cref="T:JetBrains.UI.IPopupLayouter"/>.
            Typically, the control need not apply the given size and location because that should be done by the controlling entity.
            The control may change its presentation in response to the layouting details, for example, whether it's attached to the top or the bottom of the anchoring rect.
            </summary>
            <param name="layout">The layouting details.</param>
        </member>
        <member name="P:JetBrains.UI.StatusBar.Indicators.TrefoilIndicator.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.UI.StatusBar.Indicators.TrefoilIndicator.Bounds">
            <summary>
            The windowless control bounds in the parent coordinates. The implementor should just store and return the value set by the owner.
            </summary>
        </member>
        <member name="P:JetBrains.UI.StatusBar.Indicators.TrefoilIndicator.GottenDirty">
            <summary>
            The control has gotten dirty and should be repainted.
            </summary>
        </member>
        <member name="P:JetBrains.UI.StatusBar.Indicators.TrefoilIndicator.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.ITooltipInfo">
            <summary>
            Describes a tooltip on screen and provides the means for positioning it onscreen and controlling its lifetime.
            Don't dispose of tooltip infos until you're done with using their members, eg painters and layouters.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.ITooltipInfo.HitTestToolArea(System.Drawing.Point)">
            <summary>
            Checks whether the given point falls within the tool area of this tooltip. The tooltip is displayed while mouse pointer is within the tool area. One window may have more than one tooltip for different tool areas.
            </summary>
            <param name="pt">Point, in the client coordinates, to be tested for falling within the area.</param>
            <returns><c>True</c> if point is within the area, <c>False</c> otherwise.</returns>
        </member>
        <member name="P:JetBrains.CommonControls.ITooltipInfo.Layouter">
            <summary>
            Gets the layouter that positions the tooltip onscreen.
            <c>Null</c> means the default layouter will be used, one that positions the tooltip against the mouse pointer.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.ITooltipInfo.Painter">
            <summary>
            Gets the painter for the tooltip.
            Must be implemented. Must not be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.ITooltipInfo.PopupWindowContext">
            <summary>
            Gets the popup window context that fires the actions upon which the tooltip is dismissed.
            <c>Null</c> means the default popup window context will be used.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.ITooltipManager">
            <summary>
            An interface for the tooltip manager component.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.ITooltipManager.RefreshTooltip(JetBrains.CommonControls.ITooltipProvider)">
            <summary>
            Updates the tooltip onscreen.
            If there's a tooltip from the <paramref name="provider"/> currently displayed onscreen, the <paramref name="provider"/> is queried for the new <see cref="T:JetBrains.CommonControls.ITooltipInfo"/> and updates the tooltip content.
            If there's no tooltip displayed currently, or it's from another provider, nothing happens.
            </summary>
            <param name="provider">The provider whose tooltip should be updated.</param>
        </member>
        <member name="M:JetBrains.CommonControls.ITooltipManager.Show(JetBrains.CommonControls.IWindowlessControl,JetBrains.UI.IPopupLayouter,JetBrains.UI.PopupWindowManager.IPopupWindowContext,JetBrains.UI.PopupWindowManager.HideFlags,System.Int32)">
            <summary>
            Displays a tooltip using the given content and position, until user discards it with the action specified, or the timeout expires.
            </summary>
            <param name="painter">The tip content layouter and painter.</param>
            <param name="layouter">Layouter for the tooltip popup window.</param>
            <param name="context">Parent context for the tooltip popup window.</param>
            <param name="hideflags">The list of actions that discard the tooltip (app deactivation is implied).</param>
            <param name="timeout">Time interval to display the tooltip for. If positive, specifies the number of milliseconds to show the tooltip for. If <c>-1</c>, uses the default timeout from <see cref="P:JetBrains.CommonControls.TipControlView.DefaultTimeout"/>.</param>
            <returns>The popup window that controls the tooltip, or <c>Null</c> if the tooltip has failed to show (eg tooltips are not allowed at the moment, see <see cref="P:JetBrains.CommonControls.TipControlView.CanShowTooltips"/>).</returns>
        </member>
        <member name="M:JetBrains.CommonControls.ITooltipManager.Show(JetBrains.CommonControls.IWindowlessControl,JetBrains.UI.IPopupLayouter,JetBrains.UI.PopupWindowManager.IPopupWindowContext)">
            <summary>
            Displays a tooltip using the given content and position, until user discards it with the action specified, or the timeout expires.
            </summary>
            <param name="painter">The tip content layouter and painter.</param>
            <param name="layouter">Layouter for the tooltip popup window.</param>
            <param name="context">Parent context for the tooltip popup window.</param>
        </member>
        <member name="M:JetBrains.CommonControls.ITooltipManager.Show(System.String,JetBrains.UI.IPopupLayouter,JetBrains.UI.PopupWindowManager.IPopupWindowContext)">
            <summary>
            Displays a tooltip using the given content and position, until user discards it with the action specified, or the timeout expires.
            </summary>
            <param name="text">Text to be displayed in the tooltip window.</param>
            <param name="layouter">Layouter for the tooltip popup window.</param>
            <param name="context">Parent context for the tooltip popup window.</param>
        </member>
        <member name="M:JetBrains.CommonControls.ITooltipManager.Show(System.String,JetBrains.UI.PopupWindowManager.IPopupWindowContext)">
            <summary>
            Displays a tooltip using the given content and position, until user discards it with the action specified, or the timeout expires.
            Uses the default layouter for the context provided.
            </summary>
            <param name="text">Text to be displayed in the tooltip window.</param>
            <param name="context">Parent context for the tooltip popup window.</param>
        </member>
        <member name="M:JetBrains.CommonControls.ITooltipManager.Show(JetBrains.UI.RichText.RichText,JetBrains.UI.IPopupLayouter,JetBrains.UI.PopupWindowManager.IPopupWindowContext)">
            <summary>
            Displays a tooltip using the given content and position, until user discards it with the action specified, or the timeout expires.
            </summary>
            <param name="text">Rich text to be displayed in the tooltip window.</param>
            <param name="layouter">Layouter for the tooltip popup window.</param>
            <param name="context">Parent context for the tooltip popup window.</param>
        </member>
        <member name="M:JetBrains.CommonControls.ITooltipManager.Show(JetBrains.UI.RichText.RichText,JetBrains.UI.PopupWindowManager.IPopupWindowContext)">
            <summary>
            Displays a tooltip using the given content and position, until user discards it with the action specified, or the timeout expires.
            Uses the default layouter for the context provided.
            </summary>
            <param name="text">Rich text to be displayed in the tooltip window.</param>
            <param name="context">Parent context for the tooltip popup window.</param>
        </member>
        <member name="M:JetBrains.CommonControls.ITooltipManager.Show(JetBrains.UI.RichText.RichTextBlock,JetBrains.UI.IPopupLayouter,JetBrains.UI.PopupWindowManager.IPopupWindowContext)">
            <summary>
            Displays a tooltip using the given content and position, until user discards it with the action specified, or the timeout expires.
            </summary>
            <param name="text">Multiline rich text to be displayed in the tooltip window.</param>
            <param name="layouter">Layouter for the tooltip popup window.</param>
            <param name="context">Parent context for the tooltip popup window.</param>
        </member>
        <member name="M:JetBrains.CommonControls.ITooltipManager.Show(JetBrains.UI.RichText.RichTextBlock,JetBrains.UI.PopupWindowManager.IPopupWindowContext)">
            <summary>
            Displays a tooltip using the given content and position, until user discards it with the action specified, or the timeout expires.
            Uses the default layouter for the context provided.
            </summary>
            <param name="text">Multiline rich text to be displayed in the tooltip window.</param>
            <param name="context">Parent context for the tooltip popup window.</param>
        </member>
        <member name="P:JetBrains.CommonControls.ITooltipManager.ContentMargin">
            <summary>
            Gets the margin that separates the content rendered within the tooltip from the tooltip window edge.
            Also, this is the offset from the tip control location to the tip text location, which is useful for precise positioning of the text.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.ITooltipManager.HoverDelay">
            <summary>
            Gets the standard hover delay, a period of time between the mouse-over and tooltip display, in milliseconds.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.ITooltipManager.PopupWindowMutex">
            <summary>
            Gets the popup window mutex that defines the default identity for the tooltips, and thus prevents from showing more than one at a time.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.ITooltipManager.RenderParams">
            <summary>
            Gets the default rendering parameters for a tooltip.
            Do not modify this instance.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.TipControlView">
            <summary>
            A control that implements the tooltip window.
            Don't use this class directly if you need to show a tooltip. Instead, either use the TipControl static class for one-time tooltips, or implement the <see cref="T:JetBrains.CommonControls.ITooltipProvider"/> interface on your window.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.TipControlView.myDefaultTimeout">
            <summary>
            <see cref="P:JetBrains.CommonControls.TipControlView.DefaultTimeout"/>.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.TipControlView.myRenderParams">
            <summary>
            <see cref="P:JetBrains.CommonControls.TipControlView.RenderParams"/>, lazy-init.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.TipControlView.myAutoActivate">
            <summary>
            <see cref="T:JetBrains.CommonControls.IConstrainableControl"/> worker field.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.TipControlView.myPainter">
            <summary>
            Tip painter, as a windowless conrtol.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.TipControlView.myTimeout">
            <summary>
            <see cref="P:JetBrains.CommonControls.TipControlView.Timeout"/>.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.TipControlView.myTimerTimeout">
            <summary>
            Waits for the tooltip to hide.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.TipControlView.myWantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.TipControlView.#ctor(JetBrains.CommonControls.IWindowlessControl)">
            <summary>
            Creates a tip control with the given painter inside.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.TipControlView.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.TipControlView.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Layout"></see> event.
            </summary>
            
            <param name="levent">A <see cref="T:System.Windows.Forms.LayoutEventArgs"></see> that contains the event data. </param>
        </member>
        <member name="M:JetBrains.CommonControls.TipControlView.OnVisibleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.VisibleChanged"></see> event.
            </summary>
            
            <param name="e">The <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        </member>
        <member name="P:JetBrains.CommonControls.TipControlView.CanShowTooltips">
            <summary>
            Gets whether any tooltips are allowed to be shown at the moment.
            <see cref="T:JetBrains.CommonControls.TipControlView"/> won't check this, it will show anyway, so it's the caller's duty.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.TipControlView.DefaultTimeout">
            <summary>
            The default timeout, the maximum time span for which the tooltip is visible, in milliseconds.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.TipControlView.RenderParams">
            <summary>
            Gets the default rendering parameters for a tooltip.
            Do not modify this instance.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.TipControlView.Timeout">
            <summary>
            The default timeout, the maximum time span for which the tooltip is visible, in milliseconds.
            Initially set to <see cref="P:JetBrains.CommonControls.TipControlView.DefaultTimeout"/>.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.TipControlView.ShowWithoutActivation">
            <summary>
            Gets a value indicating whether the window will be activated when it is shown.
            </summary>
            
            <returns>
            True if the window will not be activated when it is shown; otherwise, false. The default is false.
            </returns>
            
        </member>
        <member name="P:JetBrains.CommonControls.TipControlView.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.TipControlView.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.TipControlView.Dim">
            <summary>
            Dimension constants for the tooltip control.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.TipControlView.Dim.Border">
            <summary>
            Width and height of the horizontal and vertical border sides.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.TipControlView.Dim.Padding">
            <summary>
            Padding between the border and tooltip's inner content.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.TooltipInfo">
            <summary>
            The standard implementation of the <see cref="T:JetBrains.CommonControls.ITooltipInfo"/> interface.
            Don't dispose of this instance until you're done with using its members, eg painters and layouters.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.TooltipInfo.myLayouter">
            <summary>
            <see cref="P:JetBrains.CommonControls.TooltipInfo.Layouter"/>.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.TooltipInfo.myPopupWindowContext">
            <summary>
            <see cref="P:JetBrains.CommonControls.TooltipInfo.PopupWindowContext"/>.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.TooltipInfo.myTipPainter">
            <summary>
            <see cref="P:JetBrains.CommonControls.TooltipInfo.Painter"/>.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.TooltipInfo.myToolArea">
            <summary>
            <see cref="P:JetBrains.CommonControls.TooltipInfo.ToolArea"/>, used by <see cref="M:JetBrains.CommonControls.TooltipInfo.HitTestToolArea(System.Drawing.Point)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.TooltipInfo.#ctor(JetBrains.CommonControls.IWindowlessControl,System.Drawing.Rectangle)">
            <summary>
            Creates a tooltip info from the raw parameters.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.TooltipInfo.#ctor(JetBrains.UI.RichText.RichText,System.Drawing.Rectangle)">
            <summary>
            Creates a tooltip info upon the supplied text and with the specified tool area, in client coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.TooltipInfo.#ctor(JetBrains.UI.RichText.RichText,System.Windows.Forms.Control)">
            <summary>
            Creates a tooltip info upon the supplied text, acquiring the tool area from the given control's client rectangle.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.TooltipInfo.#ctor(JetBrains.UI.RichText.RichTextBlock,System.Windows.Forms.Control)">
            <summary>
            Creates a tooltip info upon the supplied text, acquiring the tool area from the given control's client rectangle.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.TooltipInfo.#ctor(JetBrains.UI.RichText.RichTextBlock,System.Drawing.Rectangle)">
            <summary>
            Creates a tooltip info upon the supplied text and with the specified tool area, in client coordinates.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.TooltipInfo.GetTextPainter(System.String)">
            <summary>
            Creates a tip-painter for the given piece of text.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.TooltipInfo.HitTestToolArea(System.Drawing.Point)">
            <summary>
            Checks whether the given point falls within the tool area of this tooltip. The tooltip is displayed while mouse pointer is within the tool area. One window may have more than one tooltip for different tool areas.
            </summary>
            <param name="pt">Point, in the client coordinates, to be tested for falling within the area.</param>
            <returns><c>True</c> if point is within the area, <c>False</c> otherwise.</returns>
        </member>
        <member name="P:JetBrains.CommonControls.TooltipInfo.ToolArea">
            <summary>
            Gets the tool area of this tooltip, in client coordinates.
            An empty rectangle means “no constraints”.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.TooltipInfo.Layouter">
            <summary>
            Gets or sets the layouter that positions the tooltip onscreen.
            <c>Null</c> means the default layouter will be used, one that positions the tooltip against the mouse pointer.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.TooltipInfo.Painter">
            <summary>
            Gets the painter for the tooltip.
            Must be implemented. Must not be <c>Null</c>.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.TooltipInfo.PopupWindowContext">
            <summary>
            Gets or sets the popup window context that fires the actions upon which the tooltip is dismissed.
            <c>Null</c> means the default popup window context will be used.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.TooltipManagerComponent">
            <summary>
            An implementation for the <see cref="T:JetBrains.CommonControls.ITooltipManager"/>.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.TooltipManagerComponent.myContentMarging">
            <summary>
            Back-end for <see cref="!:ContentMargin"/>.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.TooltipManagerComponent.myAlarmTooltipDelay">
            <summary>
            An alarm that implements a tooltip delay between the moment the tooltip is intended for display and the moment it appears onscreen.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.TooltipManagerComponent.myCurrentHwnd">
            <summary>
            Handle to the window that owns the currently displayed tooltip.
            <c>Null</c> if not displaying the tooltip.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.TooltipManagerComponent.myEscapedHWnd">
            <summary>
            After <see cref="F:JetBrains.CommonControls.TooltipManagerComponent.myCurrentHwnd"/> becomes <c>Null</c>, holds its old value.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.TooltipManagerComponent.myKeyboardHook">
            <summary>
            Keyboard hook that captures all the keyboard events.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.TooltipManagerComponent.myLastHoveredHwnd">
            <summary>
            Remembers the last window checked for a tooltip on mouse-move or set-cursor messages.
            As the latter occurs very frequently, prevents the tooltip provdier for being asked all the time with the same arguments.
            Works together with <see cref="F:JetBrains.CommonControls.TooltipManagerComponent.myLastHoveredPoint"/>.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.TooltipManagerComponent.myLastHoveredPoint">
            <summary>
            Remembers the last point checked for a tooltip on mouse-move or set-cursor messages.
            As the latter occurs very frequently, prevents the tooltip provdier for being asked all the time with the same arguments.
            Works together with <see cref="F:JetBrains.CommonControls.TooltipManagerComponent.myLastHoveredHwnd"/>.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.TooltipManagerComponent.myMouseHook">
            <summary>
            Mouse hook that captures all the mouse events.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.TooltipManagerComponent.myProviders">
            <summary>
            Tooltip providers that are not collected automatically when mouse hovers a <see cref="T:JetBrains.CommonControls.ITooltipProvider"/>-enabled window, but registered explicitly with this manager.
            Updated by <see cref="!:RegisterTooltipProvider"/>, <see cref="!:UnregisterTooltipProvider"/>.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.TooltipManagerComponent.myTooltipInfo">
            <summary>
            Describes the tooltip we're currently displaying.
            <c>Null</c> if not displaying a tooltip.
            Must be disposed of when <c>Null</c>ing.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.TooltipManagerComponent.myTooltipView">
            <summary>
            The control that renders the tooltip.
            <c>Null</c> if not displaying a tooltip.
            Check this field for <c>Null</c> to determine whether the tooltip is currently visible.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.TooltipManagerComponent.IsValidHwnd(System.Void*)">
            <summary>
            Checks whether the HWND belongs to a still-living .NET control or a good window.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.TooltipManagerComponent.CreateTooltip">
            <summary>
            Creates and immediately displays the tooltip, as described by <see cref="F:JetBrains.CommonControls.TooltipManagerComponent.myCurrentHwnd"/> and <see cref="F:JetBrains.CommonControls.TooltipManagerComponent.myTooltipInfo"/>.
            To schedule display on hover, fill the data fields and wind up the alarm.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.TooltipManagerComponent.DestroyTooltip">
            <summary>
            Destroys the currently visible tooltip and cleans up its data fields.
            Does nothing if no tooltip is currently visible.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.TooltipManagerComponent.GetTooltipInfo(System.Void*,System.Drawing.Point)">
            <summary>
            Tries to lookup some tooltip info for the given <paramref name="hWnd"/>.
            Returns <c>Null</c> if either there's no provider for the window or no tooltip info is returned by the provider.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.TooltipManagerComponent.GetTooltipProvider(System.Void*)">
            <summary>
            Looks up a tooltip provdier for the given window both in the registered providers list and by checking the window for implementing <see cref="T:JetBrains.CommonControls.ITooltipProvider"/>.
            <c>Null</c> if no provider registered.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.TooltipManagerComponent.OnKeyboardAction(System.Object,JetBrains.UI.Interop.HookEventArgs)">
            <summary>
            Keyboard hook. Non-UI-thread messages ignored.
            Closes the tooltip on ESC, avoids displaying it again for the same control for a while.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.TooltipManagerComponent.OnMouseAction(System.Object,JetBrains.UI.Interop.HookEventArgs)">
            <summary>
            Mouse hook. Any thread but UI will be ignored.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.TooltipManagerComponent.OnMouseMove(System.Void*,System.Drawing.Point)">
            <summary>
            A mouse has made a movement that can potentially show a tooltip.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.TooltipManagerComponent.OnMouseMove_CheckCreate(System.Void*,System.Drawing.Point)">
            <summary>
            Show the new tooltip for the hovered area (only if we're not displaying a tooltip).
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.TooltipManagerComponent.OnMouseMove_CheckDestroy(System.Void*,System.Drawing.Point)">
            <summary>
            Remove tooltip if we've exited its tool area.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.TooltipManagerComponent.RefreshTooltip(JetBrains.CommonControls.ITooltipProvider)">
            <summary>
            Updates the tooltip onscreen.
            If there's a tooltip from the <paramref name="provider"/> currently displayed onscreen, the <paramref name="provider"/> is queried for the new <see cref="T:JetBrains.CommonControls.ITooltipInfo"/> and updates the tooltip content.
            If there's no tooltip displayed currently, or it's from another provider, nothing happens.
            </summary>
            <param name="provider">The provider whose tooltip should be updated.</param>
        </member>
        <member name="M:JetBrains.CommonControls.TooltipManagerComponent.Show(JetBrains.CommonControls.IWindowlessControl,JetBrains.UI.IPopupLayouter,JetBrains.UI.PopupWindowManager.IPopupWindowContext,JetBrains.UI.PopupWindowManager.HideFlags,System.Int32)">
            <summary>
            Displays a tooltip using the given content and position, until user discards it with the action specified, or the timeout expires.
            </summary>
            <param name="painter">The tip content layouter and painter.</param>
            <param name="layouter">Layouter for the tooltip popup window.</param>
            <param name="context">Parent context for the tooltip popup window.</param>
            <param name="hideflags">The list of actions that discard the tooltip (app deactivation is implied).</param>
            <param name="timeout">Time interval to display the tooltip for. If positive, specifies the number of milliseconds to show the tooltip for. If <c>-1</c>, uses the default timeout from <see cref="P:JetBrains.CommonControls.TipControlView.DefaultTimeout"/>.</param>
            <returns>The popup window that controls the tooltip, or <c>Null</c> if the tooltip has failed to show (eg tooltips are not allowed at the moment, see <see cref="P:JetBrains.CommonControls.TipControlView.CanShowTooltips"/>).</returns>
        </member>
        <member name="M:JetBrains.CommonControls.TooltipManagerComponent.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.CommonControls.TooltipManagerComponent.JetBrains#CommonControls#ITooltipManager#RefreshTooltip(JetBrains.CommonControls.ITooltipProvider)">
            <summary>
            Updates the tooltip onscreen.
            If there's a tooltip from the <paramref name="provider"/> currently displayed onscreen, the <paramref name="provider"/> is queried for the new <see cref="T:JetBrains.CommonControls.ITooltipInfo"/> and updates the tooltip content.
            If there's no tooltip displayed currently, or it's from another provider, nothing happens.
            </summary>
            <param name="provider">The provider whose tooltip should be updated.</param>
        </member>
        <member name="M:JetBrains.CommonControls.TooltipManagerComponent.JetBrains#CommonControls#ITooltipManager#Show(JetBrains.CommonControls.IWindowlessControl,JetBrains.UI.IPopupLayouter,JetBrains.UI.PopupWindowManager.IPopupWindowContext,JetBrains.UI.PopupWindowManager.HideFlags,System.Int32)">
            <summary>
            Displays a tooltip using the given content and position, until user discards it with the action specified, or the timeout expires.
            </summary>
            <param name="painter">The tip content layouter and painter.</param>
            <param name="layouter">Layouter for the tooltip popup window.</param>
            <param name="context">Parent context for the tooltip popup window.</param>
            <param name="hideflags">The list of actions that discard the tooltip (app deactivation is implied).</param>
            <param name="timeout">Time interval to display the tooltip for. If positive, specifies the number of milliseconds to show the tooltip for. If <c>-1</c>, uses the default timeout from <see cref="P:JetBrains.CommonControls.TipControlView.DefaultTimeout"/>.</param>
            <returns>The popup window that controls the tooltip, or <c>Null</c> if the tooltip has failed to show (eg tooltips are not allowed at the moment, see <see cref="P:JetBrains.CommonControls.TipControlView.CanShowTooltips"/>).</returns>
        </member>
        <member name="M:JetBrains.CommonControls.TooltipManagerComponent.JetBrains#CommonControls#ITooltipManager#Show(JetBrains.CommonControls.IWindowlessControl,JetBrains.UI.IPopupLayouter,JetBrains.UI.PopupWindowManager.IPopupWindowContext)">
            <summary>
            Displays a tooltip using the given content and position, until user discards it with the action specified, or the timeout expires.
            </summary>
            <param name="painter">The tip content layouter and painter.</param>
            <param name="layouter">Layouter for the tooltip popup window.</param>
            <param name="context">Parent context for the tooltip popup window.</param>
        </member>
        <member name="M:JetBrains.CommonControls.TooltipManagerComponent.JetBrains#CommonControls#ITooltipManager#Show(System.String,JetBrains.UI.IPopupLayouter,JetBrains.UI.PopupWindowManager.IPopupWindowContext)">
            <summary>
            Displays a tooltip using the given content and position, until user discards it with the action specified, or the timeout expires.
            </summary>
            <param name="text">Text to be displayed in the tooltip window.</param>
            <param name="layouter">Layouter for the tooltip popup window.</param>
            <param name="context">Parent context for the tooltip popup window.</param>
        </member>
        <member name="M:JetBrains.CommonControls.TooltipManagerComponent.JetBrains#CommonControls#ITooltipManager#Show(System.String,JetBrains.UI.PopupWindowManager.IPopupWindowContext)">
            <summary>
            Displays a tooltip using the given content and position, until user discards it with the action specified, or the timeout expires.
            Uses the default layouter for the context provided.
            </summary>
            <param name="text">Text to be displayed in the tooltip window.</param>
            <param name="context">Parent context for the tooltip popup window.</param>
        </member>
        <member name="M:JetBrains.CommonControls.TooltipManagerComponent.JetBrains#CommonControls#ITooltipManager#Show(JetBrains.UI.RichText.RichText,JetBrains.UI.IPopupLayouter,JetBrains.UI.PopupWindowManager.IPopupWindowContext)">
            <summary>
            Displays a tooltip using the given content and position, until user discards it with the action specified, or the timeout expires.
            </summary>
            <param name="text">Rich text to be displayed in the tooltip window.</param>
            <param name="layouter">Layouter for the tooltip popup window.</param>
            <param name="context">Parent context for the tooltip popup window.</param>
        </member>
        <member name="M:JetBrains.CommonControls.TooltipManagerComponent.JetBrains#CommonControls#ITooltipManager#Show(JetBrains.UI.RichText.RichText,JetBrains.UI.PopupWindowManager.IPopupWindowContext)">
            <summary>
            Displays a tooltip using the given content and position, until user discards it with the action specified, or the timeout expires.
            Uses the default layouter for the context provided.
            </summary>
            <param name="text">Rich text to be displayed in the tooltip window.</param>
            <param name="context">Parent context for the tooltip popup window.</param>
        </member>
        <member name="M:JetBrains.CommonControls.TooltipManagerComponent.JetBrains#CommonControls#ITooltipManager#Show(JetBrains.UI.RichText.RichTextBlock,JetBrains.UI.IPopupLayouter,JetBrains.UI.PopupWindowManager.IPopupWindowContext)">
            <summary>
            Displays a tooltip using the given content and position, until user discards it with the action specified, or the timeout expires.
            </summary>
            <param name="text">Multiline rich text to be displayed in the tooltip window.</param>
            <param name="layouter">Layouter for the tooltip popup window.</param>
            <param name="context">Parent context for the tooltip popup window.</param>
        </member>
        <member name="M:JetBrains.CommonControls.TooltipManagerComponent.JetBrains#CommonControls#ITooltipManager#Show(JetBrains.UI.RichText.RichTextBlock,JetBrains.UI.PopupWindowManager.IPopupWindowContext)">
            <summary>
            Displays a tooltip using the given content and position, until user discards it with the action specified, or the timeout expires.
            Uses the default layouter for the context provided.
            </summary>
            <param name="text">Multiline rich text to be displayed in the tooltip window.</param>
            <param name="context">Parent context for the tooltip popup window.</param>
        </member>
        <member name="P:JetBrains.CommonControls.TooltipManagerComponent.PopupWindowMutex">
            <summary>
            Gets the popup window mutex that defines the default identity for the tooltips, and thus prevents from showing more than one at a time.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.TooltipManagerComponent.JetBrains#CommonControls#ITooltipManager#ContentMargin">
            <summary>
            Gets the margin that separates the content rendered within the tooltip from the tooltip window edge.
            Also, this is the offset from the tip control location to the tip text location, which is useful for precise positioning of the text.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.TooltipManagerComponent.JetBrains#CommonControls#ITooltipManager#HoverDelay">
            <summary>
            Gets the standard hover delay, a period of time between the mouse-over and tooltip display, in milliseconds.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.TooltipManagerComponent.JetBrains#CommonControls#ITooltipManager#RenderParams">
            <summary>
            Gets the default rendering parameters for a tooltip.
            Do not modify this instance.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.TooltipProvider">
            <summary>
            A simple tooltip provider implementation for the cases when the tooltip provider is external to the window it's requested on.
            If you're implementing the tooltip-providing window class, implement the <see cref="T:JetBrains.CommonControls.ITooltipProvider"/> interface instead.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.TooltipProvider.TooltipRequested">
            <summary>
            Fires when the tooltip is requested by the caller.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.TooltipProvider.#ctor">
            <summary>
            Creates a tooltip provider without a tooltip yet, sink the <see cref="F:JetBrains.CommonControls.TooltipProvider.TooltipRequested"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.TooltipProvider.#ctor(System.Action{JetBrains.DataFlow.InOutEventArgs{System.Drawing.Point,JetBrains.CommonControls.ITooltipInfo}})">
            <summary>
            Creates a tooltip provider with one handler.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.TooltipProvider.GetTooltip(System.Drawing.Point)">
            <summary>
            Called by tooltip manager, if the tooltip is to be displayed
            </summary>
            <param name="point">Point in control's coordinates</param>
            <returns><see cref="T:JetBrains.CommonControls.ITooltipInfo"/>, or <c>Null</c> if no tooltip should be displayed.</returns>
        </member>
        <member name="T:JetBrains.UI.TreeControl.TreeControlNodeAnchoringRect">
            <summary>
            Anchors to the focused node or a manually specified node in the given tree model view.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TreeControl.TreeControlNodeAnchoringRect.myNode">
            <summary>
            <c>Null</c> if tracking selection.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TreeControl.TreeControlNodeAnchoringRect.myTreeControl">
            <summary>
            <c>Null</c> only when disposed.
            </summary>
        </member>
        <member name="M:JetBrains.UI.TreeControl.TreeControlNodeAnchoringRect.#ctor(DevExpress.XtraTreeList.TreeList,DevExpress.XtraTreeList.Nodes.TreeListNode)">
            <summary>
            Creates the instance.
            </summary>
            <param name="treeControl">The owning tree model view.</param>
            <param name="node">The node to anchor to.</param>
        </member>
        <member name="M:JetBrains.UI.TreeControl.TreeControlNodeAnchoringRect.#ctor(DevExpress.XtraTreeList.TreeList,DevExpress.XtraTreeList.Nodes.TreeListNode,DevExpress.XtraTreeList.Columns.TreeListColumn,System.Boolean)">
            <summary>
            An internal ctor that allows for <c>Null</c> nodes for tracking the selection.
            </summary>
            <param name="treeControl">The owning tree model view.</param>
            <param name="node">The node to anchor to, or <c>Null</c> to anchor to the selected node.</param>
            <param name="column">The column to determine cell to anchor to, or null to anchor to whole node</param>
            <param name="bNodeNullable">Whether to allow <c>Null</c> in <paramref name="node"/>.</param>
        </member>
        <member name="M:JetBrains.UI.TreeControl.TreeControlNodeAnchoringRect.CreateFromSelectionDynamic(DevExpress.XtraTreeList.TreeList)">
            <summary>
            Creates the instance that tracks the selected node.
            When selection changes, the anchor is updated to track the new selection.
            </summary>
            <param name="treeControl">The owning tree model view.</param>
        </member>
        <member name="M:JetBrains.UI.TreeControl.TreeControlNodeAnchoringRect.ClientToScreen">
            <summary>
            Converts the <see cref="T:JetBrains.UI.TreeControl.TreeControlNodeAnchoringRect"/>, which operates in client coordinates, into a screen-coordinates anchor suitable for layouting popups.
            Nests the current object within a window anchor attached to the tree control.
            </summary>
        </member>
        <member name="M:JetBrains.UI.TreeControl.TreeControlNodeAnchoringRect.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.TreeControl.TreeControlNodeAnchoringRect.UpdateAnchor">
            <summary>
            Updates the anchoring rectangle as it gets dirty.
            </summary>
        </member>
        <member name="P:JetBrains.UI.TreeControl.TreeControlNodeAnchoringRect.DefaultAnchoringDispositions">
            <summary>
            Gets the default dispositions to be used when creating a layouter out of this anchor.
            </summary>
        </member>
        <member name="T:JetBrains.UI.TreeView.TreeModelViewAnchoringRect">
            <summary>
            Anchors to the focused node or a manually specified node in the given tree model view.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TreeView.TreeModelViewAnchoringRect.myViewNode">
            <summary>
            <c>Null</c> if tracking selection.
            </summary>
        </member>
        <member name="F:JetBrains.UI.TreeView.TreeModelViewAnchoringRect.myTreeModelView">
            <summary>
            <c>Null</c> only when disposed.
            </summary>
        </member>
        <member name="M:JetBrains.UI.TreeView.TreeModelViewAnchoringRect.#ctor(JetBrains.UI.TreeView.TreeModelView,JetBrains.UI.TreeView.TreeModelViewNode)">
            <summary>
            Creates the instance.
            </summary>
            <param name="treeModelView">The owning tree model view.</param>
            <param name="node">The node to anchor to.</param>
        </member>
        <member name="M:JetBrains.UI.TreeView.TreeModelViewAnchoringRect.#ctor(JetBrains.UI.TreeView.TreeModelView,JetBrains.UI.TreeView.TreeModelViewNode,JetBrains.UI.TreeView.TreeModelViewColumn,System.Boolean)">
            <summary>
            An internal ctor that allows for <c>Null</c> nodes for tracking the selection.
            </summary>
            <param name="treeModelView">The owning tree model view.</param>
            <param name="viewNode">The node to anchor to, or <c>Null</c> to anchor to the selected node.</param>
            <param name="viewColumn">The column to determine cell to anchor to, or null to anchor to whole node</param>
            <param name="bNodeNullable">Whether to allow <c>Null</c> in <paramref name="viewNode"/>.</param>
        </member>
        <member name="M:JetBrains.UI.TreeView.TreeModelViewAnchoringRect.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.TreeView.TreeModelViewAnchoringRect.UpdateAnchor">
            <summary>
            Updates the anchoring rectangle as it gets dirty.
            </summary>
        </member>
        <member name="M:JetBrains.UI.TreeView.TreeModelViewAnchoringRect.CreateFromSelectionDynamic(JetBrains.UI.TreeView.TreeModelView)">
            <summary>
            Creates the instance that tracks the selected node.
            When selection changes, the anchor is updated to track the new selection.
            </summary>
            <param name="treeModelView">The owning tree model view.</param>
        </member>
        <member name="M:JetBrains.UI.TreeView.TreeModelViewAnchoringRect.ClientToScreen">
            <summary>
            Converts the <see cref="T:JetBrains.UI.TreeView.TreeModelViewAnchoringRect"/>, which operates in client coordinates, into a screen-coordinates anchor suitable for layouting popups.
            Nests the current object within a window anchor attached to the tree control.
            </summary>
        </member>
        <member name="P:JetBrains.UI.TreeView.TreeModelViewAnchoringRect.DefaultAnchoringDispositions">
            <summary>
            Gets the default dispositions to be used when creating a layouter out of this anchor.
            </summary>
        </member>
        <member name="T:JetBrains.UI.TreeView.StructuredPresenter`2.PresentationCallbackWrapper`1">
            <summary>
            Typed wrapper for delegate
            </summary>
            <typeparam name="TStructureElement">Type of structure element</typeparam>
            <typeparam name="TData">Type of item to present</typeparam>
        </member>
        <member name="T:JetBrains.UI.TreeView.StructuredPresenter`2.IStructuredPresenter">
            <summary>
            Untyped item to present, for polymorphic access
            </summary>
        </member>
        <member name="T:JetBrains.UI.Components.UserActivityMonitor">
            <summary>
            Monitors the user activity and suggests the optimal time for notifications.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Components.UserActivityMonitor.IncomingContextSwitchDeferTime">
            <summary>
            Note: don't keep too low, otherwise, the series of changes after Vista unlock will go separately. Recommended: 2 sec.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Components.UserActivityMonitor.IncomingUserContextSwitchDetected">
            <summary>
            Could be fired on any thread, means a user context switch has just been detected.
            Adjacent firings are collected, and after the app is activated the <see cref="F:JetBrains.UI.Components.UserActivityMonitor.UserContextSwitch"/> is fired on the primary thread.
            Don't sink this event; instead, sink the outgoing <see cref="F:JetBrains.UI.Components.UserActivityMonitor.UserContextSwitch"/>.
            </summary>
        </member>
        <member name="F:JetBrains.UI.Components.UserActivityMonitor.UserContextSwitch">
            <summary>
            Fires when the user switches its attention in our out, and we could potentially show our notifications without breaking the user context.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Components.UserActivityMonitor.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.Components.UserActivityMonitor.JetBrains#ComponentModel#IComponent#Init">
            <summary>
            <para>Initializes the component. Called by the component container after the component is created.</para>
            <para><see cref="M:System.IDisposable.Dispose"/> is the pairing method that's guaranteed to be called by the component container to tear down your component.</para>
            <para>You must not access other components before your <see cref="M:JetBrains.ComponentModel.IComponent.Init"/> method is called.</para>
            <para>All of the components that you access from <see cref="M:JetBrains.ComponentModel.IComponent.Init"/> are guaranteed to exist when your <see cref="M:System.IDisposable.Dispose"/> is called. Any other component might be missing by that time, and trying to get it will throw an exception.</para>
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.Validation.IControlListener">
            <summary>
            Listens for changes in the control.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.IControlListener.Control">
            <summary>
            Gets the listened control.
            </summary>
        </member>
        <member name="E:JetBrains.CommonControls.Validation.IControlListener.ControlStateChanged">
            <summary>
            Event that is fired when some important control state changes.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.Validation.CheckedValidator">
            <summary>
            Validates that:
            • This button is checked (if <see cref="P:JetBrains.CommonControls.Validation.CheckedValidator.GroupId"/> is not specified).
            —or—
            • At least one button among all with such a <see cref="P:JetBrains.CommonControls.Validation.CheckedValidator.GroupId"/> is checked.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.Validation.ControlValidator">
            <summary>
            Base implementation of the <see cref="T:JetBrains.CommonControls.Validation.IValidator"/> interface that expects you to override just the <see cref="M:JetBrains.CommonControls.Validation.ControlValidator.Update"/> method.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.Validation.IValidator">
            <summary>
            Represents a validation rule usage
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.IValidator.Update">
            <summary>
            Forces the recalculation of the validator and updates its <see cref="P:JetBrains.CommonControls.Validation.ControlValidator.Severity"/> and visibility.
            A validator should update those property values when requested via <see cref="M:JetBrains.CommonControls.Validation.ControlValidator.Update"/>, or at any moment it detects a validity state change.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.IValidator.Severity">
            <summary>
            Gets the severity of this validator in its current state.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.IValidator.Message">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.IValidator.Layouter">
            <summary>
            Gets the layouter that positions the validator.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.IValidator.WindowlessControl">
            <summary>
            Gets the presentation of the validator.
            <c>Null</c> means that the validator should not be displayed.
            </summary>
        </member>
        <member name="E:JetBrains.CommonControls.Validation.IValidator.SeverityChanged">
            <summary>
            Fires when the <see cref="P:JetBrains.CommonControls.Validation.IValidator.Severity"/> property changes its value.
            </summary>
        </member>
        <member name="E:JetBrains.CommonControls.Validation.IValidator.MessageChanged">
            <summary>
            Fires when the <see cref="P:JetBrains.CommonControls.Validation.IValidator.Message"/> property changes its value.
            </summary>
        </member>
        <member name="E:JetBrains.CommonControls.Validation.IValidator.LayouterChanged">
            <summary>
            Fires when the <see cref="P:JetBrains.CommonControls.Validation.IValidator.Layouter"/> property changes its value.
            </summary>
        </member>
        <member name="E:JetBrains.CommonControls.Validation.IValidator.WindowlessControlChanged">
            <summary>
            Fires when the <see cref="P:JetBrains.CommonControls.Validation.IValidator.WindowlessControl"/> property changes its value.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.Validation.ControlValidator.myBounds">
            <summary>
            Part of the <see cref="T:JetBrains.CommonControls.IWindowlessControl"/> implementation.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.Validation.ControlValidator.myControlListener">
            <summary>
            Listens for the changes in the control, triggers an update whenever one occurs.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.Validation.ControlValidator.myGottenDirty">
            <summary>
            The control has gotten dirty and should be repainted.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.Validation.ControlValidator.myWantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.ControlValidator.GetImageFromSeverity(JetBrains.CommonControls.Validation.ValidatorSeverity)">
            <summary>
            Converts a severity value into a corresponding image.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.ControlValidator.FireLayouterChanged(JetBrains.UI.IPopupLayouter,JetBrains.UI.IPopupLayouter)">
            <summary>
            Fires the <see cref="E:JetBrains.CommonControls.Validation.ControlValidator.LayouterChanged"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.ControlValidator.FireMessageChanged(JetBrains.UI.RichText.RichText,JetBrains.UI.RichText.RichText)">
            <summary>
            Fires the <see cref="E:JetBrains.CommonControls.Validation.ControlValidator.MessageChanged"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.ControlValidator.FireSeverityChanged(JetBrains.CommonControls.Validation.ValidatorSeverity,JetBrains.CommonControls.Validation.ValidatorSeverity)">
            <summary>
            Fires the <see cref="E:JetBrains.CommonControls.Validation.ControlValidator.SeverityChanged"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.ControlValidator.FireWindowlessControlChanged(JetBrains.CommonControls.IWindowlessControl,JetBrains.CommonControls.IWindowlessControl)">
            <summary>
            Fires the <see cref="E:JetBrains.CommonControls.Validation.ControlValidator.WindowlessControlChanged"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.ControlValidator.OnSeverityChangedShowHide(System.Object,JetBrains.DataFlow.PropertyChangedEventArgs{System.String,JetBrains.CommonControls.Validation.ValidatorSeverity})">
            <summary>
            When severity changes, shows or hides the control, depending on the severity value, and requests the resize/repanit of the view.
            Attached in ctor by default. Detach this sink from the event if you'd like to change the behavior.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.ControlValidator.Update">
            <summary>
            Forces the recalculation of the validator and updates its <see cref="P:JetBrains.CommonControls.Validation.ControlValidator.Severity"/> and visibility.
            A validator should update those property values when requested via <see cref="M:JetBrains.CommonControls.Validation.ControlValidator.Update"/>, or at any moment it detects a validity state change.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.ControlValidator.GetDesiredSize(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Performs the bottom-up layouting stage, when the control calculates its desired size using the given constraints.
            Should give generally the same results as <see cref="T:JetBrains.CommonControls.IConstrainableControl"/>, but could employ the <paramref name="gc"/> device context for the sake of optimization.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="limit">The maximum available space (that could affect the shape of the control, or strip down unnecessary calculations over the invisible items).
            May be a <see cref="T:System.Drawing.Size"/> with width and height equal to <see cref="F:System.Int32.MaxValue"/>, which means that the size is not limited.</param>
            <returns>The desired size, must be no larger than <paramref name="limit"/>.</returns>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.ControlValidator.Paint(System.Drawing.Graphics)">
            <summary>
            Renders the context of the windowless control. The rendering bounds are given by the 
            </summary>
            <param name="g">The device context.</param>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.ControlValidator.SetBounds(JetBrains.UI.IGraphicsContainer,System.Drawing.Rectangle)">
            <summary>
            Performs the top-down layouting stage, when the control lais out its parts within the given bounds.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="bounds">The new bounds. From now on, this value should be returned from the <see cref="P:JetBrains.CommonControls.IWindowlessControl.Bounds"/> property.</param>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.ControlValidator.SetLayout(JetBrains.UI.LayoutResult)">
            <summary>
            Tells the control the details about the new layout applied to it by the controlling entity in conjunction with some <see cref="T:JetBrains.UI.IPopupLayouter"/>.
            Typically, the control need not apply the given size and location because that should be done by the controlling entity.
            The control may change its presentation in response to the layouting details, for example, whether it's attached to the top or the bottom of the anchoring rect.
            </summary>
            <param name="layout">The layouting details.</param>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.ControlValidator.Control">
            <summary>
            Gets the associated control.
            </summary>
        </member>
        <member name="E:JetBrains.CommonControls.Validation.ControlValidator.LayouterChanged">
            <summary>
            Fires when the <see cref="P:JetBrains.CommonControls.Validation.IValidator.Layouter"/> property changes its value.
            </summary>
        </member>
        <member name="E:JetBrains.CommonControls.Validation.ControlValidator.MessageChanged">
            <summary>
            Fires when the <see cref="P:JetBrains.CommonControls.Validation.IValidator.Message"/> property changes its value.
            </summary>
        </member>
        <member name="E:JetBrains.CommonControls.Validation.ControlValidator.SeverityChanged">
            <summary>
            Fires when the <see cref="P:JetBrains.CommonControls.Validation.IValidator.Severity"/> property changes its value.
            </summary>
        </member>
        <member name="E:JetBrains.CommonControls.Validation.ControlValidator.WindowlessControlChanged">
            <summary>
            Fires when the <see cref="P:JetBrains.CommonControls.Validation.IValidator.WindowlessControl"/> property changes its value.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.ControlValidator.Layouter">
            <summary>
            Gets the layouter that positions the validator.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.ControlValidator.Message">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.ControlValidator.Severity">
            <summary>
            Gets the severity of this validator in its current state.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.ControlValidator.WindowlessControl">
            <summary>
            Gets the presentation of the validator.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.ControlValidator.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.ControlValidator.Bounds">
            <summary>
            The windowless control bounds in the parent coordinates. The implementor should just store and return the value set by the owner.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.ControlValidator.GottenDirty">
            <summary>
            The control has gotten dirty and should be repainted.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.ControlValidator.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.CheckedValidator.IsChecked">
            <summary>
            Late-bound-checks the checkstate of this control.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.CheckedValidator.Update">
            <summary>
            Forces the recalculation of the validator and updates its <see cref="P:JetBrains.CommonControls.Validation.ControlValidator.Severity"/> and visibility.
            A validator should update those property values when requested via <see cref="M:JetBrains.CommonControls.Validation.ControlValidator.Update"/>, or at any moment it detects a validity state change.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.ControlListenerFactory.CreateControlListener(System.Windows.Forms.Control)">
            <summary>
            Gets a composite listener that wraps all the available listeners for the given control.
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.CommonControls.Validation.DynamicTextValidator">
            <summary>
            A kind of <see cref="T:JetBrains.CommonControls.Validation.TextValidator"/> that allows changing the severity level and string message dynamically.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.DynamicTextValidator.Update">
            <summary>
            Forces the recalculation of the validator and updates its <see cref="P:JetBrains.CommonControls.Validation.ControlValidator.Severity"/> and visibility.
            A validator should update those property values when requested via <see cref="M:JetBrains.CommonControls.Validation.ControlValidator.Update"/>, or at any moment it detects a validity state change.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.Validation.FormValidator">
            <summary>
            Manages a number of validators on the form controls that display error glyphs and prevent submission unless the validation passes.
            The validators may come from attributes on the form controls, from <see cref="T:JetBrains.CommonControls.Validation.IValidatorProvider"/> implemented by form or its controls, and from manual submissions to the <see cref="P:JetBrains.CommonControls.Validation.FormValidator.Validators"/> collection.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.Validation.IFormValidator">
            <summary>
            Manages a number of validators on the form controls that display error glyphs and prevent submission unless the validation passes.
            The validators may come from attributes on the form controls, from <see cref="T:JetBrains.CommonControls.Validation.IValidatorProvider"/> implemented by form or its controls, and from manual submissions to the <see cref="P:JetBrains.CommonControls.Validation.IFormValidator.Validators"/> collection.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.IFormValidator.Update">
            <summary>
            Forces revalidation on all the controls.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.IFormValidator.ShowMessage">
            <summary>
            Reports the current validity status in a message box (including the valid state).
            The valid and error states have just an ok button, while the warnings have the yes-no buttons.
            The return value is either the current <see cref="P:JetBrains.CommonControls.Validation.IFormValidator.Severity"/>, or a lower severity if the user has clicked “Yes” on the warning confirmation dialog and has thus discarded the warnings.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.IFormValidator.Form">
            <summary>
            Gets the owning form.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.IFormValidator.Validators">
            <summary>
            Gets the mutable validators collection.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.IFormValidator.ValidatorProviders">
            <summary>
            Gets the mutable validator providers collection.
            Those are also collected automatically from the form and all of its controls.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.IFormValidator.Severity">
            <summary>
            Gets the overall severity of the form validator, which is the maximum severity of all the validators.
            </summary>
        </member>
        <member name="E:JetBrains.CommonControls.Validation.IFormValidator.SeverityChanged">
            <summary>
            Fires when <see cref="P:JetBrains.CommonControls.Validation.IFormValidator.Severity"/> changes.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.Validation.FormValidator.ourFormValidators">
            <summary>
            Caches the form validator instances.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.FormValidator.GetInstance(System.Windows.Forms.Control)">
            <summary>
            Gets (or creates, if missing) a form validator for the given form or control.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.FormValidator.FireSeverityChanged(JetBrains.CommonControls.Validation.ValidatorSeverity,JetBrains.CommonControls.Validation.ValidatorSeverity)">
            <summary>
            Fires the <see cref="E:JetBrains.CommonControls.Validation.FormValidator.SeverityChanged"/> event.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.FormValidator.OnValidatorSeverityChanged(System.Object,JetBrains.DataFlow.PropertyChangedEventArgs{System.String,JetBrains.CommonControls.Validation.ValidatorSeverity})">
            <summary>
            Whenever a validator severity changes, recalculates the total severity of this <see cref="T:JetBrains.CommonControls.Validation.IFormValidator"/>.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.FormValidator.ShowMessage_OneSeverity(JetBrains.CommonControls.Validation.ValidatorSeverity)">
            <summary>
            Reports one particular severity.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.FormValidator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.FormValidator.ShowMessage">
            <summary>
            Reports the current validity status in a message box (including the valid state).
            The valid and error states have just an ok button, while the warnings have the yes-no buttons.
            The return value is either the current <see cref="P:JetBrains.CommonControls.Validation.IFormValidator.Severity"/>, or a lower severity if the user has clicked “Yes” on the warning confirmation dialog and has thus discarded the warnings.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.FormValidator.Update">
            <summary>
            Forces revalidation on all the controls.
            </summary>
        </member>
        <member name="E:JetBrains.CommonControls.Validation.FormValidator.SeverityChanged">
            <summary>
            Fires when <see cref="P:JetBrains.CommonControls.Validation.IFormValidator.Severity"/> changes.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.FormValidator.Severity">
            <summary>
            Gets the overall severity of the form validator, which is the maximum severity of all the validators.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.FormValidator.ValidatorProviders">
            <summary>
            Gets the mutable validator providers collection.
            Those are also collected automatically from the form and all of its controls.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.FormValidator.Validators">
            <summary>
            Gets the mutable validators collection.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.Validation.FormValidator.BridgeControlsToValidatorProviders">
            <summary>
            Listens for child controls being added to or removed from the root control.
            Adds/removes the corresponding validator providers. Stores the mapping from controls to providers, so that to remove exactly what has come.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.Validation.FormValidator.BridgeValidatorProvidersToValidators">
            <summary>
            Watches for validator providers, populates the validators collection with their contents.
            Stores the validators added by a provider, so that to remove just them when the validator is removed (the provider could return new instances, and they won't match).
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.Validation.FormValidator.BridgeValidatorProvidersToValidators.myMapProvidersToValidators">
            <summary>
            Stores the validators added by a provider, so that to remove just them when the validator is removed (the provider could return new instances, and they won't match).
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.Validation.FormValidatorView">
            <summary>
            Manages the validator glyphs as validator views, based on the <see cref="T:JetBrains.CommonControls.Validation.FormValidator"/> data.
            When the owning window gets destroyed, all the validator glyphs also get destroyed.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.FormValidatorView.CreateValidatorView(JetBrains.CommonControls.Validation.IValidator)">
            <summary>
            Creates a new view from the validator.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.Validation.FormValidatorView.ValidatorTooltipProvider">
            <summary>
            Produces a tooltip out of the validator message.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.FormValidatorView.ValidatorTooltipProvider.GetTooltip(System.Drawing.Point)">
            <summary>
            Called by tooltip manager, if the tooltip is to be displayed
            </summary>
            <param name="point">Point in control's coordinates</param>
            <returns><see cref="T:JetBrains.CommonControls.ITooltipInfo"/>, or <c>Null</c> if no tooltip should be displayed.</returns>
        </member>
        <member name="T:JetBrains.CommonControls.Validation.IValidatorProvider">
            <summary>
            When implemented by a form or a control, populates the <see cref="T:JetBrains.CommonControls.Validation.FormValidator"/> with custom validators.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.IValidatorProvider.Validators">
            <summary>
            Gets the list of validators to add.
            </summary>
        </member>
        <member name="M:JetBrains.UI.Validation.PredicateValidatorReentrantSafe.Update">
            <summary>
            Forces the recalculation of the validator and updates its <see cref="P:JetBrains.CommonControls.Validation.ControlValidator.Severity"/> and visibility.
            A validator should update those property values when requested via <see cref="M:JetBrains.CommonControls.Validation.ControlValidator.Update"/>, or at any moment it detects a validity state change.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.Validation.TextValidator">
            <summary>
            Validates the control text.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.TextValidator.Update">
            <summary>
            Forces the recalculation of the validator and updates its <see cref="P:JetBrains.CommonControls.Validation.ControlValidator.Severity"/> and visibility.
            A validator should update those property values when requested via <see cref="M:JetBrains.CommonControls.Validation.ControlValidator.Update"/>, or at any moment it detects a validity state change.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.Validation.ValidatorFactory">
            <summary>
            shortcut class for creating control validators.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.Validation.ValidatorHarvester">
            <summary>
            Harvests the <see cref="T:JetBrains.CommonControls.Validation.ValidationAttribute"/>s on the controls and provides validators based on them.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.ValidatorHarvester.Harvest(System.Windows.Forms.Control)">
            <summary>
            Harvests the <see cref="T:JetBrains.CommonControls.Validation.ValidationAttribute"/>s on the controls and provides validators based on them.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.Validation.ValidatorHarvester.StaticValidatorProvider">
            <summary>
            A simple validator provider.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.ValidatorHarvester.StaticValidatorProvider.Validators">
            <summary>
            Gets the list of validators to add.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.Validation.ValidatorSeverity">
            <summary>
            Defines the severity of a validator.
            The icon and OK-button enabled state depends on this value.
            The integer values are sorted in the order of increasing severity.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.Validation.ValidatorSeverity.None">
            <summary>
            No warning or error, the glyph is not visible by default.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.Validation.ValidatorSeverity.Warning">
            <summary>
            A warning, the glyph is visible by default.
            Does nothing on form submission.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.Validation.ValidatorSeverity.ImportantWarning">
            <summary>
            An important warning, the glyph is visible by default.
            Confirms on form submission.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.Validation.ValidatorSeverity.Error">
            <summary>
            A fatal error, the glyph is visible by default.
            Prevents the form submission.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.Validation.ValidatorSeverityHelper">
            <summary>
            Helper utilities that provide additional data related to the <see cref="T:JetBrains.CommonControls.Validation.ValidatorSeverity"/> constants.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.ValidatorSeverityHelper.CanIgnore(JetBrains.CommonControls.Validation.ValidatorSeverity)">
            <summary>
            Gets whether the user is allowed to reduce the validator severity by one level by pressing the Ignore button.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.ValidatorSeverityHelper.SeverityToMessagePrefix(JetBrains.CommonControls.Validation.ValidatorSeverity)">
            <summary>
            Messagebox text for this severity.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.ValidatorSeverityHelper.SeverityToMessageDisplay(JetBrains.CommonControls.Validation.ValidatorSeverity)">
            <summary>
            Whether to show individual validator messages, and how many, if yes.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.Validation.ValidatorSeverityHelper.ShowValidatorMessages">
            <summary>
            Whether to show any validator messages in the messagebox.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.Validation.ValidatorSeverityHelper.ShowValidatorMessages.None">
            <summary>
            No validator messages, just the title.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.Validation.ValidatorSeverityHelper.ShowValidatorMessages.One">
            <summary>
            The first message only.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.Validation.ValidatorSeverityHelper.ShowValidatorMessages.All">
            <summary>
            Include the list of all messages.
            </summary>
        </member>
        <member name="T:JetBrains.CommonControls.Validation.WindowlessControlView">
            <summary>
            Takes an <see cref="T:JetBrains.CommonControls.IWindowlessControl"/> and floats it as a form.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.Validation.WindowlessControlView.GottenDirty">
            <summary>
            The control is about to repaint.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.Validation.WindowlessControlView.IsTransparent">
            <summary>
            Whether the window supports the alpha channel.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.Validation.WindowlessControlView.WindowlessControl">
            <summary>
            Gets or sets the windowless control that rules the presentation of the window.
            Set to <c>Null</c> to hide the window.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.Validation.WindowlessControlView.myInIsTopMost">
            <summary>
            See <see cref="P:JetBrains.CommonControls.Validation.WindowlessControlView.IsTopMost"/>.
            </summary>
        </member>
        <member name="F:JetBrains.CommonControls.Validation.WindowlessControlView.myWantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.WindowlessControlView.OnPaint_Layared">
            <summary>
            Repaints the window using the layered technique.
            </summary>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.WindowlessControlView.Dispose(System.Boolean)">
            <summary>
            Disposes of the resources (other than memory) used by the <see cref="T:System.Windows.Forms.Form"></see>.
            </summary>
            
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.WindowlessControlView.GetDesiredSize(JetBrains.UI.IGraphicsContainer,System.Drawing.Size)">
            <summary>
            Performs the bottom-up layouting stage, when the control calculates its desired size using the given constraints.
            Should give generally the same results as <see cref="T:JetBrains.CommonControls.IConstrainableControl"/>, but could employ the <paramref name="gc"/> device context for the sake of optimization.
            </summary>
            <param name="gc">The device context to measure against.</param>
            <param name="limit">The maximum available space (that could affect the shape of the control, or strip down unnecessary calculations over the invisible items).
            May be a <see cref="T:System.Drawing.Size"/> with width and height equal to <see cref="F:System.Int32.MaxValue"/>, which means that the size is not limited.</param>
            <returns>The desired size, must be no larger than <paramref name="limit"/>.</returns>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.WindowlessControlView.SetLayout(JetBrains.UI.LayoutResult)">
            <summary>
            Tells the control the details about the new layout applied to it by the controlling entity in conjunction with some <see cref="T:JetBrains.UI.IPopupLayouter"/>.
            Typically, the control need not apply the given size and location because that should be done by the controlling entity.
            The control may change its presentation in response to the layouting details, for example, whether it's attached to the top or the bottom of the anchoring rect.
            </summary>
            <param name="layout">The layouting details.</param>
        </member>
        <member name="M:JetBrains.CommonControls.Validation.WindowlessControlView.GetTooltip(System.Drawing.Point)">
            <summary>
            Called by tooltip manager, if the tooltip is to be displayed
            </summary>
            <param name="point">Point in control's coordinates</param>
            <returns><see cref="T:JetBrains.CommonControls.ITooltipInfo"/>, or <c>Null</c> if no tooltip should be displayed.</returns>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.WindowlessControlView.TooltipProvider">
            <summary>
            Gets or sets the tooltip provider for the control.
            <c>Null</c> is a valid value.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.WindowlessControlView.ShowWithoutActivation">
            <summary>
            Gets a value indicating whether the window will be activated when it is shown.
            </summary>
            
            <returns>
            True if the window will not be activated when it is shown; otherwise, false. The default is false.
            </returns>
            
        </member>
        <member name="P:JetBrains.CommonControls.Validation.WindowlessControlView.AutoActivate">
            <summary>
            Gets or sets whether the control should be activated initially when it's shown.
            The typical implementation for a form is to return a negative of this value from the <see cref="P:System.Windows.Forms.Form.ShowWithoutActivation"/> override.
            </summary>
        </member>
        <member name="P:JetBrains.CommonControls.Validation.WindowlessControlView.WantsResize">
            <summary>
            Fires when the control would like to be reasked of its desired size.
            </summary>
        </member>
        <member name="T:JetBrains.WindowManagement.DevenvCenterCornerAnchoringRect">
            <summary>
            Defines the anchoring for the GotoByName-style menus.
            </summary>
        </member>
        <member name="F:JetBrains.WindowManagement.DevenvCenterCornerAnchoringRect.myDevenvAnchor">
            <summary>
            Anchors to the DEVENV window.
            </summary>
        </member>
        <member name="M:JetBrains.WindowManagement.DevenvCenterCornerAnchoringRect.#ctor">
            <summary>
            Inits the instance.
            </summary>
        </member>
        <member name="M:JetBrains.WindowManagement.DevenvCenterCornerAnchoringRect.OnDevenvAnchorChanged(System.Object,System.EventArgs)">
            <summary>
            Update.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:JetBrains.WindowManagement.DevenvCenterCornerAnchoringRect.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.WindowManagement.DevenvCenterCornerAnchoringRect.UpdateAnchor">
            <summary>
            Updates the anchoring rectangle as it gets dirty.
            </summary>
        </member>
        <member name="T:JetBrains.WindowManagement.DevenvLayouter">
            <summary>
            Layouts a window by placing it relatively to the DEVENV window.
            </summary>
        </member>
        <member name="M:JetBrains.WindowManagement.DevenvLayouter.CreateCenteredCorner">
            <summary>
            Creates a layouter that layouts the content by its top-left corner at approximately the center of the DEVENV window.
            When the content size changes, its left-top corner won't move.
            Unlike <see cref="M:JetBrains.WindowManagement.DevenvLayouter.CreateCenteredMiddle"/>, it's not truely centered, but the title of your content won't jump when it resizes.
            </summary>
        </member>
        <member name="M:JetBrains.WindowManagement.DevenvLayouter.CreateCenteredMiddle">
            <summary>
            Creates a layouter that places the content in the center of the DEVENV window. When the content size changes, it remains centered.
            Unlike <see cref="M:JetBrains.WindowManagement.DevenvLayouter.CreateCenteredCorner"/>, this layouter won't fix the content's title in place, but at each moment the content will be truely centered in the DEVENV window.
            </summary>
        </member>
        <member name="M:JetBrains.WindowManagement.Impl.ToolWindowFrame.EnsureContentRequired">
            <summary>
            If <see cref="P:JetBrains.WindowManagement.Impl.ToolWindowFrame.Content"/> is missing yet, requests it from the owner.
            </summary>
        </member>
        <member name="M:JetBrains.WindowManagement.WindowManager.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.WindowManagement.WindowManager.JetBrains#ComponentModel#IComponent#Init">
            <summary>
            <para>Initializes the component. Called by the component container after the component is created.</para>
            <para><see cref="M:System.IDisposable.Dispose"/> is the pairing method that's guaranteed to be called by the component container to tear down your component.</para>
            <para>You must not access other components before your <see cref="M:JetBrains.WindowManagement.WindowManager.Init"/> method is called.</para>
            <para>All of the components that you access from <see cref="M:JetBrains.WindowManagement.WindowManager.Init"/> are guaranteed to exist when your <see cref="M:System.IDisposable.Dispose"/> is called. Any other component might be missing by that time, and trying to get it will throw an exception.</para>
            </summary>
        </member>
        <member name="P:JetBrains.WindowManagement.ToolWindowDescriptor.SupportedEditions">
            <summary>
            Gets or sets the list of editions in which this window should exist.
            <c>Null</c> means that it should exist in all editions.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:JetBrains.WindowManagement.ToolWindowDescriptorAttribute.SupportedEditions" -->
        <member name="T:JetBrains.UI.WindowAnchoringRect">
            <summary>
            An anchoring rectangle that tracks the visual position of some window on the screen.
            For child windows, tracks the movement of their parents.
            After the window ceises to exist, reports the bounds it last had at life.
            </summary>
        </member>
        <member name="M:JetBrains.UI.WindowAnchoringRect.#ctor(System.Void*)">
            <summary>
            Initializes the instance.
            </summary>
            <param name="window">The window to attach to and track its window rectangle.</param>
        </member>
        <member name="M:JetBrains.UI.WindowAnchoringRect.#ctor(System.Windows.Forms.IWin32Window)">
            <summary>
            Initializes the instance.
            </summary>
            <param name="window">The window to attach to and track its window rectangle.</param>
        </member>
        <member name="M:JetBrains.UI.WindowAnchoringRect.AnchorToDevenv">
            <summary>
            Gets an anchoring rect that tracks the DEVENV window visual position.
            </summary>
        </member>
        <member name="M:JetBrains.UI.WindowAnchoringRect.Update">
            <summary>
            Forces synchronization to the current visual position of the window.
            </summary>
        </member>
        <member name="M:JetBrains.UI.WindowAnchoringRect.OnAnyWindowMoved(System.Object,JetBrains.UI.Interop.WindowsMessageEventArgs)">
            <summary>
            Some application window has moved onscreen.
            Check if we have to update our position (= it's our ancestor).
            </summary>
        </member>
        <member name="M:JetBrains.UI.WindowAnchoringRect.OnWindowVisualPositionChanged(System.Object,JetBrains.UI.Interop.WindowMovedEventArgs)">
            <summary>
            This window has been moved on the screen.
            </summary>
        </member>
        <member name="M:JetBrains.UI.WindowAnchoringRect.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:JetBrains.UI.WindowAnchoringRect.UpdateAnchor">
            <summary>
            Update the position if the window is still valid.
            </summary>
        </member>
        <member name="P:JetBrains.UI.WindowAnchoringRect.WindowHandle">
            <summary>
            Gets the Win32 handle of the window being watched.
            Invalid after the object is disposed.
            </summary>
        </member>
        <member name="T:JetBrains.UI.testSrc.TestMnemonicStore">
            <summary>
            Tests the mnemonic assignment.
            </summary>
        </member>
        <member name="M:JetBrains.UI.testSrc.TestMnemonicStore.TestItems">
            <summary>
            Runs the test by assigning a mnemonic to the string and checking it against the template.
            </summary>
        </member>
        <member name="M:JetBrains.UI.testSrc.TestMnemonicStore.T000_UpperLeading">
            <summary>
            Checks the order of preference: UpperLeading -> LowerLeading -> Capital -> AnyOtherWordChar
            </summary>
        </member>
        <member name="M:JetBrains.UI.testSrc.TestMnemonicStore.T010_LowerLeading">
            <summary>
            Checks the order of preference: UpperLeading -> LowerLeading -> Capital -> AnyOtherWordChar
            </summary>
        </member>
        <member name="M:JetBrains.UI.testSrc.TestMnemonicStore.T020_UpperNonleading">
            <summary>
            Checks the order of preference: UpperLeading -> LowerLeading -> Capital -> AnyOtherWordChar
            </summary>
        </member>
        <member name="M:JetBrains.UI.testSrc.TestMnemonicStore.T030_LowerNonleading">
            <summary>
            Checks the order of preference: UpperLeading -> LowerLeading -> Capital -> AnyOtherWordChar
            </summary>
        </member>
        <member name="M:JetBrains.UI.testSrc.TestMnemonicStore.T040_Composite">
            <summary>
            Comples scenarios, besides the simple precedence tests.
            </summary>
        </member>
        <member name="M:JetBrains.UI.testSrc.TestMnemonicStore.T050_Manual">
            <summary>
            All the items are assigned manually.
            </summary>
        </member>
        <member name="M:JetBrains.UI.testSrc.TestMnemonicStore.T060_ManualThenAuto">
            <summary>
            Maunal mnemonics, taking precedence before the auto-assigned.
            </summary>
        </member>
        <member name="M:JetBrains.UI.testSrc.TestMnemonicStore.T070_ManualConflictingWithAuto">
            <summary>
            Maunal mnemonics, taking the shortcut an auto-mnemonic would otherwise occupy.
            </summary>
        </member>
        <member name="M:JetBrains.UI.testSrc.TestOptionsManager.TestPages.Boilerplate.OnOk">
            <summary>
            Invoked when OK button in the options dialog is pressed.
            If the page returns <c>false</c>, the the options dialog won't be closed, and focus will be put into this page.
            </summary>
        </member>
        <member name="M:JetBrains.UI.testSrc.TestOptionsManager.TestPages.Boilerplate.ValidatePage">
            <summary>
            Check if the settings on the page are consistent, and page could be closed.
            </summary>
            <returns><c>true</c> if page data is consistent.</returns>
        </member>
        <member name="P:JetBrains.UI.testSrc.TestOptionsManager.TestPages.Boilerplate.Control">
            <summary>
            Control to be shown as page.
            May be <c>Null</c> if the page does not have any UI.
            </summary>
        </member>
        <member name="P:JetBrains.UI.testSrc.TestOptionsManager.TestPages.Boilerplate.Id">
            <summary>
            Gets the ID of this option page.
            <see cref="T:JetBrains.UI.Options.IOptionsDialog"/> or <see cref="T:JetBrains.UI.Options.OptionsPageDescriptor"/> could be used to retrieve the <see cref="T:JetBrains.UI.Options.OptionsManager"/> out of it.
            </summary>
        </member>
    </members>
</doc>
